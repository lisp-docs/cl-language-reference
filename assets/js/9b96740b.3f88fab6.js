"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[41594],{15546:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>d,metadata:()=>a,toc:()=>l});var t=i(85893),s=i(11151);function r(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"unsigned-byte"})," ",(0,t.jsx)(n.em,{children:"Type"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Supertypes:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"unsigned-byte"}),", ",(0,t.jsx)(n.strong,{children:"signed-byte"}),", ",(0,t.jsx)(n.strong,{children:"integer"}),", ",(0,t.jsx)(n.strong,{children:"rational"}),", ",(0,t.jsx)(n.strong,{children:"real"}),", ",(0,t.jsx)(n.strong,{children:"number"}),", ",(0,t.jsx)(n.strong,{children:"t"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(n.p,{children:["The atomic ",(0,t.jsx)(n.em,{children:"type specifier"})," ",(0,t.jsx)(n.strong,{children:"unsigned-byte"})," denotes the same type as is denoted by the ",(0,t.jsx)(n.em,{children:"type specifier"})," (integer 0 *)."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,t.jsx)(n.p,{children:"Abbreviating."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,t.jsxs)(n.p,{children:["(unsigned-byte [",(0,t.jsx)(n.em,{children:"s |"})," ",(0,t.jsx)(n.strong,{children:"*"}),"])"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"s"}),"\u2014a positive ",(0,t.jsx)(n.em,{children:"integer"})," ."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,t.jsx)(n.p,{children:"This denotes the set of non-negative <i>integers</i> that can be represented in a byte of size <i>s</i> (bits). This is equivalent to (mod <i>m</i>) for <i>m</i> = 2<i><sup>s</sup></i>, or to (integer 0 <i>n</i>) for <i>n</i> = 2<i><sup>s</sup> \u2212</i>1. The <i>type</i> <b>unsigned-byte</b> or the type (unsigned-byte *) is the same as the type (integer 0 *), the set of non-negative <i>integers</i>."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.em,{children:"type"})," (unsigned-byte 1) is also called ",(0,t.jsx)(n.strong,{children:"bit"}),"."]})]})}function c(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}const d={},o="unsigned-byte",a={id:"chap-12/bc-c-dictionary/unsignedbyte",title:"unsigned-byte",description:"Expanded Reference: unsigned-byte",source:"@site/docs/chap-12/bc-c-dictionary/unsignedbyte.md",sourceDirName:"chap-12/bc-c-dictionary",slug:"/chap-12/bc-c-dictionary/unsignedbyte",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/unsignedbyte",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-12/bc-c-dictionary/unsignedbyte.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"sqrt, isqrt",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/sqrtaaisqrt"},next:{title:"upgraded-complex-part-type",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/upgradedcomplexparttype"}},p={},l=[{value:"Expanded Reference: unsigned-byte",id:"expanded-reference-unsigned-byte",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"unsigned-byte",children:"unsigned-byte"}),"\n","\n","\n",(0,t.jsx)(c,{}),"\n",(0,t.jsx)(n.h2,{id:"expanded-reference-unsigned-byte",children:"Expanded Reference: unsigned-byte"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"(unsigned-byte )\n"})})]})}function g(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>c});var t=i(67294);const s={},r=t.createContext(s);function c(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);