"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[46572],{32765:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>x,contentTitle:()=>h,default:()=>u,frontMatter:()=>d,metadata:()=>a,toc:()=>o});var s=r(85893),i=r(11151);function l(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components},{DictionaryLink:r,GlossaryTerm:l}=n;return r||t("DictionaryLink",!0),l||t("GlossaryTerm",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"=, /=, <, >, <=, >="})," ",(0,s.jsx)(l,{term:"function",children:(0,s.jsx)("i",{children:"Function"})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})})," &rest ",(0,s.jsx)(l,{term:"number",children:(0,s.jsx)("i",{children:"numbers"})}),(0,s.jsx)("sup",{children:"+"})," \u2192 generalized-boolean"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(r,{term:"/=",children:(0,s.jsx)("b",{children:"/="})})," &rest ",(0,s.jsx)(l,{term:"number",children:(0,s.jsx)("i",{children:"numbers"})}),(0,s.jsx)("sup",{children:"+"})," \u2192 generalized-boolean"]}),"\n",(0,s.jsxs)(n.p,{children:["< &rest ",(0,s.jsx)(l,{term:"number",children:(0,s.jsx)("i",{children:"numbers"})}),(0,s.jsx)("sup",{children:"+"})," \u2192 generalized-boolean"]}),"\n",(0,s.jsxs)(n.p,{children:["> &rest ",(0,s.jsx)(l,{term:"number",children:(0,s.jsx)("i",{children:"numbers"})}),(0,s.jsx)("sup",{children:"+"})," \u2192 generalized-boolean"]}),"\n",(0,s.jsxs)(n.p,{children:["<",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})})," &rest ",(0,s.jsx)(l,{term:"number",children:(0,s.jsx)("i",{children:"numbers"})}),(0,s.jsx)("sup",{children:"+"})," \u2192 generalized-boolean"]}),"\n",(0,s.jsxs)(n.p,{children:[">",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})})," &rest ",(0,s.jsx)(l,{term:"number",children:(0,s.jsx)("i",{children:"numbers"})}),(0,s.jsx)("sup",{children:"+"})," \u2192 generalized-boolean"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(l,{term:"number",children:(0,s.jsx)("i",{children:"number"})}),"\u2014for <, >, <",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})}),", >",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})}),": a ",(0,s.jsx)(n.em,{children:"real"}),"; for ",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})}),", ",(0,s.jsx)(r,{term:"/=",children:(0,s.jsx)("b",{children:"/="})}),": a ",(0,s.jsx)(l,{term:"number",children:(0,s.jsx)("i",{children:"number"})})," ."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"generalized-boolean"}),"\u2014a ",(0,s.jsx)(l,{styled:!0,term:"generalized boolean",children:(0,s.jsx)("i",{children:"generalized boolean"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})}),", ",(0,s.jsx)(r,{term:"/=",children:(0,s.jsx)("b",{children:"/="})}),", <, >, <",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})}),", and >",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})})," perform arithmetic comparisons on their arguments as follows: ",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})})]}),"\n",(0,s.jsxs)(n.p,{children:["The value of ",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})})," is ",(0,s.jsx)(l,{term:"true",children:(0,s.jsx)("i",{children:"true"})})," if all ",(0,s.jsx)(l,{term:"number",children:(0,s.jsx)("i",{children:"numbers"})})," are the same in value; otherwise it is ",(0,s.jsx)(l,{term:"false",children:(0,s.jsx)("i",{children:"false"})}),". Two ",(0,s.jsx)(n.em,{children:"complexes"})," are considered equal by ",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})})," if their real and imaginary parts are equal according to ",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})}),"."]}),"\n",(0,s.jsx)(r,{term:"/=",children:(0,s.jsx)("b",{children:"/="})}),"\n",(0,s.jsxs)(n.p,{children:["The value of ",(0,s.jsx)(r,{term:"/=",children:(0,s.jsx)("b",{children:"/="})})," is ",(0,s.jsx)(l,{term:"true",children:(0,s.jsx)("i",{children:"true"})})," if no two ",(0,s.jsx)(l,{term:"number",children:(0,s.jsx)("i",{children:"numbers"})})," are the same in value; otherwise it is ",(0,s.jsx)(l,{term:"false",children:(0,s.jsx)("i",{children:"false"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"=, /=,"})," ",(0,s.jsx)(n.em,{children:"<"}),(0,s.jsx)(n.strong,{children:","})," ",(0,s.jsx)(n.em,{children:">"}),(0,s.jsx)(n.strong,{children:","})," ",(0,s.jsx)(n.em,{children:"<"}),(0,s.jsx)(n.strong,{children:"=,"})," ",(0,s.jsx)(n.em,{children:">"}),(0,s.jsx)(n.strong,{children:"="})]}),"\n",(0,s.jsx)(n.p,{children:"<"}),"\n",(0,s.jsxs)(n.p,{children:["The value of < is ",(0,s.jsx)(l,{term:"true",children:(0,s.jsx)("i",{children:"true"})})," if the ",(0,s.jsx)(l,{term:"number",children:(0,s.jsx)("i",{children:"numbers"})})," are in monotonically increasing order; otherwise it is ",(0,s.jsx)(l,{term:"false",children:(0,s.jsx)("i",{children:"false"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:">"}),"\n",(0,s.jsxs)(n.p,{children:["The value of > is ",(0,s.jsx)(l,{term:"true",children:(0,s.jsx)("i",{children:"true"})})," if the ",(0,s.jsx)(l,{term:"number",children:(0,s.jsx)("i",{children:"numbers"})})," are in monotonically decreasing order; otherwise it is ",(0,s.jsx)(l,{term:"false",children:(0,s.jsx)("i",{children:"false"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["<",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})})]}),"\n",(0,s.jsxs)(n.p,{children:["The value of <",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})})," is ",(0,s.jsx)(l,{term:"true",children:(0,s.jsx)("i",{children:"true"})})," if the ",(0,s.jsx)(l,{term:"number",children:(0,s.jsx)("i",{children:"numbers"})})," are in monotonically nondecreasing order; otherwise it is ",(0,s.jsx)(l,{term:"false",children:(0,s.jsx)("i",{children:"false"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[">",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})})]}),"\n",(0,s.jsxs)(n.p,{children:["The value of >",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})})," is ",(0,s.jsx)(l,{term:"true",children:(0,s.jsx)("i",{children:"true"})})," if the ",(0,s.jsx)(l,{term:"number",children:(0,s.jsx)("i",{children:"numbers"})})," are in monotonically nonincreasing order; otherwise it is ",(0,s.jsx)(l,{term:"false",children:(0,s.jsx)("i",{children:"false"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})}),", ",(0,s.jsx)(r,{term:"/=",children:(0,s.jsx)("b",{children:"/="})}),", <, >, <",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})}),", and >",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})})," perform necessary type conversions."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.p,{children:"The uses of these functions are illustrated in Figure 12\u201313."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",metastring:'title="Figure 12\u201313. Uses of /=, =, <, >, <=, and >="',children:"(= 3 3) ;is true.\n(/= 3 3) ;is false. \n(= 3 5) ;is false.\n(/= 3 5) ;is true. \n(= 3 3 3 3) ;is true.\n(/= 3 3 3 3) ;is false. \n(= 3 3 5 3) ;is false.\n(/= 3 3 5 3) ;is false. \n(= 3 6 5 2) ;is false.\n(/= 3 6 5 2) ;is true. \n(= 3 2 3) ;is false.\n(/= 3 2 3) ;is false. \n(< 3 5) ;is true.\n(<= 3 5) ;is true. \n(< 3 -5) ;is false.\n(<= 3 -5) ;is false. \n(< 3 3) ;is false.\n(<= 3 3) ;is true. \n(< 0 3 4 6 7) ;is true.\n(<= 0 3 4 6 7) ;is true. \n(< 0 3 4 4 6) ;is false.\n(<= 0 3 4 4 6) ;is true. \n(> 4 3) ;is true.\n(>= 4 3) ;is true. \n(> 4 3 2 1 0) ;is true.\n(>= 4 3 2 1 0) ;is true. \n(> 4 3 3 2 0) ;is false.\n(>= 4 3 3 2 0) ;is true. \n(> 4 3 1 2 0) ;is false.\n(>= 4 3 1 2 0) ;is false. \n(= 3) ;is true.\n(/= 3) ;is true. \n(< 3) ;is true.\n(<= 3) ;is true. \n(= 3.0 #c(3.0 0.0)) ;is true.\n(/= 3.0 #c(3.0 1.0)) ;is true. \n(= 3 3.0) ;is true.\n(= 3.0s0 3.0d0) ;is true. \n(= 0.0 -0.0) ;is true.\n(= 5/2 2.5) ;is true. \n(> 0.0 -0.0) ;is false.\n(= 0 -0.0) ;is true. \n(<= 0 x 9) ;is true if x is between 0 and 9, inclusive \n(< 0.0 x 1.0) ;is true if x is between 0.0 and 1.0, exclusive \n(< -1 j (length v)) ;is true if j is a valid array index for a vector v\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(n.p,{children:["Might signal ",(0,s.jsx)(r,{term:"type-error",children:(0,s.jsx)("b",{children:"type-error"})})," if some ",(0,s.jsx)(l,{term:"argument",children:(0,s.jsx)("i",{children:"argument"})})," is not a ",(0,s.jsx)(n.em,{children:"real"}),". Might signal ",(0,s.jsx)(r,{term:"arithmetic-error",children:(0,s.jsx)("b",{children:"arithmetic-error"})})," if otherwise unable to fulfill its contract."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})})," differs from ",(0,s.jsx)(r,{term:"eql",children:(0,s.jsx)("b",{children:"eql"})})," in that ",(0,s.jsx)(n.code,{children:"(= 0.0 -0.0)"})," is always true, because ",(0,s.jsx)(r,{term:"=",children:(0,s.jsx)("b",{children:"="})})," compares the mathematical values of its operands, whereas ",(0,s.jsx)(r,{term:"eql",children:(0,s.jsx)("b",{children:"eql"})})," compares the representational values, so to speak."]})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}function t(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const d={title:"=, /=, <, >, <=, >="},h="=, /=, <, >, <=, >=",a={id:"chap-12/bc-c-dictionary/equal_function",title:"=, /=, <, >, <=, >=",description:"Expanded Reference: =, /=, \\, \\=",source:"@site/docs/chap-12/bc-c-dictionary/equal_function.md",sourceDirName:"chap-12/bc-c-dictionary",slug:"/chap-12/bc-c-dictionary/equal_function",permalink:"/cl-language-reference/chap-12/bc-c-dictionary/equal_function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/chap-12/bc-c-dictionary/equal_function.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{title:"=, /=, <, >, <=, >="},sidebar:"tutorialSidebar",previous:{title:"dpb",permalink:"/cl-language-reference/chap-12/bc-c-dictionary/dpb_function"},next:{title:"evenp, oddp",permalink:"/cl-language-reference/chap-12/bc-c-dictionary/evenp_oddp_function"}},x={},o=[{value:"Expanded Reference: =, /=, &lt;, &gt;, &lt;=, &gt;=",id:"expanded-reference------",level:2}];function j(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"-----",children:"=, /=, <, >, <=, >="}),"\n","\n","\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference------",children:"Expanded Reference: =, /=, <, >, <=, >="}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(= )\n(/= )\n(< )\n(> )\n(<= )\n(>= )\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(j,{...e})}):j(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>t,a:()=>c});var s=r(67294);const i={},l=s.createContext(i);function c(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);