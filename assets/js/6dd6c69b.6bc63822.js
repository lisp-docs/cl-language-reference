"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[57839],{71266:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>j,frontMatter:()=>c,metadata:()=>h,toc:()=>p});var i=t(85893),s=t(11151);function d(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components},{DictionaryLink:t,GlossaryTerm:d}=n;return t||o("DictionaryLink",!0),d||o("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"condition"})," ",(0,i.jsx)(n.em,{children:"Condition Type"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Class Precedence List:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(t,{styled:!0,term:"condition",children:(0,i.jsx)("b",{children:"condition"})}),", ",(0,i.jsx)(t,{styled:!0,term:"t",children:(0,i.jsx)("b",{children:"t"})})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["All types of ",(0,i.jsx)(d,{styled:!0,term:"condition",children:(0,i.jsx)("i",{children:"conditions"})}),", whether error or non-error, must inherit from this ",(0,i.jsx)(d,{styled:!0,term:"type",children:(0,i.jsx)("i",{children:"type"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["No additional ",(0,i.jsx)(d,{styled:!0,term:"subtype",children:(0,i.jsx)("i",{children:"subtype"})})," relationships among the specified ",(0,i.jsx)(d,{styled:!0,term:"subtype",children:(0,i.jsx)("i",{children:"subtypes"})})," of ",(0,i.jsx)(d,{styled:!0,term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(t,{styled:!0,term:"condition",children:(0,i.jsx)("b",{children:"condition"})})," are allowed, except when explicitly mentioned in the text; however implementations are permitted to introduce additional ",(0,i.jsx)(d,{styled:!0,term:"type",children:(0,i.jsx)("i",{children:"types"})})," and one of these ",(0,i.jsx)(d,{styled:!0,term:"type",children:(0,i.jsx)("i",{children:"types"})})," can be a ",(0,i.jsx)(d,{styled:!0,term:"subtype",children:(0,i.jsx)("i",{children:"subtype"})})," of any number of the ",(0,i.jsx)(d,{styled:!0,term:"subtype",children:(0,i.jsx)("i",{children:"subtypes"})})," of ",(0,i.jsx)(d,{styled:!0,term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(t,{styled:!0,term:"condition",children:(0,i.jsx)("b",{children:"condition"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Whether a user-defined ",(0,i.jsx)(n.em,{children:"condition type"})," has ",(0,i.jsx)(d,{styled:!0,term:"slot",children:(0,i.jsx)("i",{children:"slots"})})," that are accessible by ",(0,i.jsx)(n.em,{children:"with-slots"})," is ",(0,i.jsx)(n.em,{children:"implementation dependent"}),". Furthermore, even in an ",(0,i.jsx)(d,{styled:!0,term:"implementation",children:(0,i.jsx)("i",{children:"implementation"})})," in which user-defined ",(0,i.jsx)(n.em,{children:"condition types"})," would have ",(0,i.jsx)(d,{styled:!0,term:"slot",children:(0,i.jsx)("i",{children:"slots"})}),", it is ",(0,i.jsx)(d,{styled:!0,term:"implementation-dependent",children:(0,i.jsx)("i",{children:"implementation-dependent"})})," whether any ",(0,i.jsx)(n.em,{children:"condition types"})," defined in this document have such ",(0,i.jsx)(d,{styled:!0,term:"slot",children:(0,i.jsx)("i",{children:"slots"})})," or, if they do, what their ",(0,i.jsx)(d,{styled:!0,term:"name",children:(0,i.jsx)("i",{children:"names"})})," might be; only the reader functions documented by this specification may be relied upon by portable code."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(d,{styled:!0,term:"conforming code",children:(0,i.jsx)("i",{children:"Conforming code"})})," must observe the following restrictions related to ",(0,i.jsx)(d,{styled:!0,term:"condition",children:(0,i.jsx)("i",{children:"conditions"})}),":"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"\u2022"})," ",(0,i.jsx)(t,{styled:!0,term:"define-condition",children:(0,i.jsx)("b",{children:"define-condition"})}),", not ",(0,i.jsx)(t,{styled:!0,term:"defclass",children:(0,i.jsx)("b",{children:"defclass"})}),", must be used to define new ",(0,i.jsx)(n.em,{children:"condition types"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"\u2022"})," ",(0,i.jsx)(t,{styled:!0,term:"make-condition",children:(0,i.jsx)("b",{children:"make-condition"})}),", not ",(0,i.jsx)(t,{styled:!0,term:"make-instance",children:(0,i.jsx)("b",{children:"make-instance"})}),", must be used to create ",(0,i.jsx)(n.em,{children:"condition objects"})," explicitly."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"\u2022"})," The ",":report"," option of ",(0,i.jsx)(t,{styled:!0,term:"define-condition",children:(0,i.jsx)("b",{children:"define-condition"})}),", not ",(0,i.jsx)(t,{styled:!0,term:"defmethod",children:(0,i.jsx)("b",{children:"defmethod"})})," for ",(0,i.jsx)(t,{styled:!0,term:"print-object",children:(0,i.jsx)("b",{children:"print-object"})}),", must be used to define a condition reporter."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"\u2022"})," ",(0,i.jsx)(t,{styled:!0,term:"slot-value",children:(0,i.jsx)("b",{children:"slot-value"})}),", ",(0,i.jsx)(t,{styled:!0,term:"slot-boundp",children:(0,i.jsx)("b",{children:"slot-boundp"})}),", ",(0,i.jsx)(t,{styled:!0,term:"slot-makunbound",children:(0,i.jsx)("b",{children:"slot-makunbound"})}),", and ",(0,i.jsx)(t,{styled:!0,term:"with-slots",children:(0,i.jsx)("b",{children:"with-slots"})})," must not be used on ",(0,i.jsx)(n.em,{children:"condition objects"}),". Instead, the appropriate accessor functions (defined by ",(0,i.jsx)(t,{styled:!0,term:"define-condition",children:(0,i.jsx)("b",{children:"define-condition"})}),") should be used."]})]})}function r(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function o(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const c={title:"condition"},l="condition",h={id:"chap-9/j-c-dictionary/condition_condition-type",title:"condition",description:"Expanded Reference: condition",source:"@site/docs/chap-9/j-c-dictionary/condition_condition-type.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/condition_condition-type",permalink:"/cl-language-reference/chap-9/j-c-dictionary/condition_condition-type",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/condition_condition-type.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{title:"condition"},sidebar:"tutorialSidebar",previous:{title:"compute-restarts",permalink:"/cl-language-reference/chap-9/j-c-dictionary/compute-restarts_function"},next:{title:"debugger-hook",permalink:"/cl-language-reference/chap-9/j-c-dictionary/debugger-hook_variable"}},a={},p=[{value:"Expanded Reference: condition",id:"expanded-reference-condition",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"condition",children:"condition"}),"\n","\n","\n",(0,i.jsx)(r,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-condition",children:"Expanded Reference: condition"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(condition )\n"})})]})}function j(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var i=t(67294);const s={},d=i.createContext(s);function r(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);