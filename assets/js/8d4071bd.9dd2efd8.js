"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[70742],{97244:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>h});var r=t(85893),c=t(11151);function i(n){const e={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,c.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"trace, untrace"})," ",(0,r.jsx)(e.em,{children:"Macro"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"trace"})," ",(0,r.jsx)(e.em,{children:"{function-name}"}),"* ",(0,r.jsx)(e.em,{children:"\u2192 trace-result"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"untrace"})," ",(0,r.jsx)(e.em,{children:"{function-name}"}),"* ",(0,r.jsx)(e.em,{children:"\u2192 untrace-result"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.em,{children:"function-name"}),"\u2014a ",(0,r.jsx)(e.em,{children:"function name"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.em,{children:"trace-result"}),"\u2014",(0,r.jsx)(e.em,{children:"implementation-dependent"}),", unless no ",(0,r.jsx)(e.em,{children:"function-names"})," are supplied, in which case ",(0,r.jsx)(e.em,{children:"trace-result"})," is a ",(0,r.jsx)(e.em,{children:"list"})," of ",(0,r.jsx)(e.em,{children:"function names"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.em,{children:"untrace-result"}),"\u2014",(0,r.jsx)(e.em,{children:"implementation-dependent"}),"."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"trace"})," and ",(0,r.jsx)(e.strong,{children:"untrace"})," control the invocation of the trace facility."]}),"\n",(0,r.jsxs)(e.p,{children:["Invoking ",(0,r.jsx)(e.strong,{children:"trace"})," with one or more ",(0,r.jsx)(e.em,{children:"function-names"})," causes the denoted ",(0,r.jsx)(e.em,{children:"functions"})," to be \u201ctraced.\u201d Whenever a traced ",(0,r.jsx)(e.em,{children:"function"})," is invoked, information about the call, about the arguments passed, and about any eventually returned values is printed to ",(0,r.jsx)(e.em,{children:"trace output"}),". If ",(0,r.jsx)(e.strong,{children:"trace"})," is used with no ",(0,r.jsx)(e.em,{children:"function-names"}),", no tracing action is performed; instead, a list of the ",(0,r.jsx)(e.em,{children:"functions"})," currently being traced is returned."]}),"\n",(0,r.jsxs)(e.p,{children:["Invoking ",(0,r.jsx)(e.strong,{children:"untrace"})," with one or more function names causes those functions to be \u201cuntraced\u201d (",(0,r.jsx)(e.em,{children:"i.e."}),", no longer traced). If ",(0,r.jsx)(e.strong,{children:"untrace"})," is used with no ",(0,r.jsx)(e.em,{children:"function-names"}),", all ",(0,r.jsx)(e.em,{children:"functions"})," currently being traced are untraced."]}),"\n",(0,r.jsxs)(e.p,{children:["If a ",(0,r.jsx)(e.em,{children:"function"})," to be traced has been open-coded (",(0,r.jsx)(e.em,{children:"e.g."}),", because it was declared ",(0,r.jsx)(e.strong,{children:"inline"}),"), a call to that ",(0,r.jsx)(e.em,{children:"function"})," might not produce trace output."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lisp",children:" \n\n\n\n(defun fact (n) (if (zerop n) 1 (\\* n (fact (- n 1))))) \n\n\n\n*\u2192* FACT \n\n\n\n(trace fact) \n\n\n\n*\u2192* (FACT) \n\n\n\n;; Of course, the format of traced output is implementation-dependent. \n\n\n\n(fact 3) \n\n\n\n\u25b7 1 Enter FACT 3 \n\n\n\n\u25b7 | 2 Enter FACT 2 \n\n\n\n\u25b7 | 3 Enter FACT 1 \n\n\n\n\u25b7 | | 4 Enter FACT 0 \n\n\n\n\u25b7 | | 4 Exit FACT 1 \n\n\n\n\u25b7 | 3 Exit FACT 1 \n\n\n\n\u25b7 | 2 Exit FACT 2 \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n\u25b7 1 Exit FACT 6 \n\n\n\n*\u2192* 6 \n\n\n\n\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Side Effects:"})}),"\n",(0,r.jsxs)(e.p,{children:["Might change the definitions of the ",(0,r.jsx)(e.em,{children:"functions"})," named by ",(0,r.jsx)(e.em,{children:"function-names"}),"."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Affected By:"})}),"\n",(0,r.jsx)(e.p,{children:"Whether the functions named are defined or already being traced."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsx)(e.p,{children:"Tracing an already traced function, or untracing a function not currently being traced, should produce no harmful effects, but might signal a warning."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"*trace-output*"}),", ",(0,r.jsx)(e.strong,{children:"step"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"trace"})," and ",(0,r.jsx)(e.strong,{children:"untrace"})," may also accept additional ",(0,r.jsx)(e.em,{children:"implementation-dependent"})," argument formats. The format of the trace output is ",(0,r.jsx)(e.em,{children:"implementation-dependent"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["Although ",(0,r.jsx)(e.strong,{children:"trace"})," can be extended to permit non-standard options, ",(0,r.jsx)(e.em,{children:"implementations"})," are nevertheless encouraged (but not required) to warn about the use of syntax or options that are neither specified by this standard nor added as an extension by the ",(0,r.jsx)(e.em,{children:"implementation"}),", since they could be symptomatic of typographical errors or of reliance on features supported in ",(0,r.jsx)(e.em,{children:"implementations"})," other than the current ",(0,r.jsx)(e.em,{children:"implementation"}),"."]})]})}function s(n={}){const{wrapper:e}={...(0,c.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(i,{...n})}):i(n)}const a={},o="trace, untrace",d={id:"chap-25/cf-c-dictionary/trace",title:"trace, untrace",description:"Expanded Reference: trace, untrace",source:"@site/docs/chap-25/cf-c-dictionary/trace.md",sourceDirName:"chap-25/cf-c-dictionary",slug:"/chap-25/cf-c-dictionary/trace",permalink:"/cl-language-reference/docs/chap-25/cf-c-dictionary/trace",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-25/cf-c-dictionary/trace.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"time",permalink:"/cl-language-reference/docs/chap-25/cf-c-dictionary/time"},next:{title:"user-homedir-pathname",permalink:"/cl-language-reference/docs/chap-25/cf-c-dictionary/userhomedirpathname"}},l={},h=[{value:"Expanded Reference: trace, untrace",id:"expanded-reference-trace-untrace",level:2}];function u(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,c.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"trace-untrace",children:"trace, untrace"}),"\n","\n","\n",(0,r.jsx)(s,{}),"\n",(0,r.jsx)(e.h2,{id:"expanded-reference-trace-untrace",children:"Expanded Reference: trace, untrace"}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsx)(e.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lisp",children:"(trace, untrace )\n"})})]})}function p(n={}){const{wrapper:e}={...(0,c.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(u,{...n})}):u(n)}},11151:(n,e,t)=>{t.d(e,{Z:()=>a,a:()=>s});var r=t(67294);const c={},i=r.createContext(c);function s(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(c):n.components||c:s(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);