"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[29181],{33838:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>x,frontMatter:()=>d,metadata:()=>a,toc:()=>h});var s=r(85893),i=r(11151);function c(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"read-sequence"})," ",(0,s.jsx)(n.em,{children:"Function"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"read-sequence"})," ",(0,s.jsx)(n.em,{children:"sequence stream"})," &key ",(0,s.jsx)(n.em,{children:"start end \u2192 position"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"sequence"}),"\u2014a ",(0,s.jsx)(n.em,{children:"sequence"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"stream"}),"\u2014an ",(0,s.jsx)(n.em,{children:"input stream"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"start"}),", ",(0,s.jsx)(n.em,{children:"end"}),"\u2014",(0,s.jsx)(n.em,{children:"bounding index designators"})," of ",(0,s.jsx)(n.em,{children:"sequence"}),". The defaults for ",(0,s.jsx)(n.em,{children:"start"})," and ",(0,s.jsx)(n.em,{children:"end"})," are 0 and ",(0,s.jsx)(n.strong,{children:"nil"}),", respectively."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"position"}),"\u2014an ",(0,s.jsx)(n.em,{children:"integer"})," greater than or equal to zero, and less than or equal to the ",(0,s.jsx)(n.em,{children:"length"})," of the ",(0,s.jsx)(n.em,{children:"sequence"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["Destructively modifies ",(0,s.jsx)(n.em,{children:"sequence"})," by replacing the ",(0,s.jsx)(n.em,{children:"elements"})," of ",(0,s.jsx)(n.em,{children:"sequence bounded"})," by ",(0,s.jsx)(n.em,{children:"start"})," and ",(0,s.jsx)(n.em,{children:"end"})," with ",(0,s.jsx)(n.em,{children:"elements"})," read from ",(0,s.jsx)(n.em,{children:"stream"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Sequence"})," is destructively modified by copying successive ",(0,s.jsx)(n.em,{children:"elements"})," into it from ",(0,s.jsx)(n.em,{children:"stream"}),". If the ",(0,s.jsx)(n.em,{children:"end of file"})," for ",(0,s.jsx)(n.em,{children:"stream"})," is reached before copying all ",(0,s.jsx)(n.em,{children:"elements"})," of the subsequence, then the extra ",(0,s.jsx)(n.em,{children:"elements"})," near the end of ",(0,s.jsx)(n.em,{children:"sequence"})," are not updated."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Position"})," is the index of the first ",(0,s.jsx)(n.em,{children:"element"})," of ",(0,s.jsx)(n.em,{children:"sequence"})," that was not updated, which might be less than ",(0,s.jsx)(n.em,{children:"end"})," because the ",(0,s.jsx)(n.em,{children:"end of file"})," was reached."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:'\n(defvar \\*data\\* (make-array 15 :initial-element nil)) \n(values (read-sequence \\*data\\* (make-string-input-stream "test string")) \\*data\\*) \u2192 11, #(#\\t #\\e #\\s #\\t #\\Space #\\s #\\t #\\r #\\i #\\n #\\g NIL NIL NIL NIL) \n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,s.jsxs)(n.p,{children:["Modifies ",(0,s.jsx)(n.em,{children:"stream"})," and ",(0,s.jsx)(n.em,{children:"sequence"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(n.p,{children:["Should be prepared to signal an error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"type-error"})," if ",(0,s.jsx)(n.em,{children:"sequence"})," is not a ",(0,s.jsx)(n.em,{children:"proper sequence"}),". Should signal an error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"type-error"})," if ",(0,s.jsx)(n.em,{children:"start"})," is not a non-negative ",(0,s.jsx)(n.em,{children:"integer"})," . Should signal an error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"type-error"})," if ",(0,s.jsx)(n.em,{children:"end"})," is not a non-negative ",(0,s.jsx)(n.em,{children:"integer"})," or ",(0,s.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Might signal an error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"type-error"})," if an ",(0,s.jsx)(n.em,{children:"element"})," read from the ",(0,s.jsx)(n.em,{children:"stream"})," is not a member of the ",(0,s.jsx)(n.em,{children:"element type"})," of the ",(0,s.jsx)(n.em,{children:"sequence"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:["Section 3.2.1 (Compiler Terminology), ",(0,s.jsx)(n.strong,{children:"write-sequence"}),", ",(0,s.jsx)(n.strong,{children:"read-line"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"read-sequence"})," is identical in effect to iterating over the indicated subsequence and reading one ",(0,s.jsx)(n.em,{children:"element"})," at a time from ",(0,s.jsx)(n.em,{children:"stream"})," and storing it into ",(0,s.jsx)(n.em,{children:"sequence"}),", but may be more efficient than the equivalent loop. An efficient implementation is more likely to exist for the case where the ",(0,s.jsx)(n.em,{children:"sequence"})," is a ",(0,s.jsx)(n.em,{children:"vector"})," with the same ",(0,s.jsx)(n.em,{children:"element type"})," as the ",(0,s.jsx)(n.em,{children:"stream"}),"."]})]})}function t(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}const d={title:"read-sequence"},l="read-sequence",a={id:"chap-21/cb-c-dictionary/read-sequence_function",title:"read-sequence",description:"Expanded Reference: read-sequence",source:"@site/docs/chap-21/cb-c-dictionary/read-sequence_function.md",sourceDirName:"chap-21/cb-c-dictionary",slug:"/chap-21/cb-c-dictionary/read-sequence_function",permalink:"/cl-language-reference/docs/chap-21/cb-c-dictionary/read-sequence_function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-21/cb-c-dictionary/read-sequence_function.md",tags:[],version:"current",frontMatter:{title:"read-sequence"},sidebar:"tutorialSidebar",previous:{title:"read-line",permalink:"/cl-language-reference/docs/chap-21/cb-c-dictionary/read-line_function"},next:{title:"stream-element-type",permalink:"/cl-language-reference/docs/chap-21/cb-c-dictionary/stream-element-type_function"}},o={},h=[{value:"Expanded Reference: read-sequence",id:"expanded-reference-read-sequence",level:2}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"read-sequence",children:"read-sequence"}),"\n","\n","\n",(0,s.jsx)(t,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-read-sequence",children:"Expanded Reference: read-sequence"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(read-sequence )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>t});var s=r(67294);const i={},c=s.createContext(i);function t(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);