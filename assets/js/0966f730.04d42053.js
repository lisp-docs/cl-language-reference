"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[90469],{86349:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>p});var t=i(85893),a=i(11151);function s(e){const n={em:"em",p:"p",strong:"strong",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"bit"}),". The ",(0,t.jsx)(n.em,{children:"type"})," (integer 0 *) is also called ",(0,t.jsx)(n.strong,{children:"unsigned-byte"}),". ",(0,t.jsx)(n.strong,{children:"signed-byte"})," ",(0,t.jsx)(n.em,{children:"Type"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Supertypes:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"signed-byte"}),", ",(0,t.jsx)(n.strong,{children:"integer"}),", ",(0,t.jsx)(n.strong,{children:"rational"}),", ",(0,t.jsx)(n.strong,{children:"real"}),", ",(0,t.jsx)(n.strong,{children:"number"}),", ",(0,t.jsx)(n.strong,{children:"t"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(n.p,{children:["The atomic ",(0,t.jsx)(n.em,{children:"type specifier"})," ",(0,t.jsx)(n.strong,{children:"signed-byte"})," denotes the same type as is denoted by the ",(0,t.jsx)(n.em,{children:"type specifier"})," ",(0,t.jsx)(n.strong,{children:"integer"}),"; however, the list forms of these two ",(0,t.jsx)(n.em,{children:"type specifiers"})," have different semantics."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,t.jsx)(n.p,{children:"Abbreviating."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,t.jsxs)(n.p,{children:["(signed-byte [",(0,t.jsx)(n.em,{children:"s |"})," ",(0,t.jsx)(n.strong,{children:"*"}),"])"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"s"}),"\u2014a positive ",(0,t.jsx)(n.em,{children:"integer"})," ."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,t.jsx)(n.p,{children:"This denotes the set of <i>integers</i> that can be represented in two\u2019s-complement form in a <i>byte</i> of <i>s</i> bits. This is equivalent to (integer <i>\u2212</i>2<sup><i>s\u2212</i>1</sup> 2<sup><i>s\u2212</i>1</sup> <i>\u2212</i> 1). The type <b>signed-byte</b> or the type (signed-byte *) is the same as the <i>type</i> <b>integer</b>."})]})}function r(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}const c={},d="bit**. The type (integer 0 *) is also called unsigned-byte. **signed-byte",l={id:"chap-12/bc-c-dictionary/bitaaaaTheaatypeaaaintegera0aaaaaisaalsoacalledaaaunsignedbyteaaaaaasignedbyte",title:"bit**. The *type* (integer 0 \\*) is also called **unsigned-byte**. **signed-byte",description:"Expanded Reference: bit. The *type* (integer 0 \\*) is also called unsigned-byte. signed-byte",source:"@site/docs/chap-12/bc-c-dictionary/bitaaaaTheaatypeaaaintegera0aaaaaisaalsoacalledaaaunsignedbyteaaaaaasignedbyte.md",sourceDirName:"chap-12/bc-c-dictionary",slug:"/chap-12/bc-c-dictionary/bitaaaaTheaatypeaaaintegera0aaaaaisaalsoacalledaaaunsignedbyteaaaaaasignedbyte",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/bitaaaaTheaatypeaaaintegera0aaaaaisaalsoacalledaaaunsignedbyteaaaaaasignedbyte",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-12/bc-c-dictionary/bitaaaaTheaatypeaaaintegera0aaaaaisaalsoacalledaaaunsignedbyteaaaaaasignedbyte.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"bit",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/bit"},next:{title:"boole",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/boole"}},o={},p=[{value:"Expanded Reference: bit**. The <em>type</em> (integer 0 *) is also called <strong>unsigned-byte</strong>. **signed-byte",id:"expanded-reference-bit-the-type-integer-0--is-also-called-unsigned-byte-signed-byte",level:2}];function g(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"bit-the-type-integer-0--is-also-called-unsigned-byte-signed-byte",children:["bit**. The ",(0,t.jsx)(n.em,{children:"type"})," (integer 0 *) is also called ",(0,t.jsx)(n.strong,{children:"unsigned-byte"}),". **signed-byte"]}),"\n","\n","\n",(0,t.jsx)(r,{}),"\n",(0,t.jsxs)(n.h2,{id:"expanded-reference-bit-the-type-integer-0--is-also-called-unsigned-byte-signed-byte",children:["Expanded Reference: bit**. The ",(0,t.jsx)(n.em,{children:"type"})," (integer 0 *) is also called ",(0,t.jsx)(n.strong,{children:"unsigned-byte"}),". **signed-byte"]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"(bit**. The *type* (integer 0 \\*) is also called **unsigned-byte**. **signed-byte )\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>r});var t=i(67294);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);