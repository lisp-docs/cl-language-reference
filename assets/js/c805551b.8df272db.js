"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[81552],{87567:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>a,contentTitle:()=>d,default:()=>x,frontMatter:()=>o,metadata:()=>p,toc:()=>h});var t=i(85893),n=i(11151);function s(e){const r={em:"em",p:"p",strong:"strong",...(0,n.a)(),...e.components},{ClLinks:i,GlossaryTerm:s}=r;return i||l("ClLinks",!0),s||l("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"simple-bit-vector"})," ",(0,t.jsx)(i,{term:"type",children:(0,t.jsx)("i",{children:"Type"})})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Supertypes:"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(i,{term:"simple-bit-vector",children:(0,t.jsx)("b",{children:"simple-bit-vector"})}),", ",(0,t.jsx)(i,{term:"bit-vector",children:(0,t.jsx)("b",{children:"bit-vector"})}),", ",(0,t.jsx)(i,{term:"vector",children:(0,t.jsx)("b",{children:"vector"})}),", ",(0,t.jsx)(i,{term:"simple-array",children:(0,t.jsx)("b",{children:"simple-array"})}),", ",(0,t.jsx)(i,{term:"array",children:(0,t.jsx)("b",{children:"array"})}),", ",(0,t.jsx)(i,{term:"sequence",children:(0,t.jsx)("b",{children:"sequence"})}),", ",(0,t.jsx)(i,{term:"t",children:(0,t.jsx)("b",{children:"t"})})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(i,{term:"type",children:(0,t.jsx)("i",{children:"type"})})," of a ",(0,t.jsx)(s,{styled:!0,term:"bit vector",children:(0,t.jsx)("i",{children:"bit vector"})})," that is not displaced to another ",(0,t.jsx)(i,{term:"array",children:(0,t.jsx)("i",{children:"array"})}),", has no ",(0,t.jsx)(s,{styled:!0,term:"fill pointer",children:(0,t.jsx)("i",{children:"fill pointer"})})," , and is not ",(0,t.jsx)(s,{styled:!0,term:"expressly adjustable",children:(0,t.jsx)("i",{children:"expressly adjustable"})})," is a ",(0,t.jsx)(i,{term:"subtype",children:(0,t.jsx)("i",{children:"subtype"})})," of ",(0,t.jsx)(i,{term:"type",children:(0,t.jsx)("i",{children:"type"})})," ",(0,t.jsx)(i,{term:"simple-bit-vector",children:(0,t.jsx)("b",{children:"simple-bit-vector"})}),"."]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,t.jsx)(r.p,{children:"Abbreviating."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,t.jsxs)(r.p,{children:["(simple-bit-vector [",(0,t.jsx)(r.em,{children:"size"}),"])"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.em,{children:"size"}),"\u2014a non-negative ",(0,t.jsx)(i,{term:"fixnum",children:(0,t.jsx)("i",{children:"fixnum"})}),", or the ",(0,t.jsx)(i,{term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," ",(0,t.jsx)(r.strong,{children:"*"}),". The default is the ",(0,t.jsx)(i,{term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," ",(0,t.jsx)(r.strong,{children:"*"}),"."]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,t.jsxs)(r.p,{children:["This denotes the same type as the ",(0,t.jsx)(i,{term:"type",children:(0,t.jsx)("i",{children:"type"})})," (simple-array bit (",(0,t.jsx)(r.em,{children:"size"}),")); that is, the set of ",(0,t.jsx)(s,{styled:!0,term:"simple bit vector",children:(0,t.jsx)("i",{children:"simple bit vectors"})})," of size ",(0,t.jsx)(r.em,{children:"size"}),"."]})]})}function c(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}function l(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const o={title:"simple-bit-vector"},d="simple-bit-vector",p={id:"chap-15/bf-c-dictionary/simple-bit-vector_type",title:"simple-bit-vector",description:"Expanded Reference: simple-bit-vector",source:"@site/docs/chap-15/bf-c-dictionary/simple-bit-vector_type.md",sourceDirName:"chap-15/bf-c-dictionary",slug:"/chap-15/bf-c-dictionary/simple-bit-vector_type",permalink:"/cl-language-reference/chap-15/bf-c-dictionary/simple-bit-vector_type",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-15/bf-c-dictionary/simple-bit-vector_type.md",tags:[],version:"current",frontMatter:{title:"simple-bit-vector"},sidebar:"tutorialSidebar",previous:{title:"simple-bit-vector-p",permalink:"/cl-language-reference/chap-15/bf-c-dictionary/simple-bit-vector-p_function"},next:{title:"simple-vector-p",permalink:"/cl-language-reference/chap-15/bf-c-dictionary/simple-vector-p_function"}},a={},h=[{value:"Expanded Reference: simple-bit-vector",id:"expanded-reference-simple-bit-vector",level:2}];function m(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"simple-bit-vector",children:"simple-bit-vector"}),"\n","\n","\n",(0,t.jsx)(c,{}),"\n",(0,t.jsx)(r.h2,{id:"expanded-reference-simple-bit-vector",children:"Expanded Reference: simple-bit-vector"}),"\n",(0,t.jsx)(r.admonition,{type:"tip",children:(0,t.jsx)(r.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lisp",children:"(simple-bit-vector )\n"})})]})}function x(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},11151:(e,r,i)=>{i.d(r,{Z:()=>l,a:()=>c});var t=i(67294);const n={},s=t.createContext(n);function c(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);