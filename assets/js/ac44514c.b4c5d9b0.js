"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[7524],{1612:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>g,contentTitle:()=>a,default:()=>u,frontMatter:()=>j,metadata:()=>o,toc:()=>p});var r=s(5893),i=s(1151);function t(e){return(0,r.jsx)(r.Fragment,{})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t()}function l(e){const n={em:"em",p:"p",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Since all ",(0,r.jsx)(n.em,{children:"strings"})," are ",(0,r.jsx)(n.em,{children:"arrays"}),", all rules which apply generally to ",(0,r.jsx)(n.em,{children:"arrays"})," also apply to ",(0,r.jsx)(n.em,{children:"strings"}),". See Section 15.1 (Array Concepts)."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, ",(0,r.jsx)(n.em,{children:"strings"})," can have ",(0,r.jsx)(n.em,{children:"fill pointers"}),", and ",(0,r.jsx)(n.em,{children:"strings"})," are also subject to the rules of ",(0,r.jsx)(n.em,{children:"element type upgrading"})," that apply to ",(0,r.jsx)(n.em,{children:"arrays"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}function h(e){const n={em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["All functions that operate on ",(0,r.jsx)(n.em,{children:"strings"})," will operate on ",(0,r.jsx)(n.em,{children:"subtypes"})," of ",(0,r.jsx)(n.em,{children:"string"})," as well."]}),"\n",(0,r.jsxs)(n.p,{children:["However, the consequences are undefined if a ",(0,r.jsx)(n.em,{children:"character"})," is inserted into a ",(0,r.jsx)(n.em,{children:"string"})," for which the ",(0,r.jsx)(n.em,{children:"element type"})," of the ",(0,r.jsx)(n.em,{children:"string"})," does not include that ",(0,r.jsx)(n.em,{children:"character"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:["Strings ",(0,r.jsx)(n.strong,{children:"16\u20131"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"})," ",(0,r.jsx)(n.em,{children:"System Class"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Class Precedence List:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"}),", ",(0,r.jsx)(n.strong,{children:"vector"}),", ",(0,r.jsx)(n.strong,{children:"array"}),", ",(0,r.jsx)(n.strong,{children:"sequence"}),", ",(0,r.jsx)(n.strong,{children:"t"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.em,{children:"string"})," is a ",(0,r.jsx)(n.em,{children:"specialized vector"})," whose ",(0,r.jsx)(n.em,{children:"elements"})," are of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"character"})," or a ",(0,r.jsx)(n.em,{children:"subtype"})," of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"character"}),". When used as a ",(0,r.jsx)(n.em,{children:"type specifier"})," for object creation, ",(0,r.jsx)(n.strong,{children:"string"})," means (vector character)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,r.jsx)(n.p,{children:"Abbreviating."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:["(string [",(0,r.jsx)(n.em,{children:"size"}),"])"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"size"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"fixnum"}),", or the ",(0,r.jsx)(n.em,{children:"symbol"})," ",(0,r.jsx)(n.strong,{children:"*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["This denotes the union of all ",(0,r.jsx)(n.em,{children:"types"})," (array ",(0,r.jsx)(n.em,{children:"c"})," (",(0,r.jsx)(n.em,{children:"size"}),")) for all ",(0,r.jsx)(n.em,{children:"subtypes c"})," of ",(0,r.jsx)(n.strong,{children:"character"}),"; that is, the set of ",(0,r.jsx)(n.em,{children:"strings"})," of size ",(0,r.jsx)(n.em,{children:"size"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:["Section 16.1 (String Concepts), Section 2.4.5 (Double-Quote), Section 22.1.3.4 (Printing Strings) ",(0,r.jsx)(n.strong,{children:"base-string"})," ",(0,r.jsx)(n.em,{children:"Type"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Supertypes:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"base-string"}),", ",(0,r.jsx)(n.strong,{children:"string"}),", ",(0,r.jsx)(n.strong,{children:"vector"}),", ",(0,r.jsx)(n.strong,{children:"array"}),", ",(0,r.jsx)(n.strong,{children:"sequence"}),", ",(0,r.jsx)(n.strong,{children:"t"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"base-string"})," is equivalent to (vector base-char). The ",(0,r.jsx)(n.em,{children:"base string"})," representation is the most efficient ",(0,r.jsx)(n.em,{children:"string"})," representation that can hold an arbitrary sequence of ",(0,r.jsx)(n.em,{children:"standard characters"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,r.jsx)(n.p,{children:"Abbreviating."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:["(base-string [",(0,r.jsx)(n.em,{children:"size"}),"])"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"size"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"fixnum"}),", or the ",(0,r.jsx)(n.em,{children:"symbol"})," ",(0,r.jsx)(n.strong,{children:"*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["This is equivalent to the type (vector base-char ",(0,r.jsx)(n.em,{children:"size"}),"); that is, the set of ",(0,r.jsx)(n.em,{children:"base strings"})," of size ",(0,r.jsx)(n.em,{children:"size"}),". ",(0,r.jsx)(n.strong,{children:"simple-string"})," ",(0,r.jsx)(n.em,{children:"Type"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Supertypes:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"simple-string"}),", ",(0,r.jsx)(n.strong,{children:"string"}),", ",(0,r.jsx)(n.strong,{children:"vector"}),", ",(0,r.jsx)(n.strong,{children:"simple-array"}),", ",(0,r.jsx)(n.strong,{children:"array"}),", ",(0,r.jsx)(n.strong,{children:"sequence"}),", ",(0,r.jsx)(n.strong,{children:"t"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.em,{children:"simple string"})," is a specialized one-dimensional ",(0,r.jsx)(n.em,{children:"simple array"})," whose ",(0,r.jsx)(n.em,{children:"elements"})," are of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"character"})," or a ",(0,r.jsx)(n.em,{children:"subtype"})," of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"character"}),". When used as a ",(0,r.jsx)(n.em,{children:"type specifier"})," for object creation, ",(0,r.jsx)(n.strong,{children:"simple-string"})," means (simple-array character (",(0,r.jsx)(n.em,{children:"size"}),"))."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,r.jsx)(n.p,{children:"Abbreviating."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:["(simple-string [",(0,r.jsx)(n.em,{children:"size"}),"])"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"size"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"fixnum"}),", or the ",(0,r.jsx)(n.em,{children:"symbol"})," ",(0,r.jsx)(n.strong,{children:"*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["This denotes the union of all ",(0,r.jsx)(n.em,{children:"types"})," (simple-array ",(0,r.jsx)(n.em,{children:"c"})," (",(0,r.jsx)(n.em,{children:"size"}),")) for all ",(0,r.jsx)(n.em,{children:"subtypes c"})," of ",(0,r.jsx)(n.strong,{children:"character"}),"; that is, the set of ",(0,r.jsx)(n.em,{children:"simple strings"})," of size ",(0,r.jsx)(n.em,{children:"size"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Strings ",(0,r.jsx)(n.strong,{children:"16\u20133"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"simple-base-string"})," ",(0,r.jsx)(n.em,{children:"Type"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Supertypes:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"simple-base-string"}),", ",(0,r.jsx)(n.strong,{children:"base-string"}),", ",(0,r.jsx)(n.strong,{children:"simple-string"}),", ",(0,r.jsx)(n.strong,{children:"string"}),", ",(0,r.jsx)(n.strong,{children:"vector"}),", ",(0,r.jsx)(n.strong,{children:"simple-array"}),", ",(0,r.jsx)(n.strong,{children:"array"}),", ",(0,r.jsx)(n.strong,{children:"sequence"}),", ",(0,r.jsx)(n.strong,{children:"t"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"simple-base-string"})," is equivalent to (simple-array base-char (*))."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,r.jsx)(n.p,{children:"Abbreviating."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:["(simple-base-string [",(0,r.jsx)(n.em,{children:"size"}),"])"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"size"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"fixnum"}),", or the ",(0,r.jsx)(n.em,{children:"symbol"})," ",(0,r.jsx)(n.strong,{children:"*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["This is equivalent to the type (simple-array base-char (",(0,r.jsx)(n.em,{children:"size"}),")); that is, the set of ",(0,r.jsx)(n.em,{children:"simple base strings"})," of size ",(0,r.jsx)(n.em,{children:"size"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"simple-string-p"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"simple-string-p"})," ",(0,r.jsx)(n.em,{children:"object \u2192 generalized-boolean"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"object"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"generalized-boolean"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns ",(0,r.jsx)(n.em,{children:"true"})," if ",(0,r.jsx)(n.em,{children:"object"})," is of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"simple-string"}),"; otherwise, returns ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:['(simple-string-p "aaaaaa") ',(0,r.jsx)(n.em,{children:"\u2192 true"})]}),"\n",(0,r.jsx)(n.p,{children:"(simple-string-p (make-array 6"}),"\n",(0,r.jsxs)(n.p,{children:[":element-type"," \u2019character"]}),"\n",(0,r.jsxs)(n.p,{children:[":fill-pointer"," t)) ",(0,r.jsx)(n.em,{children:"\u2192 false"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["(simple-string-p ",(0,r.jsx)(n.em,{children:"object"}),") ",(0,r.jsx)(n.em,{children:"\u2261"})," (typep ",(0,r.jsx)(n.em,{children:"object"})," \u2019simple-string)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"char, schar"})," ",(0,r.jsx)(n.em,{children:"Accessor"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"char"})," ",(0,r.jsx)(n.em,{children:"string index \u2192 character"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"schar"})," ",(0,r.jsx)(n.em,{children:"string index \u2192 character"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"(setf (char"})," ",(0,r.jsx)(n.em,{children:"string index"}),"**)** ",(0,r.jsx)(n.em,{children:"new-character"}),"**)**"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"(setf (schar"})," ",(0,r.jsx)(n.em,{children:"string index"}),"**)** ",(0,r.jsx)(n.em,{children:"new-character"}),"**)**"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"string"}),"\u2014for ",(0,r.jsx)(n.strong,{children:"char"}),", a ",(0,r.jsx)(n.em,{children:"string"}),"; for ",(0,r.jsx)(n.strong,{children:"schar"}),", a ",(0,r.jsx)(n.em,{children:"simple string"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"index"}),"\u2014a ",(0,r.jsx)(n.em,{children:"valid array index"})," for the ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"character"}),", ",(0,r.jsx)(n.em,{children:"new-character"}),"\u2014a ",(0,r.jsx)(n.em,{children:"character"})," ."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"char"})," and ",(0,r.jsx)(n.strong,{children:"schar"})," ",(0,r.jsx)(n.em,{children:"access"})," the ",(0,r.jsx)(n.em,{children:"element"})," of ",(0,r.jsx)(n.em,{children:"string"})," specified by ",(0,r.jsx)(n.em,{children:"index"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"char"})," ignores ",(0,r.jsx)(n.em,{children:"fill pointers"})," when ",(0,r.jsx)(n.em,{children:"accessing elements"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:["(setq my-simple-string (make-string 6 ",":initial-element"," #\\A)) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "AAAAAA"']}),"\n",(0,r.jsxs)(n.p,{children:["(schar my-simple-string 4) ",(0,r.jsx)(n.em,{children:"\u2192"})," #\\A"]}),"\n",(0,r.jsxs)(n.p,{children:["(setf (schar my-simple-string 4) #\\B) ",(0,r.jsx)(n.em,{children:"\u2192"})," #\\B"]}),"\n",(0,r.jsxs)(n.p,{children:["my-simple-string ",(0,r.jsx)(n.em,{children:"\u2192"}),' "AAAABA"']}),"\n",(0,r.jsx)(n.p,{children:"(setq my-filled-string"}),"\n",(0,r.jsxs)(n.p,{children:["(make-array 6 ",":element-type"," \u2019character"]}),"\n",(0,r.jsxs)(n.p,{children:[":fill-pointer"," 5"]}),"\n",(0,r.jsxs)(n.p,{children:[":initial-contents"," my-simple-string))"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "AAAAB"']}),"\n",(0,r.jsxs)(n.p,{children:["(char my-filled-string 4) ",(0,r.jsx)(n.em,{children:"\u2192"})," #\\B"]}),"\n",(0,r.jsxs)(n.p,{children:["(char my-filled-string 5) ",(0,r.jsx)(n.em,{children:"\u2192"})," #\\A"]}),"\n",(0,r.jsxs)(n.p,{children:["(setf (char my-filled-string 3) #\\C) ",(0,r.jsx)(n.em,{children:"\u2192"})," #\\C"]}),"\n",(0,r.jsxs)(n.p,{children:["(setf (char my-filled-string 5) #\\D) ",(0,r.jsx)(n.em,{children:"\u2192"})," #\\D"]}),"\n",(0,r.jsxs)(n.p,{children:["(setf (fill-pointer my-filled-string) 6) ",(0,r.jsx)(n.em,{children:"\u2192"})," 6"]}),"\n",(0,r.jsxs)(n.p,{children:["my-filled-string ",(0,r.jsx)(n.em,{children:"\u2192"}),' "AAACBD"']}),"\n",(0,r.jsxs)(n.p,{children:["Strings ",(0,r.jsx)(n.strong,{children:"16\u20135"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"aref"}),", ",(0,r.jsx)(n.strong,{children:"elt"}),", Section 3.2.1 (Compiler Terminology)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["(char s j) ",(0,r.jsx)(n.em,{children:"\u2261"})," (aref (the string s) j)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"})," ",(0,r.jsx)(n.em,{children:"x \u2192 string"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"x"}),"\u2014a ",(0,r.jsx)(n.em,{children:"string"}),", a ",(0,r.jsx)(n.em,{children:"symbol"}),", or a ",(0,r.jsx)(n.em,{children:"character"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"string"}),"\u2014a ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns a ",(0,r.jsx)(n.em,{children:"string"})," described by ",(0,r.jsx)(n.em,{children:"x"}),"; specifically:"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," If ",(0,r.jsx)(n.em,{children:"x"})," is a ",(0,r.jsx)(n.em,{children:"string"}),", it is returned."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," If ",(0,r.jsx)(n.em,{children:"x"})," is a ",(0,r.jsx)(n.em,{children:"symbol"}),", its ",(0,r.jsx)(n.em,{children:"name"})," is returned."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," If ",(0,r.jsx)(n.em,{children:"x"})," is a ",(0,r.jsx)(n.em,{children:"character"})," , then a ",(0,r.jsx)(n.em,{children:"string"})," containing that one ",(0,r.jsx)(n.em,{children:"character"})," is returned."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," ",(0,r.jsx)(n.strong,{children:"string"})," might perform additional, ",(0,r.jsx)(n.em,{children:"implementation-defined"})," conversions."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:['(string "already a string") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "already a string"']}),"\n",(0,r.jsxs)(n.p,{children:["(string \u2019elm) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "ELM"']}),"\n",(0,r.jsxs)(n.p,{children:["(string #\\c) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "c"']}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["In the case where a conversion is defined neither by this specification nor by the ",(0,r.jsx)(n.em,{children:"implementation"}),", an error of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"type-error"})," is signaled."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"coerce"}),", ",(0,r.jsx)(n.strong,{children:"string"})," (",(0,r.jsx)(n.em,{children:"type"}),")."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"coerce"})," can be used to convert a ",(0,r.jsx)(n.em,{children:"sequence"})," of ",(0,r.jsx)(n.em,{children:"characters"})," to a ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"prin1-to-string"}),", ",(0,r.jsx)(n.strong,{children:"princ-to-string"}),", ",(0,r.jsx)(n.strong,{children:"write-to-string"}),", or ",(0,r.jsx)(n.strong,{children:"format"})," (with a first argument of ",(0,r.jsx)(n.strong,{children:"nil"}),") can be used to get a ",(0,r.jsx)(n.em,{children:"string"})," representation of a ",(0,r.jsx)(n.em,{children:"number"})," or any other ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"<b>string-upcase, string-downcase, string-capitalize, <sup>nstring-upcase, nstring-downcase, nstring</sup> capitalize</b> <i>Function</i>"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-upcase"})," ",(0,r.jsx)(n.em,{children:"string"})," &key ",(0,r.jsx)(n.em,{children:"start end \u2192 cased-string"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-downcase"})," ",(0,r.jsx)(n.em,{children:"string"})," &key ",(0,r.jsx)(n.em,{children:"start end \u2192 cased-string"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-capitalize"})," ",(0,r.jsx)(n.em,{children:"string"})," &key ",(0,r.jsx)(n.em,{children:"start end \u2192 cased-string"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"nstring-upcase"})," ",(0,r.jsx)(n.em,{children:"string"})," &key ",(0,r.jsx)(n.em,{children:"start end \u2192 string"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"nstring-downcase"})," ",(0,r.jsx)(n.em,{children:"string"})," &key ",(0,r.jsx)(n.em,{children:"start end \u2192 string"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"nstring-capitalize"})," ",(0,r.jsx)(n.em,{children:"string"})," &key ",(0,r.jsx)(n.em,{children:"start end \u2192 string"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"string"}),"\u2014a ",(0,r.jsx)(n.em,{children:"string designator"})," . For ",(0,r.jsx)(n.strong,{children:"nstring-upcase"}),", ",(0,r.jsx)(n.strong,{children:"nstring-downcase"}),", and ",(0,r.jsx)(n.strong,{children:"nstring-capitalize"}),", the ",(0,r.jsx)(n.em,{children:"string designator"})," must be a ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"start"}),", ",(0,r.jsx)(n.em,{children:"end"}),"\u2014",(0,r.jsx)(n.em,{children:"bounding index designators"})," of ",(0,r.jsx)(n.em,{children:"string"}),". The defaults for ",(0,r.jsx)(n.em,{children:"start"})," and ",(0,r.jsx)(n.em,{children:"end"})," are 0 and ",(0,r.jsx)(n.strong,{children:"nil"}),", respectively."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"cased-string"}),"\u2014a ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-upcase"}),", ",(0,r.jsx)(n.strong,{children:"string-downcase"}),", ",(0,r.jsx)(n.strong,{children:"string-capitalize"}),", ",(0,r.jsx)(n.strong,{children:"nstring-upcase"}),", ",(0,r.jsx)(n.strong,{children:"nstring-downcase"}),", ",(0,r.jsx)(n.strong,{children:"nstring-capitalize"})," change the case of the subsequence of ",(0,r.jsx)(n.em,{children:"string bounded"})," by ",(0,r.jsx)(n.em,{children:"start"})," and ",(0,r.jsx)(n.em,{children:"end"})," as follows:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"string-upcase"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-upcase"})," returns a ",(0,r.jsx)(n.em,{children:"string"})," just like ",(0,r.jsx)(n.em,{children:"string"})," with all lowercase characters replaced by the corresponding uppercase characters. More precisely, each character of the result ",(0,r.jsx)(n.em,{children:"string"})," is produced by applying the ",(0,r.jsx)(n.em,{children:"function"})," ",(0,r.jsx)(n.strong,{children:"char-upcase"})," to the corresponding character of ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"string-downcase"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-downcase"})," is like ",(0,r.jsx)(n.strong,{children:"string-upcase"})," except that all uppercase characters are replaced by the corresponding lowercase characters (using ",(0,r.jsx)(n.strong,{children:"char-downcase"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["Strings ",(0,r.jsx)(n.strong,{children:"16\u20137"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-upcase, string-downcase, string-capitalize,"})," ",(0,r.jsx)(n.em,{children:". . ."})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"string-capitalize"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-capitalize"})," produces a copy of ",(0,r.jsx)(n.em,{children:"string"})," such that, for every word in the copy, the first ",(0,r.jsx)(n.em,{children:"character"})," of the \u201cword,\u201d if it has ",(0,r.jsx)(n.em,{children:"case"}),", is ",(0,r.jsx)(n.em,{children:"uppercase"})," and any other ",(0,r.jsx)(n.em,{children:"characters"})," with ",(0,r.jsx)(n.em,{children:"case"})," in the word are ",(0,r.jsx)(n.em,{children:"lowercase"}),". For the purposes of ",(0,r.jsx)(n.strong,{children:"string-capitalize"}),", a \u201cword\u201d is defined to be a consecutive subsequence consisting of ",(0,r.jsx)(n.em,{children:"alphanumeric characters"}),", delimited at each end either by a non-",(0,r.jsx)(n.em,{children:"alphanumeric character"})," or by an end of the ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"nstring-upcase, nstring-downcase, nstring-capitalize"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"nstring-upcase"}),", ",(0,r.jsx)(n.strong,{children:"nstring-downcase"}),", and ",(0,r.jsx)(n.strong,{children:"nstring-capitalize"})," are identical to ",(0,r.jsx)(n.strong,{children:"string-upcase"}),", ",(0,r.jsx)(n.strong,{children:"string-downcase"}),", and ",(0,r.jsx)(n.strong,{children:"string-capitalize"})," respectively except that they modify ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["For ",(0,r.jsx)(n.strong,{children:"string-upcase"}),", ",(0,r.jsx)(n.strong,{children:"string-downcase"}),", and ",(0,r.jsx)(n.strong,{children:"string-capitalize"}),", ",(0,r.jsx)(n.em,{children:"string"})," is not modified. However, if no characters in ",(0,r.jsx)(n.em,{children:"string"})," require conversion, the result may be either ",(0,r.jsx)(n.em,{children:"string"})," or a copy of it, at the implementation\u2019s discretion."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:['(string-upcase "abcde") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "ABCDE"']}),"\n",(0,r.jsx)(n.p,{children:'(string-upcase "Dr. Livingston, I presume?")'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "DR. LIVINGSTON, I PRESUME?"']}),"\n",(0,r.jsxs)(n.p,{children:['(string-upcase "Dr. Livingston, I presume?" ',":start"," 6 ",":end"," 10)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "Dr. LiVINGston, I presume?"']}),"\n",(0,r.jsx)(n.p,{children:'(string-downcase "Dr. Livingston, I presume?")'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "dr. livingston, i presume?"']}),"\n",(0,r.jsxs)(n.p,{children:['(string-capitalize "elm 13c arthur;fig don\u2019t") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "Elm 13c Arthur;Fig Don\u2019T"']}),"\n",(0,r.jsxs)(n.p,{children:['(string-capitalize " hello ") ',(0,r.jsx)(n.em,{children:"\u2192"}),' " Hello "']}),"\n",(0,r.jsxs)(n.p,{children:['(string-capitalize "occlUDeD cASEmenTs FOreSTAll iNADVertent DEFenestraTION") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "Occluded Casements Forestall Inadvertent Defenestration"']}),"\n",(0,r.jsxs)(n.p,{children:["(string-capitalize \u2019kludgy-hash-search) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "Kludgy-Hash-Search"']}),"\n",(0,r.jsxs)(n.p,{children:['(string-capitalize "DON\u2019T!") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "Don\u2019T!" ;not "Don\u2019t!"']}),"\n",(0,r.jsxs)(n.p,{children:['(string-capitalize "pipe 13a, foo16c") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "Pipe 13a, Foo16c"']}),"\n",(0,r.jsxs)(n.p,{children:['(setq str (copy-seq "0123ABCD890a")) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "0123ABCD890a"']}),"\n",(0,r.jsxs)(n.p,{children:["(nstring-downcase str ",":start"," 5 ",":end"," 7) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "0123AbcD890a"']}),"\n",(0,r.jsxs)(n.p,{children:["str ",(0,r.jsx)(n.em,{children:"\u2192"}),' "0123AbcD890a"']}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"nstring-upcase"}),", ",(0,r.jsx)(n.strong,{children:"nstring-downcase"}),", and ",(0,r.jsx)(n.strong,{children:"nstring-capitalize"})," modify ",(0,r.jsx)(n.em,{children:"string"})," as appropriate rather than constructing a new ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"char-upcase"}),", ",(0,r.jsx)(n.strong,{children:"char-downcase"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["The result is always of the same length as ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-trim, string-left-trim, string-right-trim"})," ",(0,r.jsx)(n.em,{children:"Func tion"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-trim"})," ",(0,r.jsx)(n.em,{children:"character-bag string \u2192 trimmed-string"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-left-trim"})," ",(0,r.jsx)(n.em,{children:"character-bag string \u2192 trimmed-string"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-right-trim"})," ",(0,r.jsx)(n.em,{children:"character-bag string \u2192 trimmed-string"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"character-bag"}),"\u2014a ",(0,r.jsx)(n.em,{children:"sequence"})," containing ",(0,r.jsx)(n.em,{children:"characters"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"string"}),"\u2014a ",(0,r.jsx)(n.em,{children:"string designator"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"trimmed-string"}),"\u2014a ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-trim"})," returns a substring of ",(0,r.jsx)(n.em,{children:"string"}),", with all characters in ",(0,r.jsx)(n.em,{children:"character-bag"})," stripped off the beginning and end. ",(0,r.jsx)(n.strong,{children:"string-left-trim"})," is similar but strips characters off only the beginning; ",(0,r.jsx)(n.strong,{children:"string-right-trim"})," strips off only the end."]}),"\n",(0,r.jsxs)(n.p,{children:["If no ",(0,r.jsx)(n.em,{children:"characters"})," need to be trimmed from the ",(0,r.jsx)(n.em,{children:"string"}),", then either ",(0,r.jsx)(n.em,{children:"string"})," itself or a copy of it may be returned, at the discretion of the implementation."]}),"\n",(0,r.jsxs)(n.p,{children:["All of these ",(0,r.jsx)(n.em,{children:"functions"})," observe the ",(0,r.jsx)(n.em,{children:"fill pointer"})," ."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:['(string-trim "abc" "abcaakaaakabcaaa") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "kaaak"']}),"\n",(0,r.jsx)(n.p,{children:'(string-trim \u2019(#\\Space #\\Tab #\\Newline) " garbanzo beans'}),"\n",(0,r.jsxs)(n.p,{children:['") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "garbanzo beans"']}),"\n",(0,r.jsx)(n.p,{children:'(string-trim " (*)" " ( *three (silly) words* ) ")'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "three (silly) words"']}),"\n",(0,r.jsxs)(n.p,{children:['(string-left-trim "abc" "labcabcabc") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "labcabcabc"']}),"\n",(0,r.jsx)(n.p,{children:'(string-left-trim " (*)" " ( *three (silly) words* ) ")'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "three (silly) words* ) "']}),"\n",(0,r.jsx)(n.p,{children:'(string-right-trim " (*)" " ( *three (silly) words* ) ")'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' " ( *three (silly) words"']}),"\n",(0,r.jsxs)(n.p,{children:["Strings ",(0,r.jsx)(n.strong,{children:"16\u20139"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"implementation"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"<b>string=, string/=, string</b><i><</i><b>, string</b><i>></i><b>, string</b><i><</i><b>=, <sup>string</sup></b>></i><b>=, string-equal, string-not-equal, string lessp, string-greaterp, string-not-greaterp, string not-lessp</b> <i>Function</i>"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"}),"= ",(0,r.jsx)(n.em,{children:"string1 string2"})," &key ",(0,r.jsx)(n.em,{children:"start1 end1 start2 end2 \u2192 generalized-boolean"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string/"}),"= ",(0,r.jsx)(n.em,{children:"string1 string2"})," &key ",(0,r.jsx)(n.em,{children:"start1 end1 start2 end2 \u2192 mismatch-index"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"}),"< ",(0,r.jsx)(n.em,{children:"string1 string2"})," &key ",(0,r.jsx)(n.em,{children:"start1 end1 start2 end2 \u2192 mismatch-index"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"}),"> ",(0,r.jsx)(n.em,{children:"string1 string2"})," &key ",(0,r.jsx)(n.em,{children:"start1 end1 start2 end2 \u2192 mismatch-index"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"}),"<= ",(0,r.jsx)(n.em,{children:"string1 string2"})," &key ",(0,r.jsx)(n.em,{children:"start1 end1 start2 end2 \u2192 mismatch-index"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"}),">= ",(0,r.jsx)(n.em,{children:"string1 string2"})," &key ",(0,r.jsx)(n.em,{children:"start1 end1 start2 end2 \u2192 mismatch-index"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-equal"})," ",(0,r.jsx)(n.em,{children:"string1 string2"})," &key ",(0,r.jsx)(n.em,{children:"start1 end1 start2 end2 \u2192 generalized-boolean"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-not-equal"})," ",(0,r.jsx)(n.em,{children:"string1 string2"})," &key ",(0,r.jsx)(n.em,{children:"start1 end1 start2 end2 \u2192 mismatch-index"})," ",(0,r.jsx)(n.strong,{children:"string-lessp"})," ",(0,r.jsx)(n.em,{children:"string1 string2"})," &key ",(0,r.jsx)(n.em,{children:"start1 end1 start2 end2 \u2192 mismatch-index"})," ",(0,r.jsx)(n.strong,{children:"string-greaterp"})," ",(0,r.jsx)(n.em,{children:"string1 string2"})," &key ",(0,r.jsx)(n.em,{children:"start1 end1 start2 end2 \u2192 mismatch-index"})," ",(0,r.jsx)(n.strong,{children:"string-not-greaterp"})," ",(0,r.jsx)(n.em,{children:"string1 string2"})," &key ",(0,r.jsx)(n.em,{children:"start1 end1 start2 end2 \u2192 mismatch-index"})," ",(0,r.jsx)(n.strong,{children:"string-not-lessp"})," ",(0,r.jsx)(n.em,{children:"string1 string2"})," &key ",(0,r.jsx)(n.em,{children:"start1 end1 start2 end2 \u2192 mismatch-index"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"string1"}),"\u2014a ",(0,r.jsx)(n.em,{children:"string designator"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"string2"}),"\u2014a ",(0,r.jsx)(n.em,{children:"string designator"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"start1"}),", ",(0,r.jsx)(n.em,{children:"end1"}),"\u2014",(0,r.jsx)(n.em,{children:"bounding index designators"})," of ",(0,r.jsx)(n.em,{children:"string1"}),". The defaults for ",(0,r.jsx)(n.em,{children:"start"})," and ",(0,r.jsx)(n.em,{children:"end"})," are 0 and ",(0,r.jsx)(n.strong,{children:"nil"}),", respectively."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"start2"}),", ",(0,r.jsx)(n.em,{children:"end2"}),"\u2014",(0,r.jsx)(n.em,{children:"bounding index designators"})," of ",(0,r.jsx)(n.em,{children:"string2"}),". The defaults for ",(0,r.jsx)(n.em,{children:"start"})," and ",(0,r.jsx)(n.em,{children:"end"})," are 0 and ",(0,r.jsx)(n.strong,{children:"nil"}),", respectively."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"generalized-boolean"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"mismatch-index"}),"\u2014a ",(0,r.jsx)(n.em,{children:"bounding index"})," of ",(0,r.jsx)(n.em,{children:"string1"}),", or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["These functions perform lexicographic comparisons on ",(0,r.jsx)(n.em,{children:"string1"})," and ",(0,r.jsx)(n.em,{children:"string2"}),". ",(0,r.jsx)(n.strong,{children:"string="})," and ",(0,r.jsx)(n.strong,{children:"string-equal"})," are called equality functions; the others are called inequality functions. The"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string=, string/=, string"}),"*<",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:", string"})}),">",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:", string"})}),"<*",(0,r.jsx)(n.strong,{children:"=,"})," ",(0,r.jsx)(n.em,{children:". . ."})]}),"\n",(0,r.jsxs)(n.p,{children:["comparison operations these ",(0,r.jsx)(n.em,{children:"functions"})," perform are restricted to the subsequence of ",(0,r.jsx)(n.em,{children:"string1 bounded"})," by ",(0,r.jsx)(n.em,{children:"start1"})," and ",(0,r.jsx)(n.em,{children:"end1"})," and to the subsequence of ",(0,r.jsx)(n.em,{children:"string2 bounded"})," by ",(0,r.jsx)(n.em,{children:"start2"})," and ",(0,r.jsx)(n.em,{children:"end2"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A string ",(0,r.jsx)(n.em,{children:"a"})," is equal to a string ",(0,r.jsx)(n.em,{children:"b"})," if it contains the same number of characters, and the corresponding characters are the ",(0,r.jsx)(n.em,{children:"same"})," under ",(0,r.jsx)(n.strong,{children:"char="})," or ",(0,r.jsx)(n.strong,{children:"char-equal"}),", as appropriate."]}),"\n",(0,r.jsxs)(n.p,{children:["A string ",(0,r.jsx)(n.em,{children:"a"})," is less than a string ",(0,r.jsx)(n.em,{children:"b"})," if in the first position in which they differ the character of ",(0,r.jsx)(n.em,{children:"a"})," is less than the corresponding character of ",(0,r.jsx)(n.em,{children:"b"})," according to ",(0,r.jsx)(n.strong,{children:"char"}),"< or ",(0,r.jsx)(n.strong,{children:"char-lessp"})," as appropriate, or if string ",(0,r.jsx)(n.em,{children:"a"})," is a proper prefix of string ",(0,r.jsx)(n.em,{children:"b"})," (of shorter length and matching in all the characters of ",(0,r.jsx)(n.em,{children:"a"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["The equality functions return a ",(0,r.jsx)(n.em,{children:"generalized boolean"})," that is ",(0,r.jsx)(n.em,{children:"true"})," if the strings are equal, or ",(0,r.jsx)(n.em,{children:"false"})," otherwise."]}),"\n",(0,r.jsxs)(n.p,{children:["The inequality functions return a ",(0,r.jsx)(n.em,{children:"mismatch-index"})," that is ",(0,r.jsx)(n.em,{children:"true"})," if the strings are not equal, or ",(0,r.jsx)(n.em,{children:"false"})," otherwise. When the ",(0,r.jsx)(n.em,{children:"mismatch-index"})," is ",(0,r.jsx)(n.em,{children:"true"}),", it is an ",(0,r.jsx)(n.em,{children:"integer"})," representing the first character position at which the two substrings differ, as an offset from the beginning of ",(0,r.jsx)(n.em,{children:"string1"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The comparison has one of the following results:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"string="})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string="})," is ",(0,r.jsx)(n.em,{children:"true"})," if the supplied substrings are of the same length and contain the ",(0,r.jsx)(n.em,{children:"same"})," characters in corresponding positions; otherwise it is ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"string/="})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string/="})," is ",(0,r.jsx)(n.em,{children:"true"})," if the supplied substrings are different; otherwise it is ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"string-equal"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-equal"})," is just like ",(0,r.jsx)(n.strong,{children:"string="})," except that differences in case are ignored; two characters are considered to be the same if ",(0,r.jsx)(n.strong,{children:"char-equal"})," is ",(0,r.jsx)(n.em,{children:"true"})," of them."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"}),"<"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"}),"< is ",(0,r.jsx)(n.em,{children:"true"})," if substring1 is less than substring2; otherwise it is ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"}),">"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"}),"> is ",(0,r.jsx)(n.em,{children:"true"})," if substring1 is greater than substring2; otherwise it is ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-lessp"}),", ",(0,r.jsx)(n.strong,{children:"string-greaterp"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-lessp"})," and ",(0,r.jsx)(n.strong,{children:"string-greaterp"})," are exactly like ",(0,r.jsx)(n.strong,{children:"string"}),"< and ",(0,r.jsx)(n.strong,{children:"string"}),">, respectively, except that distinctions between uppercase and lowercase letters are ignored. It is as if ",(0,r.jsx)(n.strong,{children:"char-lessp"})," were used instead of ",(0,r.jsx)(n.strong,{children:"char"}),"< for comparing characters."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"}),"<",(0,r.jsx)(n.strong,{children:"="})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"}),"<",(0,r.jsx)(n.strong,{children:"="})," is ",(0,r.jsx)(n.em,{children:"true"})," if substring1 is less than or equal to substring2; otherwise it is ",(0,r.jsx)(n.em,{children:"false"}),". Strings ",(0,r.jsx)(n.strong,{children:"16\u201311"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"}),">",(0,r.jsx)(n.strong,{children:"="})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string"}),">",(0,r.jsx)(n.strong,{children:"="})," is ",(0,r.jsx)(n.em,{children:"true"})," if substring1 is greater than or equal to substring2; otherwise it is ",(0,r.jsx)(n.em,{children:"false"}),". ",(0,r.jsx)(n.strong,{children:"string-not-greaterp"}),", ",(0,r.jsx)(n.strong,{children:"string-not-lessp"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"string-not-greaterp"})," and ",(0,r.jsx)(n.strong,{children:"string-not-lessp"})," are exactly like ",(0,r.jsx)(n.strong,{children:"string"}),"<",(0,r.jsx)(n.strong,{children:"="})," and ",(0,r.jsx)(n.strong,{children:"string"}),">",(0,r.jsx)(n.strong,{children:"="}),", respectively, except that distinctions between uppercase and lowercase letters are ignored. It is as if ",(0,r.jsx)(n.strong,{children:"char-lessp"})," were used instead of ",(0,r.jsx)(n.strong,{children:"char"}),"< for comparing characters."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:['(string= "foo" "foo") ',(0,r.jsx)(n.em,{children:"\u2192 true"})]}),"\n",(0,r.jsxs)(n.p,{children:['(string= "foo" "Foo") ',(0,r.jsx)(n.em,{children:"\u2192 false"})]}),"\n",(0,r.jsxs)(n.p,{children:['(string= "foo" "bar") ',(0,r.jsx)(n.em,{children:"\u2192 false"})]}),"\n",(0,r.jsxs)(n.p,{children:['(string= "together" "frog" ',":start1"," 1 ",":end1"," 3 ",":start2"," 2) ",(0,r.jsx)(n.em,{children:"\u2192 true"})]}),"\n",(0,r.jsxs)(n.p,{children:['(string-equal "foo" "Foo") ',(0,r.jsx)(n.em,{children:"\u2192 true"})]}),"\n",(0,r.jsxs)(n.p,{children:['(string= "abcd" "01234abcd9012" ',":start2"," 5 ",":end2"," 9) ",(0,r.jsx)(n.em,{children:"\u2192 true"})]}),"\n",(0,r.jsxs)(n.p,{children:['(string< "aaaa" "aaab") ',(0,r.jsx)(n.em,{children:"\u2192"})," 3"]}),"\n",(0,r.jsxs)(n.p,{children:['(string>= "aaaaa" "aaaa") ',(0,r.jsx)(n.em,{children:"\u2192"})," 4"]}),"\n",(0,r.jsxs)(n.p,{children:['(string-not-greaterp "Abcde" "abcdE") ',(0,r.jsx)(n.em,{children:"\u2192"})," 5"]}),"\n",(0,r.jsxs)(n.p,{children:['(string-lessp "012AAAA789" "01aaab6" ',":start1"," 3 ",":end1"," 7"]}),"\n",(0,r.jsxs)(n.p,{children:[":start2"," 2 ",":end2"," 6) ",(0,r.jsx)(n.em,{children:"\u2192"})," 6"]}),"\n",(0,r.jsxs)(n.p,{children:['(string-not-equal "AAAA" "aaaA") ',(0,r.jsx)(n.em,{children:"\u2192 false"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"char="})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"equal"})," calls ",(0,r.jsx)(n.strong,{children:"string="})," if applied to two ",(0,r.jsx)(n.em,{children:"strings"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"stringp"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"stringp"})," ",(0,r.jsx)(n.em,{children:"object \u2192 generalized-boolean"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"object"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"generalized-boolean"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns ",(0,r.jsx)(n.em,{children:"true"})," if ",(0,r.jsx)(n.em,{children:"object"})," is of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"string"}),"; otherwise, returns ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:['(stringp "aaaaaa") ',(0,r.jsx)(n.em,{children:"\u2192 true"})]}),"\n",(0,r.jsxs)(n.p,{children:["(stringp #\\a) ",(0,r.jsx)(n.em,{children:"\u2192 false"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"typep"}),", ",(0,r.jsx)(n.strong,{children:"string"})," (",(0,r.jsx)(n.em,{children:"type"}),")"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["(stringp ",(0,r.jsx)(n.em,{children:"object"}),") ",(0,r.jsx)(n.em,{children:"\u2261"})," (typep ",(0,r.jsx)(n.em,{children:"object"})," \u2019string)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"make-string"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"make-string"})," ",(0,r.jsx)(n.em,{children:"size"})," &key ",(0,r.jsx)(n.em,{children:"initial-element element-type \u2192 string"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"size"}),"\u2014a ",(0,r.jsx)(n.em,{children:"valid array dimension"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"initial-element"}),"\u2014a ",(0,r.jsx)(n.em,{children:"character"})," . The default is ",(0,r.jsx)(n.em,{children:"implementation-dependent"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"element-type"}),"\u2014a ",(0,r.jsx)(n.em,{children:"type specifier"})," . The default is ",(0,r.jsx)(n.strong,{children:"character"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"string"}),"\u2014a ",(0,r.jsx)(n.em,{children:"simple string"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"make-string"})," returns a ",(0,r.jsx)(n.em,{children:"simple string"})," of length ",(0,r.jsx)(n.em,{children:"size"})," whose elements have been initialized to ",(0,r.jsx)(n.em,{children:"initial-element"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"element-type"})," names the ",(0,r.jsx)(n.em,{children:"type"})," of the ",(0,r.jsx)(n.em,{children:"elements"})," of the ",(0,r.jsx)(n.em,{children:"string"}),"; a ",(0,r.jsx)(n.em,{children:"string"})," is constructed of the most ",(0,r.jsx)(n.em,{children:"specialized type"})," that can accommodate ",(0,r.jsx)(n.em,{children:"elements"})," of the given ",(0,r.jsx)(n.em,{children:"type"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:["(make-string 10 ",":initial-element"," #\\5) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "5555555555"']}),"\n",(0,r.jsxs)(n.p,{children:["(length (make-string 10)) ",(0,r.jsx)(n.em,{children:"\u2192"})," 10"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"implementation"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Strings ",(0,r.jsx)(n.strong,{children:"16\u201313"})]})]})}function x(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}const j={title:"16.1 String Concepts"},a="16.1 String Concepts",o={id:"chap-16/bg-b-string-concepts",title:"16.1 String Concepts",description:"16.1.1 Implications of Strings Being Arrays",source:"@site/docs/chap-16/bg-b-string-concepts.md",sourceDirName:"chap-16",slug:"/chap-16/bg-b-string-concepts",permalink:"/cl-language-reference/docs/chap-16/bg-b-string-concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/chap-16/bg-b-string-concepts.md",tags:[],version:"current",frontMatter:{title:"16.1 String Concepts"},sidebar:"tutorialSidebar",previous:{title:"16. Strings",permalink:"/cl-language-reference/docs/category/16-strings"},next:{title:"intro",permalink:"/cl-language-reference/docs/chap-16/intro"}},g={},p=[{value:"16.1.1 Implications of Strings Being Arrays",id:"1611-implications-of-strings-being-arrays",level:2},{value:"16.1.2 Subtypes of STRING",id:"1612-subtypes-of-string",level:2}];function m(e){const n={h1:"h1",h2:"h2",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"161-string-concepts",children:"16.1 String Concepts"}),"\n","\n",(0,r.jsx)(c,{}),"\n",(0,r.jsx)(n.h2,{id:"1611-implications-of-strings-being-arrays",children:"16.1.1 Implications of Strings Being Arrays"}),"\n","\n",(0,r.jsx)(d,{}),"\n",(0,r.jsx)(n.h2,{id:"1612-subtypes-of-string",children:"16.1.2 Subtypes of STRING"}),"\n","\n","\n",(0,r.jsx)(x,{})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>c});var r=s(7294);const i={},t=r.createContext(i);function c(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);