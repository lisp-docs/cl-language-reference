"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[16756],{83635:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var d=t(85893),i=t(11151);const s={},o="update-dependent",c={id:"meta-object-protocol/update-dependent",title:"update-dependent",description:"Generic Function UPDATE-DEPENDENT",source:"@site/docs/meta-object-protocol/update-dependent.md",sourceDirName:"meta-object-protocol",slug:"/meta-object-protocol/update-dependent",permalink:"/cl-language-reference/meta-object-protocol/update-dependent",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/update-dependent.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The defmethod macro",permalink:"/cl-language-reference/meta-object-protocol/the-defmethod-macro"},next:{title:"validate-superclass-class-class",permalink:"/cl-language-reference/meta-object-protocol/validate-superclass-class-class"}},r={},a=[];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h1,{id:"update-dependent",children:"update-dependent"}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.em,{children:"Generic Function"})," ",(0,d.jsx)(n.strong,{children:"UPDATE-DEPENDENT"})]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"update-dependent"})," ",(0,d.jsx)(n.em,{children:"metaobject"})," ",(0,d.jsx)(n.em,{children:"dependent"})," &",(0,d.jsx)(n.code,{children:"rest"})," ",(0,d.jsx)(n.em,{children:"initargs"})," => ",(0,d.jsx)(n.em,{children:"unspecified"})]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Arguments and values:"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.em,{children:"metaobject"})," -- A class or generic function metaobject. It is the metaobject being reinitialized or otherwise modified."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.em,{children:"dependent"})," -- An object. It is the dependent being updated."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.em,{children:"initargs"})," -- A list of the initialization arguments for the metaobject redefinition."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.em,{children:"unspecified"})," -- The return value is unspecified."]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Description:"})}),"\n",(0,d.jsxs)(n.p,{children:["This generic function is called to update a dependent of ",(0,d.jsx)(n.em,{children:"metaobject"}),"."]}),"\n",(0,d.jsxs)(n.p,{children:["When a class or a generic function is reinitialized each of its dependents is updated. The ",(0,d.jsx)(n.em,{children:"initargs"})," argument to ",(0,d.jsx)(n.code,{children:"update-dependent"})," is the set of initialization arguments received by",(0,d.jsx)(n.a,{href:"http://www.lispworks.com/documentation/HyperSpec/Body/f_reinit.htm#reinitialize-instance",children:"reinitialize-instance"}),"."]}),"\n",(0,d.jsxs)(n.p,{children:["When a method is added to a generic function, each of the generic function's dependents is updated. The ",(0,d.jsx)(n.em,{children:"initargs"})," argument is a list of two elements: the symbol ",(0,d.jsx)(n.code,{children:"add-method"}),", and the method that was added."]}),"\n",(0,d.jsxs)(n.p,{children:["When a method is removed from a generic function, each of the generic function's dependents is updated. The ",(0,d.jsx)(n.em,{children:"initargs"})," argument is a list of two elements: the symbol ",(0,d.jsx)(n.code,{children:"remove-method"}),", and the method that was removed."]}),"\n",(0,d.jsxs)(n.p,{children:["In each case, ",(0,d.jsx)(n.a,{href:"/meta-object-protocol/map-dependents",children:"map-dependents"})," is used to call ",(0,d.jsx)(n.code,{children:"update-dependent"})," on each of the dependents. So, for example, the update of a generic function's dependents when a method is added could be performed by the following code:"]}),"\n",(0,d.jsx)(n.p,{children:"(map-dependents generic-function\n#'(lambda (dep)\n(update-dependent generic-function\ndep\n'add-method\nnew-method)))"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,d.jsx)(n.p,{children:"There are no specified methods on this generic function."}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Comments and remarks:"})}),"\n",(0,d.jsxs)(n.p,{children:["See the ",(0,d.jsx)(n.a,{href:"/meta-object-protocol/dependent-maintenance-protocol",children:"``Dependent Maintenance Protocol'' section"})," for remarks about the use of this facility."]})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>o});var d=t(67294);const i={},s=d.createContext(i);function o(e){const n=d.useContext(s);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),d.createElement(s.Provider,{value:n},e.children)}}}]);