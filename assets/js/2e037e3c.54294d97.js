"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[99215],{57488:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var n=o(85893),i=o(11151);const a={},r="defmethod expansion",c={id:"meta-object-protocol/dictionary/fig-defmethod-1",title:"defmethod expansion",description:"------------------------------------------------------------------------",source:"@site/docs/meta-object-protocol/dictionary/fig-defmethod-1.md",sourceDirName:"meta-object-protocol/dictionary",slug:"/meta-object-protocol/dictionary/fig-defmethod-1",permalink:"/cl-language-reference/meta-object-protocol/dictionary/fig-defmethod-1",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/dictionary/fig-defmethod-1.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"extract-specializer-names",permalink:"/cl-language-reference/meta-object-protocol/dictionary/extract-specializer-names"},next:{title:"defmethod expansion",permalink:"/cl-language-reference/meta-object-protocol/dictionary/fig-defmethod-2"}},d={},s=[];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",hr:"hr",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"defmethod-expansion",children:"defmethod expansion"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-lisp",children:"    (defmethod move :before ((p position) (l (eql 0))\n                             &optional (visiblyp t)\n                             &key color)\n      (set-to-origin p)\n      (when visiblyp (show-move p 0 color)))\n\n    (let ((#:g001 (ensure-generic-function 'move)))\n      (add-method #:g001\n        (make-instance (generic-function-method-class #:g001)\n                       ':qualifiers '(:before)\n                       ':specializers (list (find-class 'position)\n                                            (intern-eql-specializer 0))\n                       ':lambda-list '(p l &optional (visiblyp t)\n                                           &key color)\n                       ':function (functionem method-lambdatt)\n                       'additional-initarg-1 't\n                       'additional-initarg-2 '39)))\n"})}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsxs)(t.p,{children:["An example ",(0,n.jsx)(t.code,{children:"defmethod"})," form and one possible correct expansion. In the expansion, ",(0,n.jsx)(t.em,{children:"method-lambda"})," is the result of calling ",(0,n.jsx)(t.a,{href:"/meta-object-protocol/make-method-lambda",children:"make-method-lambda"})," as described in ",(0,n.jsx)(t.a,{href:"/meta-object-protocol/processing-method-bodies",children:"the section ``Processing Method Bodies''."})," The initargs appearing after ",(0,n.jsx)(t.code,{children:"function"})," are assumed to be additional initargs returned from the call to ",(0,n.jsx)(t.a,{href:"/meta-object-protocol/make-method-lambda",children:"make-method-lambda"}),"."]})]})}function m(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},11151:(e,t,o)=>{o.d(t,{Z:()=>c,a:()=>r});var n=o(67294);const i={},a=n.createContext(i);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);