"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[40977],{68594:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>h});var o=r(85893),t=r(11151);function i(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"\u2217"}),(0,o.jsx)(n.strong,{children:"debugger-hook"}),(0,o.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,o.jsxs)(n.p,{children:["a ",(0,o.jsx)(n.em,{children:"designator"})," for a ",(0,o.jsx)(n.em,{children:"function"})," of two ",(0,o.jsx)(n.em,{children:"arguments"})," (a ",(0,o.jsx)(n.em,{children:"condition"})," and the ",(0,o.jsx)(n.em,{children:"value"})," of ",(0,o.jsx)(n.strong,{children:"*debugger-hook*"})," at the time the debugger was entered), or ",(0,o.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Description:"})}),"\n",(0,o.jsxs)(n.p,{children:["When the ",(0,o.jsx)(n.em,{children:"value"})," of ",(0,o.jsx)(n.strong,{children:"*debugger-hook*"})," is ",(0,o.jsx)(n.em,{children:"non-nil"}),", it is called prior to normal entry into the debugger, either due to a call to ",(0,o.jsx)(n.strong,{children:"invoke-debugger"})," or due to automatic entry into the debugger from a call to ",(0,o.jsx)(n.strong,{children:"error"})," or ",(0,o.jsx)(n.strong,{children:"cerror"})," with a condition that is not handled. The ",(0,o.jsx)(n.em,{children:"function"})," may either handle the ",(0,o.jsx)(n.em,{children:"condition"})," (transfer control) or return normally (allowing the standard debugger to run). To minimize recursive errors while debugging, ",(0,o.jsx)(n.strong,{children:"*debugger-hook*"})," is bound to ",(0,o.jsx)(n.strong,{children:"nil"})," by ",(0,o.jsx)(n.strong,{children:"invoke-debugger"})," prior to calling the ",(0,o.jsx)(n.em,{children:"function"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lisp",children:' \n(defun one-of (choices &amp;optional (prompt "Choice")) \n(let ((n (length choices)) (i)) \n(do ((c choices (cdr c)) (i 1 (+ i 1))) \n((null c)) \n(format t "&#126;&amp;[&#126;D] &#126;A&#126;%" i (car c))) \n(do () ((typep i \u2018(integer 1 ,n))) \n(format t "&#126;&amp;&#126;A: " prompt) \n(setq i (read)) \n\n \n \n(fresh-line)) \n(nth (- i 1) choices))) \n(defun my-debugger (condition me-or-my-encapsulation) \n(format t "&#126;&amp;Fooey: &#126;A" condition) \n(let ((restart (one-of (compute-restarts)))) \n(if (not restart) (error "My debugger got an error.")) \n(let ((\\*debugger-hook\\* me-or-my-encapsulation)) \n(invoke-restart-interactively restart)))) \n(let ((\\*debugger-hook\\* #\u2019my-debugger)) \n(+ 3 \u2019a)) \n\u25b7 Fooey: The argument to +, A, is not a number. \n\u25b7 [1] Supply a replacement for A. \n\u25b7 [2] Return to Cloe Toplevel. \n\u25b7 Choice: 1 \n\u25b7 Form to evaluate and use: (+ 5 \u2019b) \n\u25b7 Fooey: The argument to +, B, is not a number. \n\u25b7 [1] Supply a replacement for B. \n\u25b7 [2] Supply a replacement for A. \n\u25b7 [3] Return to Cloe Toplevel. \n\u25b7 Choice: 1 \n\u25b7 Form to evaluate and use: 1 \n\u2192 9 \n\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"invoke-debugger"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,o.jsxs)(n.p,{children:["When evaluating code typed in by the user interactively, it is sometimes useful to have the hook function bind ",(0,o.jsx)(n.strong,{children:"*debugger-hook*"})," to the ",(0,o.jsx)(n.em,{children:"function"})," that was its second argument so that recursive errors can be handled using the same interactive facility."]})]})}function c(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(i,{...e})}):i(e)}const s={},a="*debugger-hook*",d={id:"chap-9/j-c-dictionary/debugger-hook_variable",title:"\\*debugger-hook\\*",description:"Expanded Reference: \\debugger-hook\\",source:"@site/docs/chap-9/j-c-dictionary/debugger-hook_variable.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/debugger-hook_variable",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/debugger-hook_variable",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/debugger-hook_variable.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"continue",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/continue"},next:{title:"define-condition",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/definecondition"}},l={},h=[{value:"Expanded Reference: *debugger-hook*",id:"expanded-reference-debugger-hook",level:2}];function g(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"debugger-hook",children:"*debugger-hook*"}),"\n","\n","\n",(0,o.jsx)(c,{}),"\n",(0,o.jsx)(n.h2,{id:"expanded-reference-debugger-hook",children:"Expanded Reference: *debugger-hook*"}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lisp",children:"*debugger-hook*\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>s,a:()=>c});var o=r(67294);const t={},i=o.createContext(t);function c(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);