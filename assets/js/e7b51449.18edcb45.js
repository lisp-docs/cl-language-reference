"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[65526],{39058:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>m,frontMatter:()=>c,metadata:()=>o,toc:()=>p});var t=r(85893),i=r(11151);function a(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components},{DictionaryLink:r,GlossaryTerm:a}=n;return r||l("DictionaryLink",!0),a||l("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"type"})," ",(0,t.jsx)(a,{term:"declaration",children:(0,t.jsx)("i",{children:"Declaration"})})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsxs)(n.p,{children:["(type ",(0,t.jsx)(n.em,{children:"typespec {var}"}),"*)"]}),"\n",(0,t.jsxs)(n.p,{children:["(",(0,t.jsx)(n.em,{children:"typespec {var}"}),"*)"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"typespec"}),"\u2014a ",(0,t.jsx)(a,{styled:!0,term:"type specifier",children:(0,t.jsx)("i",{children:"type specifier"})})," ."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"var"}),"\u2014a ",(0,t.jsx)(n.em,{children:"variable name"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Valid Context:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(a,{term:"declaration",children:(0,t.jsx)("i",{children:"declaration"})})," or ",(0,t.jsx)(a,{term:"proclamation",children:(0,t.jsx)("i",{children:"proclamation"})})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Binding Types Aected:"})}),"\n",(0,t.jsx)(a,{term:"variable",children:(0,t.jsx)("i",{children:"variable"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(n.p,{children:["A\u21b5ects only variable ",(0,t.jsx)(a,{term:"binding",children:(0,t.jsx)("i",{children:"bindings"})})," and specifies that the ",(0,t.jsx)(n.em,{children:"vars"})," take on values only of the specified ",(0,t.jsx)(n.em,{children:"typespec"}),". In particular, values assigned to the variables by ",(0,t.jsx)(r,{term:"setq",children:(0,t.jsx)("b",{children:"setq"})}),", as well as the initial values of the ",(0,t.jsx)(n.em,{children:"vars"})," must be of the specified ",(0,t.jsx)(n.em,{children:"typespec"}),". ",(0,t.jsx)(r,{term:"type",children:(0,t.jsx)("b",{children:"type"})})," declarations never apply to function ",(0,t.jsx)(a,{term:"binding",children:(0,t.jsx)("i",{children:"bindings"})})," (see ",(0,t.jsx)(r,{term:"ftype",children:(0,t.jsx)("b",{children:"ftype"})}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["A type declaration of a ",(0,t.jsx)(a,{term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," defined by ",(0,t.jsx)(r,{term:"symbol-macrolet",children:(0,t.jsx)("b",{children:"symbol-macrolet"})})," is equivalent to wrapping a ",(0,t.jsx)(r,{term:"the",children:(0,t.jsx)("b",{children:"the"})})," expression around the expansion of that ",(0,t.jsx)(a,{term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})}),", although the ",(0,t.jsx)(a,{term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})}),"\u2019s ",(0,t.jsx)(a,{styled:!0,term:"macro expansion",children:(0,t.jsx)("i",{children:"macro expansion"})})," is not actually a\u21b5ected."]}),"\n",(0,t.jsxs)(n.p,{children:["The meaning of a type declaration is equivalent to changing each reference to a variable (",(0,t.jsx)(n.em,{children:"var"}),") within the scope of the declaration to (the ",(0,t.jsx)(n.em,{children:"typespec var"}),"), changing each expression assigned to the variable (",(0,t.jsx)(n.em,{children:"new-value"}),") within the scope of the declaration to (the ",(0,t.jsx)(n.em,{children:"typespec new-value"}),"), and executing (the ",(0,t.jsx)(n.em,{children:"typespec var"}),") at the moment the scope of the declaration is entered."]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(a,{term:"type",children:(0,t.jsx)("i",{children:"type"})})," declaration is valid in all declarations. The interpretation of a type declaration is as follows:"]}),"\n",(0,t.jsxs)(n.p,{children:["1. During the execution of any reference to the declared variable within the scope of the declaration, the consequences are undefined if the value of the declared variable is not of the declared ",(0,t.jsx)(a,{term:"type",children:(0,t.jsx)("i",{children:"type"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["2. During the execution of any ",(0,t.jsx)(r,{term:"setq",children:(0,t.jsx)("b",{children:"setq"})})," of the declared variable within the scope of the declaration, the consequences are undefined if the newly assigned value of the declared variable is not of the declared ",(0,t.jsx)(a,{term:"type",children:(0,t.jsx)("i",{children:"type"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["3. At the moment the scope of the declaration is entered, the consequences are undefined if the value of the declared variable is not of the declared ",(0,t.jsx)(a,{term:"type",children:(0,t.jsx)("i",{children:"type"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Evaluation and"}),"\n",(0,t.jsx)(r,{term:"type",children:(0,t.jsx)("b",{children:"type"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(a,{term:"type",children:(0,t.jsx)("i",{children:"type"})})," declaration a\u21b5ects only variable references within its scope."]}),"\n",(0,t.jsxs)(n.p,{children:["If nested ",(0,t.jsx)(a,{term:"type",children:(0,t.jsx)("i",{children:"type"})})," declarations refer to the same variable, then the value of the variable must be a member of the intersection of the declared ",(0,t.jsx)(a,{term:"type",children:(0,t.jsx)("i",{children:"types"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If there is a local type declaration for a dynamic variable, and there is also a global type proclamation for that same variable, then the value of the variable within the scope of the local declaration must be a member of the intersection of the two declared ",(0,t.jsx)(a,{term:"type",children:(0,t.jsx)("i",{children:"types"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{term:"type",children:(0,t.jsx)("b",{children:"type"})})," declarations can be ",(0,t.jsx)(a,{styled:!0,term:"free declaration",children:(0,t.jsx)("i",{children:"free declarations"})})," or ",(0,t.jsx)(a,{styled:!0,term:"bound declaration",children:(0,t.jsx)("i",{children:"bound declarations"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(a,{term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," cannot be both the name of a ",(0,t.jsx)(a,{term:"type",children:(0,t.jsx)("i",{children:"type"})})," and the name of a declaration. Defining a ",(0,t.jsx)(a,{term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," as the ",(0,t.jsx)(a,{term:"name",children:(0,t.jsx)("i",{children:"name"})})," of a ",(0,t.jsx)(a,{term:"class",children:(0,t.jsx)("i",{children:"class"})}),", ",(0,t.jsx)(a,{term:"structure",children:(0,t.jsx)("i",{children:"structure"})}),", ",(0,t.jsx)(a,{term:"condition",children:(0,t.jsx)("i",{children:"condition"})}),", or ",(0,t.jsx)(a,{term:"type",children:(0,t.jsx)("i",{children:"type"})}),", when the ",(0,t.jsx)(a,{term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," has been ",(0,t.jsx)(n.em,{children:"declared"})," as a declaration name, or vice versa, signals an error."]}),"\n",(0,t.jsxs)(n.p,{children:["Within the ",(0,t.jsx)(a,{styled:!0,term:"lexical scope",children:(0,t.jsx)("i",{children:"lexical scope"})})," of an ",(0,t.jsx)(r,{term:"array",children:(0,t.jsx)("b",{children:"array"})})," type declaration, all references to ",(0,t.jsx)(n.em,{children:"array elements"})," are assumed to satisfy the ",(0,t.jsx)(a,{styled:!0,term:"expressed array element type",children:(0,t.jsx)("i",{children:"expressed array element type"})})," (as opposed to the ",(0,t.jsx)(a,{styled:!0,term:"upgraded array element type",children:(0,t.jsx)("i",{children:"upgraded array element type"})}),"). A compiler can treat the code within the scope of the ",(0,t.jsx)(r,{term:"array",children:(0,t.jsx)("b",{children:"array"})})," type declaration as if each ",(0,t.jsx)(a,{term:"access",children:(0,t.jsx)("i",{children:"access"})})," of an ",(0,t.jsx)(n.em,{children:"array element"})," were surrounded by an appropriate ",(0,t.jsx)(r,{term:"the",children:(0,t.jsx)("b",{children:"the"})})," form."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"(defun f (x y) \n  (declare (type fixnum x y)) \n  (let ((z (+ x y))) \n    (declare (type fixnum z)) \n    z)) *!* F \n(f 1 2) *!* 3 \n;; The previous definition of F is equivalent to \n(defun f (x y) \n  ;; This declaration is a shorthand form of the TYPE declaration \n  (declare (fixnum x y)) \n  ;; To declare the type of a return value, it\u2019s not necessary to \n  ;; create a named variable. A THE special form can be used instead. \n  (the fixnum (+ x y))) *!* F \n(f 1 2) *!* 3 \n(defvar \\*one-array\\* (make-array 10 :element-type \u2019(signed-byte 5))) \n(defvar \\*another-array\\* (make-array 10 :element-type \u2019(signed-byte 8))) \n(defun frob (an-array) \n  (declare (type (array (signed-byte 5) 1) an-array)) \n  (setf (aref an-array 1) 31) \n  (setf (aref an-array 2) 127) \n  (setf (aref an-array 3) (\\* 2 (aref an-array 3))) \n  (let ((foo 0)) \n    \n    \n    **type** \n    (declare (type (signed-byte 5) foo)) \n    (setf foo (aref an-array 0)))) \n(frob \\*one-array\\*) \n(frob \\*another-array\\*) \nThe above definition of frob is equivalent to: \n(defun frob (an-array) \n  (setf (the (signed-byte 5) (aref an-array 1)) 31) \n  (setf (the (signed-byte 5) (aref an-array 2)) 127) \n  (setf (the (signed-byte 5) (aref an-array 3)) \n\t(\\* 2 (the (signed-byte 5) (aref an-array 3)))) \n  (let ((foo 0)) \n    (declare (type (signed-byte 5) foo)) \n    (setf foo (the (signed-byte 5) (aref an-array 0))))) \nGiven an implementation in which *fixnums* are 29 bits but **fixnum** *arrays* are upgraded to signed 32-bit *arrays*, the following could be compiled with all *fixnum* arithmetic: \n(defun bump-counters (counters) \n  (declare (type (array fixnum \\*) bump-counters)) \n  (dotimes (i (length counters)) \n    (incf (aref counters i)))) \n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{term:"declare",children:(0,t.jsx)("b",{children:"declare"})}),", ",(0,t.jsx)(r,{term:"declaim",children:(0,t.jsx)("b",{children:"declaim"})}),", ",(0,t.jsx)(r,{term:"proclaim",children:(0,t.jsx)("b",{children:"proclaim"})})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,t.jsxs)(n.p,{children:["(",(0,t.jsx)(n.em,{children:"typespec {var}"}),"*) is an abbreviation for (type ",(0,t.jsx)(n.em,{children:"typespec {var}"}),"*)."]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(r,{term:"type",children:(0,t.jsx)("b",{children:"type"})})," declaration for the arguments to a function does not necessarily imply anything about the type of the result. The following function is not permitted to be compiled using ",(0,t.jsx)(n.em,{children:"implementation-dependent fixnum"}),"-only arithmetic:"]}),"\n",(0,t.jsx)(n.p,{children:"(defun f (x y) (declare (fixnum x y)) (+ x y))"}),"\n",(0,t.jsxs)(n.p,{children:["To see why, consider (f most-positive-fixnum 1). Common Lisp defines that F must return a ",(0,t.jsx)(n.em,{children:"bignum"})," here, rather than signal an error or produce a mathematically incorrect result. If you have special knowledge such \u201c",(0,t.jsx)(a,{term:"fixnum",children:(0,t.jsx)("i",{children:"fixnum"})})," overflow\u201d cases will not come up, you can declare the result value to be in the ",(0,t.jsx)(a,{term:"fixnum",children:(0,t.jsx)("i",{children:"fixnum"})})," range, enabling some compilers to use more ecient arithmetic:"]}),"\n",(0,t.jsx)(n.p,{children:"(defun f (x y)"}),"\n",(0,t.jsx)(n.p,{children:"(declare (fixnum x y))"}),"\n",(0,t.jsx)(n.p,{children:"(the fixnum (+ x y)))"}),"\n",(0,t.jsx)(n.p,{children:"Note, however, that in the three-argument case, because of the possibility of an implicit Evaluation and"}),"\n",(0,t.jsxs)(n.p,{children:["intermediate value growing too large, the following will not cause ",(0,t.jsx)(n.em,{children:"implementation-dependent fixnum"}),"-only arithmetic to be used:"]}),"\n",(0,t.jsx)(n.p,{children:"(defun f (x y)"}),"\n",(0,t.jsx)(n.p,{children:"(declare (fixnum x y z))"}),"\n",(0,t.jsx)(n.p,{children:"(the fixnum (+ x y z)))"}),"\n",(0,t.jsxs)(n.p,{children:["To see why, consider (f most-positive-fixnum 1 -1). Although the arguments and the result are all ",(0,t.jsx)(a,{term:"fixnum",children:(0,t.jsx)("i",{children:"fixnums"})}),", an intermediate value is not a ",(0,t.jsx)(a,{term:"fixnum",children:(0,t.jsx)("i",{children:"fixnum"})}),". If it is important that ",(0,t.jsx)(n.em,{children:"implementation-dependent fixnum"}),"-only arithmetic be selected in ",(0,t.jsx)(a,{term:"implementation",children:(0,t.jsx)("i",{children:"implementations"})})," that provide it, consider writing something like this instead:"]}),"\n",(0,t.jsx)(n.p,{children:"(defun f (x y)"}),"\n",(0,t.jsx)(n.p,{children:"(declare (fixnum x y z))"}),"\n",(0,t.jsx)(n.p,{children:"(the fixnum (+ (the fixnum (+ x y)) z)))"})]})}function s(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}function l(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const c={title:"type"},d="type",o={id:"chap-3/d-i-dictionary/type_declaration",title:"type",description:"Expanded Reference: type",source:"@site/docs/chap-3/d-i-dictionary/type_declaration.md",sourceDirName:"chap-3/d-i-dictionary",slug:"/chap-3/d-i-dictionary/type_declaration",permalink:"/cl-language-reference/chap-3/d-i-dictionary/type_declaration",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/chap-3/d-i-dictionary/type_declaration.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{title:"type"},sidebar:"tutorialSidebar",previous:{title:"the",permalink:"/cl-language-reference/chap-3/d-i-dictionary/the_special-operator"},next:{title:"4.1 Introduction",permalink:"/cl-language-reference/chap-4/e-b-introduction"}},h={},p=[{value:"Expanded Reference: type",id:"expanded-reference-type",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"type",children:"type"}),"\n","\n","\n",(0,t.jsx)(s,{}),"\n",(0,t.jsx)(n.h2,{id:"expanded-reference-type",children:"Expanded Reference: type"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"(type )\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(x,{...e})}):x(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>s});var t=r(67294);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);