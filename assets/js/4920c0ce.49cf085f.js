"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[36712],{37532:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>c,metadata:()=>l,toc:()=>p});var t=n(85893),i=n(11151);function r(e){const a={em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.strong,{children:"find-symbol"})," is operationally equivalent to ",(0,t.jsx)(a.strong,{children:"intern"}),", except that it never creates a new ",(0,t.jsx)(a.em,{children:"symbol"}),". ",(0,t.jsx)(a.strong,{children:"find-package"})," ",(0,t.jsx)(a.em,{children:"Function"})]}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.strong,{children:"Syntax:"})}),"\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.strong,{children:"find-package"})," ",(0,t.jsx)(a.em,{children:"name \u2192 package"})]}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.strong,{children:"Arguments and Values:"})}),"\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.em,{children:"name"}),"\u2014a ",(0,t.jsx)(a.em,{children:"string designator"})," or a ",(0,t.jsx)(a.em,{children:"package object"}),"."]}),"\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.em,{children:"package"}),"\u2014a ",(0,t.jsx)(a.em,{children:"package object"})," or ",(0,t.jsx)(a.strong,{children:"nil"}),"."]}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(a.p,{children:["If ",(0,t.jsx)(a.em,{children:"name"})," is a ",(0,t.jsx)(a.em,{children:"string designator"})," , ",(0,t.jsx)(a.strong,{children:"find-package"})," locates and returns the ",(0,t.jsx)(a.em,{children:"package"})," whose name or nickname is ",(0,t.jsx)(a.em,{children:"name"}),". This search is case sensitive. If there is no such ",(0,t.jsx)(a.em,{children:"package"}),", ",(0,t.jsx)(a.strong,{children:"find-package"})," returns ",(0,t.jsx)(a.strong,{children:"nil"}),"."]}),"\n",(0,t.jsxs)(a.p,{children:["If ",(0,t.jsx)(a.em,{children:"name"})," is a ",(0,t.jsx)(a.em,{children:"package object"}),", that ",(0,t.jsx)(a.em,{children:"package object"})," is returned."]}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.strong,{children:"Examples:"})}),"\n",(0,t.jsxs)(a.p,{children:["(find-package \u2019common-lisp) ",(0,t.jsx)(a.em,{children:"\u2192"}),' #<PACKAGE "COMMON-LISP">']}),"\n",(0,t.jsxs)(a.p,{children:['(find-package "COMMON-LISP-USER") ',(0,t.jsx)(a.em,{children:"\u2192"}),' #<PACKAGE "COMMON-LISP-USER">']}),"\n",(0,t.jsxs)(a.p,{children:["(find-package \u2019not-there) ",(0,t.jsx)(a.em,{children:"\u2192"})," NIL"]}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.strong,{children:"Affected By:"})}),"\n",(0,t.jsxs)(a.p,{children:["The set of ",(0,t.jsx)(a.em,{children:"packages"})," created by the ",(0,t.jsx)(a.em,{children:"implementation"}),"."]}),"\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.strong,{children:"defpackage"}),", ",(0,t.jsx)(a.strong,{children:"delete-package"}),", ",(0,t.jsx)(a.strong,{children:"make-package"}),", ",(0,t.jsx)(a.strong,{children:"rename-package"})]}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.strong,{children:"See Also:"})}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.strong,{children:"make-package"})})]})}function s(e={}){const{wrapper:a}={...(0,i.a)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}const c={},o="find-symbol** is operationally equivalent to intern, except that it never creates a new symbol. **find-package",l={id:"chap-11/bb-c-dictionary/findsymbolaaaisaoperationallyaequivalentatoaaainternaaaaexceptathataitaneveracreatesaaanewaasymbolaaaaafindpackage",title:"find-symbol** is operationally equivalent to **intern**, except that it never creates a new *symbol*. **find-package",description:"Expanded Reference: find-symbol is operationally equivalent to intern, except that it never creates a new *symbol*. find-package",source:"@site/docs/chap-11/bb-c-dictionary/findsymbolaaaisaoperationallyaequivalentatoaaainternaaaaexceptathataitaneveracreatesaaanewaasymbolaaaaafindpackage.md",sourceDirName:"chap-11/bb-c-dictionary",slug:"/chap-11/bb-c-dictionary/findsymbolaaaisaoperationallyaequivalentatoaaainternaaaaexceptathataitaneveracreatesaaanewaasymbolaaaaafindpackage",permalink:"/cl-language-reference/docs/chap-11/bb-c-dictionary/findsymbolaaaisaoperationallyaequivalentatoaaainternaaaaexceptathataitaneveracreatesaaanewaasymbolaaaaafindpackage",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-11/bb-c-dictionary/findsymbolaaaisaoperationallyaequivalentatoaaainternaaaaexceptathataitaneveracreatesaaanewaasymbolaaaaafindpackage.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"find-symbol",permalink:"/cl-language-reference/docs/chap-11/bb-c-dictionary/findsymbol"},next:{title:"import",permalink:"/cl-language-reference/docs/chap-11/bb-c-dictionary/import"}},d={},p=[{value:"Expanded Reference: find-symbol** is operationally equivalent to <strong>intern</strong>, except that it never creates a new <em>symbol</em>. **find-package",id:"expanded-reference-find-symbol-is-operationally-equivalent-to-intern-except-that-it-never-creates-a-new-symbol-find-package",level:2}];function h(e){const a={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a.h1,{id:"find-symbol-is-operationally-equivalent-to-intern-except-that-it-never-creates-a-new-symbol-find-package",children:["find-symbol** is operationally equivalent to ",(0,t.jsx)(a.strong,{children:"intern"}),", except that it never creates a new ",(0,t.jsx)(a.em,{children:"symbol"}),". **find-package"]}),"\n","\n","\n",(0,t.jsx)(s,{}),"\n",(0,t.jsxs)(a.h2,{id:"expanded-reference-find-symbol-is-operationally-equivalent-to-intern-except-that-it-never-creates-a-new-symbol-find-package",children:["Expanded Reference: find-symbol** is operationally equivalent to ",(0,t.jsx)(a.strong,{children:"intern"}),", except that it never creates a new ",(0,t.jsx)(a.em,{children:"symbol"}),". **find-package"]}),"\n",(0,t.jsx)(a.admonition,{type:"tip",children:(0,t.jsx)(a.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-lisp",children:"(find-symbol** is operationally equivalent to **intern**, except that it never creates a new *symbol*. **find-package )\n"})})]})}function m(e={}){const{wrapper:a}={...(0,i.a)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},11151:(e,a,n)=>{n.d(a,{Z:()=>c,a:()=>s});var t=n(67294);const i={},r=t.createContext(i);function s(e){const a=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:a},e.children)}}}]);