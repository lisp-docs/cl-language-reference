"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[79168],{61598:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>j,frontMatter:()=>d,metadata:()=>o,toc:()=>h});var i=s(85893),r=s(11151);function c(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"t"})," ",(0,i.jsx)(n.em,{children:"System Class"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Class Precedence List:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"t"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["The set of all ",(0,i.jsx)(n.em,{children:"objects"}),". The ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"t"})," is a ",(0,i.jsx)(n.em,{children:"supertype"})," of every ",(0,i.jsx)(n.em,{children:"type"}),", including itself. Every ",(0,i.jsx)(n.em,{children:"object"})," is of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"t"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"satisfies"})," ",(0,i.jsx)(n.em,{children:"Type Specifier"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,i.jsx)(n.p,{children:"Predicating."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:["(satisfies ",(0,i.jsx)(n.em,{children:"predicate-name"}),")"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"predicate-name"}),"\u2014a ",(0,i.jsx)(n.em,{children:"symbol"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["This denotes the set of all ",(0,i.jsx)(n.em,{children:"objects"})," that satisfy the ",(0,i.jsx)(n.em,{children:"predicate predicate-name"}),", which must be a ",(0,i.jsx)(n.em,{children:"symbol"})," whose global ",(0,i.jsx)(n.em,{children:"function"})," definition is a one-argument predicate. A name is required for ",(0,i.jsx)(n.em,{children:"predicate-name"}),"; ",(0,i.jsx)(n.em,{children:"lambda expressions"})," are not allowed. For example, the ",(0,i.jsx)(n.em,{children:"type specifier"})," (and integer (satisfies evenp)) denotes the set of all even integers. The form (typep ",(0,i.jsx)(n.em,{children:"x"})," \u2019(satisfies ",(0,i.jsx)(n.em,{children:"p"}),")) is equivalent to (if (",(0,i.jsx)(n.em,{children:"p x"}),") t nil)."]}),"\n",(0,i.jsxs)(n.p,{children:["The argument is required. The ",(0,i.jsx)(n.em,{children:"symbol"})," ",(0,i.jsx)(n.strong,{children:"*"})," can be the argument, but it denotes itself (the ",(0,i.jsx)(n.em,{children:"symbol"})," ",(0,i.jsx)(n.strong,{children:"*"}),"), and does not represent an unspecified value."]}),"\n",(0,i.jsxs)(n.p,{children:["The symbol ",(0,i.jsx)(n.strong,{children:"satisfies"})," is not valid as a ",(0,i.jsx)(n.em,{children:"type specifier"})," ."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"member"})," ",(0,i.jsx)(n.em,{children:"Type Specifier"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,i.jsx)(n.p,{children:"Combining."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:["(member ",(0,i.jsx)(n.em,{children:"{object}"}),"*)"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"object"}),"\u2014an ",(0,i.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["This denotes the set containing the named ",(0,i.jsx)(n.em,{children:"objects"}),". An ",(0,i.jsx)(n.em,{children:"object"})," is of this ",(0,i.jsx)(n.em,{children:"type"})," if and only if it is ",(0,i.jsx)(n.strong,{children:"eql"})," to one of the specified ",(0,i.jsx)(n.em,{children:"objects"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"type specifiers"})," (member) and ",(0,i.jsx)(n.strong,{children:"nil"})," are equivalent. ",(0,i.jsx)(n.strong,{children:"*"})," can be among the ",(0,i.jsx)(n.em,{children:"objects"}),", but if so it denotes itself (the symbol ",(0,i.jsx)(n.strong,{children:"*"}),") and does not represent an unspecified value. The symbol ",(0,i.jsx)(n.strong,{children:"member"})," is not valid as a ",(0,i.jsx)(n.em,{children:"type specifier"})," ; and, specifically, it is not an abbreviation for either (member) or (member *)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,i.jsxs)(n.p,{children:["the ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"eql"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"not"})," ",(0,i.jsx)(n.em,{children:"Type Specifier"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,i.jsx)(n.p,{children:"Combining."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:["(not ",(0,i.jsx)(n.em,{children:"typespec"}),")"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"typespec"}),"\u2014a ",(0,i.jsx)(n.em,{children:"type specifier"})," ."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["This denotes the set of all ",(0,i.jsx)(n.em,{children:"objects"})," that are not of the ",(0,i.jsx)(n.em,{children:"type typespec"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The argument is required, and cannot be ",(0,i.jsx)(n.strong,{children:"*"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The symbol ",(0,i.jsx)(n.strong,{children:"not"})," is not valid as a ",(0,i.jsx)(n.em,{children:"type specifier"})," ."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"and"})," ",(0,i.jsx)(n.em,{children:"Type Specifier"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,i.jsx)(n.p,{children:"Combining."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:["(and ",(0,i.jsx)(n.em,{children:"{typespec}"}),"*)"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"typespec"}),"\u2014a ",(0,i.jsx)(n.em,{children:"type specifier"})," ."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["This denotes the set of all ",(0,i.jsx)(n.em,{children:"objects"})," of the ",(0,i.jsx)(n.em,{children:"type"})," determined by the intersection of the ",(0,i.jsx)(n.em,{children:"typespecs"}),". ",(0,i.jsx)(n.strong,{children:"*"})," is not permitted as an argument."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"type specifiers"})," (and) and ",(0,i.jsx)(n.strong,{children:"t"})," are equivalent. The symbol ",(0,i.jsx)(n.strong,{children:"and"})," is not valid as a ",(0,i.jsx)(n.em,{children:"type specifier"})," , and, specifically, it is not an abbreviation for (and)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"or"})," ",(0,i.jsx)(n.em,{children:"Type Specifier"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,i.jsx)(n.p,{children:"Combining."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:["(or ",(0,i.jsx)(n.em,{children:"{typespec}"}),"*)"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"typespec"}),"\u2014a ",(0,i.jsx)(n.em,{children:"type specifier"})," ."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["This denotes the set of all ",(0,i.jsx)(n.em,{children:"objects"})," of the ",(0,i.jsx)(n.em,{children:"type"})," determined by the union of the ",(0,i.jsx)(n.em,{children:"typespecs"}),". For example, the ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"list"})," by definition is the same as (or null cons). Also, the value returned by ",(0,i.jsx)(n.strong,{children:"position"})," is an ",(0,i.jsx)(n.em,{children:"object"})," of ",(0,i.jsx)(n.em,{children:"type"})," (or null (integer 0 *)); ",(0,i.jsx)(n.em,{children:"i.e."}),", either ",(0,i.jsx)(n.strong,{children:"nil"})," or a non-negative ",(0,i.jsx)(n.em,{children:"integer"})," ."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"*"})," is not permitted as an argument."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"type specifiers"})," (or) and ",(0,i.jsx)(n.strong,{children:"nil"})," are equivalent. The symbol ",(0,i.jsx)(n.strong,{children:"or"})," is not valid as a ",(0,i.jsx)(n.em,{children:"type specifier"})," ; and, specifically, it is not an abbreviation for (or)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"values"})," ",(0,i.jsx)(n.em,{children:"Type Specifier"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,i.jsx)(n.p,{children:"Specializing."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:["(values ",(0,i.jsx)(n.em,{children:"\u2193value-typespec"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"value-typespec::"}),"=",(0,i.jsx)(n.em,{children:"{typespec}"}),"* [&optional ",(0,i.jsx)(n.em,{children:"{typespec}"}),"*] [&rest ",(0,i.jsx)(n.em,{children:"typespec"}),"] [",(0,i.jsx)(n.strong,{children:"&allow-other-keys"}),"]"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"typespec"}),"\u2014a ",(0,i.jsx)(n.em,{children:"type specifier"})," ."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["This ",(0,i.jsx)(n.em,{children:"type specifier"})," can be used only as the ",(0,i.jsx)(n.em,{children:"value-type"})," in a ",(0,i.jsx)(n.strong,{children:"function"})," ",(0,i.jsx)(n.em,{children:"type specifier"})," or a ",(0,i.jsx)(n.strong,{children:"the"})," ",(0,i.jsx)(n.em,{children:"special form"}),". It is used to specify individual ",(0,i.jsx)(n.em,{children:"types"})," when ",(0,i.jsx)(n.em,{children:"multiple values"})," are involved. The ",(0,i.jsx)(n.strong,{children:"&optional"})," and ",(0,i.jsx)(n.strong,{children:"&rest"})," markers can appear in the ",(0,i.jsx)(n.em,{children:"value-type"})," list; they indicate the parameter list of a ",(0,i.jsx)(n.em,{children:"function"})," that, when given to ",(0,i.jsx)(n.strong,{children:"multiple-value-call"})," along with the values, would correctly receive those values."]}),"\n",(0,i.jsxs)(n.p,{children:["The symbol ",(0,i.jsx)(n.strong,{children:"*"})," may not be among the ",(0,i.jsx)(n.em,{children:"value-types"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The symbol ",(0,i.jsx)(n.strong,{children:"values"})," is not valid as a ",(0,i.jsx)(n.em,{children:"type specifier"})," ; and, specifically, it is not an abbreviation for (values)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"eql"})," ",(0,i.jsx)(n.em,{children:"Type Specifier"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,i.jsx)(n.p,{children:"Combining."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:["(eql ",(0,i.jsx)(n.em,{children:"object"}),")"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"object"}),"\u2014an ",(0,i.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["Represents the ",(0,i.jsx)(n.em,{children:"type"})," of all ",(0,i.jsx)(n.em,{children:"x"})," for which (eql ",(0,i.jsx)(n.em,{children:"object x"}),") is true."]}),"\n",(0,i.jsxs)(n.p,{children:["The argument ",(0,i.jsx)(n.em,{children:"object"})," is required. The ",(0,i.jsx)(n.em,{children:"object"})," can be ",(0,i.jsx)(n.strong,{children:"*"}),", but if so it denotes itself (the symbol ",(0,i.jsx)(n.strong,{children:"*"}),") and does not represent an unspecified value. The ",(0,i.jsx)(n.em,{children:"symbol"})," ",(0,i.jsx)(n.strong,{children:"eql"})," is not valid as an ",(0,i.jsx)(n.em,{children:"atomic type specifier"})," ."]})]})}function t(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}const d={title:"t"},l="t",o={id:"chap-4/e-e-dictionary/t_system-class",title:"t",description:"Expanded Reference: t",source:"@site/docs/chap-4/e-e-dictionary/t_system-class.md",sourceDirName:"chap-4/e-e-dictionary",slug:"/chap-4/e-e-dictionary/t_system-class",permalink:"/cl-language-reference/docs/chap-4/e-e-dictionary/t_system-class",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-4/e-e-dictionary/t_system-class.md",tags:[],version:"current",frontMatter:{title:"t"},sidebar:"tutorialSidebar",previous:{title:"subtypep",permalink:"/cl-language-reference/docs/chap-4/e-e-dictionary/subtypep_function"},next:{title:"type-error-datum, type-error-expected-type",permalink:"/cl-language-reference/docs/chap-4/e-e-dictionary/type-error-datum_type-error-expected-type_function"}},p={},h=[{value:"Expanded Reference: t",id:"expanded-reference-t",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"t",children:"t"}),"\n","\n","\n",(0,i.jsx)(t,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-t",children:"Expanded Reference: t"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(t )\n"})})]})}function j(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>d,a:()=>t});var i=s(67294);const r={},c=i.createContext(r);function t(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);