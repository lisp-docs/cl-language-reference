"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[1229],{67809:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>cn,contentTitle:()=>tn,default:()=>on,frontMatter:()=>sn,metadata:()=>ln,toc:()=>dn});var r=i(85893),s=i(11151);function t(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"format"})," is useful for producing nicely formatted text, producing good-looking messages, and so on. ",(0,r.jsx)(n.strong,{children:"format"})," can generate and return a ",(0,r.jsx)(n.em,{children:"string"})," or output to ",(0,r.jsx)(n.em,{children:"destination"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"control-string"})," argument to ",(0,r.jsx)(n.strong,{children:"format"})," is actually a ",(0,r.jsx)(n.em,{children:"format control"}),". That is, it can be either a ",(0,r.jsx)(n.em,{children:"format string"})," or a ",(0,r.jsx)(n.em,{children:"function"}),", for example a ",(0,r.jsx)(n.em,{children:"function"})," returned by the ",(0,r.jsx)(n.strong,{children:"formatter"})," ",(0,r.jsx)(n.em,{children:"macro"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If it is a ",(0,r.jsx)(n.em,{children:"function"}),", the ",(0,r.jsx)(n.em,{children:"function"})," is called with the appropriate output stream as its first argument and the data arguments to ",(0,r.jsx)(n.strong,{children:"format"})," as its remaining arguments. The function should perform whatever output is necessary and return the unused tail of the arguments (if any)."]}),"\n",(0,r.jsxs)(n.p,{children:["The compilation process performed by ",(0,r.jsx)(n.strong,{children:"formatter"})," produces a ",(0,r.jsx)(n.em,{children:"function"})," that would do with its ",(0,r.jsx)(n.em,{children:"arguments"})," as the ",(0,r.jsx)(n.strong,{children:"format"})," interpreter would do with those ",(0,r.jsx)(n.em,{children:"arguments"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The remainder of this section describes what happens if the ",(0,r.jsx)(n.em,{children:"control-string"})," is a ",(0,r.jsx)(n.em,{children:"format string"}),". ",(0,r.jsx)(n.em,{children:"Control-string"})," is composed of simple text (",(0,r.jsx)(n.em,{children:"characters"}),") and embedded directives."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"format"})," writes the simple text as is; each embedded directive specifies further text output that is to appear at the corresponding point within the simple text. Most directives use one or more elements of ",(0,r.jsx)(n.em,{children:"args"})," to create their output."]}),"\n",(0,r.jsxs)(n.p,{children:["A directive consists of a ",(0,r.jsx)(n.em,{children:"tilde"}),", optional prefix parameters separated by commas, optional ",(0,r.jsx)(n.em,{children:"colon"})," and ",(0,r.jsx)(n.em,{children:"at-sign"})," modifiers, and a single character indicating what kind of directive this is. There is no required ordering between the ",(0,r.jsx)(n.em,{children:"at-sign"})," and ",(0,r.jsx)(n.em,{children:"colon"})," modifier. The ",(0,r.jsx)(n.em,{children:"case"})," of the directive character is ignored. Prefix parameters are notated as signed (sign is optional) decimal numbers, or as a ",(0,r.jsx)(n.em,{children:"single-quote"})," followed by a character. For example, ~5,\u20190d can be used to print an ",(0,r.jsx)(n.em,{children:"integer"})," in decimal radix in five columns with leading zeros, or ~5,\u2019*d to get leading asterisks."]}),"\n",(0,r.jsxs)(n.p,{children:["In place of a prefix parameter to a directive, V (or v) can be used. In this case, ",(0,r.jsx)(n.strong,{children:"format"})," takes an argument from ",(0,r.jsx)(n.em,{children:"args"})," as a parameter to the directive. The argument should be an ",(0,r.jsx)(n.em,{children:"integer"})," or ",(0,r.jsx)(n.em,{children:"character"})," . If the ",(0,r.jsx)(n.em,{children:"arg"})," used by a V parameter is ",(0,r.jsx)(n.strong,{children:"nil"}),", the effect is as if the parameter had been"]}),"\n",(0,r.jsxs)(n.p,{children:["omitted. # can be used in place of a prefix parameter; it represents the number of ",(0,r.jsx)(n.em,{children:"args"})," remaining to be processed. When used within a recursive format, in the context of ~? or ~{, the # prefix parameter represents the number of ",(0,r.jsx)(n.em,{children:"format arguments"})," remaining within the recursive call."]}),"\n",(0,r.jsxs)(n.p,{children:["Examples of ",(0,r.jsx)(n.em,{children:"format strings"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:["|",(0,r.jsxs)("p",{children:['"~S" ;This is an S directive with no parameters or modifiers. "~3,-4:@s" ;This is an S directive with two parameters, 3 and -4, ; and both the ',(0,r.jsx)(n.em,{children:"colon"})," and ",(0,r.jsx)(n.em,{children:"at-sign"})," flags. "]}),(0,r.jsx)("p",{children:'"~,+4S" ;Here the first prefix parameter is omitted and takes ; on its default value, while the second parameter is 4.'}),"|"]}),"\n",(0,r.jsx)(n.p,{children:"| :-: |"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Figure 22\u20136. Examples of format control strings"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"format"})," sends the output to ",(0,r.jsx)(n.em,{children:"destination"}),". If ",(0,r.jsx)(n.em,{children:"destination"})," is ",(0,r.jsx)(n.strong,{children:"nil"}),", ",(0,r.jsx)(n.strong,{children:"format"})," creates and returns a ",(0,r.jsx)(n.em,{children:"string"})]}),"\n",(0,r.jsxs)(n.p,{children:["containing the output from ",(0,r.jsx)(n.em,{children:"control-string"}),". If ",(0,r.jsx)(n.em,{children:"destination"})," is ",(0,r.jsx)(n.em,{children:"non-nil"}),", it must be a ",(0,r.jsx)(n.em,{children:"string"})," with a ",(0,r.jsx)(n.em,{children:"fill pointer"})," , a ",(0,r.jsx)(n.em,{children:"stream"}),", or the symbol ",(0,r.jsx)(n.strong,{children:"t"}),". If ",(0,r.jsx)(n.em,{children:"destination"})," is a ",(0,r.jsx)(n.em,{children:"string"})," with a ",(0,r.jsx)(n.em,{children:"fill pointer"})," , the output is added to the end of the ",(0,r.jsx)(n.em,{children:"string"}),". If ",(0,r.jsx)(n.em,{children:"destination"})," is a ",(0,r.jsx)(n.em,{children:"stream"}),", the output is sent to that ",(0,r.jsx)(n.em,{children:"stream"}),". If ",(0,r.jsx)(n.em,{children:"destination"})," is ",(0,r.jsx)(n.strong,{children:"t"}),", the output is sent to ",(0,r.jsx)(n.em,{children:"standard output"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["In the description of the directives that follows, the term ",(0,r.jsx)(n.em,{children:"arg"})," in general refers to the next item of the set of ",(0,r.jsx)(n.em,{children:"args"})," to be processed. The word or phrase at the beginning of each description is a mnemonic for the directive. ",(0,r.jsx)(n.strong,{children:"format"})," directives do not bind any of the printer control variables (",(0,r.jsx)(n.strong,{children:"*print-...*"}),") except as specified in the following descriptions. Implementations may specify the binding of new, implementation-specific printer control variables for each ",(0,r.jsx)(n.strong,{children:"format"})," directive, but they may neither bind any standard printer control variables not specified in description of a ",(0,r.jsx)(n.strong,{children:"format"})," directive nor fail to bind any standard printer control variables as specified in the description."]})]})}function l(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}function c(e){return(0,r.jsx)(r.Fragment,{})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c()}function h(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The next ",(0,r.jsx)(n.em,{children:"arg"})," should be a ",(0,r.jsx)(n.em,{children:"character"})," ; it is printed according to the modifier flags."]}),"\n",(0,r.jsxs)(n.p,{children:["~C prints the ",(0,r.jsx)(n.em,{children:"character"})," as if by using ",(0,r.jsx)(n.strong,{children:"write-char"})," if it is a ",(0,r.jsx)(n.em,{children:"simple character"})," . ",(0,r.jsx)(n.em,{children:"Characters"})," that are not ",(0,r.jsx)(n.em,{children:"simple"})," are not necessarily printed as if by ",(0,r.jsx)(n.strong,{children:"write-char"}),", but are displayed in an ",(0,r.jsx)(n.em,{children:"implementation-defined"}),", abbreviated format. For example,"]}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~C" #\\A) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "A"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~C" #\\Space) ',(0,r.jsx)(n.em,{children:"\u2192"}),' " "']}),"\n",(0,r.jsxs)(n.p,{children:["~",":C"," is the same as ~C for ",(0,r.jsx)(n.em,{children:"printing characters"}),", but other ",(0,r.jsx)(n.em,{children:"characters"})," are \u201cspelled out.\u201d The intent is that this is a \u201cpretty\u201d format for printing characters. For ",(0,r.jsx)(n.em,{children:"simple characters"})," that are not ",(0,r.jsx)(n.em,{children:"printing"}),", what is spelled out is the ",(0,r.jsx)(n.em,{children:"name"})," of the ",(0,r.jsx)(n.em,{children:"character"})," (see ",(0,r.jsx)(n.strong,{children:"char-name"}),"). For ",(0,r.jsx)(n.em,{children:"characters"})," that are not ",(0,r.jsx)(n.em,{children:"simple"})," and not ",(0,r.jsx)(n.em,{children:"printing"}),", what is spelled out is ",(0,r.jsx)(n.em,{children:"implementation-defined"}),". For example,"]}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~',":C",'" #\\A) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "A"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~',":C",'" #\\Space) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "Space"']}),"\n",(0,r.jsx)(n.p,{children:';; This next example assumes an implementation-defined "Control" attribute.'}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~',":C",'" #\\Control-Space)']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "Control-Space"']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("i",{children:[(0,r.jsx)("sup",{children:"or"}),"\u2192"]}),' "c-Space"']}),"\n",(0,r.jsxs)(n.p,{children:["~:@C prints what ~",":C"," would, and then if the ",(0,r.jsx)(n.em,{children:"character"})," requires unusual shift keys on the keyboard to type it, this fact is mentioned. For example,"]}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~:@C" #\\Control-Partial) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "Control-',(0,r.jsx)(n.em,{children:"\u2202"}),' (Top-F)"']}),"\n",(0,r.jsx)(n.p,{children:"This is the format used for telling the user about a key he is expected to type, in prompts, for instance. The precise output may depend not only on the implementation, but on the particular I/O devices in use."}),"\n",(0,r.jsxs)(n.p,{children:["~@C prints the ",(0,r.jsx)(n.em,{children:"character"})," in a way that the ",(0,r.jsx)(n.em,{children:"Lisp reader"})," can understand, using #\\ syntax. ~@C binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.strong,{children:"t"}),"."]})]})}function o(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}function a(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(n.p,{children:["This outputs a #\\Newline character, thereby terminating the current output line and beginning a new one. ~",(0,r.jsx)(n.em,{children:"n"}),"% outputs ",(0,r.jsx)(n.em,{children:"n"})," newlines. No ",(0,r.jsx)(n.em,{children:"arg"})," is used."]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}function x(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(n.p,{children:["Unless it can be determined that the output stream is already at the beginning of a line, this outputs a newline. ~",(0,r.jsx)(n.em,{children:"n"}),"& calls ",(0,r.jsx)(n.strong,{children:"fresh-line"})," and then outputs ",(0,r.jsx)(n.em,{children:"n\u2212"}),"1 newlines. ~0& does nothing."]})}function j(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}function m(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(n.p,{children:["This outputs a page separator character, if possible. ~",(0,r.jsx)(n.em,{children:"n"}),"| does this ",(0,r.jsx)(n.em,{children:"n"})," times."]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}function f(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(n.p,{children:["This outputs a ",(0,r.jsx)(n.em,{children:"tilde"}),". ~",(0,r.jsx)(n.em,{children:"n"}),"~ outputs ",(0,r.jsx)(n.em,{children:"n"})," tildes."]})}function g(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}function b(e){return(0,r.jsx)(r.Fragment,{})}function y(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(b,{...e})}):b()}function w(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["~",(0,r.jsx)(n.em,{children:"n"}),"R prints ",(0,r.jsx)(n.em,{children:"arg"})," in radix ",(0,r.jsx)(n.em,{children:"n"}),". The modifier flags and any remaining parameters are used as for the ~D directive. ~D is the same as ~10R. The full form is ~",(0,r.jsx)(n.em,{children:"radix"})," ,",(0,r.jsx)(n.em,{children:"mincol"}),",",(0,r.jsx)(n.em,{children:"padchar"}),",",(0,r.jsx)(n.em,{children:"commachar"}),",",(0,r.jsx)(n.em,{children:"comma-interval"}),"R."]}),"\n",(0,r.jsxs)(n.p,{children:["If no prefix parameters are given to ~R, then a different interpretation is given. The argument should be an ",(0,r.jsx)(n.em,{children:"integer"})," . For example, if ",(0,r.jsx)(n.em,{children:"arg"})," is 4:"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," ~R prints ",(0,r.jsx)(n.em,{children:"arg"})," as a cardinal English number: four."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," ~",":R"," prints ",(0,r.jsx)(n.em,{children:"arg"})," as an ordinal English number: fourth."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," ~@R prints ",(0,r.jsx)(n.em,{children:"arg"})," as a Roman numeral: IV."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," ~:@R prints ",(0,r.jsx)(n.em,{children:"arg"})," as an old Roman numeral: IIII."]}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~\u201e\u2019 ,4',":B",'" 13) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "1101"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~\u201e\u2019 ,4',":B",'" 17) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "1 0001"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~19,0,\u2019 ,4',":B",'" 3333) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "0000 1101 0000 0101"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~3\u201e,\u2019 ,2',":R",'" 17) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "1 22"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~\u201e\u2019|,2',":D",'" #xFFFF) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "6|55|35"']}),"\n",(0,r.jsxs)(n.p,{children:["If and only if the first parameter, ",(0,r.jsx)(n.em,{children:"n"}),", is supplied, ~R binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.em,{children:"false"}),", ",(0,r.jsx)(n.strong,{children:"*print-radix*"})," to ",(0,r.jsx)(n.em,{children:"false"}),", ",(0,r.jsx)(n.strong,{children:"*print-base*"})," to ",(0,r.jsx)(n.em,{children:"n"}),", and ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," to ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If and only if no parameters are supplied, ~R binds ",(0,r.jsx)(n.strong,{children:"*print-base*"})," to 10."]})]})}function v(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(w,{...e})}):w(e)}function T(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.em,{children:"arg"}),", which should be an ",(0,r.jsx)(n.em,{children:"integer"})," , is printed in decimal radix. ~D will never put a decimal point after the number."]}),"\n",(0,r.jsxs)(n.p,{children:["~",(0,r.jsx)(n.em,{children:"mincol"}),"D uses a column width of ",(0,r.jsx)(n.em,{children:"mincol"}),"; spaces are inserted on the left if the number requires fewer than ",(0,r.jsx)(n.em,{children:"mincol"})," columns for its digits and sign. If the number doesn\u2019t fit in ",(0,r.jsx)(n.em,{children:"mincol"})," columns, additional columns are used as needed."]}),"\n",(0,r.jsxs)(n.p,{children:["~",(0,r.jsx)(n.em,{children:"mincol"}),",",(0,r.jsx)(n.em,{children:"padchar"}),"D uses ",(0,r.jsx)(n.em,{children:"padchar"})," as the pad character instead of space."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"arg"})," is not an ",(0,r.jsx)(n.em,{children:"integer"})," , it is printed in ~A format and decimal base."]}),"\n",(0,r.jsxs)(n.p,{children:["The @ modifier causes the number\u2019s sign to be printed always; the default is to print it only if the number is negative. The : modifier causes commas to be printed between groups of digits; ",(0,r.jsx)(n.em,{children:"commachar"})," may be used to change the character used as the comma. ",(0,r.jsx)(n.em,{children:"comma-interval"})," must be an ",(0,r.jsx)(n.em,{children:"integer"})," and defaults to 3. When the : modifier is given to any of these directives, the ",(0,r.jsx)(n.em,{children:"commachar"})," is printed between groups of ",(0,r.jsx)(n.em,{children:"comma-interval"})," digits."]}),"\n",(0,r.jsxs)(n.p,{children:["Thus the most general form of ~D is ~",(0,r.jsx)(n.em,{children:"mincol"}),",",(0,r.jsx)(n.em,{children:"padchar"}),",",(0,r.jsx)(n.em,{children:"commachar"}),",",(0,r.jsx)(n.em,{children:"comma-interval"}),"D."]}),"\n",(0,r.jsxs)(n.p,{children:["~D binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.em,{children:"false"}),", ",(0,r.jsx)(n.strong,{children:"*print-radix*"})," to ",(0,r.jsx)(n.em,{children:"false"}),", ",(0,r.jsx)(n.strong,{children:"*print-base*"})," to 10, and ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," to ",(0,r.jsx)(n.em,{children:"false"}),"."]})]})}function I(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(T,{...e})}):T(e)}function A(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["This is just like ~D but prints in binary radix (radix 2) instead of decimal. The full form is therefore ~",(0,r.jsx)(n.em,{children:"mincol"}),",",(0,r.jsx)(n.em,{children:"padchar"}),",",(0,r.jsx)(n.em,{children:"commachar"}),",",(0,r.jsx)(n.em,{children:"comma-interval"}),"B."]}),"\n",(0,r.jsxs)(n.p,{children:["~B binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.em,{children:"false"}),", ",(0,r.jsx)(n.strong,{children:"*print-radix*"})," to ",(0,r.jsx)(n.em,{children:"false"}),", ",(0,r.jsx)(n.strong,{children:"*print-base*"})," to 2, and ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," to ",(0,r.jsx)(n.em,{children:"false"}),"."]})]})}function k(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(A,{...e})}):A(e)}function S(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["This is just like ~D but prints in octal radix (radix 8) instead of decimal. The full form is therefore ~",(0,r.jsx)(n.em,{children:"mincol"}),",",(0,r.jsx)(n.em,{children:"padchar"}),",",(0,r.jsx)(n.em,{children:"commachar"}),",",(0,r.jsx)(n.em,{children:"comma-interval"}),"O."]}),"\n",(0,r.jsxs)(n.p,{children:["~O binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.em,{children:"false"}),", ",(0,r.jsx)(n.strong,{children:"*print-radix*"})," to ",(0,r.jsx)(n.em,{children:"false"}),", ",(0,r.jsx)(n.strong,{children:"*print-base*"})," to 8, and ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," to ",(0,r.jsx)(n.em,{children:"false"}),"."]})]})}function F(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(S,{...e})}):S(e)}function E(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["This is just like ~D but prints in hexadecimal radix (radix 16) instead of decimal. The full form is therefore ~",(0,r.jsx)(n.em,{children:"mincol"}),",",(0,r.jsx)(n.em,{children:"padchar"}),",",(0,r.jsx)(n.em,{children:"commachar"}),",",(0,r.jsx)(n.em,{children:"comma-interval"}),"X."]}),"\n",(0,r.jsxs)(n.p,{children:["~X binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.em,{children:"false"}),", ",(0,r.jsx)(n.strong,{children:"*print-radix*"})," to ",(0,r.jsx)(n.em,{children:"false"}),", ",(0,r.jsx)(n.strong,{children:"*print-base*"})," to 16, and ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," to ",(0,r.jsx)(n.em,{children:"false"}),"."]})]})}function O(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(E,{...e})}):E(e)}function D(e){return(0,r.jsx)(r.Fragment,{})}function L(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(D,{...e})}):D()}function R(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The next ",(0,r.jsx)(n.em,{children:"arg"})," is printed as a ",(0,r.jsx)(n.em,{children:"float"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The full form is ~",(0,r.jsx)(n.em,{children:"w"}),",",(0,r.jsx)(n.em,{children:"d"}),",",(0,r.jsx)(n.em,{children:"k"}),",",(0,r.jsx)(n.em,{children:"overflowchar"}),",",(0,r.jsx)(n.em,{children:"padchar"}),"F. The parameter ",(0,r.jsx)(n.em,{children:"w"})," is the width of the field to be printed; ",(0,r.jsx)(n.em,{children:"d"})," is the number of digits to print after the decimal point; ",(0,r.jsx)(n.em,{children:"k"})," is a scale factor that defaults to zero."]}),"\n",(0,r.jsxs)(n.p,{children:["Exactly ",(0,r.jsx)("i",{children:"w"})," characters will be output. First, leading copies of the character ",(0,r.jsx)("i",{children:"padchar"})," (which defaults to a space) are printed, if necessary, to pad the field on the left. If the ",(0,r.jsx)("i",{children:"arg"})," is negative, then a minus sign is printed; if the ",(0,r.jsx)("i",{children:"arg"})," is not negative, then a plus sign is printed if and only if the @ modifier was supplied. Then a sequence of digits, containing a single embedded decimal point, is printed; this represents the magnitude of the value of ",(0,r.jsx)("i",{children:"arg"})," times 10",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"k"})}),", rounded to ",(0,r.jsx)("i",{children:"d"})," fractional digits. When rounding up and rounding down would produce printed values equidistant from the scaled value of ",(0,r.jsx)("i",{children:"arg"}),", then the implementation is free to use either one. For example, printing the argument 6.375 using the format ~4,2F may correctly produce either 6.37 or 6.38. Leading zeros are not permitted, except that a single zero digit is output before the decimal point if the printed value is less than one, and this single zero digit is not output at all if ",(0,r.jsx)("i",{children:"w"}),"=",(0,r.jsx)("i",{children:"d"}),"+1."]}),"\n",(0,r.jsxs)(n.p,{children:["If it is impossible to print the value in the required format in a field of width ",(0,r.jsx)(n.em,{children:"w"}),", then one of two actions is taken. If the parameter ",(0,r.jsx)(n.em,{children:"overflowchar"})," is supplied, then ",(0,r.jsx)(n.em,{children:"w"})," copies of that parameter are printed instead of the scaled value of ",(0,r.jsx)(n.em,{children:"arg"}),". If the ",(0,r.jsx)(n.em,{children:"overflowchar"})," parameter is omitted, then the scaled value is printed using more than ",(0,r.jsx)(n.em,{children:"w"})," characters, as many more as may be needed."]}),"\n",(0,r.jsxs)(n.p,{children:["If the ",(0,r.jsx)(n.em,{children:"w"})," parameter is omitted, then the field is of variable width. In effect, a value is chosen for ",(0,r.jsx)(n.em,{children:"w"})," in such a way that no leading pad characters need to be printed and exactly ",(0,r.jsx)(n.em,{children:"d"})," characters will follow the decimal point. For example, the directive ~,2F will print exactly two digits after the decimal point and as many as necessary before the decimal point."]}),"\n",(0,r.jsxs)(n.p,{children:["If the parameter ",(0,r.jsx)(n.em,{children:"d"})," is omitted, then there is no constraint on the number of digits to appear after the decimal point. A value is chosen for ",(0,r.jsx)(n.em,{children:"d"})," in such a way that as many digits as possible may be printed subject to the width constraint imposed by the parameter ",(0,r.jsx)(n.em,{children:"w"})," and the constraint that no"]}),"\n",(0,r.jsx)(n.p,{children:"trailing zero digits may appear in the fraction, except that if the fraction to be printed is zero, then a single zero digit should appear after the decimal point if permitted by the width constraint."}),"\n",(0,r.jsxs)(n.p,{children:["If both ",(0,r.jsx)("i",{children:"w"})," and ",(0,r.jsx)("i",{children:"d"})," are omitted, then the effect is to print the value using ordinary free-format output; ",(0,r.jsx)("b",{children:"prin1"})," uses this format for any number whose magnitude is either zero or between 10",(0,r.jsxs)("sup",{children:[(0,r.jsx)("i",{children:"\u2212"}),"3"]}),"(inclusive) and 10",(0,r.jsx)("sup",{children:"7"}),"(exclusive)."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"w"})," is omitted, then if the magnitude of ",(0,r.jsx)(n.em,{children:"arg"})," is so large (or, if ",(0,r.jsx)(n.em,{children:"d"})," is also omitted, so small) that more than 100 digits would have to be printed, then an implementation is free, at its discretion, to print the number using exponential notation instead, as if by the directive ~E (with all parameters to ~E defaulted, not taking their values from the ~F directive)."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"arg"})," is a ",(0,r.jsx)(n.em,{children:"rational"})," number, then it is coerced to be a ",(0,r.jsx)(n.em,{children:"single float"})," and then printed. Alternatively, an implementation is permitted to process a ",(0,r.jsx)(n.em,{children:"rational"})," number by any other method that has essentially the same behavior but avoids loss of precision or overflow because of the coercion. If ",(0,r.jsx)(n.em,{children:"w"})," and ",(0,r.jsx)(n.em,{children:"d"})," are not supplied and the number has no exact decimal representation, for example 1/3, some precision cutoff must be chosen by the implementation since only a finite number of digits may be printed."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"arg"})," is a ",(0,r.jsx)(n.em,{children:"complex"})," number or some non-numeric ",(0,r.jsx)(n.em,{children:"object"}),", then it is printed using the format directive ~",(0,r.jsx)(n.em,{children:"w"}),"D, thereby printing it in decimal radix and a minimum field width of ",(0,r.jsx)(n.em,{children:"w"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["~F binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.em,{children:"false"})," and ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," to ",(0,r.jsx)(n.em,{children:"false"}),"."]})]})}function q(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(R,{...e})}):R(e)}function P(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The next ",(0,r.jsx)(n.em,{children:"arg"})," is printed as a ",(0,r.jsx)(n.em,{children:"float"})," in exponential notation."]}),"\n",(0,r.jsxs)(n.p,{children:["The full form is ~",(0,r.jsx)(n.em,{children:"w"}),",",(0,r.jsx)(n.em,{children:"d"}),",",(0,r.jsx)(n.em,{children:"e"}),",",(0,r.jsx)(n.em,{children:"k"}),",",(0,r.jsx)(n.em,{children:"overflowchar"}),",",(0,r.jsx)(n.em,{children:"padchar"}),",",(0,r.jsx)(n.em,{children:"exponentchar"}),"E. The parameter ",(0,r.jsx)(n.em,{children:"w"})," is the width of the field to be printed; ",(0,r.jsx)(n.em,{children:"d"})," is the number of digits to print after the decimal point; ",(0,r.jsx)(n.em,{children:"e"})," is the number of digits to use when printing the exponent; ",(0,r.jsx)(n.em,{children:"k"})," is a scale factor that defaults to one (not zero)."]}),"\n",(0,r.jsxs)(n.p,{children:["Exactly ",(0,r.jsx)(n.em,{children:"w"})," characters will be output. First, leading copies of the character ",(0,r.jsx)(n.em,{children:"padchar"})," (which defaults to a space) are printed, if necessary, to pad the field on the left. If the ",(0,r.jsx)(n.em,{children:"arg"})," is negative, then a minus sign is printed; if the ",(0,r.jsx)(n.em,{children:"arg"})," is not negative, then a plus sign is printed if and only if the @ modifier was supplied. Then a sequence of digits containing a single embedded decimal point is printed. The form of this sequence of digits depends on the scale factor ",(0,r.jsx)(n.em,{children:"k"}),". If ",(0,r.jsx)(n.em,{children:"k"})," is zero, then ",(0,r.jsx)(n.em,{children:"d"})," digits are printed after the decimal point, and a single zero digit appears before the decimal point if the total field width will permit it. If ",(0,r.jsx)(n.em,{children:"k"})," is positive, then it must be strictly less than ",(0,r.jsx)(n.em,{children:"d"}),"+2; ",(0,r.jsx)(n.em,{children:"k"})," significant digits are printed before the decimal point, and ",(0,r.jsx)(n.em,{children:"d\u2212k"}),"+1 digits are printed after the decimal point. If ",(0,r.jsx)(n.em,{children:"k"})," is negative, then it must be strictly greater than ",(0,r.jsx)(n.em,{children:"\u2212d"}),"; a single zero digit appears before the decimal point if the total field width will permit it, and after the decimal point are printed first ",(0,r.jsx)(n.em,{children:"\u2212k"})," zeros and then ",(0,r.jsx)(n.em,{children:"d"}),"+",(0,r.jsx)(n.em,{children:"k"})," significant digits. The printed fraction must be properly rounded. When rounding up and rounding down would produce printed values equidistant from the scaled value of ",(0,r.jsx)(n.em,{children:"arg"}),", then the implementation is free to use either one. For example, printing the argument 637.5 using the format ~8,2E may correctly produce either 6.37E+2 or 6.38E+2."]}),"\n",(0,r.jsxs)(n.p,{children:["Following the digit sequence, the exponent is printed. First the character parameter ",(0,r.jsx)(n.em,{children:"exponentchar"})," is printed; if this parameter is omitted, then the ",(0,r.jsx)(n.em,{children:"exponent marker"})," that ",(0,r.jsx)(n.strong,{children:"prin1"})," would use is printed, as determined from the type of the ",(0,r.jsx)(n.em,{children:"float"})," and the current value of ",(0,r.jsx)(n.strong,{children:"*read-default-float-format*"}),". Next, either a plus sign or a minus sign is printed, followed by ",(0,r.jsx)(n.em,{children:"e"})," digits representing the power of ten by which the printed fraction must be multiplied to properly represent the rounded value of ",(0,r.jsx)(n.em,{children:"arg"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If it is impossible to print the value in the required format in a field of width ",(0,r.jsx)(n.em,{children:"w"}),", possibly because ",(0,r.jsx)(n.em,{children:"k"})," is too large or too small or because the exponent cannot be printed in ",(0,r.jsx)(n.em,{children:"e"})," character positions, then one of two actions is taken. If the parameter ",(0,r.jsx)(n.em,{children:"overflowchar"})," is supplied, then ",(0,r.jsx)(n.em,{children:"w"})," copies of that parameter are printed instead of the scaled value of ",(0,r.jsx)(n.em,{children:"arg"}),". If the ",(0,r.jsx)(n.em,{children:"overflowchar"})," parameter is omitted, then the scaled value is printed using more than ",(0,r.jsx)(n.em,{children:"w"})," characters, as many more as may be needed; if the problem is that ",(0,r.jsx)(n.em,{children:"d"})," is too small for the supplied ",(0,r.jsx)(n.em,{children:"k"})," or that ",(0,r.jsx)(n.em,{children:"e"})," is too small, then a larger value is used for ",(0,r.jsx)(n.em,{children:"d"})," or ",(0,r.jsx)(n.em,{children:"e"})," as may be needed."]}),"\n",(0,r.jsxs)(n.p,{children:["If the ",(0,r.jsx)(n.em,{children:"w"})," parameter is omitted, then the field is of variable width. In effect a value is chosen for ",(0,r.jsx)(n.em,{children:"w"})," in such a way that no leading pad characters need to be printed."]}),"\n",(0,r.jsxs)(n.p,{children:["If the parameter ",(0,r.jsx)(n.em,{children:"d"})," is omitted, then there is no constraint on the number of digits to appear. A value is chosen for ",(0,r.jsx)(n.em,{children:"d"})," in such a way that as many digits as possible may be printed subject to the width constraint imposed by the parameter ",(0,r.jsx)(n.em,{children:"w"}),", the constraint of the scale factor ",(0,r.jsx)(n.em,{children:"k"}),", and the constraint that no trailing zero digits may appear in the fraction, except that if the fraction to be printed is zero then a single zero digit should appear after the decimal point."]}),"\n",(0,r.jsxs)(n.p,{children:["If the parameter ",(0,r.jsx)(n.em,{children:"e"})," is omitted, then the exponent is printed using the smallest number of digits necessary to represent its value."]}),"\n",(0,r.jsxs)(n.p,{children:["If all of ",(0,r.jsx)("i",{children:"w"}),", ",(0,r.jsx)("i",{children:"d"}),", and ",(0,r.jsx)("i",{children:"e"})," are omitted, then the effect is to print the value using ordinary free-format exponential-notation output; ",(0,r.jsx)("b",{children:"prin1"})," uses a similar format for any non-zero number whose magnitude is less than 10",(0,r.jsxs)("sup",{children:[(0,r.jsx)("i",{children:"\u2212"}),"3"]})," or greater than or equal to 10",(0,r.jsx)("sup",{children:"7"}),". The only difference is that the ~E directive always prints a plus or minus sign in front of the exponent, while ",(0,r.jsx)("b",{children:"prin1"})," omits the plus sign if the exponent is non-negative."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"arg"})," is a ",(0,r.jsx)(n.em,{children:"rational"})," number, then it is coerced to be a ",(0,r.jsx)(n.em,{children:"single float"})," and then printed. Alternatively, an implementation is permitted to process a ",(0,r.jsx)(n.em,{children:"rational"})," number by any other method that has essentially the same behavior but avoids loss of precision or overflow because of the coercion. If ",(0,r.jsx)(n.em,{children:"w"})," and ",(0,r.jsx)(n.em,{children:"d"})," are unsupplied and the number has no exact decimal representation, for example 1/3, some precision cutoff must be chosen by the implementation since only a finite number of digits may be printed."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"arg"})," is a ",(0,r.jsx)(n.em,{children:"complex"})," number or some non-numeric ",(0,r.jsx)(n.em,{children:"object"}),", then it is printed using the format directive ~",(0,r.jsx)(n.em,{children:"w"}),"D, thereby printing it in decimal radix and a minimum field width of ",(0,r.jsx)(n.em,{children:"w"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["~E binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.em,{children:"false"})," and ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," to ",(0,r.jsx)(n.em,{children:"false"}),"."]})]})}function z(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(P,{...e})}):P(e)}function M(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The next ",(0,r.jsx)(n.em,{children:"arg"})," is printed as a ",(0,r.jsx)(n.em,{children:"float"})," in either fixed-format or exponential notation as appropriate."]}),"\n",(0,r.jsxs)(n.p,{children:["The full form is ~",(0,r.jsx)("i",{children:"w"}),",",(0,r.jsx)("i",{children:"d"}),",",(0,r.jsx)("i",{children:"e"}),",",(0,r.jsx)("i",{children:"k"}),",",(0,r.jsx)("i",{children:"overflowchar"}),",",(0,r.jsx)("i",{children:"padchar"}),",",(0,r.jsx)("i",{children:"exponentchar"}),"G. The format in which to print ",(0,r.jsx)("i",{children:"arg"})," depends on the magnitude (absolute value) of the ",(0,r.jsx)("i",{children:"arg"}),". Let ",(0,r.jsx)("i",{children:"n"})," be an integer such that 10",(0,r.jsxs)("sup",{children:[(0,r.jsx)("i",{children:"n\u2212"}),"1"]})," ",(0,r.jsx)("i",{children:"\u2264 |arg|"})," < 10",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"n"})}),". Let ",(0,r.jsx)("i",{children:"ee"})," equal ",(0,r.jsx)("i",{children:"e"}),"+2, or 4 if ",(0,r.jsx)("i",{children:"e"})," is omitted. Let ",(0,r.jsx)("i",{children:"ww"})," equal ",(0,r.jsx)("i",{children:"w\u2212ee"}),", or ",(0,r.jsx)("b",{children:"nil"})," if ",(0,r.jsx)("i",{children:"w"})," is omitted. If ",(0,r.jsx)("i",{children:"d"})," is omitted, first let ",(0,r.jsx)("i",{children:"q"})," be the number of digits needed to print ",(0,r.jsx)("i",{children:"arg"})," with no loss of information and without leading or trailing zeros; then let ",(0,r.jsx)("i",{children:"d"})," equal (max ",(0,r.jsx)("i",{children:"q"})," (min ",(0,r.jsx)("i",{children:"n"})," 7)). Let ",(0,r.jsx)("i",{children:"dd"})," equal ",(0,r.jsx)("i",{children:"d\u2212n"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If 0 ",(0,r.jsx)(n.em,{children:"\u2264 dd \u2264 d"}),", then ",(0,r.jsx)(n.em,{children:"arg"})," is printed as if by the format directives"]}),"\n",(0,r.jsxs)(n.p,{children:["~",(0,r.jsx)(n.em,{children:"ww"}),",",(0,r.jsx)(n.em,{children:"dd"}),"\u201e",(0,r.jsx)(n.em,{children:"overflowchar"}),",",(0,r.jsx)(n.em,{children:"padchar"}),"F~",(0,r.jsx)(n.em,{children:"ee"}),"@T"]}),"\n",(0,r.jsxs)(n.p,{children:["Note that the scale factor ",(0,r.jsx)(n.em,{children:"k"})," is not passed to the ~F directive. For all other values of ",(0,r.jsx)(n.em,{children:"dd"}),", ",(0,r.jsx)(n.em,{children:"arg"})," is printed as if by the format directive"]}),"\n",(0,r.jsxs)(n.p,{children:["~",(0,r.jsx)(n.em,{children:"w"}),",",(0,r.jsx)(n.em,{children:"d"}),",",(0,r.jsx)(n.em,{children:"e"}),",",(0,r.jsx)(n.em,{children:"k"}),",",(0,r.jsx)(n.em,{children:"overflowchar"}),",",(0,r.jsx)(n.em,{children:"padchar"}),",",(0,r.jsx)(n.em,{children:"exponentchar"}),"E"]}),"\n",(0,r.jsx)(n.p,{children:"In either case, an @ modifier is supplied to the ~F or ~E directive if and only if one was supplied to the ~G directive."}),"\n",(0,r.jsxs)(n.p,{children:["~G binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.em,{children:"false"})," and ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," to ",(0,r.jsx)(n.em,{children:"false"}),"."]})]})}function C(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(M,{...e})}):M(e)}function N(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The next ",(0,r.jsx)(n.em,{children:"arg"})," is printed as a ",(0,r.jsx)(n.em,{children:"float"})," in fixed-format notation."]}),"\n",(0,r.jsxs)(n.p,{children:["The full form is ~",(0,r.jsx)(n.em,{children:"d"}),",",(0,r.jsx)(n.em,{children:"n"}),",",(0,r.jsx)(n.em,{children:"w"}),",",(0,r.jsx)(n.em,{children:"padchar"}),"$. The parameter ",(0,r.jsx)(n.em,{children:"d"})," is the number of digits to print after the decimal point (default value 2); ",(0,r.jsx)(n.em,{children:"n"})," is the minimum number of digits to print before the decimal point (default value 1); ",(0,r.jsx)(n.em,{children:"w"})," is the minimum total width of the field to be printed (default value 0)."]}),"\n",(0,r.jsxs)(n.p,{children:["First padding and the sign are output. If the ",(0,r.jsx)(n.em,{children:"arg"})," is negative, then a minus sign is printed; if the ",(0,r.jsx)(n.em,{children:"arg"})," is not negative, then a plus sign is printed if and only if the @ modifier was supplied. If the : modifier is used, the sign appears before any padding, and otherwise after the padding. If ",(0,r.jsx)(n.em,{children:"w"})," is supplied and the number of other characters to be output is less than ",(0,r.jsx)(n.em,{children:"w"}),", then copies of ",(0,r.jsx)(n.em,{children:"padchar"})," (which defaults to a space) are output to make the total field width equal ",(0,r.jsx)(n.em,{children:"w"}),". Then ",(0,r.jsx)(n.em,{children:"n"})," digits are printed for the integer part of ",(0,r.jsx)(n.em,{children:"arg"}),", with leading zeros if necessary; then a decimal point; then ",(0,r.jsx)(n.em,{children:"d"})," digits of fraction, properly rounded."]}),"\n",(0,r.jsxs)(n.p,{children:["If the magnitude of ",(0,r.jsx)(n.em,{children:"arg"})," is so large that more than ",(0,r.jsx)(n.em,{children:"m"})," digits would have to be printed, where ",(0,r.jsx)(n.em,{children:"m"})," is the larger of ",(0,r.jsx)(n.em,{children:"w"})," and 100, then an implementation is free, at its discretion, to print the number using exponential notation instead, as if by the directive ~",(0,r.jsx)(n.em,{children:"w"}),",",(0,r.jsx)(n.em,{children:"q"}),"\u201e\u201e",(0,r.jsx)(n.em,{children:"padchar"}),"E, where ",(0,r.jsx)(n.em,{children:"w"})," and ",(0,r.jsx)(n.em,{children:"padchar"})]}),"\n",(0,r.jsxs)(n.p,{children:["are present or omitted according to whether they were present or omitted in the ~$ directive, and where ",(0,r.jsx)(n.em,{children:"q"}),"=",(0,r.jsx)(n.em,{children:"d"}),"+",(0,r.jsx)(n.em,{children:"n\u2212"}),"1, where ",(0,r.jsx)(n.em,{children:"d"})," and ",(0,r.jsx)(n.em,{children:"n"})," are the (possibly default) values given to the ~$ directive."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"arg"})," is a ",(0,r.jsx)(n.em,{children:"rational"})," number, then it is coerced to be a ",(0,r.jsx)(n.em,{children:"single float"})," and then printed. Alternatively, an implementation is permitted to process a ",(0,r.jsx)(n.em,{children:"rational"})," number by any other method that has essentially the same behavior but avoids loss of precision or overflow because of the coercion."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"arg"})," is a ",(0,r.jsx)(n.em,{children:"complex"})," number or some non-numeric ",(0,r.jsx)(n.em,{children:"object"}),", then it is printed using the format directive ~",(0,r.jsx)(n.em,{children:"w"}),"D, thereby printing it in decimal radix and a minimum field width of ",(0,r.jsx)(n.em,{children:"w"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["~$ binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.em,{children:"false"})," and ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," to ",(0,r.jsx)(n.em,{children:"false"}),"."]})]})}function B(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(N,{...e})}):N(e)}function V(e){return(0,r.jsx)(r.Fragment,{})}function H(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(V,{...e})}):V()}function W(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.em,{children:"arg"}),", any ",(0,r.jsx)(n.em,{children:"object"}),", is printed without escape characters (as by ",(0,r.jsx)(n.strong,{children:"princ"}),"). If ",(0,r.jsx)(n.em,{children:"arg"})," is a ",(0,r.jsx)(n.em,{children:"string"}),", its ",(0,r.jsx)(n.em,{children:"characters"})," will be output verbatim. If ",(0,r.jsx)(n.em,{children:"arg"})," is ",(0,r.jsx)(n.strong,{children:"nil"})," it will be printed as ",(0,r.jsx)(n.strong,{children:"nil"}),"; the ",(0,r.jsx)(n.em,{children:"colon"})," modifier (~",":A",") will cause an ",(0,r.jsx)(n.em,{children:"arg"})," of ",(0,r.jsx)(n.strong,{children:"nil"})," to be printed as (), but if ",(0,r.jsx)(n.em,{children:"arg"})," is a composite structure, such as a ",(0,r.jsx)(n.em,{children:"list"})," or ",(0,r.jsx)(n.em,{children:"vector"})," , any contained occurrences of ",(0,r.jsx)(n.strong,{children:"nil"})," will still be printed as ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["~",(0,r.jsx)(n.em,{children:"mincol"}),"A inserts spaces on the right, if necessary, to make the width at least ",(0,r.jsx)(n.em,{children:"mincol"})," columns. The @ modifier causes the spaces to be inserted on the left rather than the right."]}),"\n",(0,r.jsxs)(n.p,{children:["~",(0,r.jsx)(n.em,{children:"mincol"}),",",(0,r.jsx)(n.em,{children:"colinc"}),",",(0,r.jsx)(n.em,{children:"minpad"}),",",(0,r.jsx)(n.em,{children:"padchar"}),"A is the full form of ~A, which allows control of the padding. The ",(0,r.jsx)(n.em,{children:"string"})," is padded on the right (or on the left if the @ modifier is used) with at least ",(0,r.jsx)(n.em,{children:"minpad"})," copies of ",(0,r.jsx)(n.em,{children:"padchar"})," ; padding characters are then inserted ",(0,r.jsx)(n.em,{children:"colinc"})," characters at a time until the total width is at least ",(0,r.jsx)(n.em,{children:"mincol"}),". The defaults are 0 for ",(0,r.jsx)(n.em,{children:"mincol"})," and ",(0,r.jsx)(n.em,{children:"minpad"}),", 1 for ",(0,r.jsx)(n.em,{children:"colinc"}),", and the space character"]}),"\n",(0,r.jsxs)(n.p,{children:["for ",(0,r.jsx)(n.em,{children:"padchar"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:["~A binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.em,{children:"false"}),", and ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," to ",(0,r.jsx)(n.em,{children:"false"}),"."]})]})}function G(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(W,{...e})}):W(e)}function $(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["This is just like ~A, but ",(0,r.jsx)(n.em,{children:"arg"})," is printed with escape characters (as by ",(0,r.jsx)(n.strong,{children:"prin1"})," rather than princ). The output is therefore suitable for input to ",(0,r.jsx)(n.strong,{children:"read"}),". ~S accepts all the arguments and modifiers that ~A does."]}),"\n",(0,r.jsxs)(n.p,{children:["~S binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.strong,{children:"t"}),"."]})]})}function X(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)($,{...e})}):$(e)}function U(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["An argument, any ",(0,r.jsx)(n.em,{children:"object"}),", is printed obeying every printer control variable (as by ",(0,r.jsx)(n.strong,{children:"write"}),"). In addition, ~W interacts correctly with depth abbreviation, by not resetting the depth counter to zero. ~W does not accept parameters. If given the ",(0,r.jsx)(n.em,{children:"colon"})," modifier, ~W binds ",(0,r.jsx)(n.strong,{children:"*print-pretty*"})," to ",(0,r.jsx)(n.em,{children:"true"}),". If given the ",(0,r.jsx)(n.em,{children:"at-sign"})," modifier, ~W binds ",(0,r.jsx)(n.strong,{children:"*print-level*"})," and ",(0,r.jsx)(n.strong,{children:"*print-length*"})," to ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["~W provides automatic support for the detection of circularity and sharing. If the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-circle*"})," is not ",(0,r.jsx)(n.strong,{children:"nil"})," and ~W is applied to an argument that is a circular (or shared) reference, an appropriate #",(0,r.jsx)(n.em,{children:"n"}),"# marker is inserted in the output instead of printing the argument."]})]})}function Q(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(U,{...e})}):U(e)}function Z(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(n.p,{children:["The following constructs provide access to the ",(0,r.jsx)(n.em,{children:"pretty printer"})," :"]})}function Y(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Z,{...e})}):Z(e)}function _(e){const n={p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(n.p,{children:["Without any modifiers, ~ is the same as (pprint-newline ",":linear","). ~@ is the same as (pprint-newline ",":miser","). ~: is the same as (pprint-newline ",":fill","). ~:@ is the same as (pprint-newline ",":mandatory",")."]})}function J(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(_,{...e})}):_(e)}function K(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"~<...~:>"}),"\n",(0,r.jsxs)(n.p,{children:["If ~:> is used to terminate a ~<...~>, the directive is equivalent to a call to ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"}),". The argument corresponding to the ~<...~:> directive is treated in the same way as the ",(0,r.jsx)(n.em,{children:"list"})," argument to ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"}),", thereby providing automatic support for non-",(0,r.jsx)(n.em,{children:"list"})," arguments and the detection of circularity, sharing, and depth abbreviation. The portion of the ",(0,r.jsx)(n.em,{children:"control-string"})," nested within the ~<...~:> specifies the ",":prefix"," (or ",":per-line-prefix","), ",":suffix",", and body of the ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"control-string"})," portion enclosed by ~<...~:> can be divided into segments ~<",(0,r.jsx)(n.em,{children:"prefix"}),"~;",(0,r.jsx)(n.em,{children:"body"}),"~;",(0,r.jsx)(n.em,{children:"suffix"}),"~:> by ~; directives. If the first section is terminated by ~@;, it speci fies a per-line prefix rather than a simple prefix. The ",(0,r.jsx)(n.em,{children:"prefix"})," and ",(0,r.jsx)(n.em,{children:"suffix"})," cannot contain format directives. An error is signaled if either the prefix or suffix fails to be a constant string or if the enclosed portion is divided into more than three segments."]}),"\n",(0,r.jsxs)(n.p,{children:["If the enclosed portion is divided into only two segments, the ",(0,r.jsx)(n.em,{children:"suffix"})," defaults to the null string. If the enclosed portion consists of only a single segment, both the ",(0,r.jsx)(n.em,{children:"prefix"})," and the ",(0,r.jsx)(n.em,{children:"suffix"})," default to the null string. If the ",(0,r.jsx)(n.em,{children:"colon"})," modifier is used (",(0,r.jsx)(n.em,{children:"i.e."}),", ~:<...~:>), the ",(0,r.jsx)(n.em,{children:"prefix"})," and ",(0,r.jsx)(n.em,{children:"suffix"}),' default to "(" and ")" (respectively) instead of the null string.']}),"\n",(0,r.jsxs)(n.p,{children:["The body segment can be any arbitrary ",(0,r.jsx)("i",{children:"format string"}),". This ",(0,r.jsx)("i",{children:"format string"})," is applied to the elements of the list corresponding to the ~<...~:> directive as a whole. Elements are extracted from this list using ",(0,r.jsx)("b",{children:"pprint-pop"}),", thereby providing automatic support for malformed lists, and the detection of circularity, sharing, and length abbreviation. Within the body segment, ~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," acts like ",(0,r.jsx)("b",{children:"pprint-exit-if-list-exhausted"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["~<...~:> supports a feature not supported by ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"}),". If ~:@> is used to terminate the directive (",(0,r.jsx)(n.em,{children:"i.e."}),", ~<...~:@>), then a fill-style conditional newline is automatically inserted after each group of blanks immediately contained in the body (except for blanks after a ",(0,r.jsx)(n.em,{children:"hNewlinei"})," directive). This makes it easy to achieve the equivalent of paragraph filling."]}),"\n",(0,r.jsxs)(n.p,{children:["If the ",(0,r.jsx)(n.em,{children:"at-sign"})," modifier is used with ~<...~:>, the entire remaining argument list is passed to the directive as its argument. All of the remaining arguments are always consumed by ~@<...~:>, even if they are not all used by the ",(0,r.jsx)(n.em,{children:"format string"})," nested in the directive. Other than the difference in its argument, ~@<...~:> is exactly the same as ~<...~:> except that circularity detection is not applied if ~@<...~:> is encountered at top level in a ",(0,r.jsx)(n.em,{children:"format string"}),". This ensures that circularity detection is applied only to data lists, not to ",(0,r.jsx)(n.em,{children:"format argument lists"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:['" . #',(0,r.jsx)(n.em,{children:"n"}),'#" is printed if circularity or sharing has to be indicated for its argument as a whole.']}),"\n",(0,r.jsxs)(n.p,{children:["To a considerable extent, the basic form of the directive ~<...~> is incompatible with the dynamic control of the arrangement of output by ~W, ~ , ~<...~:>, ~I, and ~",":T",". As a result, an error is signaled if any of these directives is nested within ~<...~>. Beyond this, an error is also signaled if the ~<...~:;...~> form of ~<...~> is used in the same ",(0,r.jsx)(n.em,{children:"format string"})," with ~W, ~ , ~<...~:>, ~I, or ~",":T","."]}),"\n",(0,r.jsx)(n.p,{children:"See also Section 22.3.6.2 (Tilde Less-Than-Sign: Justification)."})]})}function ee(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(K,{...e})}):K(e)}function ne(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["~",(0,r.jsx)(n.em,{children:"n"}),"I is the same as (pprint-indent ",":block"," n)."]}),"\n",(0,r.jsxs)(n.p,{children:["~",(0,r.jsx)(n.em,{children:"n"}),":I"," is the same as (pprint-indent ",":current"," n). In both cases, ",(0,r.jsx)(n.em,{children:"n"})," defaults to zero, if it is omitted."]})]})}function ie(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(ne,{...e})}):ne(e)}function re(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["~/",(0,r.jsx)(n.em,{children:"name"}),"/"]}),"\n",(0,r.jsxs)(n.p,{children:["User defined functions can be called from within a format string by using the directive ~/",(0,r.jsx)(n.em,{children:"name"}),"/. The ",(0,r.jsx)(n.em,{children:"colon"})," modifier, the ",(0,r.jsx)(n.em,{children:"at-sign"})," modifier, and arbitrarily many parameters can be specified with the ~/",(0,r.jsx)(n.em,{children:"name"}),"/ directive. ",(0,r.jsx)(n.em,{children:"name"})," can be any arbitrary string that does not contain a \u201d/\u201d. All of the characters in ",(0,r.jsx)(n.em,{children:"name"})," are treated as if they were upper case. If ",(0,r.jsx)(n.em,{children:"name"})," contains a single ",(0,r.jsx)(n.em,{children:"colon"})," (:) or double ",(0,r.jsx)(n.em,{children:"colon"}),' (::), then everything up to but not including the first ":" or "::" is taken to be a ',(0,r.jsx)(n.em,{children:"string"})," that names a ",(0,r.jsx)(n.em,{children:"package"}),'. Everything after the first ":" or "::" (if any) is taken to be a ',(0,r.jsx)(n.em,{children:"string"})]}),"\n",(0,r.jsxs)(n.p,{children:["that names a symbol. The function corresponding to a ~/name/ directive is obtained by looking up the ",(0,r.jsx)(n.em,{children:"symbol"})," that has the indicated name in the indicated ",(0,r.jsx)(n.em,{children:"package"}),". If ",(0,r.jsx)(n.em,{children:"name"}),' does not contain a ":" or "::", then the whole ',(0,r.jsx)(n.em,{children:"name"})," string is looked up in the COMMON-LISP-USER ",(0,r.jsx)(n.em,{children:"package"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["When a ~/name/ directive is encountered, the indicated function is called with four or more arguments. The first four arguments are: the output stream, the ",(0,r.jsx)(n.em,{children:"format argument"})," corresponding to the directive, a ",(0,r.jsx)(n.em,{children:"generalized boolean"})," that is ",(0,r.jsx)(n.em,{children:"true"})," if the ",(0,r.jsx)(n.em,{children:"colon"})," modifier was used, and a ",(0,r.jsx)(n.em,{children:"generalized boolean"})," that is ",(0,r.jsx)(n.em,{children:"true"})," if the ",(0,r.jsx)(n.em,{children:"at-sign"})," modifier was used. The remaining arguments consist of any parameters specified with the directive. The function should print the argument appropriately. Any values returned by the function are ignored."]}),"\n",(0,r.jsxs)(n.p,{children:["The three ",(0,r.jsx)(n.em,{children:"functions"})," ",(0,r.jsx)(n.strong,{children:"pprint-linear"}),", ",(0,r.jsx)(n.strong,{children:"pprint-fill"}),", and ",(0,r.jsx)(n.strong,{children:"pprint-tabular"})," are specifically designed so that they can be called by ~/.../ (",(0,r.jsx)(n.em,{children:"i.e."}),", ~/pprint-linear/, ~/pprint-fill/, and ~/pprint-tabular/). In particular they take ",(0,r.jsx)(n.em,{children:"colon"})," and ",(0,r.jsx)(n.em,{children:"at-sign"})," arguments."]})]})}function se(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(re,{...e})}):re(e)}function te(e){return(0,r.jsx)(r.Fragment,{})}function le(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(te,{...e})}):te()}function ce(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["This spaces over to a given column. ~",(0,r.jsx)(n.em,{children:"colnum"}),",",(0,r.jsx)(n.em,{children:"colinc"}),"T will output sufficient spaces to move the cursor to column ",(0,r.jsx)(n.em,{children:"colnum"}),". If the cursor is already at or beyond column ",(0,r.jsx)(n.em,{children:"colnum"}),", it will output spaces to move it to column ",(0,r.jsx)(n.em,{children:"colnum"}),"+",(0,r.jsx)(n.em,{children:"k"}),"*",(0,r.jsx)(n.em,{children:"colinc"})," for the smallest positive integer ",(0,r.jsx)(n.em,{children:"k"})," possible, unless ",(0,r.jsx)(n.em,{children:"colinc"})," is zero, in which case no spaces are output if the cursor is already at or beyond column ",(0,r.jsx)(n.em,{children:"colnum"}),". ",(0,r.jsx)(n.em,{children:"colnum"})," and ",(0,r.jsx)(n.em,{children:"colinc"})," default to 1."]}),"\n",(0,r.jsxs)(n.p,{children:["If for some reason the current absolute column position cannot be determined by direct inquiry, ",(0,r.jsx)(n.strong,{children:"format"})," may be able to deduce the current column position by noting that certain directives (such as ~%, or ~&, or ~A with the argument being a string containing a newline) cause the column position to be reset to zero, and counting the number of characters emitted since that point. If that fails, ",(0,r.jsx)(n.strong,{children:"format"})," may attempt a similar deduction on the riskier assumption that the destination was at column zero when ",(0,r.jsx)(n.strong,{children:"format"})," was invoked. If even this heuristic fails or is implementationally inconvenient, at worst the ~T operation will simply output two spaces."]}),"\n",(0,r.jsxs)(n.p,{children:["~@T performs relative tabulation. ~",(0,r.jsx)(n.em,{children:"colrel"}),",",(0,r.jsx)(n.em,{children:"colinc"}),"@T outputs ",(0,r.jsx)(n.em,{children:"colrel"})," spaces and then outputs the smallest non-negative number of additional spaces necessary to move the cursor to a column that is a multiple of ",(0,r.jsx)(n.em,{children:"colinc"}),". For example, the directive ~3,8@T outputs three spaces and then moves the cursor to a \u201cstandard multiple-of-eight tab stop\u201d if not at one already. If the current output column cannot be determined, however, then ",(0,r.jsx)(n.em,{children:"colinc"})," is ignored, and exactly ",(0,r.jsx)(n.em,{children:"colrel"})," spaces are output."]}),"\n",(0,r.jsxs)(n.p,{children:["If the ",(0,r.jsx)(n.em,{children:"colon"})," modifier is used with the ~T directive, the tabbing computation is done relative to the horizontal position where the section immediately containing the directive begins, rather than with respect to a horizontal position of zero. The numerical parameters are both interpreted as being in units of ",(0,r.jsx)(n.em,{children:"ems"})," and both default to 1. ~",(0,r.jsx)(n.em,{children:"n"}),",",(0,r.jsx)(n.em,{children:"m"}),":T"," is the same as (pprint-tab ",":section"," ",(0,r.jsx)(n.em,{children:"n m"}),"). ~",(0,r.jsx)(n.em,{children:"n"}),",",(0,r.jsx)(n.em,{children:"m"}),":@T"]}),"\n",(0,r.jsxs)(n.p,{children:["is the same as (pprint-tab ",":section-relative"," ",(0,r.jsx)(n.em,{children:"n m"}),")."]})]})}function de(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(ce,{...e})}):ce(e)}function he(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["~",(0,r.jsx)(n.em,{children:"mincol"}),",",(0,r.jsx)(n.em,{children:"colinc"}),",",(0,r.jsx)(n.em,{children:"minpad"}),",",(0,r.jsx)(n.em,{children:"padchar"}),"<",(0,r.jsx)(n.em,{children:"str"}),"~>"]}),"\n",(0,r.jsxs)(n.p,{children:["This justifies the text produced by processing ",(0,r.jsx)(n.em,{children:"str"})," within a field at least ",(0,r.jsx)(n.em,{children:"mincol"})," columns wide. ",(0,r.jsx)(n.em,{children:"str"})," may be divided up into segments with ~;, in which case the spacing is evenly divided between the text segments."]}),"\n",(0,r.jsxs)(n.p,{children:["With no modifiers, the leftmost text segment is left justified in the field, and the rightmost text segment is right justified. If there is only one text element, as a special case, it is right justified. The : modifier causes spacing to be introduced before the first text segment; the @ modifier causes spacing to be added after the last. The ",(0,r.jsx)(n.em,{children:"minpad"})," parameter (default 0) is the minimum number of padding characters to be output between each segment. The padding character is supplied by ",(0,r.jsx)(n.em,{children:"padchar"})," , which defaults to the space character. If the total width needed to satisfy these constraints is greater than ",(0,r.jsx)(n.em,{children:"mincol"}),", then the width used is ",(0,r.jsx)(n.em,{children:"mincol"}),"+",(0,r.jsx)(n.em,{children:"k"}),"*",(0,r.jsx)(n.em,{children:"colinc"})," for the smallest possible non-negative integer value ",(0,r.jsx)(n.em,{children:"k"}),". ",(0,r.jsx)(n.em,{children:"colinc"})," defaults to 1, and ",(0,r.jsx)(n.em,{children:"mincol"})," defaults to 0."]}),"\n",(0,r.jsxs)(n.p,{children:["Note that ",(0,r.jsx)(n.em,{children:"str"})," may include ",(0,r.jsx)(n.strong,{children:"format"})," directives. All the clauses in ",(0,r.jsx)(n.em,{children:"str"})," are processed in order; it is the resulting pieces of text that are justified."]}),"\n",(0,r.jsxs)(n.p,{children:["The ~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," directive may be used to terminate processing of the clauses prematurely, in which case only the completely processed clauses are justified."]}),"\n",(0,r.jsxs)(n.p,{children:["If the first clause of a ~< is terminated with ~:; instead of ~;, then it is used in a special way. All of the clauses are processed (subject to ~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),", of course), but the first one is not used in performing the spacing and padding. When the padded result has been determined, then if it will fit on the current line of output, it is output, and the text for the first clause is discarded. If, however, the"]}),"\n",(0,r.jsxs)(n.p,{children:["padded text will not fit on the current line, then the text segment for the first clause is output before the padded text. The first clause ought to contain a newline (such as a ~% directive). The first clause is always processed, and so any arguments it refers to will be used; the decision is whether to use the resulting segment of text, not whether to process the first clause. If the ~:; has a prefix parameter ",(0,r.jsx)(n.em,{children:"n"}),", then the padded text must fit on the current line with ",(0,r.jsx)(n.em,{children:"n"})," character positions to spare to avoid outputting the first clause\u2019s text. For example, the control string"]}),"\n",(0,r.jsxs)(n.p,{children:['"~%;; ~{~<~%;; ~1:; ~S~>~',(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),',~}.~%"']}),"\n",(0,r.jsx)(n.p,{children:"can be used to print a list of items separated by commas without breaking items over line boundaries, beginning each line with ;; . The prefix parameter 1 in ~1:; accounts for the width of the comma that will follow the justified item if it is not the last element in the list, or the period if it is. If ~:; has a second prefix parameter, then it is used as the width of the line, thus overriding the natural line width of the output stream. To make the preceding example use a line width of 50, one would write"}),"\n",(0,r.jsxs)(n.p,{children:['"~%;; ~{~<~%;; ~1,50:; ~S~>~',(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),',~} .~%"']}),"\n",(0,r.jsxs)(n.p,{children:["If the second argument is not supplied, then ",(0,r.jsx)(n.strong,{children:"format"})," uses the line width of the ",(0,r.jsx)(n.em,{children:"destination"})," output stream. If this cannot be determined (for example, when producing a ",(0,r.jsx)(n.em,{children:"string"})," result), then ",(0,r.jsx)(n.strong,{children:"format"})," uses 72 as the line length."]}),"\n",(0,r.jsx)(n.p,{children:"See also Section 22.3.5.2 (Tilde Less-Than-Sign: Logical Block)."})]})}function oe(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(he,{...e})}):he(e)}function ae(e){const n={p:"p",...(0,s.a)(),...e.components};return(0,r.jsx)(n.p,{children:"~> terminates a ~<. The consequences of using it elsewhere are undefined."})}function pe(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(ae,{...e})}):ae(e)}function xe(e){return(0,r.jsx)(r.Fragment,{})}function je(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(xe,{...e})}):xe()}function me(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The next ",(0,r.jsx)(n.em,{children:"arg"})," is ignored. ~",(0,r.jsx)(n.em,{children:"n"}),"* ignores the next ",(0,r.jsx)(n.em,{children:"n"})," arguments."]}),"\n",(0,r.jsxs)(n.p,{children:["~:* backs up in the list of arguments so that the argument last processed will be processed again. ~",(0,r.jsx)(n.em,{children:"n"}),":* backs up ",(0,r.jsx)(n.em,{children:"n"})," arguments."]}),"\n",(0,r.jsx)(n.p,{children:"When within a ~{ construct (see below), the ignoring (in either direction) is relative to the list of arguments being processed by the iteration."}),"\n",(0,r.jsxs)(n.p,{children:["~",(0,r.jsx)(n.em,{children:"n"}),"@* goes to the ",(0,r.jsx)(n.em,{children:"n"}),"th ",(0,r.jsx)(n.em,{children:"arg"}),", where 0 means the first one; ",(0,r.jsx)(n.em,{children:"n"})," defaults to 0, so ~@* goes back to the first ",(0,r.jsx)(n.em,{children:"arg"}),". Directives after a ~",(0,r.jsx)(n.em,{children:"n"}),"@* will take arguments in sequence beginning with the one gone to. When within a ~{ construct, the \u201cgoto\u201d is relative to the list of arguments being processed by the iteration."]})]})}function ue(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(me,{...e})}):me(e)}function fe(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["~[",(0,r.jsx)(n.em,{children:"str0"})," ~;",(0,r.jsx)(n.em,{children:"str1"})," ~;",(0,r.jsx)(n.em,{children:"..."}),"~;",(0,r.jsx)(n.em,{children:"strn"}),"~]"]}),"\n",(0,r.jsxs)(n.p,{children:["This is a set of control strings, called ",(0,r.jsx)(n.em,{children:"clauses"}),", one of which is chosen and used. The clauses are separated by ~; and the construct is terminated by ~]. For example,"]}),"\n",(0,r.jsx)(n.p,{children:'"~[Siamese~;Manx~;Persian~] Cat"'}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"arg"}),"th clause is selected, where the first clause is number 0. If a prefix parameter is given (as ~",(0,r.jsx)(n.em,{children:"n"}),"[), then the parameter is used instead of an argument. If ",(0,r.jsx)(n.em,{children:"arg"})," is out of range then no clause is selected and no error is signaled. After the selected alternative has been processed, the control string continues after the ~]."]}),"\n",(0,r.jsxs)(n.p,{children:["~[",(0,r.jsx)(n.em,{children:"str0"})," ~;",(0,r.jsx)(n.em,{children:"str1"})," ~;",(0,r.jsx)(n.em,{children:"..."}),"~;",(0,r.jsx)(n.em,{children:"strn"}),"~:;",(0,r.jsx)(n.em,{children:"default"}),"~] has a default case. If the ",(0,r.jsx)(n.em,{children:"last"})," ~; used to separate clauses is ~:; instead, then the last clause is an else clause that is performed if no other clause is selected. For example:"]}),"\n",(0,r.jsx)(n.p,{children:'"~[Siamese~;Manx~;Persian~:;Alley~] Cat"'}),"\n",(0,r.jsxs)(n.p,{children:["~:[",(0,r.jsx)(n.em,{children:"alternative"}),"~;",(0,r.jsx)(n.em,{children:"consequent"}),"~] selects the ",(0,r.jsx)(n.em,{children:"alternative"})," control string if ",(0,r.jsx)(n.em,{children:"arg"})," is ",(0,r.jsx)(n.em,{children:"false"}),", and selects the ",(0,r.jsx)(n.em,{children:"consequent"})," control string otherwise."]}),"\n",(0,r.jsxs)(n.p,{children:["~@[",(0,r.jsx)(n.em,{children:"consequent"}),"~] tests the argument. If it is ",(0,r.jsx)(n.em,{children:"true"}),", then the argument is not used up by the ~[ command but remains as the next one to be processed, and the one clause ",(0,r.jsx)(n.em,{children:"consequent"})," is processed. If the ",(0,r.jsx)(n.em,{children:"arg"})," is ",(0,r.jsx)(n.em,{children:"false"}),", then the argument is used up, and the clause is not processed. The clause therefore should normally use exactly one argument, and may expect it to be ",(0,r.jsx)(n.em,{children:"non-nil"}),". For example:"]}),"\n",(0,r.jsx)(n.p,{children:"(setq *print-level* nil *print-length* 5)"}),"\n",(0,r.jsx)(n.p,{children:"(format nil"}),"\n",(0,r.jsx)(n.p,{children:'"~@[ print level = ~D~]~@[ print length = ~D~]"'}),"\n",(0,r.jsx)(n.p,{children:"*print-level* *print-length*)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' " print length = 5"']}),"\n",(0,r.jsx)(n.p,{children:"Note also that"}),"\n",(0,r.jsxs)(n.p,{children:["(format ",(0,r.jsx)(n.em,{children:"stream"}),' "...~@[',(0,r.jsx)(n.em,{children:"str"}),'~]..." ...)']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2261"})," (format ",(0,r.jsx)(n.em,{children:"stream"}),' "...~:[~;~:*',(0,r.jsx)(n.em,{children:"str"}),'~]..." ...)']}),"\n",(0,r.jsx)(n.p,{children:"The combination of ~[ and # is useful, for example, for dealing with English conventions for printing lists:"}),"\n",(0,r.jsx)(n.p,{children:'(setq foo "Items:~#[ none~; ~S~; ~S and ~S~'}),"\n",(0,r.jsxs)(n.p,{children:["~:;~@{~#[~; and~] ~S~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),',~}~].")']}),"\n",(0,r.jsxs)(n.p,{children:["(format nil foo) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "Items: none."']}),"\n",(0,r.jsxs)(n.p,{children:["(format nil foo \u2019foo) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "Items: FOO."']}),"\n",(0,r.jsxs)(n.p,{children:["(format nil foo \u2019foo \u2019bar) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "Items: FOO and BAR."']}),"\n",(0,r.jsxs)(n.p,{children:["(format nil foo \u2019foo \u2019bar \u2019baz) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "Items: FOO, BAR, and BAZ."']}),"\n",(0,r.jsxs)(n.p,{children:["(format nil foo \u2019foo \u2019bar \u2019baz \u2019quux) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "Items: FOO, BAR, BAZ, and QUUX."']})]})}function ge(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(fe,{...e})}):fe(e)}function be(e){const n={p:"p",...(0,s.a)(),...e.components};return(0,r.jsx)(n.p,{children:"~] terminates a ~[. The consequences of using it elsewhere are undefined."})}function ye(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(be,{...e})}):be(e)}function we(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["~{",(0,r.jsx)(n.em,{children:"str"}),"~}"]}),"\n",(0,r.jsxs)(n.p,{children:["This is an iteration construct. The argument should be a ",(0,r.jsx)("i",{children:"list"}),", which is used as a set of arguments as if for a recursive call to ",(0,r.jsx)("b",{children:"format"}),". The ",(0,r.jsx)("i",{children:"string str"})," is used repeatedly as the control string. Each iteration can absorb as many elements of the ",(0,r.jsx)("i",{children:"list"})," as it likes as arguments; if ",(0,r.jsx)("i",{children:"str"})," uses up two arguments by itself, then two elements of the ",(0,r.jsx)("i",{children:"list"})," will get used up each time around the loop. If before any iteration step the ",(0,r.jsx)("i",{children:"list"})," is empty, then the iteration is terminated. Also, if a prefix parameter ",(0,r.jsx)("i",{children:"n"})," is given, then there will be at most ",(0,r.jsx)("i",{children:"n"})," repetitions of processing of ",(0,r.jsx)("i",{children:"str"})," . Finally, the ~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," directive can be used to terminate the iteration prematurely."]}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.p,{children:'(format nil "The winners are:~{ ~S~}."'}),"\n",(0,r.jsx)(n.p,{children:"\u2019(fred harry jill))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "The winners are: FRED HARRY JILL."']}),"\n",(0,r.jsx)(n.p,{children:'(format nil "Pairs:~{ <~S,~S>~}."'}),"\n",(0,r.jsx)(n.p,{children:"\u2019(a 1 b 2 c 3))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "Pairs: <A,1> <B,2> <C,3>."']}),"\n",(0,r.jsxs)(n.p,{children:["~:{",(0,r.jsx)(n.em,{children:"str"}),"~} is similar, but the argument should be a ",(0,r.jsx)(n.em,{children:"list"})," of sublists. At each repetition step, one sublist is used as the set of arguments for processing ",(0,r.jsx)(n.em,{children:"str"})," ; on the next repetition, a new sublist is used, whether or not all of the last sublist had been processed. For example:"]}),"\n",(0,r.jsx)(n.p,{children:'(format nil "Pairs:~:{ <~S,~S>~}."'}),"\n",(0,r.jsx)(n.p,{children:"\u2019((a 1) (b 2) (c 3)))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "Pairs: <A,1> <B,2> <C,3>."']}),"\n",(0,r.jsxs)(n.p,{children:["~@{",(0,r.jsx)(n.em,{children:"str"}),"~} is similar to ~{",(0,r.jsx)(n.em,{children:"str"}),"~}, but instead of using one argument that is a list, all the remaining arguments are used as the list of arguments for the iteration. Example:"]}),"\n",(0,r.jsx)(n.p,{children:'(format nil "Pairs:~@{ <~S,~S>~}." \u2019a 1 \u2019b 2 \u2019c 3)'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "Pairs: <A,1> <B,2> <C,3>."']}),"\n",(0,r.jsx)(n.p,{children:"If the iteration is terminated before all the remaining arguments are consumed, then any arguments not processed by the iteration remain to be processed by any directives following the iteration construct."}),"\n",(0,r.jsxs)(n.p,{children:["~:@{",(0,r.jsx)(n.em,{children:"str"}),"~} combines the features of ~:{",(0,r.jsx)(n.em,{children:"str"}),"~} and ~@{",(0,r.jsx)(n.em,{children:"str"}),"~}. All the remaining arguments are used, and each one must be a ",(0,r.jsx)(n.em,{children:"list"}),". On each iteration, the next argument is used as a ",(0,r.jsx)(n.em,{children:"list"})," of arguments to ",(0,r.jsx)(n.em,{children:"str"})," . Example:"]}),"\n",(0,r.jsx)(n.p,{children:'(format nil "Pairs:~:@{ <~S,~S>~}."'}),"\n",(0,r.jsx)(n.p,{children:"\u2019(a 1) \u2019(b 2) \u2019(c 3))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "Pairs: <A,1> <B,2> <C,3>."']}),"\n",(0,r.jsxs)(n.p,{children:["Terminating the repetition construct with ~:} instead of ~} forces ",(0,r.jsx)(n.em,{children:"str"})," to be processed at least once, even if the initial list of arguments is null. However, this will not override an explicit prefix parameter of zero."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"str"})," is empty, then an argument is used as ",(0,r.jsx)(n.em,{children:"str"})," . It must be a ",(0,r.jsx)(n.em,{children:"format control"})," and precede any arguments processed by the iteration. As an example, the following are equivalent:"]}),"\n",(0,r.jsx)(n.p,{children:"(apply #\u2019format stream string arguments)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2261"}),' (format stream "~1{~:}" string arguments)']}),"\n",(0,r.jsx)(n.p,{children:"This will use string as a formatting string. The ~1{ says it will be processed at most once, and the ~:} says it will be processed at least once. Therefore it is processed exactly once, using arguments as the arguments. This case may be handled more clearly by the ~? directive, but this general feature of ~{ is more powerful than ~?."})]})}function ve(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(we,{...e})}):we(e)}function Te(e){const n={p:"p",...(0,s.a)(),...e.components};return(0,r.jsx)(n.p,{children:"~} terminates a ~{. The consequences of using it elsewhere are undefined."})}function Ie(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Te,{...e})}):Te(e)}function Ae(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The next ",(0,r.jsx)(n.em,{children:"arg"})," must be a ",(0,r.jsx)(n.em,{children:"format control"}),", and the one after it a ",(0,r.jsx)(n.em,{children:"list"}),"; both are consumed by the ~? directive. The two are processed as a ",(0,r.jsx)(n.em,{children:"control-string"}),", with the elements of the ",(0,r.jsx)(n.em,{children:"list"})," as the arguments. Once the recursive processing has been finished, the processing of the control string containing the ~? directive is resumed. Example:"]}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~? ~D" "<~A ~D>" \u2019("Foo" 5) 7) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "<foo 5=""> 7"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~? ~D" "<~A ~D>" \u2019("Foo" 5 14) 7) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "<foo 5=""> 7"']}),"\n",(0,r.jsxs)(n.p,{children:["Note that in the second example three arguments are supplied to the ",(0,r.jsx)(n.em,{children:"format string"}),' "<~A ~D>", but only two are processed and the third is therefore ignored.']}),"\n",(0,r.jsxs)(n.p,{children:["With the @ modifier, only one ",(0,r.jsx)(n.em,{children:"arg"})," is directly consumed. The ",(0,r.jsx)(n.em,{children:"arg"})," must be a ",(0,r.jsx)(n.em,{children:"string"}),"; it is processed as part of the control string as if it had appeared in place of the ~@? construct, and any directives in the recursively processed control string may consume arguments of the control string containing the ~@? directive. Example:"]}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~@? ~D" "<~A ~D>" "Foo" 5 7) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "<foo 5=""> 7"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~@? ~D" "<~A ~D>" "Foo" 5 14 7) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "<foo 5=""> 14"']})]})}function ke(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Ae,{...e})}):Ae(e)}function Se(e){return(0,r.jsx)(r.Fragment,{})}function Fe(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Se,{...e})}):Se()}function Ee(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["~(",(0,r.jsx)(n.em,{children:"str"}),"~)"]}),"\n",(0,r.jsxs)(n.p,{children:["The contained control string ",(0,r.jsx)(n.em,{children:"str"})," is processed, and what it produces is subject to case conversion. With no flags, every ",(0,r.jsx)(n.em,{children:"uppercase character"})," is converted to the corresponding ",(0,r.jsx)(n.em,{children:"lowercase character"})," . ~:( capitalizes all words, as if by ",(0,r.jsx)(n.strong,{children:"string-capitalize"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"~@( capitalizes just the first word and forces the rest to lower case."}),"\n",(0,r.jsx)(n.p,{children:"~:@( converts every lowercase character to the corresponding uppercase character."}),"\n",(0,r.jsx)(n.p,{children:"In this example ~@( is used to cause the first word produced by ~@R to be capitalized:"}),"\n",(0,r.jsx)(n.p,{children:'(format nil "~@R ~(~@R~)" 14 14)'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "XIV xiv"']}),"\n",(0,r.jsxs)(n.p,{children:['(defun f (n) (format nil "~@(~R~) error~',":P",' detected." n)) ',(0,r.jsx)(n.em,{children:"\u2192"})," F"]}),"\n",(0,r.jsxs)(n.p,{children:["(f 0) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "Zero errors detected."']}),"\n",(0,r.jsxs)(n.p,{children:["(f 1) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "One error detected."']}),"\n",(0,r.jsxs)(n.p,{children:["(f 23) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "Twenty-three errors detected."']}),"\n",(0,r.jsx)(n.p,{children:"When case conversions appear nested, the outer conversion dominates, as illustrated in the following example:"}),"\n",(0,r.jsx)(n.p,{children:'(format nil "~@(how is ~:(BOB SMITH~)?~)")'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "How is bob smith?"']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("i",{children:[(0,r.jsx)("sup",{children:"not"})," \u2192"]}),' "How is Bob Smith?"']})]})}function Oe(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Ee,{...e})}):Ee(e)}function De(e){const n={p:"p",...(0,s.a)(),...e.components};return(0,r.jsx)(n.p,{children:"~) terminates a ~(. The consequences of using it elsewhere are undefined."})}function Le(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(De,{...e})}):De(e)}function Re(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"arg"})," is not ",(0,r.jsx)(n.strong,{children:"eql"})," to the integer 1, a lowercase s is printed; if ",(0,r.jsx)(n.em,{children:"arg"})," is ",(0,r.jsx)(n.strong,{children:"eql"})," to 1, nothing is printed. If ",(0,r.jsx)(n.em,{children:"arg"})," is a floating-point 1.0, the s is printed."]}),"\n",(0,r.jsxs)(n.p,{children:["~",":P"," does the same thing, after doing a ~:* to back up one argument; that is, it prints a lowercase s if the previous argument was not 1."]}),"\n",(0,r.jsx)(n.p,{children:"~@P prints y if the argument is 1, or ies if it is not. ~:@P does the same thing, but backs up first."}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~D tr~:@P/~D win~',":P",'" 7 1) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "7 tries/1 win"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~D tr~:@P/~D win~',":P",'" 1 0) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "1 try/0 wins"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~D tr~:@P/~D win~',":P",'" 1 3) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "1 try/3 wins"']})]})}function qe(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Re,{...e})}):Re(e)}function Pe(e){return(0,r.jsx)(r.Fragment,{})}function ze(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Pe,{...e})}):Pe()}function Me(e){const n={p:"p",...(0,s.a)(),...e.components};return(0,r.jsx)(n.p,{children:"This separates clauses in ~[ and ~< constructs. The consequences of using it elsewhere are undefined."})}function Ce(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Me,{...e})}):Me(e)}function Ne(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})]}),"\n",(0,r.jsx)(n.p,{children:"This is an escape construct. If there are no more arguments remaining to be processed, then the immediately enclosing ~{ or ~< construct is terminated. If there is no such enclosing construct, then the entire formatting operation is terminated. In the ~< case, the formatting is performed,"}),"\n",(0,r.jsxs)(n.p,{children:["but no more segments are processed before doing the justification. ~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," may appear anywhere in a ~{ construct."]}),"\n",(0,r.jsxs)(n.p,{children:['(setq donestr "Done.~',(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," ~D warning~",":P",".~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," ~D error~",":P",'.")']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("i",{children:"\u2192"}),' "Done.~',(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," ~D warning~",":P",".~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," ~D error~",":P",'."']}),"\n",(0,r.jsxs)(n.p,{children:["(format nil donestr) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "Done."']}),"\n",(0,r.jsxs)(n.p,{children:["(format nil donestr 3) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "Done. 3 warnings."']}),"\n",(0,r.jsxs)(n.p,{children:["(format nil donestr 1 5) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "Done. 1 warning. 5 errors."']}),"\n",(0,r.jsxs)(n.p,{children:["If a prefix parameter is given, then termination occurs if the parameter is zero. (Hence ~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," is equivalent to ~#",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),".) If two parameters are given, termination occurs if they are equal. If three parameters are given, termination occurs if the first is less than or equal to the second and the second is less than or equal to the third. Of course, this is useless if all the prefix parameters are constants; at least one of them should be a # or a V parameter."]}),"\n",(0,r.jsxs)(n.p,{children:["If ~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," is used within a ~:{ construct, then it terminates the current iteration step because in the standard case it tests for remaining arguments of the current step only; the next iteration step commences immediately. ~:",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," is used to terminate the iteration process. ~:",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," may be used only if the command it would terminate is ~:{ or ~:@{. The entire iteration process is terminated if and only if the sublist that is supplying the arguments for the current iteration step is the last sublist in the case of ~:{, or the last ",(0,r.jsx)("b",{children:"format"})," argument in the case of ~:@{. ~:",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," is not equivalent to ~#:",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),"; the latter terminates the entire iteration if and only if no arguments remain for the current iteration step. For example:"]}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~:{~@?~:',(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),'...~}" \u2019(("a") ("b"))) ',(0,r.jsx)("i",{children:"\u2192"}),' "a...b"']}),"\n",(0,r.jsxs)(n.p,{children:["If ~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," appears within a control string being processed under the control of a ~? directive, but not within any ~{ or ~< construct within that string, then the string being processed will be terminated, thereby ending processing of the ~? directive. Processing then continues within the string containing the ~? directive at the point following that directive."]}),"\n",(0,r.jsxs)(n.p,{children:["If ~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," appears within a ~[ or ~( construct, then all the commands up to the ~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," are properly selected or case-converted, the ~[ or ~( processing is terminated, and the outward search continues for a ~{ or ~< construct to be terminated. For example:"]}),"\n",(0,r.jsxs)(n.p,{children:['(setq tellstr "~@(~@[~R~]~',(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),' ~A!~)")']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("i",{children:"\u2192"}),' "~@(~@[~R~]~',(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),' ~A!~)"']}),"\n",(0,r.jsxs)(n.p,{children:["(format nil tellstr 23) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "Twenty-three!"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil tellstr nil "losers") ',(0,r.jsx)(n.em,{children:"\u2192"}),' " Losers!"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil tellstr 23 "losers") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "Twenty-three losers!"']}),"\n",(0,r.jsxs)(n.p,{children:["Following are examples of the use of ~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," within a ~< construct."]}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~15<~S~;~',(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),"~S~;~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),'~S~>" \u2019foo)']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' " FOO"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~15<~S~;~',(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),"~S~;~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),'~S~>" \u2019foo \u2019bar)']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "FOO BAR"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~15<~S~;~',(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),"~S~;~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})}),'~S~>" \u2019foo \u2019bar \u2019baz)']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "FOO BAR BAZ"']})]})}function Be(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Ne,{...e})}):Ne(e)}function Ve(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Tilde"})," immediately followed by a ",(0,r.jsx)(n.em,{children:"newline"})," ignores the ",(0,r.jsx)(n.em,{children:"newline"})," and any following non-newline ",(0,r.jsx)(n.em,{children:"whitespace"}),(0,r.jsx)("sub",{children:"1"})," characters. With a :, the ",(0,r.jsx)(n.em,{children:"newline"})," is ignored, but any following ",(0,r.jsx)(n.em,{children:"whitespace"}),(0,r.jsx)("sub",{children:"1"})," is left in place. With an @, the ",(0,r.jsx)(n.em,{children:"newline"})," is left in place, but any following ",(0,r.jsx)(n.em,{children:"whitespace"}),(0,r.jsx)("sub",{children:"1"})," is ignored. For example:"]}),"\n",(0,r.jsx)(n.p,{children:"(defun type-clash-error (fn nargs argnum right-type wrong-type)"}),"\n",(0,r.jsx)(n.p,{children:"(format *error-output*"}),"\n",(0,r.jsxs)(n.p,{children:['"~&~S requires its ~:[~',":R","~;~*~]~"]}),"\n",(0,r.jsx)(n.p,{children:"argument to be of type ~S,~%but it was called ~"}),"\n",(0,r.jsx)(n.p,{children:'with an argument of type ~S.~%"'}),"\n",(0,r.jsx)(n.p,{children:"fn (eql nargs 1) argnum right-type wrong-type))"}),"\n",(0,r.jsx)(n.p,{children:"(type-clash-error \u2019aref nil 2 \u2019integer \u2019vector) prints:"}),"\n",(0,r.jsx)(n.p,{children:"AREF requires its second argument to be of type INTEGER,"}),"\n",(0,r.jsx)(n.p,{children:"but it was called with an argument of type VECTOR."}),"\n",(0,r.jsx)(n.p,{children:"NIL"}),"\n",(0,r.jsx)(n.p,{children:"(type-clash-error \u2019car 1 1 \u2019list \u2019short-float) prints:"}),"\n",(0,r.jsx)(n.p,{children:"CAR requires its argument to be of type LIST,"}),"\n",(0,r.jsx)(n.p,{children:"but it was called with an argument of type SHORT-FLOAT."}),"\n",(0,r.jsx)(n.p,{children:"NIL"}),"\n",(0,r.jsx)(n.p,{children:"Note that in this example newlines appear in the output only as specified by the ~& and ~% directives; the actual newline characters in the control string are suppressed because each is preceded by a tilde."})]})}function He(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Ve,{...e})}):Ve(e)}function We(e){return(0,r.jsx)(r.Fragment,{})}function Ge(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(We,{...e})}):We()}function $e(e){const n={p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The case-conversion, conditional, iteration, and justification constructs can contain other formatting constructs by bracketing them. These constructs must nest properly with respect to each other. For example, it is not legitimate to put the start of a case-conversion construct in each arm of a conditional and the end of the case-conversion construct outside the conditional:"}),"\n",(0,r.jsx)(n.p,{children:'(format nil "~:[abc~:@(def~;ghi~'}),"\n",(0,r.jsx)(n.p,{children:':@(jkl~]mno~)" x) ;Invalid!'}),"\n",(0,r.jsx)(n.p,{children:"This notation is invalid because the ~[...~;...~] and ~(...~) constructs are not properly nested."}),"\n",(0,r.jsx)(n.p,{children:"The processing indirection caused by the ~? directive is also a kind of nesting for the purposes of this rule of proper nesting. It is not permitted to start a bracketing construct within a string processed under control of a ~? directive and end the construct at some point after the ~? construct in the string containing that construct, or vice versa. For example, this situation is invalid:"}),"\n",(0,r.jsx)(n.p,{children:'(format nil "~@?ghi~)" "abc~@(def") ;Invalid!'}),"\n",(0,r.jsx)(n.p,{children:"This notation is invalid because the ~? and ~(...~) constructs are not properly nested."})]})}function Xe(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)($e,{...e})}):$e(e)}function Ue(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(n.p,{children:["The consequences are undefined if no ",(0,r.jsx)(n.em,{children:"arg"})," remains for a directive requiring an argument. However, it is permissible for one or more ",(0,r.jsx)(n.em,{children:"args"})," to remain unprocessed by a directive; such ",(0,r.jsx)(n.em,{children:"args"})," are ignored."]})}function Qe(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Ue,{...e})}):Ue(e)}function Ze(e){const n={p:"p",...(0,s.a)(),...e.components};return(0,r.jsx)(n.p,{children:"The consequences are undefined if a format directive is given more parameters than it is described here as accepting."})}function Ye(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Ze,{...e})}):Ze(e)}function _e(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(n.p,{children:["The consequences are undefined if ",(0,r.jsx)(n.em,{children:"colon"})," or ",(0,r.jsx)(n.em,{children:"at-sign"})," modifiers are given to a directive in a combination not specifically described here as being meaningful."]})}function Je(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(_e,{...e})}):_e(e)}function Ke(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:['(format nil "foo") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "foo"']}),"\n",(0,r.jsxs)(n.p,{children:["(setq x 5) ",(0,r.jsx)(n.em,{children:"\u2192"})," 5"]}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "The answer is ~D." x) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "The answer is 5."']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "The answer is ~3D." x) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "The answer is 5."']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "The answer is ~3,\u20190D." x) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "The answer is 005."']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "The answer is ~',":D",'." (expt 47 x))']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "The answer is 229,345,007."']}),"\n",(0,r.jsxs)(n.p,{children:['(setq y "elephant") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "elephant"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "Look at the ~A!" y) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "Look at the elephant!"']}),"\n",(0,r.jsxs)(n.p,{children:["(setq n 3) ",(0,r.jsx)(n.em,{children:"\u2192"})," 3"]}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~D item~',":P",' found." n) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "3 items found."']}),"\n",(0,r.jsx)(n.p,{children:'(format nil "~R dog~:[s are~; is~] here." n (= n 1))'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "three dogs are here."']}),"\n",(0,r.jsx)(n.p,{children:'(format nil "~R dog~:*~[s are~; is~:;s are~] here." n)'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "three dogs are here."']}),"\n",(0,r.jsx)(n.p,{children:'(format nil "Here ~[are~;is~:;are~] ~:*~R pupp~:@P." n)'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "Here are three puppies."']}),"\n",(0,r.jsx)(n.p,{children:"(defun foo (x)"}),"\n",(0,r.jsx)(n.p,{children:'(format nil "~6,2F|~6,2,1,\u2019*F|~6,2\u201e\u2019?F|~6F|~,2F|~F"'}),"\n",(0,r.jsxs)(n.p,{children:["x x x x x x)) ",(0,r.jsx)(n.em,{children:"\u2192"})," FOO"]}),"\n",(0,r.jsxs)(n.p,{children:["(foo 3.14159) ",(0,r.jsx)(n.em,{children:"\u2192"}),' " 3.14| 31.42| 3.14|3.1416|3.14|3.14159"']}),"\n",(0,r.jsxs)(n.p,{children:["(foo -3.14159) ",(0,r.jsx)(n.em,{children:"\u2192"}),' " -3.14|-31.42| -3.14|-3.142|-3.14|-3.14159"']}),"\n",(0,r.jsxs)(n.p,{children:["(foo 100.0) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "100.00|******|100.00| 100.0|100.00|100.0"']}),"\n",(0,r.jsxs)(n.p,{children:["(foo 1234.0) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "1234.00|******|??????|1234.0|1234.00|1234.0"']}),"\n",(0,r.jsxs)(n.p,{children:["(foo 0.006) ",(0,r.jsx)(n.em,{children:"\u2192"}),' " 0.01| 0.06| 0.01| 0.006|0.01|0.006"']}),"\n",(0,r.jsx)(n.p,{children:"(defun foo (x)"}),"\n",(0,r.jsx)(n.p,{children:"(format nil"}),"\n",(0,r.jsx)(n.p,{children:'"~9,2,1\u201e\u2019*E|~10,3,2,2,\u2019?\u201e\u2019$E|~'}),"\n",(0,r.jsx)(n.p,{children:'~9,3,2,-2,\u2019%@E|~9,2E"'}),"\n",(0,r.jsx)(n.p,{children:"x x x x))"}),"\n",(0,r.jsxs)(n.p,{children:["(foo 3.14159) ",(0,r.jsx)(n.em,{children:"\u2192"}),' " 3.14E+0| 31.42$-01|+.003E+03| 3.14E+0"']}),"\n",(0,r.jsxs)(n.p,{children:["(foo -3.14159) ",(0,r.jsx)(n.em,{children:"\u2192"}),' " -3.14E+0|-31.42$-01|-.003E+03| -3.14E+0"']}),"\n",(0,r.jsxs)(n.p,{children:["(foo 1100.0) ",(0,r.jsx)(n.em,{children:"\u2192"}),' " 1.10E+3| 11.00$+02|+.001E+06| 1.10E+3"']}),"\n",(0,r.jsxs)(n.p,{children:["(foo 1100.0L0) ",(0,r.jsx)(n.em,{children:"\u2192"}),' " 1.10L+3| 11.00$+02|+.001L+06| 1.10L+3"']}),"\n",(0,r.jsxs)(n.p,{children:["(foo 1.1E13) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "*********| 11.00$+12|+.001E+16| 1.10E+13"']}),"\n",(0,r.jsxs)(n.p,{children:["(foo 1.1L120) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "*********|??????????|%%%%%%%%%|1.10L+120"']}),"\n",(0,r.jsxs)(n.p,{children:["(foo 1.1L1200) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "*********|??????????|%%%%%%%%%|1.10L+1200"']}),"\n",(0,r.jsx)(n.p,{children:"As an example of the effects of varying the scale factor, the code"}),"\n",(0,r.jsx)(n.p,{children:"(dotimes (k 13)"}),"\n",(0,r.jsx)(n.p,{children:'(format t "~%Scale factor ~2D: |~13,6,2,VE|"'}),"\n",(0,r.jsx)(n.p,{children:"(- k 5) (- k 5) 3.14159))"}),"\n",(0,r.jsx)(n.p,{children:"produces the following output:"}),"\n",(0,r.jsx)(n.p,{children:"Scale factor -5: | 0.000003E+06|"}),"\n",(0,r.jsx)(n.p,{children:"Scale factor -4: | 0.000031E+05|"}),"\n",(0,r.jsx)(n.p,{children:"Scale factor -3: | 0.000314E+04|"}),"\n",(0,r.jsx)(n.p,{children:"Scale factor -2: | 0.003142E+03|"}),"\n",(0,r.jsx)(n.p,{children:"Scale factor -1: | 0.031416E+02|"}),"\n",(0,r.jsx)(n.p,{children:"Scale factor 0: | 0.314159E+01|"}),"\n",(0,r.jsx)(n.p,{children:"Scale factor 1: | 3.141590E+00|"}),"\n",(0,r.jsx)(n.p,{children:"Scale factor 2: | 31.41590E-01|"}),"\n",(0,r.jsx)(n.p,{children:"Scale factor 3: | 314.1590E-02|"}),"\n",(0,r.jsx)(n.p,{children:"Scale factor 4: | 3141.590E-03|"}),"\n",(0,r.jsx)(n.p,{children:"Scale factor 5: | 31415.90E-04|"}),"\n",(0,r.jsx)(n.p,{children:"Scale factor 6: | 314159.0E-05|"}),"\n",(0,r.jsx)(n.p,{children:"Scale factor 7: | 3141590.E-06|"}),"\n",(0,r.jsx)(n.p,{children:"(defun foo (x)"}),"\n",(0,r.jsx)(n.p,{children:'(format nil "~9,2,1\u201e\u2019*G|~9,3,2,3,\u2019?\u201e\u2019$G|~9,3,2,0,\u2019%G|~9,2G" x x x x))'}),"\n",(0,r.jsxs)(n.p,{children:["(foo 0.0314159) ",(0,r.jsx)(n.em,{children:"\u2192"}),' " 3.14E-2|314.2$-04|0.314E-01| 3.14E-2" (foo 0.314159) ',(0,r.jsx)(n.em,{children:"\u2192"}),' " 0.31 |0.314 |0.314 | 0.31 " (foo 3.14159) ',(0,r.jsx)(n.em,{children:"\u2192"}),' " 3.1 | 3.14 | 3.14 | 3.1 " (foo 31.4159) ',(0,r.jsx)(n.em,{children:"\u2192"}),' " 31. | 31.4 | 31.4 | 31. " (foo 314.159) ',(0,r.jsx)(n.em,{children:"\u2192"}),' " 3.14E+2| 314. | 314. | 3.14E+2" (foo 3141.59) ',(0,r.jsx)(n.em,{children:"\u2192"}),' " 3.14E+3|314.2$+01|0.314E+04| 3.14E+3" (foo 3141.59L0) ',(0,r.jsx)(n.em,{children:"\u2192"}),' " 3.14L+3|314.2$+01|0.314L+04| 3.14L+3" (foo 3.14E12) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "*********|314.0$+10|0.314E+13| 3.14E+12" (foo 3.14L120) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "*********|?????????|%%%%%%%%%|3.14L+120" (foo 3.14L1200) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "*********|?????????|%%%%%%%%%|3.14L+1200"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~10<foo~;bar~>") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "foo bar"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~10:<foo~;bar~>") ',(0,r.jsx)(n.em,{children:"\u2192"}),' " foo bar"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~10<foobar~>") ',(0,r.jsx)(n.em,{children:"\u2192"}),' " foobar"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~10:<foobar~>") ',(0,r.jsx)(n.em,{children:"\u2192"}),' " foobar"']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~10:@<foo~;bar~>") ',(0,r.jsx)(n.em,{children:"\u2192"}),' " foo bar "']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~10@<foobar~>") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "foobar "']}),"\n",(0,r.jsxs)(n.p,{children:['(format nil "~10:@<foobar~>") ',(0,r.jsx)(n.em,{children:"\u2192"}),' " foobar "']}),"\n",(0,r.jsx)(n.p,{children:'(FORMAT NIL "Written to ~A." #P"foo.bin")'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "Written to foo.bin."']})]})}function en(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Ke,{...e})}):Ke(e)}function nn(e){const n={del:"del",em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Formatted output is performed not only by ",(0,r.jsx)(n.strong,{children:"format"}),", but by certain other functions that accept a ",(0,r.jsx)(n.em,{children:"format control"})," the way ",(0,r.jsx)(n.strong,{children:"format"})," does. For example, error-signaling functions such as ",(0,r.jsx)(n.strong,{children:"cerror"})," accept ",(0,r.jsx)(n.em,{children:"format controls"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Note that the meaning of ",(0,r.jsx)(n.strong,{children:"nil"})," and ",(0,r.jsx)(n.strong,{children:"t"})," as destinations to ",(0,r.jsx)(n.strong,{children:"format"})," are different than those of ",(0,r.jsx)(n.strong,{children:"nil"})," and ",(0,r.jsx)(n.strong,{children:"t"})," as ",(0,r.jsx)(n.em,{children:"stream designators"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ~",(0,r.jsx)("i",{children:(0,r.jsx)("sup",{children:"\u2227"})})," should appear only at the beginning of a ~< clause, because it aborts the entire clause in which it appears (as well as all following clauses)."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"copy-pprint-dispatch"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"copy-pprint-dispatch"})," &optional ",(0,r.jsx)(n.em,{children:"table \u2192 new-table"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"table"}),"\u2014a ",(0,r.jsx)(n.em,{children:"pprint dispatch table"}),", or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"new-table"}),"\u2014a ",(0,r.jsx)(n.em,{children:"fresh pprint dispatch table"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Creates and returns a copy of the specified ",(0,r.jsx)(n.em,{children:"table"}),", or of the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-pprint-dispatch*"})," if no ",(0,r.jsx)(n.em,{children:"table"})," is specified, or of the initial ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-pprint-dispatch*"})," if ",(0,r.jsx)(n.strong,{children:"nil"})," is specified."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["Should signal an error of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"type-error"})," if ",(0,r.jsx)(n.em,{children:"table"})," is not a ",(0,r.jsx)(n.em,{children:"pprint dispatch table"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"formatter"})," ",(0,r.jsx)(n.em,{children:"Macro"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"formatter"})," ",(0,r.jsx)(n.em,{children:"control-string \u2192 function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"control-string"}),"\u2014a ",(0,r.jsx)(n.em,{children:"format string"}),"; not evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"function"}),"\u2014a ",(0,r.jsx)(n.em,{children:"function"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns a ",(0,r.jsx)(n.em,{children:"function"})," which has behavior equivalent to:"]}),"\n",(0,r.jsx)(n.p,{children:"#\u2019(lambda (*standard-output* &rest arguments)"}),"\n",(0,r.jsxs)(n.p,{children:["(apply #\u2019format t ",(0,r.jsx)(n.em,{children:"control-string"})," arguments)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"arguments-tail"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["where ",(0,r.jsx)(n.em,{children:"arguments-tail"})," is either the tail of ",(0,r.jsx)(n.em,{children:"arguments"})," which has as its ",(0,r.jsx)(n.em,{children:"car"})," the argument that would be processed next if there were more format directives in the ",(0,r.jsx)(n.em,{children:"control-string"}),", or else ",(0,r.jsx)(n.strong,{children:"nil"})," if no more ",(0,r.jsx)(n.em,{children:"arguments"})," follow the most recently processed argument."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.p,{children:'(funcall (formatter "~&~A~A") *standard-output* \u2019a \u2019b \u2019c)'}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 AB"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," (C)"]}),"\n",(0,r.jsx)(n.p,{children:'(format t (formatter "~&~A~A") \u2019a \u2019b \u2019c)'}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 AB"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["Might signal an error (at macro expansion time or at run time) if the argument is not a valid ",(0,r.jsx)(n.em,{children:"format string"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"format"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-dispatch"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-dispatch"})," ",(0,r.jsx)(n.em,{children:"object"})," &optional ",(0,r.jsx)(n.em,{children:"table \u2192 function, found-p"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"object"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"table"}),"\u2014a ",(0,r.jsx)(n.em,{children:"pprint dispatch table"}),", or ",(0,r.jsx)(n.strong,{children:"nil"}),". The default is the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-pprint-dispatch*"}),". ",(0,r.jsx)(n.em,{children:"function"}),"\u2014a ",(0,r.jsx)(n.em,{children:"function designator"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"found-p"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieves the highest priority function in ",(0,r.jsx)(n.em,{children:"table"})," that is associated with a ",(0,r.jsx)(n.em,{children:"type specifier"})," that matches ",(0,r.jsx)(n.em,{children:"object"}),". The function is chosen by finding all of the ",(0,r.jsx)(n.em,{children:"type specifiers"})," in ",(0,r.jsx)(n.em,{children:"table"})," that match the ",(0,r.jsx)(n.em,{children:"object"})," and selecting the highest priority function associated with any of these ",(0,r.jsx)(n.em,{children:"type specifiers"}),". If there is more than one highest priority function, an arbitrary choice is made. If no ",(0,r.jsx)(n.em,{children:"type specifiers"})," match the ",(0,r.jsx)(n.em,{children:"object"}),", a function is returned that prints ",(0,r.jsx)(n.em,{children:"object"})," using ",(0,r.jsx)(n.strong,{children:"print-object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"secondary value"}),", ",(0,r.jsx)(n.em,{children:"found-p"}),", is ",(0,r.jsx)(n.em,{children:"true"})," if a matching ",(0,r.jsx)(n.em,{children:"type specifier"})," was found in ",(0,r.jsx)(n.em,{children:"table"}),", or ",(0,r.jsx)(n.em,{children:"false"})," otherwise."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"table"})," is ",(0,r.jsx)(n.strong,{children:"nil"}),", retrieval is done in the ",(0,r.jsx)(n.em,{children:"initial pprint dispatch table"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:["The state of the ",(0,r.jsx)(n.em,{children:"table"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["Should signal an error of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"type-error"})," if ",(0,r.jsx)(n.em,{children:"table"})," is neither a ",(0,r.jsx)(n.em,{children:"pprint-dispatch-table"})," nor ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-pretty* t))"}),"\n",(0,r.jsxs)(n.p,{children:["(write object ",":stream"," s))"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2261"})," (funcall (pprint-dispatch object) s object)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-exit-if-list-exhausted"})," ",(0,r.jsx)(n.em,{children:"Local Macro"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-exit-if-list-exhausted"})," ",(0,r.jsx)(n.em,{children:"hno argumentsi \u2192"})," ",(0,r.jsx)(n.strong,{children:"nil"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Tests whether or not the ",(0,r.jsx)(n.em,{children:"list"})," passed to the ",(0,r.jsx)(n.em,{children:"lexically current logical block"})," has been exhausted; see Section 22.2.1.1 (Dynamic Control of the Arrangement of Output). If this ",(0,r.jsx)(n.em,{children:"list"})," has been reduced to ",(0,r.jsx)(n.strong,{children:"nil"}),", ",(0,r.jsx)(n.strong,{children:"pprint-exit-if-list-exhausted"})," terminates the execution of the ",(0,r.jsx)(n.em,{children:"lexically current logical block"})," except for the printing of the suffix. Otherwise ",(0,r.jsx)(n.strong,{children:"pprint-exit-if-list-exhausted"})," returns ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Whether or not ",(0,r.jsx)(n.strong,{children:"pprint-exit-if-list-exhausted"})," is ",(0,r.jsx)(n.em,{children:"fbound"})," in the ",(0,r.jsx)(n.em,{children:"global environment"})," is ",(0,r.jsx)(n.em,{children:"implementation dependent"}),"; however, the restrictions on redefinition and ",(0,r.jsx)(n.em,{children:"shadowing"})," of ",(0,r.jsx)(n.strong,{children:"pprint-exit-if-list-exhausted"})," are the same as for ",(0,r.jsx)(n.em,{children:"symbols"})," in the COMMON-LISP ",(0,r.jsx)(n.em,{children:"package"})," which are ",(0,r.jsx)(n.em,{children:"fbound"})," in the ",(0,r.jsx)(n.em,{children:"global environment"}),". The consequences of attempting to use ",(0,r.jsx)(n.strong,{children:"pprint-exit-if-list-exhausted"})," outside of ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," are undefined."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["An error is signaled (at macro expansion time or at run time) if ",(0,r.jsx)(n.strong,{children:"pprint-exit-if-list-exhausted"})," is used anywhere other than lexically within a call on ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"}),". Also, the consequences of executing ",(0,r.jsx)(n.strong,{children:"pprint-if-list-exhausted"})," outside of the dynamic extent of the ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," which lexically contains it are undefined."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-logical-block"}),", ",(0,r.jsx)(n.strong,{children:"pprint-pop"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"pprint-fill, pprint-linear, pprint-tabular"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-fill, pprint-linear, pprint-tabular"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-fill"})," ",(0,r.jsx)(n.em,{children:"stream object"})," &optional ",(0,r.jsx)(n.em,{children:"colon-p at-sign-p \u2192"})," ",(0,r.jsx)(n.strong,{children:"nil"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-linear"})," ",(0,r.jsx)(n.em,{children:"stream object"})," &optional ",(0,r.jsx)(n.em,{children:"colon-p at-sign-p \u2192"})," ",(0,r.jsx)(n.strong,{children:"nil"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-tabular"})," ",(0,r.jsx)(n.em,{children:"stream object"})," &optional ",(0,r.jsx)(n.em,{children:"colon-p at-sign-p tabsize \u2192"})," ",(0,r.jsx)(n.strong,{children:"nil"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"stream"}),"\u2014an ",(0,r.jsx)(n.em,{children:"output stream designator"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"object"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"colon-p"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),". The default is ",(0,r.jsx)(n.em,{children:"true"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"at-sign-p"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),". The default is ",(0,r.jsx)(n.em,{children:"implementation-dependent"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"tabsize"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," . The default is 16."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["The functions ",(0,r.jsx)(n.strong,{children:"pprint-fill"}),", ",(0,r.jsx)(n.strong,{children:"pprint-linear"}),", and ",(0,r.jsx)(n.strong,{children:"pprint-tabular"})," specify particular ways of ",(0,r.jsx)(n.em,{children:"pretty printing"})," a ",(0,r.jsx)(n.em,{children:"list"})," to ",(0,r.jsx)(n.em,{children:"stream"}),". Each function prints parentheses around the output if and only if ",(0,r.jsx)(n.em,{children:"colon-p"})," is ",(0,r.jsx)(n.em,{children:"true"}),". Each function ignores its ",(0,r.jsx)(n.em,{children:"at-sign-p"})," argument. (Both arguments are included even though only one is needed so that these functions can be used via ~/.../ and as ",(0,r.jsx)(n.strong,{children:"set-pprint-dispatch"})," functions, as well as directly.) Each function handles abbreviation and the detection of circularity and sharing correctly, and uses ",(0,r.jsx)(n.strong,{children:"write"})," to print ",(0,r.jsx)(n.em,{children:"object"})," when it is a ",(0,r.jsx)(n.em,{children:"non-list"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"object"})," is a ",(0,r.jsx)(n.em,{children:"list"})," and if the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-pretty*"})," is ",(0,r.jsx)(n.em,{children:"false"}),", each of these functions prints ",(0,r.jsx)(n.em,{children:"object"})," using a minimum of ",(0,r.jsx)(n.em,{children:"whitespace"}),", as described in Section 22.1.3.5 (Printing Lists and Conses). Otherwise (if ",(0,r.jsx)(n.em,{children:"object"})," is a ",(0,r.jsx)(n.em,{children:"list"})," and if the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-pretty*"})," is ",(0,r.jsx)(n.em,{children:"true"}),"):"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," The ",(0,r.jsx)(n.em,{children:"function"})," ",(0,r.jsx)(n.strong,{children:"pprint-linear"})," prints a ",(0,r.jsx)(n.em,{children:"list"})," either all on one line, or with each ",(0,r.jsx)(n.em,{children:"element"})," on a separate line."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," The ",(0,r.jsx)(n.em,{children:"function"})," ",(0,r.jsx)(n.strong,{children:"pprint-fill"})," prints a ",(0,r.jsx)(n.em,{children:"list"})," with as many ",(0,r.jsx)(n.em,{children:"elements"})," as possible on each line."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," The ",(0,r.jsx)(n.em,{children:"function"})," ",(0,r.jsx)(n.strong,{children:"pprint-tabular"})," is the same as ",(0,r.jsx)(n.strong,{children:"pprint-fill"})," except that it prints the ",(0,r.jsx)(n.em,{children:"elements"})," so that they line up in columns. The ",(0,r.jsx)(n.em,{children:"tabsize"})," specifies the column spacing in ",(0,r.jsx)(n.em,{children:"ems"}),", which is the total spacing from the leading edge of one column to the leading edge of the next."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.p,{children:"Evaluating the following with a line length of 25 produces the output shown."}),"\n",(0,r.jsx)(n.p,{children:'(progn (princ "Roads ")'}),"\n",(0,r.jsx)(n.p,{children:"(pprint-tabular *standard-output* \u2019(elm main maple center) nil nil 8))"}),"\n",(0,r.jsx)(n.p,{children:"Roads ELM MAIN"}),"\n",(0,r.jsx)(n.p,{children:"MAPLE CENTER"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,r.jsxs)(n.p,{children:["Performs output to the indicated ",(0,r.jsx)(n.em,{children:"stream"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:["The cursor position on the indicated ",(0,r.jsx)(n.em,{children:"stream"}),", if it can be determined."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"function"})," ",(0,r.jsx)(n.strong,{children:"pprint-tabular"})," could be defined as follows:"]}),"\n",(0,r.jsx)(n.p,{children:"(defun pprint-tabular (s list &optional (colon-p t) at-sign-p (tabsize nil))"}),"\n",(0,r.jsx)(n.p,{children:"(declare (ignore at-sign-p))"}),"\n",(0,r.jsx)(n.p,{children:"(when (null tabsize) (setq tabsize 16))"}),"\n",(0,r.jsxs)(n.p,{children:["(pprint-logical-block (s list ",":prefix",' (if colon-p "(" "")']}),"\n",(0,r.jsxs)(n.p,{children:[":suffix",' (if colon-p ")" ""))']}),"\n",(0,r.jsx)(n.p,{children:"(pprint-exit-if-list-exhausted)"}),"\n",(0,r.jsxs)(n.p,{children:["(loop (write (pprint-pop) ",":stream"," s)"]}),"\n",(0,r.jsx)(n.p,{children:"(pprint-exit-if-list-exhausted)"}),"\n",(0,r.jsx)(n.p,{children:"(write-char #\\Space s)"}),"\n",(0,r.jsxs)(n.p,{children:["(pprint-tab ",":section-relative"," 0 tabsize s)"]}),"\n",(0,r.jsxs)(n.p,{children:["(pprint-newline ",":fill"," s))))"]}),"\n",(0,r.jsxs)(n.p,{children:["Note that it would have been inconvenient to specify this function using ",(0,r.jsx)(n.strong,{children:"format"}),", because of the need to pass its ",(0,r.jsx)(n.em,{children:"tabsize"})," argument through to a ~",":T"," format directive nested within an iteration over a list."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-indent"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-indent"})," ",(0,r.jsx)(n.em,{children:"relative-to n"})," &optional ",(0,r.jsx)(n.em,{children:"stream \u2192"})," ",(0,r.jsx)(n.strong,{children:"nil"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"relative-to"}),"\u2014either ",":block"," or ",":current","."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"n"}),"\u2014a ",(0,r.jsx)(n.em,{children:"real"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"stream"}),"\u2014an ",(0,r.jsx)(n.em,{children:"output stream designator"})," . The default is ",(0,r.jsx)(n.em,{children:"standard output"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-indent"})," specifies the indentation to use in a logical block on ",(0,r.jsx)(n.em,{children:"stream"}),". If ",(0,r.jsx)(n.em,{children:"stream"})," is a ",(0,r.jsx)(n.em,{children:"pretty printing stream"})," and the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-pretty*"})," is ",(0,r.jsx)(n.em,{children:"true"}),", ",(0,r.jsx)(n.strong,{children:"pprint-indent"})," sets the indentation in the innermost dynamically enclosing logical block; otherwise, ",(0,r.jsx)(n.strong,{children:"pprint-indent"})," has no effect."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"N"})," specifies the indentation in ",(0,r.jsx)(n.em,{children:"ems"}),". If ",(0,r.jsx)(n.em,{children:"relative-to"})," is ",":block",", the indentation is set to the horizontal position of the first character in the ",(0,r.jsx)(n.em,{children:"dynamically current logical block"})," plus ",(0,r.jsx)(n.em,{children:"n ems"}),". If ",(0,r.jsx)(n.em,{children:"relative-to"})," is ",":current",", the indentation is set to the current output position plus ",(0,r.jsx)(n.em,{children:"n ems"}),". (For robustness in the face of variable-width fonts, it is advisable to use ",":current"," with an ",(0,r.jsx)(n.em,{children:"n"})," of zero whenever possible.)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"N"})," can be negative; however, the total indentation cannot be moved left of the beginning of the line or left of the end of the rightmost per-line prefix\u2014an attempt to move beyond one of these limits is treated the same as an attempt to move to that limit. Changes in indentation caused by ",(0,r.jsx)(n.em,{children:"pprint-indent"})," do not take effect until after the next line break. In addition, in miser mode all calls to ",(0,r.jsx)(n.strong,{children:"pprint-indent"})," are ignored, forcing the lines corresponding to the logical block to line up under the first character in the block."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["An error is signaled if ",(0,r.jsx)(n.em,{children:"relative-to"})," is any ",(0,r.jsx)(n.em,{children:"object"})," other than ",":block"," or ",":current","."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:"Section 22.3.5.3 (Tilde I: Indent)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," ",(0,r.jsx)(n.em,{children:"Macro"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," (",(0,r.jsx)(n.em,{children:"stream-symbol object"})," &key ",(0,r.jsx)(n.em,{children:"prefix per-line-prefix suffix"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"{declaration}"}),"* ",(0,r.jsx)(n.em,{children:"{form}"}),"*"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," ",(0,r.jsx)(n.strong,{children:"nil"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"stream-symbol"}),"\u2014a ",(0,r.jsx)(n.em,{children:"stream variable designator"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"object"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"; evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[":prefix","\u2014a ",(0,r.jsx)(n.em,{children:"string"}),"; evaluated. Complicated defaulting behavior; see below."]}),"\n",(0,r.jsxs)(n.p,{children:[":per-line-prefix","\u2014a ",(0,r.jsx)(n.em,{children:"string"}),"; evaluated. Complicated defaulting behavior; see below. ",":suffix","\u2014a ",(0,r.jsx)(n.em,{children:"string"}),"; evaluated. The default is the ",(0,r.jsx)(n.em,{children:"null string"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,r.jsx)(n.strong,{children:"declare"})," ",(0,r.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"forms"}),"\u2014an ",(0,r.jsx)(n.em,{children:"implicit progn"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"pprint-logical-block"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsx)(n.p,{children:"Causes printing to be grouped into a logical block."}),"\n",(0,r.jsxs)(n.p,{children:["The logical block is printed to the ",(0,r.jsx)(n.em,{children:"stream"})," that is the ",(0,r.jsx)(n.em,{children:"value"})," of the ",(0,r.jsx)(n.em,{children:"variable"})," denoted by ",(0,r.jsx)(n.em,{children:"stream-symbol"}),". During the execution of the ",(0,r.jsx)(n.em,{children:"forms"}),", that ",(0,r.jsx)(n.em,{children:"variable"})," is ",(0,r.jsx)(n.em,{children:"bound"})," to a ",(0,r.jsx)(n.em,{children:"pretty printing stream"})," that supports decisions about the arrangement of output and then forwards the output to the destination stream. All the standard printing functions (",(0,r.jsx)(n.em,{children:"e.g."}),", ",(0,r.jsx)(n.strong,{children:"write"}),", ",(0,r.jsx)(n.strong,{children:"princ"}),", and ",(0,r.jsx)(n.strong,{children:"terpri"}),") can be used to print output to the ",(0,r.jsx)(n.em,{children:"pretty printing stream"}),". All and only the output sent to this ",(0,r.jsx)(n.em,{children:"pretty printing stream"})," is treated as being in the logical block."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"prefix"})," specifies a prefix to be printed before the beginning of the logical block. The ",(0,r.jsx)(n.em,{children:"per-line-prefix"})," specifies a prefix that is printed before the block and at the beginning of each new line in the block. The ",":prefix"," and ",":pre-line-prefix"," ",(0,r.jsx)(n.em,{children:"arguments"})," are mutually exclusive. If neither ",":prefix"," nor ",":per-line-prefix"," is specified, a ",(0,r.jsx)(n.em,{children:"prefix"})," of the ",(0,r.jsx)(n.em,{children:"null string"})," is assumed."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"suffix"})," specifies a suffix that is printed just after the logical block."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"object"})," is normally a ",(0,r.jsx)(n.em,{children:"list"})," that the body ",(0,r.jsx)(n.em,{children:"forms"})," are responsible for printing. If ",(0,r.jsx)(n.em,{children:"object"})," is not a ",(0,r.jsx)(n.em,{children:"list"}),", it is printed using ",(0,r.jsx)(n.strong,{children:"write"}),". (This makes it easier to write printing functions that are robust in the face of malformed arguments.) If ",(0,r.jsx)(n.strong,{children:"*print-circle*"})," is ",(0,r.jsx)(n.em,{children:"non-nil"})," and ",(0,r.jsx)(n.em,{children:"object"})," is a circular (or shared) reference to a ",(0,r.jsx)(n.em,{children:"cons"}),", then an appropriate \u201c#",(0,r.jsx)(n.em,{children:"n"}),"#\u201d marker is printed. (This makes it easy to write printing"]}),"\n",(0,r.jsxs)(n.p,{children:["functions that provide full support for circularity and sharing abbreviation.) If ",(0,r.jsx)(n.strong,{children:"*print-level*"})," is not ",(0,r.jsx)(n.strong,{children:"nil"})," and the logical block is at a dynamic nesting depth of greater than ",(0,r.jsx)(n.strong,{children:"*print-level*"})," in logical blocks, \u201c#\u201d is printed. (This makes easy to write printing functions that provide full support for depth abbreviation.)"]}),"\n",(0,r.jsxs)(n.p,{children:["If either of the three conditions above occurs, the indicated output is printed on ",(0,r.jsx)(n.em,{children:"stream-symbol"})," and the body ",(0,r.jsx)(n.em,{children:"forms"})," are skipped along with the printing of the ",":prefix"," and ",":suffix",". (If the body ",(0,r.jsx)(n.em,{children:"forms"})," are not to be responsible for printing a list, then the first two tests above can be turned off by supplying ",(0,r.jsx)(n.strong,{children:"nil"})," for the ",(0,r.jsx)(n.em,{children:"object"})," argument.)"]}),"\n",(0,r.jsxs)(n.p,{children:["In addition to the ",(0,r.jsx)(n.em,{children:"object"})," argument of ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"}),", the arguments of the standard printing functions (such as ",(0,r.jsx)(n.strong,{children:"write"}),", ",(0,r.jsx)(n.strong,{children:"print"}),", ",(0,r.jsx)(n.strong,{children:"prin1"}),", and ",(0,r.jsx)(n.strong,{children:"pprint"}),", as well as the arguments of the standard ",(0,r.jsx)(n.em,{children:"format directives"})," such as ~A, ~S, (and ~W) are all checked (when necessary) for circularity and sharing. However, such checking is not applied to the arguments of the functions ",(0,r.jsx)(n.strong,{children:"write-line"}),", ",(0,r.jsx)(n.strong,{children:"write-string"}),", and ",(0,r.jsx)(n.strong,{children:"write-char"})," or to the literal text output by ",(0,r.jsx)(n.strong,{children:"format"}),". A consequence of this is that you must use one of the latter functions if you want to print some literal text in the output that is not supposed to be checked for circularity or sharing."]}),"\n",(0,r.jsxs)(n.p,{children:["The body ",(0,r.jsx)(n.em,{children:"forms"})," of a ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," ",(0,r.jsx)(n.em,{children:"form"})," must not perform any side-effects on the surrounding environment; for example, no ",(0,r.jsx)(n.em,{children:"variables"})," must be assigned which have not been ",(0,r.jsx)(n.em,{children:"bound"})," within its scope."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," ",(0,r.jsx)(n.em,{children:"macro"})," may be used regardless of the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-pretty*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*print-circle*"}),", ",(0,r.jsx)(n.strong,{children:"*print-level*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["An error of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"type-error"})," is signaled if any of the ",":suffix",", ",":prefix",", or ",":per-line-prefix"," is supplied but does not evaluate to a ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["An error is signaled if ",":prefix"," and ",":pre-line-prefix"," are both used."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," and the ",(0,r.jsx)(n.em,{children:"pretty printing stream"})," it creates have ",(0,r.jsx)(n.em,{children:"dynamic extent"}),". The consequences are undefined if, outside of this extent, output is attempted to the ",(0,r.jsx)(n.em,{children:"pretty printing stream"})," it creates."]}),"\n",(0,r.jsx)(n.p,{children:"It is also unspecified what happens if, within this extent, any output is sent directly to the underlying destination stream."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-pop"}),", ",(0,r.jsx)(n.strong,{children:"pprint-exit-if-list-exhausted"}),", Section 22.3.5.2 (Tilde Less-Than-Sign: Logical Block)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["One reason for using the ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," ",(0,r.jsx)(n.em,{children:"macro"})," when the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-pretty*"})," is ",(0,r.jsx)(n.strong,{children:"nil"})," would be to allow it to perform checking for ",(0,r.jsx)(n.em,{children:"dotted lists"}),", as well as (in conjunction with ",(0,r.jsx)(n.strong,{children:"pprint-pop"}),") checking for ",(0,r.jsx)(n.strong,{children:"*print-level*"})," or ",(0,r.jsx)(n.strong,{children:"*print-length*"})," being exceeded."]}),"\n",(0,r.jsxs)(n.p,{children:["Detection of circularity and sharing is supported by the ",(0,r.jsx)(n.em,{children:"pretty printer"})," by in essence performing requested output twice. On the first pass, circularities and sharing are detected and the actual outputting of characters is suppressed. On the second pass, the appropriate \u201c#",(0,r.jsx)(n.em,{children:"n"}),"=\u201d and \u201c#",(0,r.jsx)(n.em,{children:"n"}),"#\u201d markers are inserted and characters are output. This is why the restriction on side-effects is necessary. Obeying this restriction is facilitated by using ",(0,r.jsx)(n.strong,{children:"pprint-pop"}),", instead of an ordinary ",(0,r.jsx)(n.strong,{children:"pop"})," when traversing a list being printed by the body ",(0,r.jsx)(n.em,{children:"forms"})," of the ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," ",(0,r.jsx)(n.em,{children:"form"}),".)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-newline"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-newline"})," ",(0,r.jsx)(n.em,{children:"kind"})," &optional ",(0,r.jsx)(n.em,{children:"stream \u2192"})," ",(0,r.jsx)(n.strong,{children:"nil"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"kind"}),"\u2014one of ",":linear",", ",":fill",", ",":miser",", or ",":mandatory","."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"stream"}),"\u2014a ",(0,r.jsx)(n.em,{children:"stream designator"})," . The default is ",(0,r.jsx)(n.em,{children:"standard output"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"stream"})," is a ",(0,r.jsx)(n.em,{children:"pretty printing stream"})," and the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-pretty*"})," is ",(0,r.jsx)(n.em,{children:"true"}),", a line break is inserted in the output when the appropriate condition below is satisfied; otherwise, ",(0,r.jsx)(n.strong,{children:"pprint-newline"})," has no effect."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Kind"})," specifies the style of conditional newline. This ",(0,r.jsx)(n.em,{children:"parameter"})," is treated as follows:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"pprint-newline"})}),"\n",(0,r.jsx)(n.p,{children:":linear"}),"\n",(0,r.jsxs)(n.p,{children:["This specifies a \u201clinear-style\u201d ",(0,r.jsx)(n.em,{children:"conditional newline"}),". A line break is inserted if and only if the immediately containing ",(0,r.jsx)(n.em,{children:"section"})," cannot be printed on one line. The effect of this is that line breaks are either inserted at every linear-style conditional newline in a logical block or at none of them."]}),"\n",(0,r.jsx)(n.p,{children:":miser"}),"\n",(0,r.jsxs)(n.p,{children:["This specifies a \u201cmiser-style\u201d ",(0,r.jsx)(n.em,{children:"conditional newline"}),". A line break is inserted if and only if the immediately containing ",(0,r.jsx)(n.em,{children:"section"})," cannot be printed on one line and miser style is in effect in the immediately containing logical block. The effect of this is that miser-style conditional newlines act like linear-style conditional newlines, but only when miser style is in effect. Miser style is in effect for a logical block if and only if the starting position of the logical block is less than or equal to ",(0,r.jsx)(n.strong,{children:"*print-miser-width*"})," ",(0,r.jsx)(n.em,{children:"ems"})," from the right margin."]}),"\n",(0,r.jsx)(n.p,{children:":fill"}),"\n",(0,r.jsxs)(n.p,{children:["This specifies a \u201cfill-style\u201d ",(0,r.jsx)(n.em,{children:"conditional newline"}),". A line break is inserted if and only if either (a) the following ",(0,r.jsx)(n.em,{children:"section"})," cannot be printed on the end of the current line, (b) the preceding ",(0,r.jsx)(n.em,{children:"section"})," was not printed on a single line, or (c) the immediately containing ",(0,r.jsx)(n.em,{children:"section"})," cannot be printed on one line and miser style is in effect in the immediately containing logical block. If a logical block is broken up into a number of subsections by fill-style conditional newlines, the basic effect is that the logical block is printed with as many subsections as possible on each line. However, if miser style is in effect, fill-style conditional newlines act like linear-style conditional newlines."]}),"\n",(0,r.jsx)(n.p,{children:":mandatory"}),"\n",(0,r.jsxs)(n.p,{children:["This specifies a \u201cmandatory-style\u201d ",(0,r.jsx)(n.em,{children:"conditional newline"}),". A line break is always inserted. This implies that none of the containing ",(0,r.jsx)(n.em,{children:"sections"})," can be printed on a single line and will therefore trigger the insertion of line breaks at linear-style conditional newlines in these ",(0,r.jsx)(n.em,{children:"sections"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["When a line break is inserted by any type of conditional newline, any blanks that immediately precede the conditional newline are omitted from the output and indentation is introduced at the beginning of the next line. By default, the indentation causes the following line to begin in the same horizontal position as the first character in the immediately containing logical block. (The indentation can be changed via ",(0,r.jsx)(n.strong,{children:"pprint-indent"}),".)"]}),"\n",(0,r.jsxs)(n.p,{children:["There are a variety of ways unconditional newlines can be introduced into the output (",(0,r.jsx)(n.em,{children:"i.e."}),", via ",(0,r.jsx)(n.strong,{children:"terpri"})," or by printing a string containing a newline character). As with mandatory conditional newlines, this prevents any of the containing ",(0,r.jsx)(n.em,{children:"sections"})," from being printed on one line. In general, when an unconditional newline is encountered, it is printed out without suppression of the preceding blanks and without any indentation following it. However, if a per-line prefix has been specified (see ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"}),"), this prefix will always be printed no matter how a newline originates."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.p,{children:"See Section 22.2.2 (Examples of using the Pretty Printer)."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,r.jsxs)(n.p,{children:["Output to ",(0,r.jsx)(n.em,{children:"stream"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*print-pretty*"}),", ",(0,r.jsx)(n.strong,{children:"*print-miser*"}),". The presence of containing logical blocks. The placement of newlines and conditional newlines."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["An error of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"type-error"})," is signaled if ",(0,r.jsx)(n.em,{children:"kind"})," is not one of ",":linear",", ",":fill",", ",":miser",", or ",":mandatory","."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:"Section 22.3.5.1 (Tilde Underscore: Conditional Newline), Section 22.2.2 (Examples of using the Pretty Printer)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-pop"})," ",(0,r.jsx)(n.em,{children:"Local Macro"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-pop"})," ",(0,r.jsx)(n.em,{children:"hno argumentsi \u2192 object"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"object"}),"\u2014an ",(0,r.jsx)(n.em,{children:"element"})," of the ",(0,r.jsx)(n.em,{children:"list"})," being printed in the ",(0,r.jsx)(n.em,{children:"lexically current logical block"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Pops one ",(0,r.jsx)(n.em,{children:"element"})," from the ",(0,r.jsx)(n.em,{children:"list"})," being printed in the ",(0,r.jsx)(n.em,{children:"lexically current logical block"})," , obeying ",(0,r.jsx)(n.strong,{children:"*print-length*"})," and ",(0,r.jsx)(n.strong,{children:"*print-circle*"})," as described below."]}),"\n",(0,r.jsxs)(n.p,{children:["Each time ",(0,r.jsx)(n.strong,{children:"pprint-pop"})," is called, it pops the next value off the ",(0,r.jsx)(n.em,{children:"list"})," passed to the ",(0,r.jsx)(n.em,{children:"lexically current logical block"})," and returns it. However, before doing this, it performs three tests:"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," If the remaining \u2018list\u2019 is not a ",(0,r.jsx)(n.em,{children:"list"}),", \u201c. \u201d is printed followed by the remaining \u2018list.\u2019 (This makes it easier to write printing functions that are robust in the face of malformed arguments.)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," If ",(0,r.jsx)(n.strong,{children:"*print-length*"})," is ",(0,r.jsx)(n.em,{children:"non-nil"}),", and ",(0,r.jsx)(n.strong,{children:"pprint-pop"})," has already been called ",(0,r.jsx)(n.strong,{children:"*print-length*"})," times within the immediately containing logical block, \u201c...\u201d is printed. (This makes it easy to write printing functions that properly handle ",(0,r.jsx)(n.strong,{children:"*print-length*"}),".)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," If ",(0,r.jsx)(n.strong,{children:"*print-circle*"})," is ",(0,r.jsx)(n.em,{children:"non-nil"}),", and the remaining list is a circular (or shared) reference, then \u201c. \u201d is printed followed by an appropriate \u201c#",(0,r.jsx)(n.em,{children:"n"}),"#\u201d marker. (This catches instances of ",(0,r.jsx)(n.em,{children:"cdr"})," circularity and sharing in lists.)"]}),"\n",(0,r.jsxs)(n.p,{children:["If either of the three conditions above occurs, the indicated output is printed on the ",(0,r.jsx)(n.em,{children:"pretty printing stream"})," created by the immediately containing ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," and the execution of the immediately containing ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," is terminated except for the printing of the suffix."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," is given a \u2018list\u2019 argument of ",(0,r.jsx)(n.strong,{children:"nil"}),"\u2014because it is not processing a list\u2014 ",(0,r.jsx)(n.strong,{children:"pprint-pop"})," can still be used to obtain support for ",(0,r.jsx)(n.strong,{children:"*print-length*"}),". In this situation, the first and third tests above are disabled and ",(0,r.jsx)(n.strong,{children:"pprint-pop"})," always returns ",(0,r.jsx)(n.strong,{children:"nil"}),". See Section 22.2.2 (Examples of using the Pretty Printer)\u2014specifically, the ",(0,r.jsx)(n.strong,{children:"pprint-vector"})," example."]}),"\n",(0,r.jsxs)(n.p,{children:["Whether or not ",(0,r.jsx)(n.strong,{children:"pprint-pop"})," is ",(0,r.jsx)(n.em,{children:"fbound"})," in the ",(0,r.jsx)(n.em,{children:"global environment"})," is ",(0,r.jsx)(n.em,{children:"implementation-dependent"}),"; however, the restrictions on redefinition and ",(0,r.jsx)(n.em,{children:"shadowing"})," of ",(0,r.jsx)(n.strong,{children:"pprint-pop"})," are the same as for ",(0,r.jsx)(n.em,{children:"symbols"})," in the COMMON-LISP ",(0,r.jsx)(n.em,{children:"package"})," which are ",(0,r.jsx)(n.em,{children:"fbound"})," in the ",(0,r.jsx)(n.em,{children:"global environment"}),". The consequences of attempting to use ",(0,r.jsx)(n.strong,{children:"pprint-pop"})," outside of ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," are undefined."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,r.jsxs)(n.p,{children:["Might cause output to the ",(0,r.jsx)(n.em,{children:"pretty printing stream"})," associated with the lexically current logical block."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*print-length*"}),", ",(0,r.jsx)(n.strong,{children:"*print-circle*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["An error is signaled (either at macro expansion time or at run time) if a usage of ",(0,r.jsx)(n.strong,{children:"pprint-pop"})," occurs where there is no lexically containing ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The consequences are undefined if ",(0,r.jsx)(n.strong,{children:"pprint-pop"})," is executed outside of the ",(0,r.jsx)(n.em,{children:"dynamic extent"})," of this ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-exit-if-list-exhausted"}),", ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["It is frequently a good idea to call ",(0,r.jsx)(n.strong,{children:"pprint-exit-if-list-exhausted"})," before calling ",(0,r.jsx)(n.strong,{children:"pprint-pop"}),". ",(0,r.jsx)(n.strong,{children:"pprint-tab"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-tab"})," ",(0,r.jsx)(n.em,{children:"kind colnum colinc"})," &optional ",(0,r.jsx)(n.em,{children:"stream \u2192"})," ",(0,r.jsx)(n.strong,{children:"nil"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"kind"}),"\u2014one of ",":line",", ",":section",", ",":line-relative",", or ",":section-relative","."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"colnum"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"colinc"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"stream"}),"\u2014an ",(0,r.jsx)(n.em,{children:"output stream designator"})," ."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies tabbing to ",(0,r.jsx)(n.em,{children:"stream"})," as performed by the standard ~T format directive. If ",(0,r.jsx)(n.em,{children:"stream"})," is a ",(0,r.jsx)(n.em,{children:"pretty printing stream"})," and the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-pretty*"})," is ",(0,r.jsx)(n.em,{children:"true"}),", tabbing is performed; otherwise, ",(0,r.jsx)(n.strong,{children:"pprint-tab"})," has no effect."]}),"\n",(0,r.jsxs)(n.p,{children:["The arguments ",(0,r.jsx)(n.em,{children:"colnum"})," and ",(0,r.jsx)(n.em,{children:"colinc"})," correspond to the two ",(0,r.jsx)(n.em,{children:"parameters"})," to ~T and are in terms of ",(0,r.jsx)(n.em,{children:"ems"}),". The ",(0,r.jsx)(n.em,{children:"kind"})," argument specifies the style of tabbing. It must be one of ",":line"," (tab as by ~T), ",":section"," (tab as by ~",":T",", but measuring horizontal positions relative to the start of the dynamically enclosing section), ",":line-relative"," (tab as by ~@T), or ",":section-relative"," (tab as by ~:@T, but measuring"]}),"\n",(0,r.jsx)(n.p,{children:"horizontal positions relative to the start of the dynamically enclosing section)."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["An error is signaled if ",(0,r.jsx)(n.em,{children:"kind"})," is not one of ",":line",", ",":section",", ",":line-relative",", or ",":section-relative","."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"pprint-logical-block"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"print-object"})," ",(0,r.jsx)(n.em,{children:"Standard Generic Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"print-object"})," ",(0,r.jsx)(n.em,{children:"object stream \u2192 object"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Method Signatures:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"print-object"})," (",(0,r.jsx)(n.em,{children:"object standard-object"}),") ",(0,r.jsx)(n.em,{children:"stream"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"print-object"})," (",(0,r.jsx)(n.em,{children:"object structure-object"}),") ",(0,r.jsx)(n.em,{children:"stream"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"object"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"stream"}),"\u2014a ",(0,r.jsx)(n.em,{children:"stream"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"print-object"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"generic function"})," ",(0,r.jsx)(n.strong,{children:"print-object"})," writes the printed representation of ",(0,r.jsx)(n.em,{children:"object"})," to ",(0,r.jsx)(n.em,{children:"stream"}),". The ",(0,r.jsx)(n.em,{children:"function"})," ",(0,r.jsx)(n.strong,{children:"print-object"})," is called by the ",(0,r.jsx)(n.em,{children:"Lisp printer"})," ; it should not be called by the user."]}),"\n",(0,r.jsxs)(n.p,{children:["Each implementation is required to provide a ",(0,r.jsx)(n.em,{children:"method"})," on the ",(0,r.jsx)(n.em,{children:"class"})," ",(0,r.jsx)(n.strong,{children:"standard-object"})," and on the ",(0,r.jsx)(n.em,{children:"class"})," ",(0,r.jsx)(n.strong,{children:"structure-object"}),". In addition, each ",(0,r.jsx)(n.em,{children:"implementation"})," must provide ",(0,r.jsx)(n.em,{children:"methods"})," on enough other ",(0,r.jsx)(n.em,{children:"classes"})," so as to ensure that there is always an applicable ",(0,r.jsx)(n.em,{children:"method"}),". Implementations are free to add ",(0,r.jsx)(n.em,{children:"methods"})," for other ",(0,r.jsx)(n.em,{children:"classes"}),". Users may write ",(0,r.jsx)(n.em,{children:"methods"})," for ",(0,r.jsx)(n.strong,{children:"print-object"})," for their own ",(0,r.jsx)(n.em,{children:"classes"})," if they do not wish to inherit an ",(0,r.jsx)(n.em,{children:"implementation-dependent method"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"method"})," on the ",(0,r.jsx)(n.em,{children:"class"})," ",(0,r.jsx)(n.strong,{children:"structure-object"})," prints the object in the default #S notation; see Section 22.1.3.12 (Printing Structures)."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Methods"})," on ",(0,r.jsx)(n.strong,{children:"print-object"})," are responsible for implementing their part of the semantics of the ",(0,r.jsx)(n.em,{children:"printer control variables"}),", as follows:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"*print-readably*"})}),"\n",(0,r.jsxs)(n.p,{children:["All methods for ",(0,r.jsx)(n.strong,{children:"print-object"})," must obey ",(0,r.jsx)(n.strong,{children:"*print-readably*"}),". This includes both user-defined methods and ",(0,r.jsx)(n.em,{children:"implementation-defined"})," methods. Readable printing of ",(0,r.jsx)(n.em,{children:"structures"})," and ",(0,r.jsx)(n.em,{children:"standard objects"})," is controlled by their ",(0,r.jsx)(n.strong,{children:"print-object"})," method, not by their ",(0,r.jsx)(n.strong,{children:"make-load-form"})," ",(0,r.jsx)(n.em,{children:"method"}),". ",(0,r.jsx)(n.em,{children:"Similarity"})," for these ",(0,r.jsx)(n.em,{children:"objects"})," is application dependent and hence is defined to be whatever these ",(0,r.jsx)(n.em,{children:"methods"})," do; see Section 3.2.4.2 (Similarity of Literal Objects)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"*print-escape*"})}),"\n",(0,r.jsxs)(n.p,{children:["Each ",(0,r.jsx)(n.em,{children:"method"})," must implement ",(0,r.jsx)(n.strong,{children:"*print-escape*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"*print-pretty*"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"method"})," may wish to perform specialized line breaking or other output conditional on the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-pretty*"}),". For further information, see (for example) the ",(0,r.jsx)(n.em,{children:"macro"})," ",(0,r.jsx)(n.strong,{children:"pprint-fill"}),". See also Section 22.2.1.4 (Pretty Print Dispatch Tables) and Section 22.2.2 (Examples of using the Pretty Printer)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"*print-length*"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Methods"})," that produce output of indefinite length must obey ",(0,r.jsx)(n.strong,{children:"*print-length*"}),". For further information, see (for example) the ",(0,r.jsx)(n.em,{children:"macros"})," ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," and ",(0,r.jsx)(n.strong,{children:"pprint-pop"}),". See also Section 22.2.1.4 (Pretty Print Dispatch Tables) and Section 22.2.2 (Examples of using the Pretty Printer)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"*print-level*"})}),"\n",(0,r.jsxs)(n.p,{children:["The printer takes care of ",(0,r.jsx)(n.strong,{children:"*print-level*"})," automatically, provided that each ",(0,r.jsx)(n.em,{children:"method"})," handles exactly one level of structure and calls ",(0,r.jsx)(n.strong,{children:"write"})," (or an equivalent ",(0,r.jsx)(n.em,{children:"function"}),") recursively if there are more structural levels. The printer\u2019s decision of whether an ",(0,r.jsx)(n.em,{children:"object"})," has components (and"]}),"\n",(0,r.jsxs)(n.p,{children:["therefore should not be printed when the printing depth is not less than ",(0,r.jsx)(n.strong,{children:"*print-level*"}),") is ",(0,r.jsx)(n.em,{children:"implementation-dependent"}),". In some implementations its ",(0,r.jsx)(n.strong,{children:"print-object"})," ",(0,r.jsx)(n.em,{children:"method"})," is not called; in others the ",(0,r.jsx)(n.em,{children:"method"})," is called, and the determination that the ",(0,r.jsx)(n.em,{children:"object"})," has components is based on what it tries to write to the ",(0,r.jsx)(n.em,{children:"stream"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"*print-circle*"})}),"\n",(0,r.jsxs)(n.p,{children:["When the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-circle*"})," is ",(0,r.jsx)(n.em,{children:"true"}),", a user-defined ",(0,r.jsx)(n.strong,{children:"print-object"})," ",(0,r.jsx)(n.em,{children:"method"})," can print ",(0,r.jsx)(n.em,{children:"objects"})," to the supplied ",(0,r.jsx)(n.em,{children:"stream"})," using ",(0,r.jsx)(n.strong,{children:"write"}),", ",(0,r.jsx)(n.strong,{children:"prin1"}),", ",(0,r.jsx)(n.strong,{children:"princ"}),", or ",(0,r.jsx)(n.strong,{children:"format"})," and expect circularities to be detected and printed using the #",(0,r.jsx)(n.em,{children:"n"}),"# syntax. If a user-defined ",(0,r.jsx)(n.strong,{children:"print-object"})," ",(0,r.jsx)(n.em,{children:"method"})," prints to a ",(0,r.jsx)(n.em,{children:"stream"})," other than the one that was supplied, then circularity detection starts over for that ",(0,r.jsx)(n.em,{children:"stream"}),". See ",(0,r.jsx)(n.strong,{children:"*print-circle*"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*print-base*"}),", ",(0,r.jsx)(n.strong,{children:"*print-radix*"}),", ",(0,r.jsx)(n.strong,{children:"*print-case*"}),", ",(0,r.jsx)(n.strong,{children:"*print-gensym*"}),", and ",(0,r.jsx)(n.strong,{children:"*print-array*"})]}),"\n",(0,r.jsxs)(n.p,{children:["These ",(0,r.jsx)(n.em,{children:"printer control variables"})," apply to specific types of ",(0,r.jsx)(n.em,{children:"objects"})," and are handled by the ",(0,r.jsx)(n.em,{children:"methods"})," for those ",(0,r.jsx)(n.em,{children:"objects"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"If these rules are not obeyed, the results are undefined."}),"\n",(0,r.jsxs)(n.p,{children:["In general, the printer and the ",(0,r.jsx)(n.strong,{children:"print-object"})," methods should not rebind the print control variables as they operate recursively through the structure, but this is ",(0,r.jsx)(n.em,{children:"implementation-dependent"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["In some implementations the ",(0,r.jsx)(n.em,{children:"stream"})," argument passed to a ",(0,r.jsx)(n.strong,{children:"print-object"})," ",(0,r.jsx)(n.em,{children:"method"})," is not the original ",(0,r.jsx)(n.em,{children:"stream"}),", but is an intermediate ",(0,r.jsx)(n.em,{children:"stream"})," that implements part of the printer. ",(0,r.jsx)(n.em,{children:"methods"})," should therefore not depend on the identity of this ",(0,r.jsx)(n.em,{children:"stream"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-fill"}),", ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"}),", ",(0,r.jsx)(n.strong,{children:"pprint-pop"}),", ",(0,r.jsx)(n.strong,{children:"write"}),", ",(0,r.jsx)(n.strong,{children:"*print-readably*"}),", ",(0,r.jsx)(n.strong,{children:"*print-escape*"}),", ",(0,r.jsx)(n.strong,{children:"*print-pretty*"}),", ",(0,r.jsx)(n.strong,{children:"*print-length*"}),", Section 22.1.3 (Default Print-Object Methods), Section 22.1.3.12 (Printing Structures), Section 22.2.1.4 (Pretty Print Dispatch Tables), Section 22.2.2 (Examples of using the Pretty Printer)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"print-unreadable-object"})," ",(0,r.jsx)(n.em,{children:"Macro"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"print-unreadable-object"})," (",(0,r.jsx)(n.em,{children:"object stream"})," &key ",(0,r.jsx)(n.em,{children:"type identity"}),") ",(0,r.jsx)(n.em,{children:"{form}"}),"* ",(0,r.jsx)(n.em,{children:"\u2192"})," ",(0,r.jsx)(n.strong,{children:"nil"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"object"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"; evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"stream"}),"\u2014a ",(0,r.jsx)(n.em,{children:"stream designator"})," ; evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"type"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"; evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"identity"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"; evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"forms"}),"\u2014an ",(0,r.jsx)(n.em,{children:"implicit progn"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Outputs a printed representation of ",(0,r.jsx)(n.em,{children:"object"})," on ",(0,r.jsx)(n.em,{children:"stream"}),", beginning with \u201c#<\u201d and ending with \u201c>\u201d. Everything output to ",(0,r.jsx)(n.em,{children:"stream"})," by the body ",(0,r.jsx)(n.em,{children:"forms"})," is enclosed in the the angle brackets. If ",(0,r.jsx)(n.em,{children:"type"})," is ",(0,r.jsx)(n.em,{children:"true"}),", the output from ",(0,r.jsx)(n.em,{children:"forms"})," is preceded by a brief description of the ",(0,r.jsx)(n.em,{children:"object"}),"\u2019s ",(0,r.jsx)(n.em,{children:"type"})," and a space character. If ",(0,r.jsx)(n.em,{children:"identity"})," is ",(0,r.jsx)(n.em,{children:"true"}),", the output from ",(0,r.jsx)(n.em,{children:"forms"})," is followed by a space character and a representation of the ",(0,r.jsx)(n.em,{children:"object"}),"\u2019s identity, typically a storage address."]}),"\n",(0,r.jsxs)(n.p,{children:["If either ",(0,r.jsx)(n.em,{children:"type"})," or ",(0,r.jsx)(n.em,{children:"identity"})," is not supplied, its value is ",(0,r.jsx)(n.em,{children:"false"}),". It is valid to omit the body ",(0,r.jsx)(n.em,{children:"forms"}),". If ",(0,r.jsx)(n.em,{children:"type"})," and ",(0,r.jsx)(n.em,{children:"identity"})," are both true and there are no body ",(0,r.jsx)(n.em,{children:"forms"}),", only one space character separates the type and the identity."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:[";; Note that in this example, the precise form of the output ;; is ",(0,r.jsx)(n.em,{children:"implementation-dependent"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"(defmethod print-object ((obj airplane) stream)"}),"\n",(0,r.jsxs)(n.p,{children:["(print-unreadable-object (obj stream ",":type"," t ",":identity"," t)"]}),"\n",(0,r.jsx)(n.p,{children:"(princ (tail-number obj) stream)))"}),"\n",(0,r.jsx)(n.p,{children:"(prin1-to-string my-airplane)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' "#<Airplane NW0773 36000123135>"']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("i",{children:[(0,r.jsx)("sup",{children:"or"}),"\u2192"]}),' "#<FAA',":AIRPLANE",' NW0773 17>"']}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," is ",(0,r.jsx)(n.em,{children:"true"}),", ",(0,r.jsx)(n.strong,{children:"print-unreadable-object"})," signals an error of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"print-not-readable"})," without printing anything."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"set-pprint-dispatch"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"set-pprint-dispatch"})," ",(0,r.jsx)(n.em,{children:"type-specifier function"})," &optional ",(0,r.jsx)(n.em,{children:"priority table \u2192"})," ",(0,r.jsx)(n.strong,{children:"nil"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"type-specifier"}),"\u2014a ",(0,r.jsx)(n.em,{children:"type specifier"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"function"}),"\u2014a ",(0,r.jsx)(n.em,{children:"function"}),", a ",(0,r.jsx)(n.em,{children:"function name"}),", or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"priority"}),"\u2014a ",(0,r.jsx)(n.em,{children:"real"}),". The default is 0."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"table"}),"\u2014a ",(0,r.jsx)(n.em,{children:"pprint dispatch table"}),". The default is the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-pprint-dispatch*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Installs an entry into the ",(0,r.jsx)(n.em,{children:"pprint dispatch table"})," which is ",(0,r.jsx)(n.em,{children:"table"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Type-specifier"})," is the ",(0,r.jsx)(n.em,{children:"key"})," of the entry. The first action of ",(0,r.jsx)(n.strong,{children:"set-pprint-dispatch"})," is to remove any pre-existing entry associated with ",(0,r.jsx)(n.em,{children:"type-specifier"}),". This guarantees that there will never be two entries associated with the same ",(0,r.jsx)(n.em,{children:"type specifier"})," in a given ",(0,r.jsx)(n.em,{children:"pprint dispatch table"}),". Equality of ",(0,r.jsx)(n.em,{children:"type specifiers"})," is tested by ",(0,r.jsx)(n.strong,{children:"equal"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Two values are associated with each ",(0,r.jsx)(n.em,{children:"type specifier"})," in a ",(0,r.jsx)(n.em,{children:"pprint dispatch table"}),": a ",(0,r.jsx)(n.em,{children:"function"})," and a ",(0,r.jsx)(n.em,{children:"priority"}),". The ",(0,r.jsx)(n.em,{children:"function"})," must accept two arguments: the ",(0,r.jsx)(n.em,{children:"stream"})," to which output is sent and the ",(0,r.jsx)(n.em,{children:"object"})," to be printed. The ",(0,r.jsx)(n.em,{children:"function"})," should ",(0,r.jsx)(n.em,{children:"pretty print"})," the ",(0,r.jsx)(n.em,{children:"object"})," to the ",(0,r.jsx)(n.em,{children:"stream"}),". The ",(0,r.jsx)(n.em,{children:"function"})," can assume that object satisfies the ",(0,r.jsx)(n.em,{children:"type"})," given by ",(0,r.jsx)(n.em,{children:"type-specifier"})," . The ",(0,r.jsx)(n.em,{children:"function"})," must obey ",(0,r.jsx)(n.strong,{children:"*print-readably*"}),". Any values returned by the ",(0,r.jsx)(n.em,{children:"function"})," are ignored."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Priority"})," is a priority to resolve conflicts when an object matches more than one entry."]}),"\n",(0,r.jsxs)(n.p,{children:["It is permissible for ",(0,r.jsx)(n.em,{children:"function"})," to be ",(0,r.jsx)(n.strong,{children:"nil"}),". In this situation, there will be no ",(0,r.jsx)(n.em,{children:"type-specifier"})," entry in ",(0,r.jsx)(n.em,{children:"table"})," after ",(0,r.jsx)(n.strong,{children:"set-pprint-dispatch"})," returns."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["An error is signaled if ",(0,r.jsx)(n.em,{children:"priority"})," is not a ",(0,r.jsx)(n.em,{children:"real"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.em,{children:"pprint dispatch tables"})," are often used to control the pretty printing of Lisp code, it is common for the ",(0,r.jsx)(n.em,{children:"type-specifier"})," to be an ",(0,r.jsx)(n.em,{children:"expression"})," of the form"]}),"\n",(0,r.jsxs)(n.p,{children:["(cons ",(0,r.jsx)(n.em,{children:"car-type cdr-type"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["This signifies that the corresponding object must be a cons cell whose ",(0,r.jsx)(n.em,{children:"car"})," matches the ",(0,r.jsx)(n.em,{children:"type specifier car-type"})," and whose ",(0,r.jsx)(n.em,{children:"cdr"})," matches the ",(0,r.jsx)(n.em,{children:"type specifier cdr-type"}),". The ",(0,r.jsx)(n.em,{children:"cdr-type"})," can be omitted in which case it defaults to ",(0,r.jsx)(n.strong,{children:"t"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"write, prin1, print, pprint, princ"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"write"})," ",(0,r.jsx)(n.em,{children:"object"})," &key ",(0,r.jsx)(n.em,{children:"array base case circle escape gensym"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"length level lines miser-width pprint-dispatch"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"pretty radix readably right-margin stream"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"\u2192 object"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"prin1"})," ",(0,r.jsx)(n.em,{children:"object"})," &optional ",(0,r.jsx)(n.em,{children:"output-stream \u2192 object"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"princ"})," ",(0,r.jsx)(n.em,{children:"object"})," &optional ",(0,r.jsx)(n.em,{children:"output-stream \u2192 object"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"write, prin1, print, pprint, princ"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"print"})," ",(0,r.jsx)(n.em,{children:"object"})," &optional ",(0,r.jsx)(n.em,{children:"output-stream \u2192 object"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint"})," ",(0,r.jsx)(n.em,{children:"object"})," &optional ",(0,r.jsx)(n.em,{children:"output-stream \u2192 hno valuesi"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"object"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"output-stream"}),"\u2014an ",(0,r.jsx)(n.em,{children:"output stream designator"})," . The default is ",(0,r.jsx)(n.em,{children:"standard output"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"array"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"base"}),"\u2014a ",(0,r.jsx)(n.em,{children:"radix"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"case"}),"\u2014a ",(0,r.jsx)(n.em,{children:"symbol"})," of ",(0,r.jsx)(n.em,{children:"type"})," (member ",":upcase"," ",":downcase"," ",":capitalize",")."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"circle"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"escape"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"gensym"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"length"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"level"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"lines"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"miser-width"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"pprint-dispatch"}),"\u2014a ",(0,r.jsx)(n.em,{children:"pprint dispatch table"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"pretty"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"radix"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"readably"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"right-margin"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"stream"}),"\u2014an ",(0,r.jsx)(n.em,{children:"output stream designator"})," . The default is ",(0,r.jsx)(n.em,{children:"standard output"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"write"}),", ",(0,r.jsx)(n.strong,{children:"prin1"}),", ",(0,r.jsx)(n.strong,{children:"princ"}),", ",(0,r.jsx)(n.strong,{children:"print"}),", and ",(0,r.jsx)(n.strong,{children:"pprint"})," write the printed representation of ",(0,r.jsx)(n.em,{children:"object"})," to ",(0,r.jsx)(n.em,{children:"output-stream"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"write"})," is the general entry point to the ",(0,r.jsx)(n.em,{children:"Lisp printer"})," . For each explicitly supplied ",(0,r.jsx)(n.em,{children:"keyword parameter"})," named in Figure 22\u20137, the corresponding ",(0,r.jsx)(n.em,{children:"printer control variable"})," is dynamically bound to its ",(0,r.jsx)(n.em,{children:"value"})," while printing goes on; for each ",(0,r.jsx)(n.em,{children:"keyword parameter"})," in Figure 22\u20137 that is not explicitly supplied, the value of the corresponding ",(0,r.jsx)(n.em,{children:"printer control variable"})," is the same as it was at the time ",(0,r.jsx)(n.strong,{children:"write"})," was invoked. Once the appropriate ",(0,r.jsx)(n.em,{children:"bindings"})," are ",(0,r.jsx)(n.em,{children:"established"}),", the ",(0,r.jsx)(n.em,{children:"object"})," is output by the ",(0,r.jsx)(n.em,{children:"Lisp printer"})," ."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"write, prin1, print, pprint, princ"})}),"\n",(0,r.jsxs)(n.p,{children:["|",(0,r.jsx)(n.strong,{children:"Parameter Corresponding Dynamic Variable"}),"|"]}),"\n",(0,r.jsx)(n.p,{children:"| :- |"}),"\n",(0,r.jsxs)(n.p,{children:["|",(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"array"})," ",(0,r.jsx)(n.strong,{children:"*print-array*"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"base"})," ",(0,r.jsx)(n.strong,{children:"*print-base*"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"case"})," ",(0,r.jsx)(n.strong,{children:"*print-case*"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"circle"})," ",(0,r.jsx)(n.strong,{children:"*print-circle*"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"escape"})," ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"gensym"})," ",(0,r.jsx)(n.strong,{children:"*print-gensym*"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"length"})," ",(0,r.jsx)(n.strong,{children:"*print-length*"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"level"})," ",(0,r.jsx)(n.strong,{children:"*print-level*"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"lines"})," ",(0,r.jsx)(n.strong,{children:"*print-lines*"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"miser-width"})," ",(0,r.jsx)(n.strong,{children:"*print-miser-width*"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"pprint-dispatch"})," ",(0,r.jsx)(n.strong,{children:"*print-pprint-dispatch*"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"pretty"})," ",(0,r.jsx)(n.strong,{children:"*print-pretty*"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"radix"})," ",(0,r.jsx)(n.strong,{children:"*print-radix*"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"readably"})," ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.em,{children:"right-margin"})," ",(0,r.jsx)(n.strong,{children:"*print-right-margin*"})]}),"|"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Figure 22\u20137. Argument correspondences for the WRITE function."})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"prin1"}),", ",(0,r.jsx)(n.strong,{children:"princ"}),", ",(0,r.jsx)(n.strong,{children:"print"}),", and ",(0,r.jsx)(n.strong,{children:"pprint"})," implicitly ",(0,r.jsx)(n.em,{children:"bind"})," certain print parameters to particu lar values. The remaining parameter values are taken from ",(0,r.jsx)(n.strong,{children:"*print-array*"}),", ",(0,r.jsx)(n.strong,{children:"*print-base*"}),", ",(0,r.jsx)(n.strong,{children:"*print-case*"}),", ",(0,r.jsx)(n.strong,{children:"*print-circle*"}),", ",(0,r.jsx)(n.strong,{children:"*print-escape*"}),", ",(0,r.jsx)(n.strong,{children:"*print-gensym*"}),", ",(0,r.jsx)(n.strong,{children:"*print-length*"}),", ",(0,r.jsx)(n.strong,{children:"*print-level*"}),", ",(0,r.jsx)(n.strong,{children:"*print-lines*"}),", ",(0,r.jsx)(n.strong,{children:"*print-miser-width*"}),", ",(0,r.jsx)(n.strong,{children:"*print-pprint-dispatch*"}),", ",(0,r.jsx)(n.strong,{children:"*print-pretty*"}),", ",(0,r.jsx)(n.strong,{children:"*print-radix*"}),", and ",(0,r.jsx)(n.strong,{children:"*print-right-margin*"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"prin1"})," produces output suitable for input to ",(0,r.jsx)(n.strong,{children:"read"}),". It binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.em,{children:"true"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"princ"})," is just like ",(0,r.jsx)(n.strong,{children:"prin1"})," except that the output has no ",(0,r.jsx)(n.em,{children:"escape characters"}),". It binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.em,{children:"false"})," and ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," to ",(0,r.jsx)(n.em,{children:"false"}),". The general rule is that output from ",(0,r.jsx)(n.strong,{children:"princ"})," is intended to look good to people, while output from ",(0,r.jsx)(n.strong,{children:"prin1"})," is intended to be acceptable to ",(0,r.jsx)(n.strong,{children:"read"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"print"})," is just like ",(0,r.jsx)(n.strong,{children:"prin1"})," except that the printed representation of ",(0,r.jsx)(n.em,{children:"object"})," is preceded by a newline and followed by a space."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint"})," is just like ",(0,r.jsx)(n.strong,{children:"print"})," except that the trailing space is omitted and ",(0,r.jsx)(n.em,{children:"object"})," is printed with the ",(0,r.jsx)(n.strong,{children:"*print-pretty*"})," flag ",(0,r.jsx)(n.em,{children:"non-nil"})," to produce pretty output."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Output-stream"})," specifies the ",(0,r.jsx)(n.em,{children:"stream"})," to which output is to be sent."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*standard-output*"}),", ",(0,r.jsx)(n.strong,{children:"*terminal-io*"}),", ",(0,r.jsx)(n.strong,{children:"*print-escape*"}),", ",(0,r.jsx)(n.strong,{children:"*print-radix*"}),", ",(0,r.jsx)(n.strong,{children:"*print-base*"}),", ",(0,r.jsx)(n.strong,{children:"*print-circle*"}),", ",(0,r.jsx)(n.strong,{children:"*print-pretty*"}),", ",(0,r.jsx)(n.strong,{children:"*print-level*"}),", ",(0,r.jsx)(n.strong,{children:"*print-length*"}),", ",(0,r.jsx)(n.strong,{children:"*print-case*"}),", ",(0,r.jsx)(n.strong,{children:"*print-gensym*"}),", ",(0,r.jsx)(n.strong,{children:"*print-array*"}),", ",(0,r.jsx)(n.strong,{children:"*read-default-float-format*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"readtable-case"}),", Section 22.3.4 (FORMAT Printer Operations)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"functions"})," ",(0,r.jsx)(n.strong,{children:"prin1"})," and ",(0,r.jsx)(n.strong,{children:"print"})," do not bind ",(0,r.jsx)(n.strong,{children:"*print-readably*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"(prin1 object output-stream)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2261"})," (write object ",":stream"," output-stream ",":escape"," t)"]}),"\n",(0,r.jsx)(n.p,{children:"(princ object output-stream)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2261"})," (write object stream output-stream ",":escape"," nil ",":readably"," nil)"]}),"\n",(0,r.jsx)(n.p,{children:"(print object output-stream)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2261"})," (progn (terpri output-stream)"]}),"\n",(0,r.jsxs)(n.p,{children:["(write object ",":stream"," output-stream"]}),"\n",(0,r.jsxs)(n.p,{children:[":escape"," t)"]}),"\n",(0,r.jsx)(n.p,{children:"(write-char #\\space output-stream))"}),"\n",(0,r.jsx)(n.p,{children:"(pprint object output-stream)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2261"})," (write object ",":stream"," output-stream ",":escape"," t ",":pretty"," t)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"write-to-string, prin1-to-string, princ-to-string"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"write-to-string"})," ",(0,r.jsx)(n.em,{children:"object"})," &key ",(0,r.jsx)(n.em,{children:"array base case circle escape gensym"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"length level lines miser-width pprint-dispatch"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"pretty radix readably right-margin"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"\u2192 string"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"prin1-to-string"})," ",(0,r.jsx)(n.em,{children:"object \u2192 string"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"princ-to-string"})," ",(0,r.jsx)(n.em,{children:"object \u2192 string"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"object"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"array"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"base"}),"\u2014a ",(0,r.jsx)(n.em,{children:"radix"})," ."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"write-to-string, prin1-to-string, princ-to-string"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"case"}),"\u2014a ",(0,r.jsx)(n.em,{children:"symbol"})," of ",(0,r.jsx)(n.em,{children:"type"})," (member ",":upcase"," ",":downcase"," ",":capitalize",")."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"circle"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"escape"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"gensym"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"length"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"level"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"lines"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"miser-width"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"pprint-dispatch"}),"\u2014a ",(0,r.jsx)(n.em,{children:"pprint dispatch table"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"pretty"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"radix"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"readably"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"right-margin"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"string"}),"\u2014a ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"write-to-string"}),", ",(0,r.jsx)(n.strong,{children:"prin1-to-string"}),", and ",(0,r.jsx)(n.strong,{children:"princ-to-string"})," are used to create a ",(0,r.jsx)(n.em,{children:"string"})," consisting of the printed representation of ",(0,r.jsx)(n.em,{children:"object"}),". ",(0,r.jsx)(n.em,{children:"Object"})," is effectively printed as if by ",(0,r.jsx)(n.strong,{children:"write"}),", ",(0,r.jsx)(n.strong,{children:"prin1"}),", or ",(0,r.jsx)(n.strong,{children:"princ"}),", respectively, and the ",(0,r.jsx)(n.em,{children:"characters"})," that would be output are made into a ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"write-to-string"})," is the general output function. It has the ability to specify all the parameters applicable to the printing of ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"prin1-to-string"})," acts like ",(0,r.jsx)(n.strong,{children:"write-to-string"})," with ",":escape"," t, that is, escape characters are written where appropriate."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"princ-to-string"})," acts like ",(0,r.jsx)(n.strong,{children:"write-to-string"})," with ",":escape"," nil ",":readably"," nil. Thus no ",(0,r.jsx)(n.em,{children:"escape characters"})," are written."]}),"\n",(0,r.jsxs)(n.p,{children:["All other keywords that would be specified to ",(0,r.jsx)(n.strong,{children:"write-to-string"})," are default values when ",(0,r.jsx)(n.strong,{children:"prin1-to-string"})," or ",(0,r.jsx)(n.strong,{children:"princ-to-string"})," is invoked."]}),"\n",(0,r.jsxs)(n.p,{children:["The meanings and defaults for the keyword arguments to ",(0,r.jsx)(n.strong,{children:"write-to-string"})," are the same as those for ",(0,r.jsx)(n.strong,{children:"write"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:['(prin1-to-string "abc") ',(0,r.jsx)(n.em,{children:"\u2192"}),' ""abc""']}),"\n",(0,r.jsxs)(n.p,{children:['(princ-to-string "abc") ',(0,r.jsx)(n.em,{children:"\u2192"}),' "abc"']}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*print-escape*"}),", ",(0,r.jsx)(n.strong,{children:"*print-radix*"}),", ",(0,r.jsx)(n.strong,{children:"*print-base*"}),", ",(0,r.jsx)(n.strong,{children:"*print-circle*"}),", ",(0,r.jsx)(n.strong,{children:"*print-pretty*"}),", ",(0,r.jsx)(n.strong,{children:"*print-level*"}),", ",(0,r.jsx)(n.strong,{children:"*print-length*"}),", ",(0,r.jsx)(n.strong,{children:"*print-case*"}),", ",(0,r.jsx)(n.strong,{children:"*print-gensym*"}),", ",(0,r.jsx)(n.strong,{children:"*print-array*"}),", ",(0,r.jsx)(n.strong,{children:"*read-default-float-format*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"write"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["(write-to-string ",(0,r.jsx)(n.em,{children:"object &#123;key argument&#125;"}),"*)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2261"})," (with-output-to-string (#1=#",":string-stream",")"]}),"\n",(0,r.jsxs)(n.p,{children:["(write object ",":stream"," #1# ",(0,r.jsx)(n.em,{children:"&#123;key argument&#125;"}),"*))"]}),"\n",(0,r.jsxs)(n.p,{children:["(princ-to-string ",(0,r.jsx)(n.em,{children:"object"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2261"})," (with-output-to-string (string-stream)"]}),"\n",(0,r.jsxs)(n.p,{children:["(princ ",(0,r.jsx)(n.em,{children:"object"})," string-stream))"]}),"\n",(0,r.jsxs)(n.p,{children:["(prin1-to-string ",(0,r.jsx)(n.em,{children:"object"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2261"})," (with-output-to-string (string-stream)"]}),"\n",(0,r.jsxs)(n.p,{children:["(prin1 ",(0,r.jsx)(n.em,{children:"object"})," string-stream))"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-array"}),(0,r.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,r.jsxs)(n.p,{children:["a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"implementation-dependent"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Controls the format in which ",(0,r.jsx)(n.em,{children:"arrays"})," are printed. If it is ",(0,r.jsx)(n.em,{children:"false"}),", the contents of ",(0,r.jsx)(n.em,{children:"arrays"})," other than ",(0,r.jsx)(n.em,{children:"strings"})," are never printed. Instead, ",(0,r.jsx)(n.em,{children:"arrays"})," are printed in a concise form using #< that gives enough information for the user to be able to identify the ",(0,r.jsx)(n.em,{children:"array"}),", but does not include the entire ",(0,r.jsx)(n.em,{children:"array"})," contents. If it is ",(0,r.jsx)(n.em,{children:"true"}),", non-",(0,r.jsx)(n.em,{children:"string arrays"})," are printed using #(...), #*, or #nA syntax."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"implementation"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:["Section 2.4.8.3 (Sharpsign Left-Parenthesis), Section 2.4.8.20 (Sharpsign Less-Than-Sign) ",(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-base"}),(0,r.jsx)(n.em,{children:"\u2217"}),"**,** ",(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-radix"}),(0,r.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*print-base*"}),"\u2014a ",(0,r.jsx)(n.em,{children:"radix"})," . ",(0,r.jsx)(n.strong,{children:"*print-radix*"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,r.jsxs)(n.p,{children:["The initial ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-base*"})," is 10. The initial ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-radix*"})," is ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*print-base*"})," and ",(0,r.jsx)(n.strong,{children:"*print-radix*"})," control the printing of ",(0,r.jsx)(n.em,{children:"rationals"}),". The ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-base*"})," is called the ",(0,r.jsx)(n.em,{children:"current output base"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-base*"})," is the ",(0,r.jsx)(n.em,{children:"radix"})," in which the printer will print ",(0,r.jsx)(n.em,{children:"rationals"}),". For radices above 10, letters of the alphabet are used to represent digits above 9."]}),"\n",(0,r.jsxs)(n.p,{children:["If the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-radix*"})," is ",(0,r.jsx)(n.em,{children:"true"}),", the printer will print a radix specifier to indicate the ",(0,r.jsx)(n.em,{children:"radix"})," in which it is printing a ",(0,r.jsx)(n.em,{children:"rational"})," number. The radix specifier is always printed using lowercase letters. If ",(0,r.jsx)(n.strong,{children:"*print-base*"})," is 2, 8, or 16, then the radix specifier used is #b, #o, or #x, respectively. For ",(0,r.jsx)(n.em,{children:"integers"}),", base ten is indicated by a trailing decimal point instead of a leading radix specifier; for ",(0,r.jsx)(n.em,{children:"ratios"}),", #10r is used."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-base* 24.) (*print-radix* t))"}),"\n",(0,r.jsx)(n.p,{children:"(print 23.))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 #24rN"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," 23"]}),"\n",(0,r.jsxs)(n.p,{children:["(setq *print-base* 10) ",(0,r.jsx)(n.em,{children:"\u2192"})," 10"]}),"\n",(0,r.jsxs)(n.p,{children:["(setq *print-radix* nil) ",(0,r.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,r.jsx)(n.p,{children:"(dotimes (i 35)"}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-base* (+ i 2))) ;print the decimal number 40"}),"\n",(0,r.jsx)(n.p,{children:"(write 40) ;in each base from 2 to 36"}),"\n",(0,r.jsx)(n.p,{children:'(if (zerop (mod i 10)) (terpri) (format t " "))))'}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 101000"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 1111 220 130 104 55 50 44 40 37 34"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 31 2C 2A 28 26 24 22 20 1J 1I"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 1H 1G 1F 1E 1D 1C 1B 1A 19 18"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 17 16 15 14"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,r.jsx)(n.p,{children:"(dolist (pb \u2019(2 3 8 10 16))"}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-radix* t) ;print the integer 10 and"}),"\n",(0,r.jsx)(n.p,{children:"(*print-base* pb)) ;the ratio 1/10 in bases 2,"}),"\n",(0,r.jsxs)(n.p,{children:['(format t "~&~S ',(0,r.jsx)(n.del,{children:"S"}),'%" 10 1/10))) ;3, 8, 10, 16']}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 #b1010 #b1/1010"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 #3r101 #3r1/101"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 #o12 #o1/12"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 10. #10r1/10"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 #xA #x1/A"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:["Might be ",(0,r.jsx)(n.em,{children:"bound"})," by ",(0,r.jsx)(n.strong,{children:"format"}),", and ",(0,r.jsx)(n.strong,{children:"write"}),", ",(0,r.jsx)(n.strong,{children:"write-to-string"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"format"}),", ",(0,r.jsx)(n.strong,{children:"write"}),", ",(0,r.jsx)(n.strong,{children:"write-to-string"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-case"}),(0,r.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,r.jsxs)(n.p,{children:["One of the ",(0,r.jsx)(n.em,{children:"symbols"})," ",":upcase",", ",":downcase",", or ",":capitalize","."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"symbol"})," ",":upcase","."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-case*"})," controls the case (upper, lower, or mixed) in which to print any uppercase characters in the names of ",(0,r.jsx)(n.em,{children:"symbols"})," when vertical-bar syntax is not used."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*print-case*"})," has an effect at all times when the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," is ",(0,r.jsx)(n.em,{children:"false"}),". ",(0,r.jsx)(n.strong,{children:"*print-case*"})," also has an effect when the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," is ",(0,r.jsx)(n.em,{children:"true"})," unless inside an escape context (",(0,r.jsx)(n.em,{children:"i.e."}),", unless between ",(0,r.jsx)(n.em,{children:"vertical-bars"})," or after a ",(0,r.jsx)(n.em,{children:"slash"}),")."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.p,{children:"(defun test-print-case ()"}),"\n",(0,r.jsxs)(n.p,{children:["(dolist (*print-case* \u2019(",":upcase"," ",":downcase"," ",":capitalize","))"]}),"\n",(0,r.jsxs)(n.p,{children:['(format t "~&~S ',(0,r.jsx)(n.del,{children:"S"}),'%" \u2019this-and-that \u2019|And-something-elSE|)))']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," TEST-PC"]}),"\n",(0,r.jsx)(n.p,{children:";; Although the choice of which characters to escape is specified by"}),"\n",(0,r.jsx)(n.p,{children:";; *PRINT-CASE*, the choice of how to escape those characters"}),"\n",(0,r.jsx)(n.p,{children:";; (i.e., whether single escapes or multiple escapes are used)"}),"\n",(0,r.jsx)(n.p,{children:";; is implementation-dependent. The examples here show two of the"}),"\n",(0,r.jsx)(n.p,{children:";; many valid ways in which escaping might appear."}),"\n",(0,r.jsx)(n.p,{children:"(test-print-case) ;Implementation A"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 THIS-AND-THAT |And-something-elSE|"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 this-and-that a\\n\\d-\\s\\o\\m\\e\\t\\h\\i\\n\\g-\\e\\lse"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 This-And-That A\\n\\d-\\s\\o\\m\\e\\t\\h\\i\\n\\g-\\e\\lse"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,r.jsx)(n.p,{children:"(test-print-case) ;Implementation B"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 THIS-AND-THAT |And-something-elSE|"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 this-and-that a|nd-something-el|se"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 This-And-That A|nd-something-el|se"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"write"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"read"})," normally converts lowercase characters appearing in ",(0,r.jsx)(n.em,{children:"symbols"})," to corresponding uppercase characters, so that internally print names normally contain only uppercase characters."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," is ",(0,r.jsx)(n.em,{children:"true"}),", lowercase characters in the ",(0,r.jsx)(n.em,{children:"name"})," of a ",(0,r.jsx)(n.em,{children:"symbol"})," are always printed in lowercase, and are preceded by a single escape character or enclosed by multiple escape characters; uppercase characters in the ",(0,r.jsx)(n.em,{children:"name"})," of a ",(0,r.jsx)(n.em,{children:"symbol"})," are printed in upper case, in lower case, or in mixed case so as to capitalize words, according to the value of ",(0,r.jsx)(n.strong,{children:"*print-case*"}),". The convention for what constitutes a \u201cword\u201d is the same as for ",(0,r.jsx)(n.strong,{children:"string-capitalize"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-circle"}),(0,r.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,r.jsxs)(n.p,{children:["a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Controls the attempt to detect circularity and sharing in an ",(0,r.jsx)(n.em,{children:"object"})," being printed."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"false"}),", the printing process merely proceeds by recursive descent without attempting to detect circularity and sharing."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"true"}),", the printer will endeavor to detect cycles and sharing in the structure to be printed, and to use #",(0,r.jsx)(n.em,{children:"n"}),"= and #",(0,r.jsx)(n.em,{children:"n"}),"# syntax to indicate the circularities or shared components."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"true"}),", a user-defined ",(0,r.jsx)(n.strong,{children:"print-object"})," ",(0,r.jsx)(n.em,{children:"method"})," can print ",(0,r.jsx)(n.em,{children:"objects"})," to the supplied ",(0,r.jsx)(n.em,{children:"stream"})," using ",(0,r.jsx)(n.strong,{children:"write"}),", ",(0,r.jsx)(n.strong,{children:"prin1"}),", ",(0,r.jsx)(n.strong,{children:"princ"}),", or ",(0,r.jsx)(n.strong,{children:"format"})," and expect circularities and sharing to be detected and printed using the"]}),"\n",(0,r.jsxs)(n.p,{children:["#",(0,r.jsx)(n.em,{children:"n"}),"# syntax. If a user-defined ",(0,r.jsx)(n.strong,{children:"print-object"})," ",(0,r.jsx)(n.em,{children:"method"})," prints to a ",(0,r.jsx)(n.em,{children:"stream"})," other than the one that was supplied, then circularity detection starts over for that ",(0,r.jsx)(n.em,{children:"stream"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Note that implementations should not use #",(0,r.jsx)(n.em,{children:"n"}),"# notation when the ",(0,r.jsx)(n.em,{children:"Lisp reader"})," would automatically assure sharing without it (",(0,r.jsx)(n.em,{children:"e.g."}),", as happens with ",(0,r.jsx)(n.em,{children:"interned symbols"}),")."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.p,{children:"(let ((a (list 1 2 3)))"}),"\n",(0,r.jsx)(n.p,{children:"(setf (cdddr a) a)"}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-circle* t))"}),"\n",(0,r.jsx)(n.p,{children:"(write a)"}),"\n",(0,r.jsxs)(n.p,{children:[":done","))"]}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 #1=(1 2 3 . #1#)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," ",":DONE"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"write"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["An attempt to print a circular structure with ",(0,r.jsx)(n.strong,{children:"*print-circle*"})," set to ",(0,r.jsx)(n.strong,{children:"nil"})," may lead to looping behavior and failure to terminate."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-escape"}),(0,r.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,r.jsxs)(n.p,{children:["a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"true"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"false"}),", escape characters and ",(0,r.jsx)(n.em,{children:"package prefixes"})," are not output when an expression is printed."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"true"}),", an attempt is made to print an ",(0,r.jsx)(n.em,{children:"expression"})," in such a way that it can be read again to produce an ",(0,r.jsx)(n.strong,{children:"equal"})," ",(0,r.jsx)(n.em,{children:"expression"}),". (This is only a guideline; not a requirement. See ",(0,r.jsx)(n.strong,{children:"*print-readably*"}),".)"]}),"\n",(0,r.jsxs)(n.p,{children:["For more specific details of how the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," affects the printing of certain ",(0,r.jsx)(n.em,{children:"types"}),", see Section 22.1.3 (Default Print-Object Methods)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-escape* t)) (write #\\a))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 #\\a"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," #\\a"]}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-escape* nil)) (write #\\a))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 a"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," #\\a"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"princ"}),", ",(0,r.jsx)(n.strong,{children:"prin1"}),", ",(0,r.jsx)(n.strong,{children:"format"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"write"}),", ",(0,r.jsx)(n.strong,{children:"readtable-case"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"princ"})," effectively binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.em,{children:"false"}),". ",(0,r.jsx)(n.strong,{children:"prin1"})," effectively binds ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," to ",(0,r.jsx)(n.em,{children:"true"}),". ",(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-gensym"}),(0,r.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,r.jsxs)(n.p,{children:["a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"true"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Controls whether the prefix \u201c#:\u201d is printed before ",(0,r.jsx)(n.em,{children:"apparently uninterned symbols"}),". The prefix is printed before such ",(0,r.jsx)(n.em,{children:"symbols"})," if and only if the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-gensym*"})," is ",(0,r.jsx)(n.em,{children:"true"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-gensym* nil))"}),"\n",(0,r.jsx)(n.p,{children:"(print (gensym)))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 G6040"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," #",":G6040"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"write"}),", ",(0,r.jsx)(n.strong,{children:"*print-escape*"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-level"}),(0,r.jsx)(n.em,{children:"\u2217"}),"**,** ",(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-length"}),(0,r.jsx)(n.em,{children:"\u2217"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-level"}),(0,r.jsx)(n.em,{children:"\u2217"}),"**,** ",(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-length"}),(0,r.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,r.jsxs)(n.p,{children:["a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*print-level*"})," controls how many levels deep a nested ",(0,r.jsx)(n.em,{children:"object"})," will print. If it is ",(0,r.jsx)(n.em,{children:"false"}),", then no control is exercised. Otherwise, it is an ",(0,r.jsx)(n.em,{children:"integer"})," indicating the maximum level to be printed. An ",(0,r.jsx)(n.em,{children:"object"})," to be printed is at level 0; its components (as of a ",(0,r.jsx)(n.em,{children:"list"})," or ",(0,r.jsx)(n.em,{children:"vector"})," ) are at level 1; and so on. If an ",(0,r.jsx)(n.em,{children:"object"})]}),"\n",(0,r.jsxs)(n.p,{children:["to be recursively printed has components and is at a level equal to or greater than the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-level*"}),", then the ",(0,r.jsx)(n.em,{children:"object"})," is printed as \u201c#\u201d."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*print-length*"})," controls how many elements at a given level are printed. If it is ",(0,r.jsx)(n.em,{children:"false"}),", there is no limit to the number of components printed. Otherwise, it is an ",(0,r.jsx)(n.em,{children:"integer"})," indicating the maximum number of ",(0,r.jsx)(n.em,{children:"elements"})," of an ",(0,r.jsx)(n.em,{children:"object"})," to be printed. If exceeded, the printer will print \u201c...\u201d in place of the other ",(0,r.jsx)(n.em,{children:"elements"}),". In the case of a ",(0,r.jsx)(n.em,{children:"dotted list"}),", if the ",(0,r.jsx)(n.em,{children:"list"})," contains exactly as many ",(0,r.jsx)(n.em,{children:"elements"})," as the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-length*"}),", the terminating ",(0,r.jsx)(n.em,{children:"atom"})," is printed rather than printing \u201c...\u201d"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*print-level*"})," and ",(0,r.jsx)(n.strong,{children:"*print-length*"})," affect the printing of an any ",(0,r.jsx)(n.em,{children:"object"})," printed with a list-like syntax. They do not affect the printing of ",(0,r.jsx)(n.em,{children:"symbols"}),", ",(0,r.jsx)(n.em,{children:"strings"}),", and ",(0,r.jsx)(n.em,{children:"bit vectors"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:["(setq a \u2019(1 (2 (3 (4 (5 (6))))))) ",(0,r.jsx)(n.em,{children:"\u2192"})," (1 (2 (3 (4 (5 (6))))))"]}),"\n",(0,r.jsx)(n.p,{children:"(dotimes (i 8)"}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-level* i))"}),"\n",(0,r.jsxs)(n.p,{children:['(format t "~&~D \u2013 ',(0,r.jsx)(n.del,{children:"S"}),'%" i a)))']}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 0 \u2013 #"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 1 \u2013 (1 #)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 2 \u2013 (1 (2 #))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 3 \u2013 (1 (2 (3 #)))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 4 \u2013 (1 (2 (3 (4 #))))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 5 \u2013 (1 (2 (3 (4 (5 #)))))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 6 \u2013 (1 (2 (3 (4 (5 (6))))))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 7 \u2013 (1 (2 (3 (4 (5 (6))))))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,r.jsxs)(n.p,{children:["(setq a \u2019(1 2 3 4 5 6)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (1 2 3 4 5 6)"]}),"\n",(0,r.jsx)(n.p,{children:"(dotimes (i 7)"}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-length* i))"}),"\n",(0,r.jsxs)(n.p,{children:['(format t "~&~D \u2013 ',(0,r.jsx)(n.del,{children:"S"}),'%" i a)))']}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 0 \u2013 (...)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 1 \u2013 (1 ...)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 2 \u2013 (1 2 ...)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 3 \u2013 (1 2 3 ...)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 4 \u2013 (1 2 3 4 ...)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 5 \u2013 (1 2 3 4 5 6)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 6 \u2013 (1 2 3 4 5 6)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,r.jsx)(n.p,{children:"(dolist (level-length \u2019((0 1) (1 1) (1 2) (1 3) (1 4)"}),"\n",(0,r.jsx)(n.p,{children:"(2 1) (2 2) (2 3) (3 2) (3 3) (3 4)))"}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-level* (first level-length))"}),"\n",(0,r.jsx)(n.p,{children:"(*print-length* (second level-length)))"}),"\n",(0,r.jsxs)(n.p,{children:['(format t "~&~D ~D \u2013 ',(0,r.jsx)(n.del,{children:"S"}),'%"']}),"\n",(0,r.jsx)(n.p,{children:"*print-level* *print-length*"}),"\n",(0,r.jsx)(n.p,{children:'\u2019(if (member x y) (+ (car x) 3) \u2019(foo . #(a b c d "Baz"))))))'}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 0 1 \u2013 #"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 1 1 \u2013 (IF ...)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 1 2 \u2013 (IF # ...)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 1 3 \u2013 (IF # # ...)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 1 4 \u2013 (IF # # #)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 2 1 \u2013 (IF ...)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 2 2 \u2013 (IF (MEMBER X ...) ...)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 2 3 \u2013 (IF (MEMBER X Y) (+ # 3) ...)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 3 2 \u2013 (IF (MEMBER X ...) ...)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 3 3 \u2013 (IF (MEMBER X Y) (+ (CAR X) 3) ...)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 3 4 \u2013 (IF (MEMBER X Y) (+ (CAR X) 3) \u2019(FOO . #(A B C D ...)))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"write"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-lines"}),(0,r.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,r.jsxs)(n.p,{children:["a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["When the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-lines*"})," is other than ",(0,r.jsx)(n.strong,{children:"nil"}),", it is a limit on the number of output lines produced when something is pretty printed. If an attempt is made to go beyond that many lines, \u201c..\u201d is printed at the end of the last line followed by all of the suffixes (closing delimiters) that are pending to be printed."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-right-margin* 25) (*print-lines* 3))"}),"\n",(0,r.jsx)(n.p,{children:"(pprint \u2019(progn (setq a 1 b 2 c 3 d 4))))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 (PROGN (SETQ A 1"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 B 2"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 C 3 ..))"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"\u2192 hno valuesi"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsx)(n.p,{children:"The \u201c..\u201d notation is intentionally different than the \u201c...\u201d notation used for level abbreviation, so that the two different situations can be visually distinguished."}),"\n",(0,r.jsxs)(n.p,{children:["This notation is used to increase the likelihood that the ",(0,r.jsx)(n.em,{children:"Lisp reader"})," will signal an error if an attempt is later made to read the abbreviated output. Note however that if the truncation occurs in a ",(0,r.jsx)(n.em,{children:"string"}),', as in "This string has been trunc..", the problem situation cannot be detected later and no such error will be signaled.']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-miser-width"}),(0,r.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,r.jsxs)(n.p,{children:["a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"implementation-dependent"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["If it is not ",(0,r.jsx)(n.strong,{children:"nil"}),", the ",(0,r.jsx)(n.em,{children:"pretty printer"})," switches to a compact style of output (called miser style) whenever the width available for printing a substructure is less than or equal to this many ",(0,r.jsx)(n.em,{children:"ems"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-pprint-dispatch"}),(0,r.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,r.jsxs)(n.p,{children:["a ",(0,r.jsx)(n.em,{children:"pprint dispatch table"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"implementation-dependent"}),", but the initial entries all use a special class of priorities that have the property that they are less than every priority that can be specified using ",(0,r.jsx)(n.strong,{children:"set-pprint-dispatch"}),", so that the initial contents of any entry can be overridden."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"pprint dispatch table"})," which currently controls the ",(0,r.jsx)(n.em,{children:"pretty printer"})," ."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*print-pretty*"}),", Section 22.2.1.4 (Pretty Print Dispatch Tables)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["The intent is that the initial ",(0,r.jsx)(n.em,{children:"value"})," of this ",(0,r.jsx)(n.em,{children:"variable"})," should cause \u2018traditional\u2019 ",(0,r.jsx)(n.em,{children:"pretty printing"})," of ",(0,r.jsx)(n.em,{children:"code"}),". In general, however, you can put a value in ",(0,r.jsx)(n.strong,{children:"*print-pprint-dispatch*"})," that makes pretty-printed output look exactly like non-pretty-printed output. Setting ",(0,r.jsx)(n.strong,{children:"*print-pretty*"})," to ",(0,r.jsx)(n.em,{children:"true"})," just causes the functions contained in the ",(0,r.jsx)(n.em,{children:"current pprint dispatch table"})," to have priority over normal ",(0,r.jsx)(n.strong,{children:"print-object"})," methods; it has no magic way of enforcing that those functions actually produce pretty output. For details, see Section 22.2.1.4 (Pretty Print Dispatch Tables)."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-pretty"}),(0,r.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,r.jsxs)(n.p,{children:["a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"implementation-dependent"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Controls whether the ",(0,r.jsx)(n.em,{children:"Lisp printer"})," calls the ",(0,r.jsx)(n.em,{children:"pretty printer"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:["If it is ",(0,r.jsx)(n.em,{children:"false"}),", the ",(0,r.jsx)(n.em,{children:"pretty printer"})," is not used and a minimum of ",(0,r.jsx)(n.em,{children:"whitespace"}),(0,r.jsx)("sub",{children:"1"})," is output when printing an expression."]}),"\n",(0,r.jsxs)(n.p,{children:["If it is ",(0,r.jsx)(n.em,{children:"true"}),", the ",(0,r.jsx)(n.em,{children:"pretty printer"})," is used, and the ",(0,r.jsx)(n.em,{children:"Lisp printer"})," will endeavor to insert extra ",(0,r.jsx)(n.em,{children:"whitespace"}),(0,r.jsx)("sub",{children:"1"})," where appropriate to make ",(0,r.jsx)(n.em,{children:"expressions"})," more readable."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*print-pretty*"})," has an effect even when the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-escape*"})," is ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:["(setq *print-pretty* \u2019nil) ",(0,r.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,r.jsx)(n.p,{children:"(progn (write \u2019(let ((a 1) (b 2) (c 3)) (+ a b c))) nil)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 (LET ((A 1) (B 2) (C 3)) (+ A B C))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-pretty* t))"}),"\n",(0,r.jsx)(n.p,{children:"(progn (write \u2019(let ((a 1) (b 2) (c 3)) (+ a b c))) nil))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 (LET ((A 1)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 (B 2)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 (C 3))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 (+ A B C))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,r.jsx)(n.p,{children:";; Note that the first two expressions printed by this next form"}),"\n",(0,r.jsx)(n.p,{children:";; differ from the second two only in whether escape characters are printed. ;; In all four cases, extra whitespace is inserted by the pretty printer."}),"\n",(0,r.jsx)(n.p,{children:"(flet ((test (x)"}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-pretty* t))"}),"\n",(0,r.jsx)(n.p,{children:"(print x)"}),"\n",(0,r.jsx)(n.p,{children:'(format t "~%~S " x)'}),"\n",(0,r.jsx)(n.p,{children:'(terpri) (princ x) (princ " ")'}),"\n",(0,r.jsx)(n.p,{children:'(format t "~%~A " x))))'}),"\n",(0,r.jsx)(n.p,{children:'(test \u2019#\u2019(lambda () (list "a" # \u2019c #\u2019d))))'}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 #\u2019(LAMBDA ()"}),"\n",(0,r.jsx)(n.p,{children:'\u25b7 (LIST "a" # \u2019C #\u2019D))'}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 #\u2019(LAMBDA ()"}),"\n",(0,r.jsx)(n.p,{children:'\u25b7 (LIST "a" # \u2019C #\u2019D))'}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 #\u2019(LAMBDA ()"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 (LIST a b \u2019C #\u2019D))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 #\u2019(LAMBDA ()"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 (LIST a b \u2019C #\u2019D))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"write"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-readably"}),(0,r.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,r.jsxs)(n.p,{children:["a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-readably"}),(0,r.jsx)(n.em,{children:"\u2217"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," is ",(0,r.jsx)(n.em,{children:"true"}),", some special rules for printing ",(0,r.jsx)(n.em,{children:"objects"})," go into effect. Specifically, printing any ",(0,r.jsx)(n.em,{children:"object O"}),(0,r.jsx)("sub",{children:"1"})," produces a printed representation that, when seen by the ",(0,r.jsx)(n.em,{children:"Lisp reader"})," while the ",(0,r.jsx)(n.em,{children:"standard readtable"})," is in effect, will produce an ",(0,r.jsx)(n.em,{children:"object O"}),(0,r.jsx)("sub",{children:"2"})," that is ",(0,r.jsx)(n.em,{children:"similar"})," to ",(0,r.jsx)(n.em,{children:"O"}),(0,r.jsx)("sub",{children:"1"}),". The printed representation produced might or might not be the same as the printed representation produced when ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," is ",(0,r.jsx)(n.em,{children:"false"}),". If printing an ",(0,r.jsx)(n.em,{children:"object readably"})," is not possible, an error of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"print-not-readable"})," is signaled rather than using a syntax (",(0,r.jsx)(n.em,{children:"e.g."}),", the \u201c#<\u201d syntax) that would not be readable by the same ",(0,r.jsx)(n.em,{children:"implementation"}),". If the ",(0,r.jsx)(n.em,{children:"value"})," of some other ",(0,r.jsx)(n.em,{children:"printer control variable"})," is such that these requirements would be violated, the ",(0,r.jsx)(n.em,{children:"value"})," of that other ",(0,r.jsx)(n.em,{children:"variable"})," is ignored."]}),"\n",(0,r.jsxs)(n.p,{children:["Specifically, if ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," is ",(0,r.jsx)(n.em,{children:"true"}),", printing proceeds as if ",(0,r.jsx)(n.strong,{children:"*print-escape*"}),", ",(0,r.jsx)(n.strong,{children:"*print-array*"}),", and ",(0,r.jsx)(n.strong,{children:"*print-gensym*"})," were also ",(0,r.jsx)(n.em,{children:"true"}),", and as if ",(0,r.jsx)(n.strong,{children:"*print-length*"}),", ",(0,r.jsx)(n.strong,{children:"*print-level*"}),", and ",(0,r.jsx)(n.strong,{children:"*print-lines*"})," were ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," is ",(0,r.jsx)(n.em,{children:"false"}),", the normal rules for printing and the normal interpretations of other ",(0,r.jsx)(n.em,{children:"printer control variables"})," are in effect."]}),"\n",(0,r.jsxs)(n.p,{children:["Individual ",(0,r.jsx)(n.em,{children:"methods"})," for ",(0,r.jsx)(n.strong,{children:"print-object"}),", including user-defined ",(0,r.jsx)(n.em,{children:"methods"}),", are responsible for implementing these requirements."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.strong,{children:"*read-eval*"})," is ",(0,r.jsx)(n.em,{children:"false"})," and ",(0,r.jsx)(n.strong,{children:"*print-readably*"})," is ",(0,r.jsx)(n.em,{children:"true"}),", any such method that would output a reference to the \u201c#.\u201d ",(0,r.jsx)(n.em,{children:"reader macro"})," will either output something else or will signal an error (as described above)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.p,{children:'(let ((x (list "a" \u2019\\a (gensym) \u2019((a (b (c))) d e f g)))'}),"\n",(0,r.jsx)(n.p,{children:"(*print-escape* nil)"}),"\n",(0,r.jsx)(n.p,{children:"(*print-gensym* nil)"}),"\n",(0,r.jsx)(n.p,{children:"(*print-level* 3)"}),"\n",(0,r.jsx)(n.p,{children:"(*print-length* 3))"}),"\n",(0,r.jsx)(n.p,{children:"(write x)"}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-readably* t))"}),"\n",(0,r.jsx)(n.p,{children:"(terpri)"}),"\n",(0,r.jsx)(n.p,{children:"(write x)"}),"\n",(0,r.jsxs)(n.p,{children:[":done","))"]}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 (a a G4581 ((A #) D E ...))"}),"\n",(0,r.jsxs)(n.p,{children:['\u25b7 ("a" |a| #',":G4581"," ((A (B (C))) D E F G))"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," ",":DONE"]}),"\n",(0,r.jsx)(n.p,{children:";; This is setup code is shared between the examples"}),"\n",(0,r.jsx)(n.p,{children:";; of three hypothetical implementations which follow."}),"\n",(0,r.jsxs)(n.p,{children:["(setq table (make-hash-table)) ",(0,r.jsx)(n.em,{children:"\u2192"})," #<HASH-TABLE EQL 0/120 32005763>"]}),"\n",(0,r.jsxs)(n.p,{children:["(setf (gethash table 1) \u2019one) ",(0,r.jsx)(n.em,{children:"\u2192"})," ONE"]}),"\n",(0,r.jsxs)(n.p,{children:["(setf (gethash table 2) \u2019two) ",(0,r.jsx)(n.em,{children:"\u2192"})," TWO"]}),"\n",(0,r.jsx)(n.p,{children:";; Implementation A"}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-readably* t)) (print table))"}),"\n",(0,r.jsx)(n.p,{children:"Error: Can\u2019t print #<HASH-TABLE EQL 0/120 32005763> readably."}),"\n",(0,r.jsx)(n.p,{children:";; Implementation B"}),"\n",(0,r.jsx)(n.p,{children:";; No standardized #S notation for hash tables is defined,"}),"\n",(0,r.jsx)(n.p,{children:";; but there might be an implementation-defined notation."}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-readably* t)) (print table))"}),"\n",(0,r.jsxs)(n.p,{children:["\u25b7 #S(HASH-TABLE ",":TEST"," EQL ",":SIZE"," 120 ",":CONTENTS"," (1 ONE 2 TWO))"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," #<HASH-TABLE EQL 0/120 32005763>"]}),"\n",(0,r.jsx)(n.p,{children:";; Implementation C"}),"\n",(0,r.jsx)(n.p,{children:";; Note that #. notation can only be used if *READ-EVAL* is true."}),"\n",(0,r.jsx)(n.p,{children:";; If *READ-EVAL* were false, this same implementation might have to"}),"\n",(0,r.jsx)(n.p,{children:";; signal an error unless it had yet another printing strategy to fall"}),"\n",(0,r.jsx)(n.p,{children:";; back on."}),"\n",(0,r.jsx)(n.p,{children:"(let ((*print-readably* t)) (print table))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 #.(LET ((HASH-TABLE (MAKE-HASH-TABLE)))"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 (SETF (GETHASH 1 HASH-TABLE) ONE)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 (SETF (GETHASH 2 HASH-TABLE) TWO)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 HASH-TABLE)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," #<HASH-TABLE EQL 0/120 32005763>"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"write"}),", ",(0,r.jsx)(n.strong,{children:"print-unreadable-object"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["The rules for \u201c",(0,r.jsx)(n.em,{children:"similarity"}),"\u201d imply that #A or #( syntax cannot be used for ",(0,r.jsx)(n.em,{children:"arrays"})," of ",(0,r.jsx)(n.em,{children:"element type"})," other than ",(0,r.jsx)(n.strong,{children:"t"}),". An implementation will have to use another syntax or signal an error of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"print-not-readable"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2217"}),(0,r.jsx)(n.strong,{children:"print-right-margin"}),(0,r.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,r.jsxs)(n.p,{children:["a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," , or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"nil"}),"."]})]})}function rn(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(nn,{...e})}):nn(e)}const sn={title:"22.3 Formatted Output"},tn="22.3 Formatted Output",ln={id:"chap-22/cc-d-formatted-output",title:"22.3 Formatted Output",description:"22.3.1 FORMAT Basic Output",source:"@site/docs/chap-22/cc-d-formatted-output.md",sourceDirName:"chap-22",slug:"/chap-22/cc-d-formatted-output",permalink:"/cl-language-reference/docs/chap-22/cc-d-formatted-output",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-22/cc-d-formatted-output.md",tags:[],version:"current",frontMatter:{title:"22.3 Formatted Output"},sidebar:"tutorialSidebar",previous:{title:"22.2 The Lisp Pretty Printer",permalink:"/cl-language-reference/docs/chap-22/cc-c-the-lisp-pretty-printer"},next:{title:"intro",permalink:"/cl-language-reference/docs/chap-22/intro"}},cn={},dn=[{value:"22.3.1 FORMAT Basic Output",id:"2231-format-basic-output",level:2},{value:"22.3.1.1 Tilde C",id:"22311-tilde-c",level:3},{value:"22.3.1.2 Tilde Percent",id:"22312-tilde-percent",level:3},{value:"22.3.1.3 Tilde Ampersand",id:"22313-tilde-ampersand",level:3},{value:"22.3.1.4 Tilde Vertical",id:"22314-tilde-vertical",level:3},{value:"22.3.1.5 Tilde Tilde",id:"22315-tilde-tilde",level:3},{value:"22.3.2 FORMAT Radix Control",id:"2232-format-radix-control",level:2},{value:"22.3.2.1 Tilde R",id:"22321-tilde-r",level:3},{value:"22.3.2.2 Tilde D",id:"22322-tilde-d",level:3},{value:"22.3.2.3 Tilde B",id:"22323-tilde-b",level:3},{value:"22.3.2.4 Tilde O",id:"22324-tilde-o",level:3},{value:"22.3.2.5 Tilde X",id:"22325-tilde-x",level:3},{value:"22.3.3 FORMAT Floating",id:"2233-format-floating",level:2},{value:"22.3.3.1 Tilde F",id:"22331-tilde-f",level:3},{value:"22.3.3.2 Tilde E",id:"22332-tilde-e",level:3},{value:"22.3.3.3 Tilde G",id:"22333-tilde-g",level:3},{value:"22.3.3.4 Tilde Dollarsign",id:"22334-tilde-dollarsign",level:3},{value:"22.3.4 FORMAT Printer Operations",id:"2234-format-printer-operations",level:2},{value:"22.3.4.1 Tilde A",id:"22341-tilde-a",level:3},{value:"22.3.4.2 Tilde S",id:"22342-tilde-s",level:3},{value:"22.3.4.3 Tilde W",id:"22343-tilde-w",level:3},{value:"22.3.5 FORMAT Pretty Printer Operations",id:"2235-format-pretty-printer-operations",level:2},{value:"22.3.5.1 Tilde Underscore",id:"22351-tilde-underscore",level:3},{value:"22.3.5.2 Tilde Less",id:"22352-tilde-less",level:3},{value:"22.3.5.3 Tilde I",id:"22353-tilde-i",level:3},{value:"22.3.5.4 Tilde Slash",id:"22354-tilde-slash",level:3},{value:"22.3.6 FORMAT Layout Control",id:"2236-format-layout-control",level:2},{value:"22.3.6.1 Tilde T",id:"22361-tilde-t",level:3},{value:"22.3.6.2 Tilde Less",id:"22362-tilde-less",level:3},{value:"22.3.6.3 Tilde Greater",id:"22363-tilde-greater",level:3},{value:"22.3.7 FORMAT Control",id:"2237-format-control",level:2},{value:"22.3.7.1 Tilde Asterisk",id:"22371-tilde-asterisk",level:3},{value:"22.3.7.2 Tilde Left",id:"22372-tilde-left",level:3},{value:"22.3.7.3 Tilde Right",id:"22373-tilde-right",level:3},{value:"22.3.7.4 Tilde Left",id:"22374-tilde-left",level:3},{value:"22.3.7.5 Tilde Right",id:"22375-tilde-right",level:3},{value:"22.3.7.6 Tilde Question",id:"22376-tilde-question",level:3},{value:"22.3.8 FORMAT Miscellaneous Operations",id:"2238-format-miscellaneous-operations",level:2},{value:"22.3.8.1 Tilde Left",id:"22381-tilde-left",level:3},{value:"22.3.8.2 Tilde Right",id:"22382-tilde-right",level:3},{value:"22.3.8.3 Tilde P",id:"22383-tilde-p",level:3},{value:"22.3.9 FORMAT Miscellaneous Pseudo",id:"2239-format-miscellaneous-pseudo",level:2},{value:"22.3.9.1 Tilde Semicolon",id:"22391-tilde-semicolon",level:3},{value:"22.3.9.2 Tilde Circumflex",id:"22392-tilde-circumflex",level:3},{value:"22.3.9.3 Tilde Newline",id:"22393-tilde-newline",level:3},{value:"22.3.10 Additional Information about FORMAT Operations",id:"22310-additional-information-about-format-operations",level:2},{value:"22.3.10.1 Nesting of FORMAT Operations",id:"223101-nesting-of-format-operations",level:3},{value:"22.3.10.2 Missing and Additional FORMAT Arguments",id:"223102-missing-and-additional-format-arguments",level:3},{value:"22.3.10.3 Additional FORMAT Parameters",id:"223103-additional-format-parameters",level:3},{value:"22.3.10.4 Undefined FORMAT Modifier Combinations",id:"223104-undefined-format-modifier-combinations",level:3},{value:"22.3.11 Examples of FORMAT",id:"22311-examples-of-format",level:2},{value:"22.3.12 Notes about FORMAT",id:"22312-notes-about-format",level:2}];function hn(e){const n={h1:"h1",h2:"h2",h3:"h3",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"223-formatted-output",children:"22.3 Formatted Output"}),"\n","\n",(0,r.jsx)(l,{}),"\n",(0,r.jsx)(n.h2,{id:"2231-format-basic-output",children:"22.3.1 FORMAT Basic Output"}),"\n","\n",(0,r.jsx)(d,{}),"\n",(0,r.jsx)(n.h3,{id:"22311-tilde-c",children:"22.3.1.1 Tilde C"}),"\n","\n",(0,r.jsx)(o,{}),"\n",(0,r.jsx)(n.h3,{id:"22312-tilde-percent",children:"22.3.1.2 Tilde Percent"}),"\n","\n",(0,r.jsx)(p,{}),"\n",(0,r.jsx)(n.h3,{id:"22313-tilde-ampersand",children:"22.3.1.3 Tilde Ampersand"}),"\n","\n",(0,r.jsx)(j,{}),"\n",(0,r.jsx)(n.h3,{id:"22314-tilde-vertical",children:"22.3.1.4 Tilde Vertical"}),"\n","\n",(0,r.jsx)(u,{}),"\n",(0,r.jsx)(n.h3,{id:"22315-tilde-tilde",children:"22.3.1.5 Tilde Tilde"}),"\n","\n",(0,r.jsx)(g,{}),"\n",(0,r.jsx)(n.h2,{id:"2232-format-radix-control",children:"22.3.2 FORMAT Radix Control"}),"\n","\n",(0,r.jsx)(y,{}),"\n",(0,r.jsx)(n.h3,{id:"22321-tilde-r",children:"22.3.2.1 Tilde R"}),"\n","\n",(0,r.jsx)(v,{}),"\n",(0,r.jsx)(n.h3,{id:"22322-tilde-d",children:"22.3.2.2 Tilde D"}),"\n","\n",(0,r.jsx)(I,{}),"\n",(0,r.jsx)(n.h3,{id:"22323-tilde-b",children:"22.3.2.3 Tilde B"}),"\n","\n",(0,r.jsx)(k,{}),"\n",(0,r.jsx)(n.h3,{id:"22324-tilde-o",children:"22.3.2.4 Tilde O"}),"\n","\n",(0,r.jsx)(F,{}),"\n",(0,r.jsx)(n.h3,{id:"22325-tilde-x",children:"22.3.2.5 Tilde X"}),"\n","\n",(0,r.jsx)(O,{}),"\n",(0,r.jsx)(n.h2,{id:"2233-format-floating",children:"22.3.3 FORMAT Floating"}),"\n","\n",(0,r.jsx)(L,{}),"\n",(0,r.jsx)(n.h3,{id:"22331-tilde-f",children:"22.3.3.1 Tilde F"}),"\n","\n",(0,r.jsx)(q,{}),"\n",(0,r.jsx)(n.h3,{id:"22332-tilde-e",children:"22.3.3.2 Tilde E"}),"\n","\n",(0,r.jsx)(z,{}),"\n",(0,r.jsx)(n.h3,{id:"22333-tilde-g",children:"22.3.3.3 Tilde G"}),"\n","\n",(0,r.jsx)(C,{}),"\n",(0,r.jsx)(n.h3,{id:"22334-tilde-dollarsign",children:"22.3.3.4 Tilde Dollarsign"}),"\n","\n",(0,r.jsx)(B,{}),"\n",(0,r.jsx)(n.h2,{id:"2234-format-printer-operations",children:"22.3.4 FORMAT Printer Operations"}),"\n","\n",(0,r.jsx)(H,{}),"\n",(0,r.jsx)(n.h3,{id:"22341-tilde-a",children:"22.3.4.1 Tilde A"}),"\n","\n",(0,r.jsx)(G,{}),"\n",(0,r.jsx)(n.h3,{id:"22342-tilde-s",children:"22.3.4.2 Tilde S"}),"\n","\n",(0,r.jsx)(X,{}),"\n",(0,r.jsx)(n.h3,{id:"22343-tilde-w",children:"22.3.4.3 Tilde W"}),"\n","\n",(0,r.jsx)(Q,{}),"\n",(0,r.jsx)(n.h2,{id:"2235-format-pretty-printer-operations",children:"22.3.5 FORMAT Pretty Printer Operations"}),"\n","\n",(0,r.jsx)(Y,{}),"\n",(0,r.jsx)(n.h3,{id:"22351-tilde-underscore",children:"22.3.5.1 Tilde Underscore"}),"\n","\n",(0,r.jsx)(J,{}),"\n",(0,r.jsx)(n.h3,{id:"22352-tilde-less",children:"22.3.5.2 Tilde Less"}),"\n","\n",(0,r.jsx)(ee,{}),"\n",(0,r.jsx)(n.h3,{id:"22353-tilde-i",children:"22.3.5.3 Tilde I"}),"\n","\n",(0,r.jsx)(ie,{}),"\n",(0,r.jsx)(n.h3,{id:"22354-tilde-slash",children:"22.3.5.4 Tilde Slash"}),"\n","\n",(0,r.jsx)(se,{}),"\n",(0,r.jsx)(n.h2,{id:"2236-format-layout-control",children:"22.3.6 FORMAT Layout Control"}),"\n","\n",(0,r.jsx)(le,{}),"\n",(0,r.jsx)(n.h3,{id:"22361-tilde-t",children:"22.3.6.1 Tilde T"}),"\n","\n",(0,r.jsx)(de,{}),"\n",(0,r.jsx)(n.h3,{id:"22362-tilde-less",children:"22.3.6.2 Tilde Less"}),"\n","\n",(0,r.jsx)(oe,{}),"\n",(0,r.jsx)(n.h3,{id:"22363-tilde-greater",children:"22.3.6.3 Tilde Greater"}),"\n","\n",(0,r.jsx)(pe,{}),"\n",(0,r.jsx)(n.h2,{id:"2237-format-control",children:"22.3.7 FORMAT Control"}),"\n","\n",(0,r.jsx)(je,{}),"\n",(0,r.jsx)(n.h3,{id:"22371-tilde-asterisk",children:"22.3.7.1 Tilde Asterisk"}),"\n","\n",(0,r.jsx)(ue,{}),"\n",(0,r.jsx)(n.h3,{id:"22372-tilde-left",children:"22.3.7.2 Tilde Left"}),"\n","\n",(0,r.jsx)(ge,{}),"\n",(0,r.jsx)(n.h3,{id:"22373-tilde-right",children:"22.3.7.3 Tilde Right"}),"\n","\n",(0,r.jsx)(ye,{}),"\n",(0,r.jsx)(n.h3,{id:"22374-tilde-left",children:"22.3.7.4 Tilde Left"}),"\n","\n",(0,r.jsx)(ve,{}),"\n",(0,r.jsx)(n.h3,{id:"22375-tilde-right",children:"22.3.7.5 Tilde Right"}),"\n","\n",(0,r.jsx)(Ie,{}),"\n",(0,r.jsx)(n.h3,{id:"22376-tilde-question",children:"22.3.7.6 Tilde Question"}),"\n","\n",(0,r.jsx)(ke,{}),"\n",(0,r.jsx)(n.h2,{id:"2238-format-miscellaneous-operations",children:"22.3.8 FORMAT Miscellaneous Operations"}),"\n","\n",(0,r.jsx)(Fe,{}),"\n",(0,r.jsx)(n.h3,{id:"22381-tilde-left",children:"22.3.8.1 Tilde Left"}),"\n","\n",(0,r.jsx)(Oe,{}),"\n",(0,r.jsx)(n.h3,{id:"22382-tilde-right",children:"22.3.8.2 Tilde Right"}),"\n","\n",(0,r.jsx)(Le,{}),"\n",(0,r.jsx)(n.h3,{id:"22383-tilde-p",children:"22.3.8.3 Tilde P"}),"\n","\n",(0,r.jsx)(qe,{}),"\n",(0,r.jsx)(n.h2,{id:"2239-format-miscellaneous-pseudo",children:"22.3.9 FORMAT Miscellaneous Pseudo"}),"\n","\n",(0,r.jsx)(ze,{}),"\n",(0,r.jsx)(n.h3,{id:"22391-tilde-semicolon",children:"22.3.9.1 Tilde Semicolon"}),"\n","\n",(0,r.jsx)(Ce,{}),"\n",(0,r.jsx)(n.h3,{id:"22392-tilde-circumflex",children:"22.3.9.2 Tilde Circumflex"}),"\n","\n",(0,r.jsx)(Be,{}),"\n",(0,r.jsx)(n.h3,{id:"22393-tilde-newline",children:"22.3.9.3 Tilde Newline"}),"\n","\n",(0,r.jsx)(He,{}),"\n",(0,r.jsx)(n.h2,{id:"22310-additional-information-about-format-operations",children:"22.3.10 Additional Information about FORMAT Operations"}),"\n","\n",(0,r.jsx)(Ge,{}),"\n",(0,r.jsx)(n.h3,{id:"223101-nesting-of-format-operations",children:"22.3.10.1 Nesting of FORMAT Operations"}),"\n","\n",(0,r.jsx)(Xe,{}),"\n",(0,r.jsx)(n.h3,{id:"223102-missing-and-additional-format-arguments",children:"22.3.10.2 Missing and Additional FORMAT Arguments"}),"\n","\n",(0,r.jsx)(Qe,{}),"\n",(0,r.jsx)(n.h3,{id:"223103-additional-format-parameters",children:"22.3.10.3 Additional FORMAT Parameters"}),"\n","\n",(0,r.jsx)(Ye,{}),"\n",(0,r.jsx)(n.h3,{id:"223104-undefined-format-modifier-combinations",children:"22.3.10.4 Undefined FORMAT Modifier Combinations"}),"\n","\n",(0,r.jsx)(Je,{}),"\n",(0,r.jsx)(n.h2,{id:"22311-examples-of-format",children:"22.3.11 Examples of FORMAT"}),"\n","\n",(0,r.jsx)(en,{}),"\n",(0,r.jsx)(n.h2,{id:"22312-notes-about-format",children:"22.3.12 Notes about FORMAT"}),"\n","\n","\n",(0,r.jsx)(rn,{})]})}function on(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(hn,{...e})}):hn(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>l});var r=i(67294);const s={},t=r.createContext(s);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);