"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[45462],{6418:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>E,contentTitle:()=>F,default:()=>C,frontMatter:()=>T,metadata:()=>D,toc:()=>k});var s=i(85893),r=i(11151);function t(e){return(0,s.jsx)(s.Fragment,{})}function l(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t()}function o(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The top level loop is the Common Lisp mechanism by which the user normally interacts with the Common Lisp system. This loop is sometimes referred to as the ",(0,s.jsx)(n.em,{children:"Lisp read-eval-print loop"})," because it typically consists of an endless loop that reads an expression, evaluates it and prints the results."]}),"\n",(0,s.jsxs)(n.p,{children:["The top level loop is not completely specified; thus the user interface is ",(0,s.jsx)(n.em,{children:"implementation-defined"}),". The top level loop prints all values resulting from the evaluation of a ",(0,s.jsx)(n.em,{children:"form"}),". Figure 25\u20131 lists variables that are maintained by the ",(0,s.jsx)(n.em,{children:"Lisp read-eval-print loop"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["|",(0,s.jsxs)("p",{children:[(0,s.jsx)(n.strong,{children:"* + / -"})," "]}),(0,s.jsxs)("p",{children:[(0,s.jsx)(n.strong,{children:"** ++ //"})," "]}),(0,s.jsx)("p",{children:(0,s.jsx)(n.strong,{children:"*** +++ ///"})}),"|"]}),"\n",(0,s.jsx)(n.p,{children:"| :- |"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Figure 25\u20131. Variables maintained by the Read-Eval-Print Loop"})})]})}function a(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}function c(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Figure 25\u20132 shows ",(0,s.jsx)(n.em,{children:"defined names"})," relating to debugging."]}),"\n",(0,s.jsxs)(n.p,{children:["|",(0,s.jsxs)("p",{children:[(0,s.jsx)(n.strong,{children:"*debugger-hook* documentation step"})," "]}),(0,s.jsxs)("p",{children:[(0,s.jsx)(n.strong,{children:"apropos dribble time"})," "]}),(0,s.jsxs)("p",{children:[(0,s.jsx)(n.strong,{children:"apropos-list ed trace"})," "]}),(0,s.jsx)("p",{children:(0,s.jsx)(n.strong,{children:"break inspect untrace describe invoke-debugger"})}),"|"]}),"\n",(0,s.jsx)(n.p,{children:"| :- |"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Figure 25\u20132. Defined names relating to debugging"})})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}function m(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Environment inquiry ",(0,s.jsx)(n.em,{children:"defined names"})," provide information about the hardware and software configuration on which a Common Lisp program is being executed."]}),"\n",(0,s.jsxs)(n.p,{children:["Figure 25\u20133 shows ",(0,s.jsx)(n.em,{children:"defined names"})," relating to environment inquiry."]}),"\n",(0,s.jsxs)(n.p,{children:["|",(0,s.jsx)(n.strong,{children:"*features* machine-instance short-site-name lisp-implementation-type machine-type software-type lisp-implementation-version machine-version software-version long-site-name room"}),"|"]}),"\n",(0,s.jsx)(n.p,{children:"| :- |"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Figure 25\u20133. Defined names relating to environment inquiry."})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}function p(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Time is represented in four different ways in Common Lisp: ",(0,s.jsx)(n.em,{children:"decoded time"}),", ",(0,s.jsx)(n.em,{children:"universal time"}),", ",(0,s.jsx)(n.em,{children:"internal time"}),", and seconds. ",(0,s.jsx)(n.em,{children:"Decoded time"})," and ",(0,s.jsx)(n.em,{children:"universal time"})," are used primarily to represent calendar time, and are precise only to one second. ",(0,s.jsx)(n.em,{children:"Internal time"})," is used primarily to represent measurements of"]}),"\n",(0,s.jsxs)(n.p,{children:["computer time (such as run time) and is precise to some ",(0,s.jsx)(n.em,{children:"implementation-dependent"})," fraction of a second called an ",(0,s.jsx)(n.em,{children:"internal time unit"}),", as specified by ",(0,s.jsx)(n.strong,{children:"internal-time-units-per-second"}),". An ",(0,s.jsx)(n.em,{children:"internal time"})," can be used for either ",(0,s.jsx)(n.em,{children:"absolute"})," and ",(0,s.jsx)(n.em,{children:"relative time"})," measurements. Both a ",(0,s.jsx)(n.em,{children:"universal time"})," and a ",(0,s.jsx)(n.em,{children:"decoded time"})," can be used only for ",(0,s.jsx)(n.em,{children:"absolute time"})," measurements. In the case of one function, ",(0,s.jsx)(n.strong,{children:"sleep"}),", time intervals are represented as a non-negative ",(0,s.jsx)(n.em,{children:"real"})," number of seconds."]}),"\n",(0,s.jsxs)(n.p,{children:["Figure 25\u20134 shows ",(0,s.jsx)(n.em,{children:"defined names"})," relating to ",(0,s.jsx)(n.em,{children:"time"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["|",(0,s.jsxs)("p",{children:[(0,s.jsx)(n.strong,{children:"decode-universal-time get-internal-run-time"})," "]}),(0,s.jsxs)("p",{children:[(0,s.jsx)(n.strong,{children:"encode-universal-time get-universal-time"})," "]}),(0,s.jsxs)("p",{children:[(0,s.jsx)(n.strong,{children:"get-decoded-time internal-time-units-per-second"})," "]}),(0,s.jsx)("p",{children:(0,s.jsx)(n.strong,{children:"get-internal-real-time sleep"})}),"|"]}),"\n",(0,s.jsx)(n.p,{children:"| :- |"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Figure 25\u20134. Defined names involving Time."})})]})}function x(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}function j(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"decoded time"})," is an ordered series of nine values that, taken together, represent a point in calendar time (ignoring ",(0,s.jsx)(n.em,{children:"leap seconds"}),"):"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Second"})}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.em,{children:"integer"})," between 0 and 59, inclusive."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Minute"})}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.em,{children:"integer"})," between 0 and 59, inclusive."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Hour"})}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.em,{children:"integer"})," between 0 and 23, inclusive."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Date"})}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.em,{children:"integer"})," between 1 and 31, inclusive (the upper limit actually depends on the month and year, of course)."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Month"})}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.em,{children:"integer"})," between 1 and 12, inclusive; 1 means January, 2 means February, and so on; 12 means December."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Year"})}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.em,{children:"integer"})," indicating the year A.D. However, if this ",(0,s.jsx)(n.em,{children:"integer"})," is between 0 and 99, the \u201cobvious\u201d year is used; more precisely, that year is assumed that is equal to the ",(0,s.jsx)(n.em,{children:"integer"})," modulo 100 and within fifty years of the current year (inclusive backwards and exclusive forwards). Thus, in the year 1978, year 28 is 1928 but year 27 is 2027. (Functions that return time in this format always return a full year number.)"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Day of week"})}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.em,{children:"integer"})," between 0 and 6, inclusive; 0 means Monday, 1 means Tuesday, and so on; 6 means Sunday."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Daylight saving time flag"})}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"generalized boolean"})," that, if ",(0,s.jsx)(n.em,{children:"true"}),", indicates that daylight saving time is in effect."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Time zone"})}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"time zone"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Figure 25\u20135 shows ",(0,s.jsx)(n.em,{children:"defined names"})," relating to ",(0,s.jsx)(n.em,{children:"decoded time"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["|",(0,s.jsx)(n.strong,{children:"decode-universal-time get-decoded-time"}),"|"]}),"\n",(0,s.jsx)(n.p,{children:"| :- |"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Figure 25\u20135. Defined names involving time in Decoded Time."})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(j,{...e})}):j(e)}function g(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Universal time"})," is an ",(0,s.jsx)(n.em,{children:"absolute time"})," represented as a single non-negative ",(0,s.jsx)(n.em,{children:"integer"}),"\u2014the number of seconds since midnight, January 1, 1900 GMT (ignoring ",(0,s.jsx)(n.em,{children:"leap seconds"}),"). Thus the time 1 is 00:00:01 (that is, 12:00:01 a.m.) on January 1, 1900 GMT. Similarly, the time 2398291201 corresponds to"]}),"\n",(0,s.jsx)(n.p,{children:"time 00:00:01 on January 1, 1976 GMT. Recall that the year 1900 was not a leap year; for the purposes of Common Lisp, a year is a leap year if and only if its number is divisible by 4, except that years divisible by 100 are not leap years, except that years divisible by 400 are leap years."}),"\n",(0,s.jsxs)(n.p,{children:["Therefore the year 2000 will be a leap year. Because ",(0,s.jsx)(n.em,{children:"universal time"})," must be a non-negative ",(0,s.jsx)(n.em,{children:"integer"})," , times before the base time of midnight, January 1, 1900 GMT cannot be processed by Common Lisp."]}),"\n",(0,s.jsxs)(n.p,{children:["|",(0,s.jsxs)("p",{children:[(0,s.jsx)(n.strong,{children:"decode-universal-time get-universal-time"})," "]}),(0,s.jsx)("p",{children:(0,s.jsx)(n.strong,{children:"encode-universal-time"})}),"|"]}),"\n",(0,s.jsx)(n.p,{children:"| :- |"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Figure 25\u20136. Defined names involving time in Universal Time."})})]})}function v(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}function f(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Internal time"})," represents time as a single ",(0,s.jsx)(n.em,{children:"integer"})," , in terms of an ",(0,s.jsx)(n.em,{children:"implementation-dependent"})," unit called an ",(0,s.jsx)(n.em,{children:"internal time unit"}),". Relative time is measured as a number of these units. Absolute time is relative to an arbitrary time base."]}),"\n",(0,s.jsxs)(n.p,{children:["Figure 25\u20137 shows ",(0,s.jsx)(n.em,{children:"defined names"})," related to ",(0,s.jsx)(n.em,{children:"internal time"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["|",(0,s.jsxs)("p",{children:[(0,s.jsx)(n.strong,{children:"get-internal-real-time internal-time-units-per-second"})," "]}),(0,s.jsx)("p",{children:(0,s.jsx)(n.strong,{children:"get-internal-run-time"})}),"|"]}),"\n",(0,s.jsx)(n.p,{children:"| :- |"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Figure 25\u20137. Defined names involving time in Internal Time."})})]})}function y(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}function b(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["One function, ",(0,s.jsx)(n.strong,{children:"sleep"}),", takes its argument as a non-negative ",(0,s.jsx)(n.em,{children:"real"})," number of seconds. Informally, it may be useful to think of this as a ",(0,s.jsx)(n.em,{children:"relative universal time"}),", but it differs in one important way: ",(0,s.jsx)(n.em,{children:"universal times"})," are always non-negative ",(0,s.jsx)(n.em,{children:"integers"}),", whereas the argument to ",(0,s.jsx)(n.strong,{children:"sleep"})," can be any kind of non-negative ",(0,s.jsx)(n.em,{children:"real"}),", in order to allow for the possibility of fractional seconds."]}),"\n",(0,s.jsxs)(n.p,{children:["|",(0,s.jsx)(n.strong,{children:"sleep"}),"|"]}),"\n",(0,s.jsx)(n.p,{children:"| :- |"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Figure 25\u20138. Defined names involving time in Seconds."})})]})}function w(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(b,{...e})}):b(e)}const T={title:"25.1 The External Environment"},F="25.1 The External Environment",D={id:"chap-25/cf-b-the-external-environment",title:"25.1 The External Environment",description:"25.1.1 Top level loop",source:"@site/docs/chap-25/cf-b-the-external-environment.md",sourceDirName:"chap-25",slug:"/chap-25/cf-b-the-external-environment",permalink:"/cl-language-reference/docs/chap-25/cf-b-the-external-environment",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-25/cf-b-the-external-environment.md",tags:[],version:"current",frontMatter:{title:"25.1 The External Environment"},sidebar:"tutorialSidebar",previous:{title:"25. Environment",permalink:"/cl-language-reference/docs/category/25-environment"},next:{title:"25.2 Environment Dictionary",permalink:"/cl-language-reference/docs/category/252-environment-dictionary"}},E={},k=[{value:"25.1.1 Top level loop",id:"2511-top-level-loop",level:2},{value:"25.1.2 Debugging Utilities",id:"2512-debugging-utilities",level:2},{value:"25.1.3 Environment Inquiry",id:"2513-environment-inquiry",level:2},{value:"25.1.4 Time",id:"2514-time",level:2},{value:"25.1.4.1 Decoded Time",id:"25141-decoded-time",level:3},{value:"25.1.4.2 Universal Time",id:"25142-universal-time",level:3},{value:"25.1.4.3 Internal Time",id:"25143-internal-time",level:3},{value:"25.1.4.4 Seconds",id:"25144-seconds",level:3}];function A(e){const n={h1:"h1",h2:"h2",h3:"h3",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"251-the-external-environment",children:"25.1 The External Environment"}),"\n","\n",(0,s.jsx)(l,{}),"\n",(0,s.jsx)(n.h2,{id:"2511-top-level-loop",children:"25.1.1 Top level loop"}),"\n","\n",(0,s.jsx)(a,{}),"\n",(0,s.jsx)(n.h2,{id:"2512-debugging-utilities",children:"25.1.2 Debugging Utilities"}),"\n","\n",(0,s.jsx)(d,{}),"\n",(0,s.jsx)(n.h2,{id:"2513-environment-inquiry",children:"25.1.3 Environment Inquiry"}),"\n","\n",(0,s.jsx)(h,{}),"\n",(0,s.jsx)(n.h2,{id:"2514-time",children:"25.1.4 Time"}),"\n","\n",(0,s.jsx)(x,{}),"\n",(0,s.jsx)(n.h3,{id:"25141-decoded-time",children:"25.1.4.1 Decoded Time"}),"\n","\n",(0,s.jsx)(u,{}),"\n",(0,s.jsx)(n.h3,{id:"25142-universal-time",children:"25.1.4.2 Universal Time"}),"\n","\n",(0,s.jsx)(v,{}),"\n",(0,s.jsx)(n.h3,{id:"25143-internal-time",children:"25.1.4.3 Internal Time"}),"\n","\n",(0,s.jsx)(y,{}),"\n",(0,s.jsx)(n.h3,{id:"25144-seconds",children:"25.1.4.4 Seconds"}),"\n","\n","\n",(0,s.jsx)(w,{})]})}function C(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(A,{...e})}):A(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>l});var s=i(67294);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);