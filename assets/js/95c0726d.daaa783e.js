"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[2762],{85932:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>j,frontMatter:()=>c,metadata:()=>d,toc:()=>a});var i=t(85893),s=t(11151);function r(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components},{ClLinks:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"intersection, nintersection"})," ",(0,i.jsx)(t,{styled:!0,term:"function",children:(0,i.jsx)("i",{children:"Function"})})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(t,{styled:!0,term:"intersection",children:(0,i.jsx)("b",{children:"intersection"})})," ",(0,i.jsx)(n.em,{children:"list-1 list-2"})," &key ",(0,i.jsx)(n.em,{children:"key test test-not \u2192 result-list"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(t,{styled:!0,term:"nintersection",children:(0,i.jsx)("b",{children:"nintersection"})})," ",(0,i.jsx)(n.em,{children:"list-1 list-2"})," &key ",(0,i.jsx)(n.em,{children:"key test test-not \u2192 result-list"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"list-1"}),"\u2014a ",(0,i.jsx)(n.em,{children:"proper list"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"list-2"}),"\u2014a ",(0,i.jsx)(n.em,{children:"proper list"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"test"}),"\u2014a ",(0,i.jsx)(t,{styled:!0,term:"designator",children:(0,i.jsx)("i",{children:"designator"})})," for a ",(0,i.jsx)(t,{styled:!0,term:"function",children:(0,i.jsx)("i",{children:"function"})})," of two ",(0,i.jsx)(t,{styled:!0,term:"argument",children:(0,i.jsx)("i",{children:"arguments"})})," that returns a ",(0,i.jsx)(n.em,{children:"generalized boolean"}),". ",(0,i.jsxs)(n.em,{children:["test-not",(0,i.jsx)(t,{styled:!0,term:"t",children:(0,i.jsx)("i",{children:"\u2014a "})}),"designator"]})," for a ",(0,i.jsx)(t,{styled:!0,term:"function",children:(0,i.jsx)("i",{children:"function"})})," of two ",(0,i.jsx)(t,{styled:!0,term:"argument",children:(0,i.jsx)("i",{children:"arguments"})})," that returns a ",(0,i.jsx)(n.em,{children:"generalized boolean"}),". ",(0,i.jsx)(n.em,{children:"key"}),"\u2014a ",(0,i.jsx)(n.em,{children:"designator"})," for a ",(0,i.jsx)(t,{styled:!0,term:"function",children:(0,i.jsx)("i",{children:"function"})})," of one argument, or ",(0,i.jsx)(t,{styled:!0,term:"nil",children:(0,i.jsx)("b",{children:"nil"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"result-list"}),"\u2014a ",(0,i.jsx)(t,{styled:!0,term:"list",children:(0,i.jsx)("i",{children:"list"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(t,{styled:!0,term:"intersection",children:(0,i.jsx)("b",{children:"intersection"})})," and ",(0,i.jsx)(t,{styled:!0,term:"nintersection",children:(0,i.jsx)("b",{children:"nintersection"})})," return a ",(0,i.jsx)(t,{styled:!0,term:"list",children:(0,i.jsx)("i",{children:"list"})})," that contains every element that occurs in both ",(0,i.jsx)(n.em,{children:"list-1"})," and ",(0,i.jsx)(n.em,{children:"list-2"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(t,{styled:!0,term:"nintersection",children:(0,i.jsx)("b",{children:"nintersection"})})," is the destructive version of ",(0,i.jsx)(t,{styled:!0,term:"intersection",children:(0,i.jsx)("b",{children:"intersection"})}),". It performs the same operation, but may destroy ",(0,i.jsx)(n.em,{children:"list-1"})," using its cells to construct the result. ",(0,i.jsx)(n.em,{children:"list-2"})," is not destroyed."]}),"\n",(0,i.jsxs)(n.p,{children:["The intersection operation is described as follows. For all possible ordered pairs consisting of one ",(0,i.jsx)(t,{styled:!0,term:"element",children:(0,i.jsx)("i",{children:"element"})})," from ",(0,i.jsx)(n.em,{children:"list-1"})," and one ",(0,i.jsx)(t,{styled:!0,term:"element",children:(0,i.jsx)("i",{children:"element"})})," from ",(0,i.jsx)(n.em,{children:"list-2"}),", ",":test"," or ",":test-not"," are used to determine whether they ",(0,i.jsx)(n.em,{children:"satisfy the test"}),". The first argument to the ",":test"," or ",":test-not"," function is an element of ",(0,i.jsx)(n.em,{children:"list-1"}),"; the second argument is an element of ",(0,i.jsx)(n.em,{children:"list-2"}),". If ",":test"," or ",":test-not"," is not supplied, ",(0,i.jsx)(t,{styled:!0,term:"eql",children:(0,i.jsx)("b",{children:"eql"})})," is used. It is an error if ",":test"," and ",":test-not"," are supplied in the same function call."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"intersection, nintersection"})}),"\n",(0,i.jsxs)(n.p,{children:["If ",":key"," is supplied (and not ",(0,i.jsx)(t,{styled:!0,term:"nil",children:(0,i.jsx)("b",{children:"nil"})}),"), it is used to extract the part to be tested from the ",(0,i.jsx)(t,{styled:!0,term:"list",children:(0,i.jsx)("i",{children:"list"})})," element. The argument to the ",":key"," function is an element of either ",(0,i.jsx)(n.em,{children:"list-1"})," or ",(0,i.jsx)(n.em,{children:"list-2"}),"; the ",":key"," function typically returns part of the supplied element. If ",":key"," is not supplied or ",(0,i.jsx)(t,{styled:!0,term:"nil",children:(0,i.jsx)("b",{children:"nil"})}),", the ",(0,i.jsx)(n.em,{children:"list-1"})," and ",(0,i.jsx)(n.em,{children:"list-2"})," elements are used."]}),"\n",(0,i.jsxs)(n.p,{children:["For every pair that ",(0,i.jsx)(n.em,{children:"satifies the test"}),", exactly one of the two elements of the pair will be put in the result. No element from either ",(0,i.jsx)(t,{styled:!0,term:"list",children:(0,i.jsx)("i",{children:"list"})})," appears in the result that does not ",(0,i.jsx)(n.em,{children:"satisfy the test"})," for an element from the other ",(0,i.jsx)(t,{styled:!0,term:"list",children:(0,i.jsx)("i",{children:"list"})}),". If one of the ",(0,i.jsx)(t,{styled:!0,term:"list",children:(0,i.jsx)("i",{children:"lists"})})," contains duplicate elements, there may be duplication in the result."]}),"\n",(0,i.jsxs)(n.p,{children:["There is no guarantee that the order of elements in the result will reflect the ordering of the arguments in any particular way. The result ",(0,i.jsx)(t,{styled:!0,term:"list",children:(0,i.jsx)("i",{children:"list"})})," may share cells with, or be ",(0,i.jsx)(t,{styled:!0,term:"eq",children:(0,i.jsx)("b",{children:"eq"})})," to, either ",(0,i.jsx)(n.em,{children:"list-1"})," or ",(0,i.jsx)(n.em,{children:"list-2"})," if appropriate."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:'\n(setq list1 (list 1 1 2 3 4 a b c "A" "B" "C" "d") \n      list2 (list 1 4 5 b c d "a" "B" "c" "D")) \n\u2192 (1 4 5 B C D "a" "B" "c" "D") \n(intersection list1 list2) \u2192 (C B 4 1 1) \n(intersection list1 list2 :test \u2019equal) \u2192 ("B" C B 4 1 1) \n(intersection list1 list2 :test #\u2019equalp) \u2192 ("d" "C" "B" "A" C B 4 1 1) \n(nintersection list1 list2) \u2192 (1 1 4 B C) \nlist1 \u2192 implementation-dependent ;*e.g.*, (1 1 4 B C) \nlist2 \u2192 implementation-dependent ;*e.g.*, (1 4 5 B C D "a" "B" "c" "D") \n(setq list1 (copy-list \u2019((1 . 2) (2 . 3) (3 . 4) (4 . 5)))) \n\u2192 ((1 . 2) (2 . 3) (3 . 4) (4 . 5)) \n(setq list2 (copy-list \u2019((1 . 3) (2 . 4) (3 . 6) (4 . 8)))) \n\u2192 ((1 . 3) (2 . 4) (3 . 6) (4 . 8)) \n(nintersection list1 list2 :key #\u2019cdr) \u2192 ((2 . 3) (3 . 4)) \nlist1 \u2192 implementation-dependent ;*e.g.*, ((1 . 2) (2 . 3) (3 . 4)) \nlist2 \u2192 implementation-dependent ;*e.g.*, ((1 . 3) (2 . 4) (3 . 6) (4 . 8)) \n\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(t,{styled:!0,term:"nintersection",children:(0,i.jsx)("b",{children:"nintersection"})})," can modify ",(0,i.jsx)(n.em,{children:"list-1"}),", but not ",(0,i.jsx)(n.em,{children:"list-2"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,i.jsxs)(n.p,{children:["Should be prepared to signal an error of ",(0,i.jsx)(t,{styled:!0,term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(t,{styled:!0,term:"type-error",children:(0,i.jsx)("b",{children:"type-error"})})," if ",(0,i.jsx)(n.em,{children:"list-1"})," and ",(0,i.jsx)(n.em,{children:"list-2"})," are not ",(0,i.jsx)(n.em,{children:"proper lists"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(t,{styled:!0,term:"union",children:(0,i.jsx)("b",{children:"union"})}),", Section 3.2.1 (Compiler Terminology), Section 3.6 (Traversal Rules and Side Effects)"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",":test-not"," parameter is deprecated."]}),"\n",(0,i.jsxs)(n.p,{children:["Since the ",(0,i.jsx)(t,{styled:!0,term:"nintersection",children:(0,i.jsx)("b",{children:"nintersection"})})," side effect is not required, it should not be used in for-effect-only positions"]}),"\n",(0,i.jsx)(n.p,{children:"in portable code."})]})}function l(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}const c={title:"intersection, nintersection"},o="intersection, nintersection",d={id:"chap-14/be-c-dictionary/intersection_nintersection_function",title:"intersection, nintersection",description:"Expanded Reference: intersection, nintersection",source:"@site/docs/chap-14/be-c-dictionary/intersection_nintersection_function.md",sourceDirName:"chap-14/be-c-dictionary",slug:"/chap-14/be-c-dictionary/intersection_nintersection_function",permalink:"/cl-language-reference/chap-14/be-c-dictionary/intersection_nintersection_function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-14/be-c-dictionary/intersection_nintersection_function.md",tags:[],version:"current",frontMatter:{title:"intersection, nintersection"},sidebar:"tutorialSidebar",previous:{title:"getf",permalink:"/cl-language-reference/chap-14/be-c-dictionary/getf_accessor"},next:{title:"last",permalink:"/cl-language-reference/chap-14/be-c-dictionary/last_function"}},h={},a=[{value:"Expanded Reference: intersection, nintersection",id:"expanded-reference-intersection-nintersection",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"intersection-nintersection",children:"intersection, nintersection"}),"\n","\n","\n",(0,i.jsx)(l,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-intersection-nintersection",children:"Expanded Reference: intersection, nintersection"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(intersection, nintersection )\n"})})]})}function j(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>l});var i=t(67294);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);