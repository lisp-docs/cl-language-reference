"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[74859],{90350:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>x,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var s=t(85893),i=t(11151);function r(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"intersection, nintersection"})," ",(0,s.jsx)(n.em,{children:"Function"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"intersection"})," ",(0,s.jsx)(n.em,{children:"list-1 list-2"})," &key ",(0,s.jsx)(n.em,{children:"key test test-not \u2192 result-list"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"nintersection"})," ",(0,s.jsx)(n.em,{children:"list-1 list-2"})," &key ",(0,s.jsx)(n.em,{children:"key test test-not \u2192 result-list"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"list-1"}),"\u2014a ",(0,s.jsx)(n.em,{children:"proper list"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"list-2"}),"\u2014a ",(0,s.jsx)(n.em,{children:"proper list"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"test"}),"\u2014a ",(0,s.jsx)(n.em,{children:"designator"})," for a ",(0,s.jsx)(n.em,{children:"function"})," of two ",(0,s.jsx)(n.em,{children:"arguments"})," that returns a ",(0,s.jsx)(n.em,{children:"generalized boolean"}),". ",(0,s.jsx)(n.em,{children:"test-not"}),"\u2014a ",(0,s.jsx)(n.em,{children:"designator"})," for a ",(0,s.jsx)(n.em,{children:"function"})," of two ",(0,s.jsx)(n.em,{children:"arguments"})," that returns a ",(0,s.jsx)(n.em,{children:"generalized boolean"}),". ",(0,s.jsx)(n.em,{children:"key"}),"\u2014a ",(0,s.jsx)(n.em,{children:"designator"})," for a ",(0,s.jsx)(n.em,{children:"function"})," of one argument, or ",(0,s.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"result-list"}),"\u2014a ",(0,s.jsx)(n.em,{children:"list"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"intersection"})," and ",(0,s.jsx)(n.strong,{children:"nintersection"})," return a ",(0,s.jsx)(n.em,{children:"list"})," that contains every element that occurs in both ",(0,s.jsx)(n.em,{children:"list-1"})," and ",(0,s.jsx)(n.em,{children:"list-2"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"nintersection"})," is the destructive version of ",(0,s.jsx)(n.strong,{children:"intersection"}),". It performs the same operation, but may destroy ",(0,s.jsx)(n.em,{children:"list-1"})," using its cells to construct the result. ",(0,s.jsx)(n.em,{children:"list-2"})," is not destroyed."]}),"\n",(0,s.jsxs)(n.p,{children:["The intersection operation is described as follows. For all possible ordered pairs consisting of one ",(0,s.jsx)(n.em,{children:"element"})," from ",(0,s.jsx)(n.em,{children:"list-1"})," and one ",(0,s.jsx)(n.em,{children:"element"})," from ",(0,s.jsx)(n.em,{children:"list-2"}),", ",":test"," or ",":test-not"," are used to determine whether they ",(0,s.jsx)(n.em,{children:"satisfy the test"}),". The first argument to the ",":test"," or ",":test-not"," function is an element of ",(0,s.jsx)(n.em,{children:"list-1"}),"; the second argument is an element of ",(0,s.jsx)(n.em,{children:"list-2"}),". If ",":test"," or ",":test-not"," is not supplied, ",(0,s.jsx)(n.strong,{children:"eql"})," is used. It is an error if ",":test"," and ",":test-not"," are supplied in the same function call."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"intersection, nintersection"})}),"\n",(0,s.jsxs)(n.p,{children:["If ",":key"," is supplied (and not ",(0,s.jsx)(n.strong,{children:"nil"}),"), it is used to extract the part to be tested from the ",(0,s.jsx)(n.em,{children:"list"})," element. The argument to the ",":key"," function is an element of either ",(0,s.jsx)(n.em,{children:"list-1"})," or ",(0,s.jsx)(n.em,{children:"list-2"}),"; the ",":key"," function typically returns part of the supplied element. If ",":key"," is not supplied or ",(0,s.jsx)(n.strong,{children:"nil"}),", the ",(0,s.jsx)(n.em,{children:"list-1"})," and ",(0,s.jsx)(n.em,{children:"list-2"})," elements are used."]}),"\n",(0,s.jsxs)(n.p,{children:["For every pair that ",(0,s.jsx)(n.em,{children:"satifies the test"}),", exactly one of the two elements of the pair will be put in the result. No element from either ",(0,s.jsx)(n.em,{children:"list"})," appears in the result that does not ",(0,s.jsx)(n.em,{children:"satisfy the test"})," for an element from the other ",(0,s.jsx)(n.em,{children:"list"}),". If one of the ",(0,s.jsx)(n.em,{children:"lists"})," contains duplicate elements, there may be duplication in the result."]}),"\n",(0,s.jsxs)(n.p,{children:["There is no guarantee that the order of elements in the result will reflect the ordering of the arguments in any particular way. The result ",(0,s.jsx)(n.em,{children:"list"})," may share cells with, or be ",(0,s.jsx)(n.strong,{children:"eq"})," to, either ",(0,s.jsx)(n.em,{children:"list-1"})," or ",(0,s.jsx)(n.em,{children:"list-2"})," if appropriate."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:' \n\n\n\n(setq list1 (list 1 1 2 3 4 a b c "A" "B" "C" "d") \n\n\n\nlist2 (list 1 4 5 b c d "a" "B" "c" "D")) \n\n\n\n*\u2192* (1 4 5 B C D "a" "B" "c" "D") \n\n\n\n(intersection list1 list2) *\u2192* (C B 4 1 1) \n\n\n\n(intersection list1 list2 :test \u2019equal) *\u2192* ("B" C B 4 1 1) \n\n\n\n(intersection list1 list2 :test #\u2019equalp) *\u2192* ("d" "C" "B" "A" C B 4 1 1) \n\n\n\n(nintersection list1 list2) *\u2192* (1 1 4 B C) \n\n\n\nlist1 *\u2192 implementation-dependent* ;*e.g.*, (1 1 4 B C) \n\n\n\nlist2 *\u2192 implementation-dependent* ;*e.g.*, (1 4 5 B C D "a" "B" "c" "D") \n\n\n\n(setq list1 (copy-list \u2019((1 . 2) (2 . 3) (3 . 4) (4 . 5)))) \n\n\n\n*\u2192* ((1 . 2) (2 . 3) (3 . 4) (4 . 5)) \n\n\n\n(setq list2 (copy-list \u2019((1 . 3) (2 . 4) (3 . 6) (4 . 8)))) \n\n\n\n*\u2192* ((1 . 3) (2 . 4) (3 . 6) (4 . 8)) \n\n\n\n(nintersection list1 list2 :key #\u2019cdr) *\u2192* ((2 . 3) (3 . 4)) \n\n\n\nlist1 *\u2192 implementation-dependent* ;*e.g.*, ((1 . 2) (2 . 3) (3 . 4)) \n\n\n\nlist2 *\u2192 implementation-dependent* ;*e.g.*, ((1 . 3) (2 . 4) (3 . 6) (4 . 8)) \n\n\n\n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"nintersection"})," can modify ",(0,s.jsx)(n.em,{children:"list-1"}),", but not ",(0,s.jsx)(n.em,{children:"list-2"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(n.p,{children:["Should be prepared to signal an error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"type-error"})," if ",(0,s.jsx)(n.em,{children:"list-1"})," and ",(0,s.jsx)(n.em,{children:"list-2"})," are not ",(0,s.jsx)(n.em,{children:"proper lists"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"union"}),", Section 3.2.1 (Compiler Terminology), Section 3.6 (Traversal Rules and Side Effects)"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",":test-not"," parameter is deprecated."]}),"\n",(0,s.jsxs)(n.p,{children:["Since the ",(0,s.jsx)(n.strong,{children:"nintersection"})," side effect is not required, it should not be used in for-effect-only positions"]}),"\n",(0,s.jsx)(n.p,{children:"in portable code."})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}const l={},o="intersection, nintersection",d={id:"chap-14/be-c-dictionary/intersection",title:"intersection, nintersection",description:"Expanded Reference: intersection, nintersection",source:"@site/docs/chap-14/be-c-dictionary/intersection.md",sourceDirName:"chap-14/be-c-dictionary",slug:"/chap-14/be-c-dictionary/intersection",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/intersection",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-14/be-c-dictionary/intersection.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"get-properties",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/getproperties"},next:{title:"last",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/last"}},a={},h=[{value:"Expanded Reference: intersection, nintersection",id:"expanded-reference-intersection-nintersection",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"intersection-nintersection",children:"intersection, nintersection"}),"\n","\n","\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-intersection-nintersection",children:"Expanded Reference: intersection, nintersection"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(intersection, nintersection )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>c});var s=t(67294);const i={},r=s.createContext(i);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);