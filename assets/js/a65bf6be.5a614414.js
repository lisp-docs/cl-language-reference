"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[5241],{6746:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>f,contentTitle:()=>j,default:()=>b,frontMatter:()=>m,metadata:()=>p,toc:()=>u});var r=s(5893),i=s(1151);function l(e){const n={p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3.7 Destructive Operations"})})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}function o(e){const n={em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3.7.1 Modification of Literal Objects"})}),"\n",(0,r.jsxs)(n.p,{children:["The consequences are undefined if ",(0,r.jsx)(n.em,{children:"literal objects"})," are destructively modified. For this purpose, the following operations are considered ",(0,r.jsx)(n.em,{children:"destructive"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"random-state"})}),"\n",(0,r.jsxs)(n.p,{children:["Using it as an ",(0,r.jsx)(n.em,{children:"argument"})," to the ",(0,r.jsx)(n.em,{children:"function"})," ",(0,r.jsx)(n.strong,{children:"random"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"cons"})}),"\n",(0,r.jsxs)(n.p,{children:["Changing the ",(0,r.jsx)(n.em,{children:"car"})," <sub>1</sub> or ",(0,r.jsx)(n.em,{children:"cdr"})," <sub>1</sub> of the ",(0,r.jsx)(n.em,{children:"cons"}),", or performing a ",(0,r.jsx)(n.em,{children:"destructive"})," operation on an ",(0,r.jsx)(n.em,{children:"object"})," which is either the ",(0,r.jsx)(n.em,{children:"car"})," <sub>2</sub> or the ",(0,r.jsx)(n.em,{children:"cdr"})," <sub>2</sub> of the ",(0,r.jsx)(n.em,{children:"cons"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"array"})}),"\n",(0,r.jsxs)(n.p,{children:["Storing a new value into some element of the ",(0,r.jsx)(n.em,{children:"array"}),", or performing a ",(0,r.jsx)(n.em,{children:"destructive"})," operation on an ",(0,r.jsx)(n.em,{children:"object"})," that is already such an ",(0,r.jsx)(n.em,{children:"element"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Changing the ",(0,r.jsx)(n.em,{children:"fill pointer"})," , ",(0,r.jsx)(n.em,{children:"dimensions"}),", or displacement of the ",(0,r.jsx)(n.em,{children:"array"})," (regardless of whether the ",(0,r.jsx)(n.em,{children:"array"})," is ",(0,r.jsx)(n.em,{children:"actually adjustable"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["Performing a ",(0,r.jsx)(n.em,{children:"destructive"})," operation on another ",(0,r.jsx)(n.em,{children:"array"})," that is displaced to the ",(0,r.jsx)(n.em,{children:"array"})," or that otherwise shares its contents with the ",(0,r.jsx)(n.em,{children:"array"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"hash-table"})}),"\n",(0,r.jsxs)(n.p,{children:["Performing a ",(0,r.jsx)(n.em,{children:"destructive"})," operation on any ",(0,r.jsx)(n.em,{children:"key"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Storing a new ",(0,r.jsx)(n.em,{children:"value"}),"<sub>4</sub> for any ",(0,r.jsx)(n.em,{children:"key"}),", or performing a ",(0,r.jsx)(n.em,{children:"destructive"})," operation on any ",(0,r.jsx)(n.em,{children:"object"})," that is such a ",(0,r.jsx)(n.em,{children:"value"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Adding or removing entries from the ",(0,r.jsx)(n.em,{children:"hash table"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"structure-object"})}),"\n",(0,r.jsxs)(n.p,{children:["Storing a new value into any slot, or performing a ",(0,r.jsx)(n.em,{children:"destructive"})," operation on an ",(0,r.jsx)(n.em,{children:"object"})," that is the value of some slot."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"standard-object"})}),"\n",(0,r.jsxs)(n.p,{children:["Storing a new value into any slot, or performing a ",(0,r.jsx)(n.em,{children:"destructive"})," operation on an ",(0,r.jsx)(n.em,{children:"object"})," that is the value of some slot."]}),"\n",(0,r.jsxs)(n.p,{children:["Changing the class of the ",(0,r.jsx)(n.em,{children:"object"})," (",(0,r.jsx)(n.em,{children:"e.g."}),", using the ",(0,r.jsx)(n.em,{children:"function"})," ",(0,r.jsx)(n.strong,{children:"change-class"}),")."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"readtable"})}),"\n",(0,r.jsxs)(n.p,{children:["Altering the ",(0,r.jsx)(n.em,{children:"readtable case"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Altering the syntax type of any character in this readtable."}),"\n",(0,r.jsxs)(n.p,{children:["Altering the ",(0,r.jsx)(n.em,{children:"reader macro function"})," associated with any ",(0,r.jsx)(n.em,{children:"character"})," in the ",(0,r.jsx)(n.em,{children:"readtable"}),", or altering the ",(0,r.jsx)(n.em,{children:"reader macro functions"})," associated with ",(0,r.jsx)(n.em,{children:"characters"})," defined as ",(0,r.jsx)(n.em,{children:"dispatching macro characters"})," in the ",(0,r.jsx)(n.em,{children:"readtable"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"stream"})}),"\n",(0,r.jsxs)(n.p,{children:["Performing I/O operations on the ",(0,r.jsx)(n.em,{children:"stream"}),", or ",(0,r.jsx)(n.em,{children:"closing"})," the ",(0,r.jsx)(n.em,{children:"stream"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"All other standardized types"}),"\n",(0,r.jsxs)(n.p,{children:["[This category includes, for example, ",(0,r.jsx)(n.strong,{children:"character"}),", ",(0,r.jsx)(n.strong,{children:"condition"}),", ",(0,r.jsx)(n.strong,{children:"function"}),","]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"method-combination"}),", ",(0,r.jsx)(n.strong,{children:"method"}),", ",(0,r.jsx)(n.strong,{children:"number"}),", ",(0,r.jsx)(n.strong,{children:"package"}),", ",(0,r.jsx)(n.strong,{children:"pathname"}),", ",(0,r.jsx)(n.strong,{children:"restart"}),", and ",(0,r.jsx)(n.strong,{children:"symbol"}),".] There are no ",(0,r.jsx)(n.em,{children:"standardized destructive"})," operations defined on ",(0,r.jsx)(n.em,{children:"objects"})," of these ",(0,r.jsx)(n.em,{children:"types"}),"."]})]})}function t(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}function d(e){const n={em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3.7.2 Transfer of Control during a Destructive Operation"})}),"\n",(0,r.jsxs)(n.p,{children:["Should a transfer of control out of a ",(0,r.jsx)(n.em,{children:"destructive"})," operation occur (",(0,r.jsx)(n.em,{children:"e.g."}),", due to an error) the state of the ",(0,r.jsx)(n.em,{children:"object"})," being modified is ",(0,r.jsx)(n.em,{children:"implementation-dependent"}),"."]})]})}function a(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}function h(e){const n={em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3.7.2.1 Examples of Transfer of Control during a Destructive Operation"})}),"\n",(0,r.jsxs)(n.p,{children:["The following examples illustrate some of the many ways in which the ",(0,r.jsx)(n.em,{children:"implementation-dependent"})," nature of the modification can manifest itself."]}),"\n",(0,r.jsx)(n.p,{children:"(let ((a (list 2 1 4 3 7 6 \u2019five)))"}),"\n",(0,r.jsx)(n.p,{children:"(ignore-errors (sort a #\u2019<))"}),"\n",(0,r.jsx)(n.p,{children:"a)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," (1 2 3 4 6 7 FIVE)"]}),"\n",(0,r.jsx)(n.p,{children:"<i><sup>or</sup>\u2192</i> (2 1 4 3 7 6 FIVE)"}),"\n",(0,r.jsx)(n.p,{children:"<i><sup>or</sup>\u2192</i> (2)"}),"\n",(0,r.jsx)(n.p,{children:"(prog foo ((a (list 1 2 3 4 5 6 7 8 9 10)))"}),"\n",(0,r.jsxs)(n.p,{children:["(sort a #\u2019(lambda (x y) (if (zerop (random 5)) (return-from foo a) (> x y))))) ",(0,r.jsx)(n.em,{children:"\u2192"})," (1 2 3 4 5 6 7 8 9 10)"]}),"\n",(0,r.jsx)(n.p,{children:"<i><sup>or</sup>\u2192</i> (3 4 5 6 2 7 8 9 10 1)"}),"\n",(0,r.jsx)(n.p,{children:"<i><sup>or</sup>\u2192</i> (1 2 4 3)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"lambda"})," ",(0,r.jsx)(n.em,{children:"Symbol"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"lambda"})," ",(0,r.jsx)(n.em,{children:"lambda-list"})," [[ ",(0,r.jsx)(n.em,{children:"{declaration}"}),"* ",(0,r.jsx)(n.em,{children:"| documentation"})," ]] ",(0,r.jsx)(n.em,{children:"{form}"}),"*"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"lambda-list"}),"\u2014an ",(0,r.jsx)(n.em,{children:"ordinary lambda list"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,r.jsx)(n.strong,{children:"declare"})," ",(0,r.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"documentation"}),"\u2014a ",(0,r.jsx)(n.em,{children:"string"}),"; not evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"form"}),"\u2014a ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.em,{children:"lambda expression"})," is a ",(0,r.jsx)(n.em,{children:"list"})," that can be used in place of a ",(0,r.jsx)(n.em,{children:"function name"})," in certain contexts to denote a ",(0,r.jsx)(n.em,{children:"function"})," by directly describing its behavior rather than indirectly by referring to the name of an ",(0,r.jsx)(n.em,{children:"established function"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Documentation"})," is attached to the denoted ",(0,r.jsx)(n.em,{children:"function"})," (if any is actually created) as a ",(0,r.jsx)(n.em,{children:"documentation string"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"function"}),", ",(0,r.jsx)(n.strong,{children:"documentation"}),", Section 3.1.3 (Lambda Expressions), Section 3.1.2.1.2.4 (Lambda Forms), Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"lambda form"})]}),"\n",(0,r.jsxs)(n.p,{children:["((lambda ",(0,r.jsx)(n.em,{children:"lambda-list"})," . ",(0,r.jsx)(n.em,{children:"body"}),") . ",(0,r.jsx)(n.em,{children:"arguments"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["is semantically equivalent to the ",(0,r.jsx)(n.em,{children:"function form"})]}),"\n",(0,r.jsxs)(n.p,{children:["(funcall #\u2019(lambda ",(0,r.jsx)(n.em,{children:"lambda-list"})," . ",(0,r.jsx)(n.em,{children:"body"}),") . ",(0,r.jsx)(n.em,{children:"arguments"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"lambda"})," ",(0,r.jsx)(n.em,{children:"Macro"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"lambda"})," ",(0,r.jsx)(n.em,{children:"lambda-list"})," [[ ",(0,r.jsx)(n.em,{children:"{declaration}"}),"* ",(0,r.jsx)(n.em,{children:"| documentation"})," ]] ",(0,r.jsx)(n.em,{children:"{form}"}),"* ",(0,r.jsx)(n.em,{children:"\u2192 function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"lambda-list"}),"\u2014an ",(0,r.jsx)(n.em,{children:"ordinary lambda list"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,r.jsx)(n.strong,{children:"declare"})," ",(0,r.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"documentation"}),"\u2014a ",(0,r.jsx)(n.em,{children:"string"}),"; not evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"form"}),"\u2014a ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"function"}),"\u2014a ",(0,r.jsx)(n.em,{children:"function"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Provides a shorthand notation for a ",(0,r.jsx)(n.strong,{children:"function"})," ",(0,r.jsx)(n.em,{children:"special form"})," involving a ",(0,r.jsx)(n.em,{children:"lambda expression"})," such that:"]}),"\n",(0,r.jsxs)(n.p,{children:["(lambda ",(0,r.jsx)(n.em,{children:"lambda-list"})," [[ ",(0,r.jsx)(n.em,{children:"{declaration}"}),"* ",(0,r.jsx)(n.em,{children:"| documentation"})," ]] ",(0,r.jsx)(n.em,{children:"{form}"}),"*)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2261"})," (function (lambda ",(0,r.jsx)(n.em,{children:"lambda-list"})," [[ ",(0,r.jsx)(n.em,{children:"{declaration}"}),"* ",(0,r.jsx)(n.em,{children:"| documentation"})," ]] ",(0,r.jsx)(n.em,{children:"{form}"}),"*))"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2261"})," #\u2019(lambda ",(0,r.jsx)(n.em,{children:"lambda-list"})," [[ ",(0,r.jsx)(n.em,{children:"{declaration}"}),"* ",(0,r.jsx)(n.em,{children:"| documentation"})," ]] ",(0,r.jsx)(n.em,{children:"{form}"}),"*)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:["(funcall (lambda (x) (+ x 3)) 4) ",(0,r.jsx)(n.em,{children:"\u2192"})," 7"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"lambda"})," (symbol)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsx)(n.p,{children:"This macro could be implemented by:"}),"\n",(0,r.jsx)(n.p,{children:"(defmacro lambda (&whole form &rest bvl-decls-and-body)"}),"\n",(0,r.jsx)(n.p,{children:"(declare (ignore bvl-decls-and-body))"}),"\n",(0,r.jsx)(n.p,{children:"\u2018#\u2019,form)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"compile"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"compile"})," ",(0,r.jsx)(n.em,{children:"name"})," &optional ",(0,r.jsx)(n.em,{children:"definition \u2192 function, warnings-p, failure-p"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"name"}),"\u2014a ",(0,r.jsx)(n.em,{children:"function name"}),", or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"definition"}),"\u2014a ",(0,r.jsx)(n.em,{children:"lambda expression"})," or a ",(0,r.jsx)(n.em,{children:"function"}),". The default is the function definition of ",(0,r.jsx)(n.em,{children:"name"})," if it names a ",(0,r.jsx)(n.em,{children:"function"}),", or the ",(0,r.jsx)(n.em,{children:"macro function"})," of ",(0,r.jsx)(n.em,{children:"name"})," if it names a ",(0,r.jsx)(n.em,{children:"macro"}),". The consequences are undefined if no ",(0,r.jsx)(n.em,{children:"definition"})," is supplied when the ",(0,r.jsx)(n.em,{children:"name"})," is ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"function"}),"\u2014the ",(0,r.jsx)(n.em,{children:"function-name"}),", or a ",(0,r.jsx)(n.em,{children:"compiled function"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"warnings-p"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"compile"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"failure-p"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Compiles an ",(0,r.jsx)(n.em,{children:"interpreted function"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"compile"})," produces a ",(0,r.jsx)(n.em,{children:"compiled function"})," from ",(0,r.jsx)(n.em,{children:"definition"}),". If the ",(0,r.jsx)(n.em,{children:"definition"})," is a ",(0,r.jsx)(n.em,{children:"lambda expression"}),", it is coerced to a ",(0,r.jsx)(n.em,{children:"function"}),". If the ",(0,r.jsx)(n.em,{children:"definition"})," is already a ",(0,r.jsx)(n.em,{children:"compiled function"}),", ",(0,r.jsx)(n.strong,{children:"compile"})," either produces that function itself (",(0,r.jsx)(n.em,{children:"i.e."}),", is an identity operation) or an equivalent function."]}),"\n",(0,r.jsxs)(n.p,{children:["If the ",(0,r.jsx)(n.em,{children:"name"})," is ",(0,r.jsx)(n.strong,{children:"nil"}),", the resulting ",(0,r.jsx)(n.em,{children:"compiled function"})," is returned directly as the ",(0,r.jsx)(n.em,{children:"primary value"}),". If a ",(0,r.jsx)(n.em,{children:"non-nil name"})," is given, then the resulting ",(0,r.jsx)(n.em,{children:"compiled function"})," replaces the existing ",(0,r.jsx)(n.em,{children:"function"})," definition of ",(0,r.jsx)(n.em,{children:"name"})," and the ",(0,r.jsx)(n.em,{children:"name"})," is returned as the ",(0,r.jsx)(n.em,{children:"primary value"}),"; if ",(0,r.jsx)(n.em,{children:"name"})," is a ",(0,r.jsx)(n.em,{children:"symbol"})," that names a ",(0,r.jsx)(n.em,{children:"macro"}),", its ",(0,r.jsx)(n.em,{children:"macro function"})," is updated and the ",(0,r.jsx)(n.em,{children:"name"})," is returned as the ",(0,r.jsx)(n.em,{children:"primary value"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Literal objects"})," appearing in code processed by the ",(0,r.jsx)(n.strong,{children:"compile"})," function are neither copied nor ",(0,r.jsx)(n.em,{children:"coalesced"}),". The code resulting from the execution of ",(0,r.jsx)(n.strong,{children:"compile"})," references ",(0,r.jsx)(n.em,{children:"objects"})," that are ",(0,r.jsx)(n.strong,{children:"eql"})," to the corresponding ",(0,r.jsx)(n.em,{children:"objects"})," in the source code."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"compile"})," is permitted, but not required, to ",(0,r.jsx)(n.em,{children:"establish"})," a ",(0,r.jsx)(n.em,{children:"handler"})," for ",(0,r.jsx)(n.em,{children:"conditions"})," of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"error"}),". For example, the ",(0,r.jsx)(n.em,{children:"handler"})," might issue a warning and restart compilation from some ",(0,r.jsx)(n.em,{children:"implementation dependent"})," point in order to let the compilation proceed without manual intervention."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"secondary value"}),", ",(0,r.jsx)(n.em,{children:"warnings-p"}),", is ",(0,r.jsx)(n.em,{children:"false"})," if no ",(0,r.jsx)(n.em,{children:"conditions"})," of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"error"})," or ",(0,r.jsx)(n.strong,{children:"warning"})," were detected by the compiler, and ",(0,r.jsx)(n.em,{children:"true"})," otherwise."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"tertiary value"}),", ",(0,r.jsx)(n.em,{children:"failure-p"}),", is ",(0,r.jsx)(n.em,{children:"false"})," if no ",(0,r.jsx)(n.em,{children:"conditions"})," of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"error"})," or ",(0,r.jsx)(n.strong,{children:"warning"})," (other than ",(0,r.jsx)(n.strong,{children:"style-warning"}),") were detected by the compiler, and ",(0,r.jsx)(n.em,{children:"true"})," otherwise."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:['(defun foo () "bar") ',(0,r.jsx)(n.em,{children:"\u2192"})," FOO"]}),"\n",(0,r.jsxs)(n.p,{children:["(compiled-function-p #\u2019foo) ",(0,r.jsx)(n.em,{children:"\u2192 implementation-dependent"})]}),"\n",(0,r.jsxs)(n.p,{children:["(compile \u2019foo) ",(0,r.jsx)(n.em,{children:"\u2192"})," FOO"]}),"\n",(0,r.jsxs)(n.p,{children:["(compiled-function-p #\u2019foo) ",(0,r.jsx)(n.em,{children:"\u2192 true"})]}),"\n",(0,r.jsx)(n.p,{children:"(setf (symbol-function \u2019foo)"}),"\n",(0,r.jsxs)(n.p,{children:['(compile nil \u2019(lambda () "replaced"))) ',(0,r.jsx)(n.em,{children:"\u2192"})," #<Compiled-Function>"]}),"\n",(0,r.jsxs)(n.p,{children:["(foo) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "replaced"']}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*error-output*"}),", ",(0,r.jsx)(n.strong,{children:"*macroexpand-hook*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The presence of macro definitions and proclamations."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["The consequences are undefined if the ",(0,r.jsx)(n.em,{children:"lexical environment"})," surrounding the ",(0,r.jsx)(n.em,{children:"function"})," to be compiled contains any ",(0,r.jsx)(n.em,{children:"bindings"})," other than those for ",(0,r.jsx)(n.em,{children:"macros"}),", ",(0,r.jsx)(n.em,{children:"symbol macros"}),", or ",(0,r.jsx)(n.em,{children:"declarations"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["For information about errors detected during the compilation process, see Section 3.2.5 (Exceptional Evaluation and Compilation ",(0,r.jsx)(n.strong,{children:"3\u201357"})]}),"\n",(0,r.jsx)(n.p,{children:"Situations in the Compiler)."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"compile-file"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"eval"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"eval"})," ",(0,r.jsx)(n.em,{children:"form \u2192 {result}"}),"*"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"form"}),"\u2014a ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"results"}),"\u2014the ",(0,r.jsx)(n.em,{children:"values yielded"})," by the ",(0,r.jsx)(n.em,{children:"evaluation"})," of ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Evaluates ",(0,r.jsx)(n.em,{children:"form"})," in the current ",(0,r.jsx)(n.em,{children:"dynamic environment"})," and the ",(0,r.jsx)(n.em,{children:"null lexical environment"}),". ",(0,r.jsx)(n.strong,{children:"eval"})," is a user interface to the evaluator."]}),"\n",(0,r.jsxs)(n.p,{children:["The evaluator expands macro calls as if through the use of ",(0,r.jsx)(n.strong,{children:"macroexpand-1"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Constants appearing in code processed by ",(0,r.jsx)(n.strong,{children:"eval"})," are not copied nor coalesced. The code resulting from the execution of ",(0,r.jsx)(n.strong,{children:"eval"})," references ",(0,r.jsx)(n.em,{children:"objects"})," that are ",(0,r.jsx)(n.strong,{children:"eql"})," to the corresponding ",(0,r.jsx)(n.em,{children:"objects"})," in the source code."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:["(setq form \u2019(1+ a) a 999) ",(0,r.jsx)(n.em,{children:"\u2192"})," 999"]}),"\n",(0,r.jsxs)(n.p,{children:["(eval form) ",(0,r.jsx)(n.em,{children:"\u2192"})," 1000"]}),"\n",(0,r.jsxs)(n.p,{children:["(eval \u2019form) ",(0,r.jsx)(n.em,{children:"\u2192"})," (1+ A)"]}),"\n",(0,r.jsx)(n.p,{children:"(let ((a \u2019(this would break if eval used local value))) (eval form))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," 1000"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"macroexpand-1"}),", Section 3.1.2 (The Evaluation Model)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["To obtain the current dynamic value of a ",(0,r.jsx)(n.em,{children:"symbol"}),", use of ",(0,r.jsx)(n.strong,{children:"symbol-value"})," is equivalent (and usually preferable) to use of ",(0,r.jsx)(n.strong,{children:"eval"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Note that an ",(0,r.jsx)(n.strong,{children:"eval"})," ",(0,r.jsx)(n.em,{children:"form"})," involves two levels of ",(0,r.jsx)(n.em,{children:"evaluation"})," for its ",(0,r.jsx)(n.em,{children:"argument"}),". First, ",(0,r.jsx)(n.em,{children:"form"})," is ",(0,r.jsx)(n.em,{children:"evaluated"})," by the normal argument evaluation mechanism as would occur with any ",(0,r.jsx)(n.em,{children:"call"}),". The ",(0,r.jsx)(n.em,{children:"object"})," that"]}),"\n",(0,r.jsxs)(n.p,{children:["results from this normal ",(0,r.jsx)(n.em,{children:"argument evaluation"})," becomes the ",(0,r.jsx)(n.em,{children:"value"})," of the ",(0,r.jsx)(n.em,{children:"form parameter"})," , and is then ",(0,r.jsx)(n.em,{children:"evaluated"})," as part of the ",(0,r.jsx)(n.strong,{children:"eval"})," ",(0,r.jsx)(n.em,{children:"form"}),". For example:"]}),"\n",(0,r.jsxs)(n.p,{children:["(eval (list \u2019cdr (car \u2019((quote (a . b)) c)))) ",(0,r.jsx)(n.em,{children:"\u2192"})," b"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"argument form"})," (list \u2019cdr (car \u2019((quote (a . b)) c))) is evaluated in the usual way to produce the ",(0,r.jsx)(n.em,{children:"argument"})," (cdr (quote (a . b))); ",(0,r.jsx)(n.strong,{children:"eval"})," then evaluates its ",(0,r.jsx)(n.em,{children:"argument"}),", (cdr (quote (a . b))), to produce b. Since a single ",(0,r.jsx)(n.em,{children:"evaluation"})," already occurs for any ",(0,r.jsx)(n.em,{children:"argument form"})," in any ",(0,r.jsx)(n.em,{children:"function form"}),", ",(0,r.jsx)(n.strong,{children:"eval"})," is sometimes said to perform \u201can extra level of evaluation.\u201d"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"eval-when"})," ",(0,r.jsx)(n.em,{children:"Special Operator"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"eval-when"})," (",(0,r.jsx)(n.em,{children:"{situation}"}),"*) ",(0,r.jsx)(n.em,{children:"{form}"}),"* ",(0,r.jsx)(n.em,{children:"\u2192 {result}"}),"*"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"situation"}),"\u2014One of the ",(0,r.jsx)(n.em,{children:"symbols"})," ",":compile-toplevel",", ",":load-toplevel",", ",":execute",", ",(0,r.jsx)(n.strong,{children:"compile"}),", ",(0,r.jsx)(n.strong,{children:"load"}),", or ",(0,r.jsx)(n.strong,{children:"eval"}),". The use of ",(0,r.jsx)(n.strong,{children:"eval"}),", ",(0,r.jsx)(n.strong,{children:"compile"}),", and ",(0,r.jsx)(n.strong,{children:"load"})," is deprecated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"forms"}),"\u2014an ",(0,r.jsx)(n.em,{children:"implicit progn"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"results"}),"\u2014the ",(0,r.jsx)(n.em,{children:"values"})," of the ",(0,r.jsx)(n.em,{children:"forms"})," if they are executed, or ",(0,r.jsx)(n.strong,{children:"nil"})," if they are not."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["The body of an ",(0,r.jsx)(n.strong,{children:"eval-when"})," form is processed as an ",(0,r.jsx)(n.em,{children:"implicit progn"}),", but only in the ",(0,r.jsx)(n.em,{children:"situations"})," listed."]}),"\n",(0,r.jsxs)(n.p,{children:["The use of the ",(0,r.jsx)(n.em,{children:"situations"})," ",":compile-toplevel"," (or compile) and ",":load-toplevel"," (or load) controls whether and when ",(0,r.jsx)(n.em,{children:"evaluation"})," occurs when ",(0,r.jsx)(n.strong,{children:"eval-when"})," appears as a ",(0,r.jsx)(n.em,{children:"top level form"})," in code processed by ",(0,r.jsx)(n.strong,{children:"compile-file"}),". See Section 3.2.3 (File Compilation)."]}),"\n",(0,r.jsxs)(n.p,{children:["The use of the ",(0,r.jsx)(n.em,{children:"situation"})," ",":execute"," (or eval) controls whether evaluation occurs for other ",(0,r.jsx)(n.strong,{children:"eval-when"})," ",(0,r.jsx)(n.em,{children:"forms"}),"; that is, those that are not ",(0,r.jsx)(n.em,{children:"top level forms"}),", or those in code processed by ",(0,r.jsx)(n.strong,{children:"eval"})," or ",(0,r.jsx)(n.strong,{children:"compile"}),". If the ",":execute"," situation is specified in such a ",(0,r.jsx)(n.em,{children:"form"}),", then the body ",(0,r.jsx)(n.em,{children:"forms"})," are processed as an ",(0,r.jsx)(n.em,{children:"implicit progn"}),"; otherwise, the ",(0,r.jsx)(n.strong,{children:"eval-when"})," ",(0,r.jsx)(n.em,{children:"form"})," returns ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"eval-when"})," normally appears as a ",(0,r.jsx)(n.em,{children:"top level form"}),", but it is meaningful for it to appear as a ",(0,r.jsx)(n.em,{children:"non-top-level form"}),". However, the compile-time side effects described in Section 3.2 (Compilation) only take place when ",(0,r.jsx)(n.strong,{children:"eval-when"})," appears as a ",(0,r.jsx)(n.em,{children:"top level form"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:["One example of the use of ",(0,r.jsx)(n.strong,{children:"eval-when"})," is that for the compiler to be able to read a file properly when it uses user-defined ",(0,r.jsx)(n.em,{children:"reader macros"}),", it is necessary to write"]}),"\n",(0,r.jsxs)(n.p,{children:["(eval-when (",":compile-toplevel"," ",":load-toplevel"," ",":execute",")"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"eval-when"})}),"\n",(0,r.jsx)(n.p,{children:"(set-macro-character #$ #\u2019(lambda (stream char)"}),"\n",(0,r.jsx)(n.p,{children:"(declare (ignore char))"}),"\n",(0,r.jsxs)(n.p,{children:["(list \u2019dollar (read stream))))) ",(0,r.jsx)(n.em,{children:"\u2192"})," T"]}),"\n",(0,r.jsxs)(n.p,{children:["This causes the call to ",(0,r.jsx)(n.strong,{children:"set-macro-character"})," to be executed in the compiler\u2019s execution environment, thereby modifying its reader syntax table."]}),"\n",(0,r.jsxs)(n.p,{children:[";;; The EVAL-WHEN in this case is not at toplevel, so only the ",":EXECUTE"]}),"\n",(0,r.jsx)(n.p,{children:";;; keyword is considered. At compile time, this has no effect."}),"\n",(0,r.jsx)(n.p,{children:";;; At load time (if the LET is at toplevel), or at execution time"}),"\n",(0,r.jsx)(n.p,{children:";;; (if the LET is embedded in some other form which does not execute"}),"\n",(0,r.jsx)(n.p,{children:";;; until later) this sets (SYMBOL-FUNCTION \u2019FOO1) to a function which"}),"\n",(0,r.jsx)(n.p,{children:";;; returns 1."}),"\n",(0,r.jsx)(n.p,{children:"(let ((x 1))"}),"\n",(0,r.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":load-toplevel"," ",":compile-toplevel",")"]}),"\n",(0,r.jsx)(n.p,{children:"(setf (symbol-function \u2019foo1) #\u2019(lambda () x))))"}),"\n",(0,r.jsx)(n.p,{children:";;; If this expression occurs at the toplevel of a file to be compiled,"}),"\n",(0,r.jsx)(n.p,{children:";;; it has BOTH a compile time AND a load-time effect of setting"}),"\n",(0,r.jsx)(n.p,{children:";;; (SYMBOL-FUNCTION \u2019FOO2) to a function which returns 2."}),"\n",(0,r.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":load-toplevel"," ",":compile-toplevel",")"]}),"\n",(0,r.jsx)(n.p,{children:"(let ((x 2))"}),"\n",(0,r.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":load-toplevel"," ",":compile-toplevel",")"]}),"\n",(0,r.jsx)(n.p,{children:"(setf (symbol-function \u2019foo2) #\u2019(lambda () x)))))"}),"\n",(0,r.jsx)(n.p,{children:";;; If this expression occurs at the toplevel of a file to be compiled,"}),"\n",(0,r.jsx)(n.p,{children:";;; it has BOTH a compile time AND a load-time effect of setting the"}),"\n",(0,r.jsx)(n.p,{children:";;; function cell of FOO3 to a function which returns 3."}),"\n",(0,r.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":load-toplevel"," ",":compile-toplevel",")"]}),"\n",(0,r.jsx)(n.p,{children:"(setf (symbol-function \u2019foo3) #\u2019(lambda () 3)))"}),"\n",(0,r.jsx)(n.p,{children:";;; #4: This always does nothing. It simply returns NIL."}),"\n",(0,r.jsxs)(n.p,{children:["(eval-when (",":compile-toplevel",")"]}),"\n",(0,r.jsxs)(n.p,{children:["(eval-when (",":compile-toplevel",")"]}),"\n",(0,r.jsx)(n.p,{children:"(print \u2019foo4)))"}),"\n",(0,r.jsx)(n.p,{children:";;; If this form occurs at toplevel of a file to be compiled, FOO5 is"}),"\n",(0,r.jsx)(n.p,{children:";;; printed at compile time. If this form occurs in a non-top-level"}),"\n",(0,r.jsx)(n.p,{children:";;; position, nothing is printed at compile time. Regardless of context,"}),"\n",(0,r.jsx)(n.p,{children:";;; nothing is ever printed at load time or execution time."}),"\n",(0,r.jsxs)(n.p,{children:["(eval-when (",":compile-toplevel",")"]}),"\n",(0,r.jsxs)(n.p,{children:["(eval-when (",":execute",")"]}),"\n",(0,r.jsx)(n.p,{children:"(print \u2019foo5)))"}),"\n",(0,r.jsx)(n.p,{children:";;; If this form occurs at toplevel of a file to be compiled, FOO6 is"}),"\n",(0,r.jsx)(n.p,{children:";;; printed at compile time. If this form occurs in a non-top-level"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"eval-when"})}),"\n",(0,r.jsx)(n.p,{children:";;; position, nothing is printed at compile time. Regardless of context,"}),"\n",(0,r.jsx)(n.p,{children:";;; nothing is ever printed at load time or execution time."}),"\n",(0,r.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":load-toplevel",")"]}),"\n",(0,r.jsxs)(n.p,{children:["(eval-when (",":compile-toplevel",")"]}),"\n",(0,r.jsx)(n.p,{children:"(print \u2019foo6)))"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"compile-file"}),", Section 3.2 (Compilation)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["The following effects are logical consequences of the definition of ",(0,r.jsx)(n.strong,{children:"eval-when"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," Execution of a single ",(0,r.jsx)(n.strong,{children:"eval-when"})," expression executes the body code at most once."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022 Macros"})," intended for use in ",(0,r.jsx)(n.em,{children:"top level forms"})," should be written so that side-effects are done by the ",(0,r.jsx)(n.em,{children:"forms"})," in the macro expansion. The macro-expander itself should not do the side-effects."]}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.p,{children:"Wrong:"}),"\n",(0,r.jsx)(n.p,{children:"(defmacro foo ()"}),"\n",(0,r.jsx)(n.p,{children:"(really-foo)"}),"\n",(0,r.jsx)(n.p,{children:"\u2018(really-foo))"}),"\n",(0,r.jsx)(n.p,{children:"Right:"}),"\n",(0,r.jsx)(n.p,{children:"(defmacro foo ()"}),"\n",(0,r.jsxs)(n.p,{children:["\u2018(eval-when (",":compile-toplevel"," ",":execute"," ",":load-toplevel",") (really-foo)))"]}),"\n",(0,r.jsxs)(n.p,{children:["Adherence to this convention means that such ",(0,r.jsx)(n.em,{children:"macros"})," behave intuitively when appearing as ",(0,r.jsx)(n.em,{children:"non-top-level forms"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," Placing a variable binding around an ",(0,r.jsx)(n.strong,{children:"eval-when"})," reliably captures the binding because the compile-time-too mode cannot occur (",(0,r.jsx)(n.em,{children:"i.e."}),", introducing a variable binding means that the ",(0,r.jsx)(n.strong,{children:"eval-when"})," is not a ",(0,r.jsx)(n.em,{children:"top level form"}),"). For example,"]}),"\n",(0,r.jsx)(n.p,{children:"(let ((x 3))"}),"\n",(0,r.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":load-toplevel"," ",":compile-toplevel",") (print x)))"]}),"\n",(0,r.jsxs)(n.p,{children:["prints 3 at execution (",(0,r.jsx)(n.em,{children:"i.e."}),", load) time, and does not print anything at compile time. This is important so that expansions of ",(0,r.jsx)(n.strong,{children:"defun"})," and ",(0,r.jsx)(n.strong,{children:"defmacro"})," can be done in terms of ",(0,r.jsx)(n.strong,{children:"eval-when"})," and can correctly capture the ",(0,r.jsx)(n.em,{children:"lexical environment"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"(defun bar (x) (defun foo () (+ x 3)))"}),"\n",(0,r.jsx)(n.p,{children:"(defun bar (x)"}),"\n",(0,r.jsxs)(n.p,{children:["(progn (eval-when (",":compile-toplevel",")"]}),"\n",(0,r.jsx)(n.p,{children:"(compiler::notice-function-definition \u2019foo \u2019(x)))"}),"\n",(0,r.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":load-toplevel",")"]}),"\n",(0,r.jsx)(n.p,{children:"(setf (symbol-function \u2019foo) #\u2019(lambda () (+ x 3))))))"}),"\n",(0,r.jsx)(n.p,{children:"which would be treated by the above rules the same as"}),"\n",(0,r.jsx)(n.p,{children:"(defun bar (x)"}),"\n",(0,r.jsx)(n.p,{children:"(setf (symbol-function \u2019foo) #\u2019(lambda () (+ x 3))))"}),"\n",(0,r.jsxs)(n.p,{children:["when the definition of bar is not a ",(0,r.jsx)(n.em,{children:"top level form"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"load-time-value"})," ",(0,r.jsx)(n.em,{children:"Special Operator"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"load-time-value"})," ",(0,r.jsx)(n.em,{children:"form"})," &optional ",(0,r.jsx)(n.em,{children:"read-only-p \u2192 object"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"form"}),"\u2014a ",(0,r.jsx)(n.em,{children:"form"}),"; evaluated as described below."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"read-only-p"}),"\u2014a ",(0,r.jsx)(n.em,{children:"boolean"}),"; not evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"object"}),"\u2014the ",(0,r.jsx)(n.em,{children:"primary value"})," resulting from evaluating ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"load-time-value"})," provides a mechanism for delaying evaluation of ",(0,r.jsx)(n.em,{children:"form"})," until the expression is in the run-time environment; see Section 3.2 (Compilation)."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Read-only-p"})," designates whether the result can be considered a ",(0,r.jsx)(n.em,{children:"constant object"}),". If ",(0,r.jsx)(n.strong,{children:"t"}),", the result is a read-only quantity that can, if appropriate to the ",(0,r.jsx)(n.em,{children:"implementation"}),", be copied into read-only space and/or ",(0,r.jsx)(n.em,{children:"coalesced"})," with ",(0,r.jsx)(n.em,{children:"similar constant objects"})," from other ",(0,r.jsx)(n.em,{children:"programs"}),". If ",(0,r.jsx)(n.strong,{children:"nil"})," (the default), the result must be neither copied nor coalesced; it must be considered to be potentially modifiable data."]}),"\n",(0,r.jsxs)(n.p,{children:["If a ",(0,r.jsx)(n.strong,{children:"load-time-value"})," expression is processed by ",(0,r.jsx)(n.strong,{children:"compile-file"}),", the compiler performs its normal semantic processing (such as macro expansion and translation into machine code) on ",(0,r.jsx)(n.em,{children:"form"}),", but arranges for the execution of ",(0,r.jsx)(n.em,{children:"form"})," to occur at load time in a ",(0,r.jsx)(n.em,{children:"null lexical environment"}),", with the result of this ",(0,r.jsx)(n.em,{children:"evaluation"})," then being treated as a ",(0,r.jsx)(n.em,{children:"literal object"})," at run time. It is guaranteed that"]}),"\n",(0,r.jsxs)(n.p,{children:["the evaluation of ",(0,r.jsx)(n.em,{children:"form"})," will take place only once when the ",(0,r.jsx)(n.em,{children:"file"})," is ",(0,r.jsx)(n.em,{children:"loaded"}),", but the order of evaluation with respect to the evaluation of ",(0,r.jsx)(n.em,{children:"top level forms"})," in the file is ",(0,r.jsx)(n.em,{children:"implementation-dependent"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If a ",(0,r.jsx)(n.strong,{children:"load-time-value"})," expression appears within a function compiled with ",(0,r.jsx)(n.strong,{children:"compile"}),", the ",(0,r.jsx)(n.em,{children:"form"})," is evaluated at compile time in a ",(0,r.jsx)(n.em,{children:"null lexical environment"}),". The result of this compile-time evaluation is treated as a ",(0,r.jsx)(n.em,{children:"literal object"})," in the compiled code."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"load-time-value"})}),"\n",(0,r.jsxs)(n.p,{children:["If a ",(0,r.jsx)(n.strong,{children:"load-time-value"})," expression is processed by ",(0,r.jsx)(n.strong,{children:"eval"}),", ",(0,r.jsx)(n.em,{children:"form"})," is evaluated in a ",(0,r.jsx)(n.em,{children:"null lexical environment"}),", and one value is returned. Implementations that implicitly compile (or partially compile) expressions processed by ",(0,r.jsx)(n.strong,{children:"eval"})," might evaluate ",(0,r.jsx)(n.em,{children:"form"})," only once, at the time this compilation is performed."]}),"\n",(0,r.jsxs)(n.p,{children:["If the ",(0,r.jsx)(n.em,{children:"same list"})," (load-time-value ",(0,r.jsx)(n.em,{children:"form"}),") is evaluated or compiled more than once, it is ",(0,r.jsx)(n.em,{children:"implementation-dependent"})," whether ",(0,r.jsx)(n.em,{children:"form"})," is evaluated only once or is evaluated more than once. This can happen both when an expression being evaluated or compiled shares substructure, and when the ",(0,r.jsx)(n.em,{children:"same form"})," is processed by ",(0,r.jsx)(n.strong,{children:"eval"})," or ",(0,r.jsx)(n.strong,{children:"compile"})," multiple times. Since a ",(0,r.jsx)(n.strong,{children:"load-time-value"})," expression can be referenced in more than one place and can be evaluated multiple times by ",(0,r.jsx)(n.strong,{children:"eval"}),", it is ",(0,r.jsx)(n.em,{children:"implementation-dependent"})," whether each execution returns a fresh ",(0,r.jsx)(n.em,{children:"object"})," or returns the same ",(0,r.jsx)(n.em,{children:"object"})," as some other execution. Users must use caution when destructively modifying the resulting ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If two lists (load-time-value ",(0,r.jsx)(n.em,{children:"form"}),") that are the ",(0,r.jsx)(n.em,{children:"same"})," under ",(0,r.jsx)(n.strong,{children:"equal"})," but are not ",(0,r.jsx)(n.em,{children:"identical"})," are evaluated or compiled, their values always come from distinct evaluations of ",(0,r.jsx)(n.em,{children:"form"}),". Their ",(0,r.jsx)(n.em,{children:"values"})," may not be coalesced unless ",(0,r.jsx)(n.em,{children:"read-only-p"})," is ",(0,r.jsx)(n.strong,{children:"t"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.p,{children:";;; The function INCR1 always returns the same value, even in different images. ;;; The function INCR2 always returns the same value in a given image,"}),"\n",(0,r.jsx)(n.p,{children:";;; but the value it returns might vary from image to image."}),"\n",(0,r.jsx)(n.p,{children:"(defun incr1 (x) (+ x #.(random 17)))"}),"\n",(0,r.jsx)(n.p,{children:"(defun incr2 (x) (+ x (load-time-value (random 17))))"}),"\n",(0,r.jsx)(n.p,{children:";;; The function FOO1-REF references the nth element of the first of"}),"\n",(0,r.jsx)(n.p,{children:";;; the *FOO-ARRAYS* that is available at load time. It is permissible for"}),"\n",(0,r.jsx)(n.p,{children:";;; that array to be modified (e.g., by SET-FOO1-REF); FOO1-REF will see the"}),"\n",(0,r.jsx)(n.p,{children:";;; updated values."}),"\n",(0,r.jsx)(n.p,{children:"(defvar *foo-arrays* (list (make-array 7) (make-array 8)))"}),"\n",(0,r.jsx)(n.p,{children:"(defun foo1-ref (n) (aref (load-time-value (first *my-arrays*) nil) n))"}),"\n",(0,r.jsx)(n.p,{children:"(defun set-foo1-ref (n val)"}),"\n",(0,r.jsx)(n.p,{children:"(setf (aref (load-time-value (first *my-arrays*) nil) n) val))"}),"\n",(0,r.jsx)(n.p,{children:";;; The function BAR1-REF references the nth element of the first of"}),"\n",(0,r.jsx)(n.p,{children:";;; the *BAR-ARRAYS* that is available at load time. The programmer has"}),"\n",(0,r.jsx)(n.p,{children:";;; promised that the array will be treated as read-only, so the system"}),"\n",(0,r.jsx)(n.p,{children:";;; can copy or coalesce the array."}),"\n",(0,r.jsx)(n.p,{children:"(defvar *bar-arrays* (list (make-array 7) (make-array 8)))"}),"\n",(0,r.jsx)(n.p,{children:"(defun bar1-ref (n) (aref (load-time-value (first *my-arrays*) t) n))"}),"\n",(0,r.jsx)(n.p,{children:";;; This use of LOAD-TIME-VALUE permits the indicated vector to be coalesced"}),"\n",(0,r.jsx)(n.p,{children:";;; even though NIL was specified, because the object was already read-only"}),"\n",(0,r.jsx)(n.p,{children:";;; when it was written as a literal vector rather than created by a constructor. ;;; User programs must treat the vector v as read-only."}),"\n",(0,r.jsx)(n.p,{children:"(defun baz-ref (n)"}),"\n",(0,r.jsx)(n.p,{children:"(let ((v (load-time-value #(A B C) nil)))"}),"\n",(0,r.jsx)(n.p,{children:"(values (svref v n) v)))"}),"\n",(0,r.jsx)(n.p,{children:";;; This use of LOAD-TIME-VALUE permits the indicated vector to be coalesced"}),"\n",(0,r.jsx)(n.p,{children:";;; even though NIL was specified in the outer situation because T was specified ;;; in the inner situation. User programs must treat the vector v as read-only. (defun baz-ref (n)"}),"\n",(0,r.jsx)(n.p,{children:"(let ((v (load-time-value (load-time-value (vector 1 2 3) t) nil)))"}),"\n",(0,r.jsx)(n.p,{children:"(values (svref v n) v)))"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"compile-file"}),", ",(0,r.jsx)(n.strong,{children:"compile"}),", ",(0,r.jsx)(n.strong,{children:"eval"}),", Section 3.2.2.2 (Minimal Compilation), Section 3.2 (Compilation)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"load-time-value"})," must appear outside of quoted structure in a \u201cfor ",(0,r.jsx)(n.em,{children:"evaluation"}),"\u201d position. In situations which would appear to call for use of ",(0,r.jsx)(n.strong,{children:"load-time-value"})," within a quoted structure, the ",(0,r.jsx)(n.em,{children:"backquote reader macro"})," is probably called for; see Section 2.4.6 (Backquote)."]}),"\n",(0,r.jsxs)(n.p,{children:["Specifying ",(0,r.jsx)(n.strong,{children:"nil"})," for ",(0,r.jsx)(n.em,{children:"read-only-p"})," is not a way to force an object to become modifiable if it has already been made read-only. It is only a way to say that, for an object that is modifiable, this operation is not intended to make that object read-only."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"quote"})," ",(0,r.jsx)(n.em,{children:"Special Operator"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"quote"})," ",(0,r.jsx)(n.em,{children:"object \u2192 object"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"object"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"; not evaluated."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"quote"})," ",(0,r.jsx)(n.em,{children:"special operator"})," just returns ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The consequences are undefined if ",(0,r.jsx)(n.em,{children:"literal objects"})," (including ",(0,r.jsx)(n.em,{children:"quoted objects"}),") are destructively modified."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:["(setq a 1) ",(0,r.jsx)(n.em,{children:"\u2192"})," 1"]}),"\n",(0,r.jsxs)(n.p,{children:["(quote (setq a 3)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (SETQ A 3)"]}),"\n",(0,r.jsxs)(n.p,{children:["a ",(0,r.jsx)(n.em,{children:"\u2192"})," 1"]}),"\n",(0,r.jsxs)(n.p,{children:["\u2019a ",(0,r.jsx)(n.em,{children:"\u2192"})," A"]}),"\n",(0,r.jsxs)(n.p,{children:["\u201da ",(0,r.jsx)(n.em,{children:"\u2192"})," (QUOTE A)"]}),"\n",(0,r.jsxs)(n.p,{children:["\u201d\u2019a ",(0,r.jsx)(n.em,{children:"\u2192"})," (QUOTE (QUOTE A))"]}),"\n",(0,r.jsxs)(n.p,{children:["(setq a 43) ",(0,r.jsx)(n.em,{children:"\u2192"})," 43"]}),"\n",(0,r.jsxs)(n.p,{children:["(list a (cons a 3)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (43 (43 . 3))"]}),"\n",(0,r.jsxs)(n.p,{children:["(list (quote a) (quote (cons a 3))) ",(0,r.jsx)(n.em,{children:"\u2192"})," (A (CONS A 3))"]}),"\n",(0,r.jsxs)(n.p,{children:["1 ",(0,r.jsx)(n.em,{children:"\u2192"})," 1"]}),"\n",(0,r.jsxs)(n.p,{children:["\u20191 ",(0,r.jsx)(n.em,{children:"\u2192"})," 1"]}),"\n",(0,r.jsxs)(n.p,{children:['"foo" ',(0,r.jsx)(n.em,{children:"\u2192"}),' "foo"']}),"\n",(0,r.jsxs)(n.p,{children:['\u2019"foo" ',(0,r.jsx)(n.em,{children:"\u2192"}),' "foo"']}),"\n",(0,r.jsxs)(n.p,{children:["(car \u2019(a b)) ",(0,r.jsx)(n.em,{children:"\u2192"})," A"]}),"\n",(0,r.jsxs)(n.p,{children:["\u2019(car \u2019(a b)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (CAR (QUOTE (A B)))"]}),"\n",(0,r.jsxs)(n.p,{children:["#(car \u2019(a b)) ",(0,r.jsx)(n.em,{children:"\u2192"})," #(CAR (QUOTE (A B)))"]}),"\n",(0,r.jsxs)(n.p,{children:["\u2019#(car \u2019(a b)) ",(0,r.jsx)(n.em,{children:"\u2192"})," #(CAR (QUOTE (A B)))"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:"Section 3.1 (Evaluation), Section 2.4.3 (Single-Quote), Section 3.2.1 (Compiler Terminology)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["The textual notation \u2019",(0,r.jsx)(n.em,{children:"object"})," is equivalent to (quote ",(0,r.jsx)(n.em,{children:"object"}),"); see Section 3.2.1 (Compiler Terminology)."]}),"\n",(0,r.jsxs)(n.p,{children:["Some ",(0,r.jsx)(n.em,{children:"objects"}),", called ",(0,r.jsx)(n.em,{children:"self-evaluating objects"}),", do not require quotation by ",(0,r.jsx)(n.strong,{children:"quote"}),". However, ",(0,r.jsx)(n.em,{children:"symbols"})," and ",(0,r.jsx)(n.em,{children:"lists"})," are used to represent parts of programs, and so would not be useable as constant data in a program without ",(0,r.jsx)(n.strong,{children:"quote"}),". Since ",(0,r.jsx)(n.strong,{children:"quote"})," suppresses the ",(0,r.jsx)(n.em,{children:"evaluation"})," of these ",(0,r.jsx)(n.em,{children:"objects"}),", they become data rather than program."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"compiler-macro-function"})," ",(0,r.jsx)(n.em,{children:"Accessor"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"compiler-macro-function"})," ",(0,r.jsx)(n.em,{children:"name"})," &optional ",(0,r.jsx)(n.em,{children:"environment \u2192 function"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"(setf (compiler-macro-function"})," ",(0,r.jsx)(n.em,{children:"name"})," &optional ",(0,r.jsx)(n.em,{children:"environment"}),"**)** ",(0,r.jsx)(n.em,{children:"new-function"}),"**)**"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"name"}),"\u2014a ",(0,r.jsx)(n.em,{children:"function name"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"environment"}),"\u2014an ",(0,r.jsx)(n.em,{children:"environment object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"function"}),", ",(0,r.jsx)(n.em,{children:"new-function"}),"\u2014a ",(0,r.jsx)(n.em,{children:"compiler macro function"}),", or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Accesses"})," the ",(0,r.jsx)(n.em,{children:"compiler macro function"})," named ",(0,r.jsx)(n.em,{children:"name"}),", if any, in the ",(0,r.jsx)(n.em,{children:"environment"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A value of ",(0,r.jsx)(n.strong,{children:"nil"})," denotes the absence of a ",(0,r.jsx)(n.em,{children:"compiler macro function"})," named ",(0,r.jsx)(n.em,{children:"name"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["The consequences are undefined if ",(0,r.jsx)(n.em,{children:"environment"})," is ",(0,r.jsx)(n.em,{children:"non-nil"})," in a use of ",(0,r.jsx)(n.strong,{children:"setf"})," of ",(0,r.jsx)(n.strong,{children:"compiler-macro-function"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"define-compiler-macro"}),", Section 3.2.2.1 (Compiler Macros)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"define-compiler-macro"})," ",(0,r.jsx)(n.em,{children:"Macro"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"define-compiler-macro"})," ",(0,r.jsx)(n.em,{children:"name lambda-list"})," [[ ",(0,r.jsx)(n.em,{children:"{declaration}"}),"* ",(0,r.jsx)(n.em,{children:"| documentation"})," ]] ",(0,r.jsx)(n.em,{children:"{form}"}),"* ",(0,r.jsx)(n.em,{children:"\u2192 name"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"name"}),"\u2014a ",(0,r.jsx)(n.em,{children:"function name"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"lambda-list"}),"\u2014a ",(0,r.jsx)(n.em,{children:"macro lambda list"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,r.jsx)(n.strong,{children:"declare"})," ",(0,r.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"documentation"}),"\u2014a ",(0,r.jsx)(n.em,{children:"string"}),"; not evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"form"}),"\u2014a ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["This is the normal mechanism for defining a ",(0,r.jsx)(n.em,{children:"compiler macro function"}),". Its manner of definition is the same as for ",(0,r.jsx)(n.strong,{children:"defmacro"}),"; the only differences are:"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," The ",(0,r.jsx)(n.em,{children:"name"})," can be a ",(0,r.jsx)(n.em,{children:"function name"})," naming any ",(0,r.jsx)(n.em,{children:"function"})," or ",(0,r.jsx)(n.em,{children:"macro"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," The expander function is installed as a ",(0,r.jsx)(n.em,{children:"compiler macro function"})," for the ",(0,r.jsx)(n.em,{children:"name"}),", rather than as a ",(0,r.jsx)(n.em,{children:"macro function"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," The ",(0,r.jsx)(n.strong,{children:"&whole"})," argument is bound to the form argument that is passed to the ",(0,r.jsx)(n.em,{children:"compiler macro function"}),". The remaining lambda-list parameters are specified as if this form contained the function name in the ",(0,r.jsx)(n.em,{children:"car"})," and the actual arguments in the ",(0,r.jsx)(n.em,{children:"cdr"})," , but if the ",(0,r.jsx)(n.em,{children:"car"})," of the actual form is the symbol ",(0,r.jsx)(n.strong,{children:"funcall"}),", then the destructuring of the arguments is actually performed using its ",(0,r.jsx)(n.em,{children:"cddr"})," instead."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022 Documentation"})," is attached as a ",(0,r.jsx)(n.em,{children:"documentation string"})," to ",(0,r.jsx)(n.em,{children:"name"})," (as kind ",(0,r.jsx)(n.strong,{children:"compiler-macro"}),") and to the ",(0,r.jsx)(n.em,{children:"compiler macro function"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"define-compiler-macro"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," Unlike an ordinary ",(0,r.jsx)(n.em,{children:"macro"}),", a ",(0,r.jsx)(n.em,{children:"compiler macro"})," can decline to provide an expansion merely by returning a form that is the ",(0,r.jsx)(n.em,{children:"same"})," as the original (which can be obtained by using ",(0,r.jsx)(n.strong,{children:"&whole"}),")."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:["(defun square (x) (expt x 2)) ",(0,r.jsx)(n.em,{children:"\u2192"})," SQUARE"]}),"\n",(0,r.jsx)(n.p,{children:"(define-compiler-macro square (&whole form arg)"}),"\n",(0,r.jsx)(n.p,{children:"(if (atom arg)"}),"\n",(0,r.jsx)(n.p,{children:"\u2018(expt ,arg 2)"}),"\n",(0,r.jsx)(n.p,{children:"(case (car arg)"}),"\n",(0,r.jsx)(n.p,{children:"(square (if (= (length arg) 2)"}),"\n",(0,r.jsx)(n.p,{children:"\u2018(expt ,(nth 1 arg) 4)"}),"\n",(0,r.jsx)(n.p,{children:"form))"}),"\n",(0,r.jsx)(n.p,{children:"(expt (if (= (length arg) 3)"}),"\n",(0,r.jsx)(n.p,{children:"(if (numberp (nth 2 arg))"}),"\n",(0,r.jsx)(n.p,{children:"\u2018(expt ,(nth 1 arg) ,(* 2 (nth 2 arg)))"}),"\n",(0,r.jsx)(n.p,{children:"\u2018(expt ,(nth 1 arg) (* 2 ,(nth 2 arg))))"}),"\n",(0,r.jsx)(n.p,{children:"form))"}),"\n",(0,r.jsxs)(n.p,{children:["(otherwise \u2018(expt ,arg 2))))) ",(0,r.jsx)(n.em,{children:"\u2192"})," SQUARE"]}),"\n",(0,r.jsxs)(n.p,{children:["(square (square 3)) ",(0,r.jsx)(n.em,{children:"\u2192"})," 81"]}),"\n",(0,r.jsxs)(n.p,{children:["(macroexpand \u2019(square x)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (SQUARE X), ",(0,r.jsx)(n.em,{children:"false"})]}),"\n",(0,r.jsx)(n.p,{children:"(funcall (compiler-macro-function \u2019square) \u2019(square x) nil)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," (EXPT X 2)"]}),"\n",(0,r.jsx)(n.p,{children:"(funcall (compiler-macro-function \u2019square) \u2019(square (square x)) nil)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," (EXPT X 4)"]}),"\n",(0,r.jsx)(n.p,{children:"(funcall (compiler-macro-function \u2019square) \u2019(funcall #\u2019square x) nil)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," (EXPT X 2)"]}),"\n",(0,r.jsx)(n.p,{children:"(defun distance-positional (x1 y1 x2 y2)"}),"\n",(0,r.jsx)(n.p,{children:"(sqrt (+ (expt (- x2 x1) 2) (expt (- y2 y1) 2))))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," DISTANCE-POSITIONAL"]}),"\n",(0,r.jsx)(n.p,{children:"(defun distance (&key (x1 0) (y1 0) (x2 x1) (y2 y1))"}),"\n",(0,r.jsx)(n.p,{children:"(distance-positional x1 y1 x2 y2))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," DISTANCE"]}),"\n",(0,r.jsx)(n.p,{children:"(define-compiler-macro distance (&whole form"}),"\n",(0,r.jsx)(n.p,{children:"&rest key-value-pairs"}),"\n",(0,r.jsx)(n.p,{children:"&key (x1 0 x1-p)"}),"\n",(0,r.jsx)(n.p,{children:"(y1 0 y1-p)"}),"\n",(0,r.jsx)(n.p,{children:"(x2 x1 x2-p)"}),"\n",(0,r.jsx)(n.p,{children:"(y2 y1 y2-p)"}),"\n",(0,r.jsx)(n.p,{children:"&allow-other-keys"}),"\n",(0,r.jsx)(n.p,{children:"&environment env)"}),"\n",(0,r.jsx)(n.p,{children:"(flet ((key (n) (nth (* n 2) key-value-pairs))"}),"\n",(0,r.jsx)(n.p,{children:"(arg (n) (nth (1+ (* n 2)) key-value-pairs))"}),"\n",(0,r.jsx)(n.p,{children:"(simplep (x)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"define-compiler-macro"})}),"\n",(0,r.jsx)(n.p,{children:"(let ((expanded-x (macroexpand x env)))"}),"\n",(0,r.jsx)(n.p,{children:"(or (constantp expanded-x env)"}),"\n",(0,r.jsx)(n.p,{children:"(symbolp expanded-x)))))"}),"\n",(0,r.jsx)(n.p,{children:"(let ((n (/ (length key-value-pairs) 2)))"}),"\n",(0,r.jsx)(n.p,{children:"(multiple-value-bind (x1s y1s x2s y2s others)"}),"\n",(0,r.jsx)(n.p,{children:"(loop for (key) on key-value-pairs by #\u2019cddr"}),"\n",(0,r.jsxs)(n.p,{children:["count (eq key \u2019",":x1",") into x1s"]}),"\n",(0,r.jsxs)(n.p,{children:["count (eq key \u2019",":y1",") into y1s"]}),"\n",(0,r.jsxs)(n.p,{children:["count (eq key \u2019",":x2",") into x2s"]}),"\n",(0,r.jsxs)(n.p,{children:["count (eq key \u2019",":y1",") into y2s"]}),"\n",(0,r.jsxs)(n.p,{children:["count (not (member key \u2019(",":x1"," ",":x2"," ",":y1"," ",":y2",")))"]}),"\n",(0,r.jsx)(n.p,{children:"into others"}),"\n",(0,r.jsx)(n.p,{children:"finally (return (values x1s y1s x2s y2s others)))"}),"\n",(0,r.jsx)(n.p,{children:"(cond ((and (= n 4)"}),"\n",(0,r.jsxs)(n.p,{children:["(eq (key 0) ",":x1",")"]}),"\n",(0,r.jsxs)(n.p,{children:["(eq (key 1) ",":y1",")"]}),"\n",(0,r.jsxs)(n.p,{children:["(eq (key 2) ",":x2",")"]}),"\n",(0,r.jsxs)(n.p,{children:["(eq (key 3) ",":y2","))"]}),"\n",(0,r.jsx)(n.p,{children:"\u2018(distance-positional ,x1 ,y1 ,x2 ,y2))"}),"\n",(0,r.jsx)(n.p,{children:"((and (if x1-p (and (= x1s 1) (simplep x1)) t)"}),"\n",(0,r.jsx)(n.p,{children:"(if y1-p (and (= y1s 1) (simplep y1)) t)"}),"\n",(0,r.jsx)(n.p,{children:"(if x2-p (and (= x2s 1) (simplep x2)) t)"}),"\n",(0,r.jsx)(n.p,{children:"(if y2-p (and (= y2s 1) (simplep y2)) t)"}),"\n",(0,r.jsx)(n.p,{children:"(zerop others))"}),"\n",(0,r.jsx)(n.p,{children:"\u2018(distance-positional ,x1 ,y1 ,x2 ,y2))"}),"\n",(0,r.jsx)(n.p,{children:"((and (< x1s 2) (< y1s 2) (< x2s 2) (< y2s 2)"}),"\n",(0,r.jsx)(n.p,{children:"(zerop others))"}),"\n",(0,r.jsx)(n.p,{children:"(let ((temps (loop repeat n collect (gensym))))"}),"\n",(0,r.jsx)(n.p,{children:"\u2018(let ,(loop for i below n"}),"\n",(0,r.jsx)(n.p,{children:"collect (list (nth i temps) (arg i)))"}),"\n",(0,r.jsx)(n.p,{children:"(distance"}),"\n",(0,r.jsx)(n.p,{children:",@(loop for i below n"}),"\n",(0,r.jsx)(n.p,{children:"append (list (key i) (nth i temps)))))))"}),"\n",(0,r.jsx)(n.p,{children:"(t form))))))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," DISTANCE"]}),"\n",(0,r.jsx)(n.p,{children:"(dolist (form"}),"\n",(0,r.jsxs)(n.p,{children:["\u2019((distance ",":x1"," (setq x 7) ",":x2"," (decf x) ",":y1"," (decf x) ",":y2"," (decf x)) (distance ",":x1"," (setq x 7) ",":y1"," (decf x) ",":x2"," (decf x) ",":y2"," (decf x))"]}),"\n",(0,r.jsxs)(n.p,{children:["(distance ",":x1"," (setq x 7) ",":y1"," (incf x))"]}),"\n",(0,r.jsxs)(n.p,{children:["(distance ",":x1"," (setq x 7) ",":y1"," (incf x) ",":x1"," (incf x))"]}),"\n",(0,r.jsxs)(n.p,{children:["(distance ",":x1"," a1 ",":y1"," b1 ",":x2"," a2 ",":y2"," b2)"]}),"\n",(0,r.jsxs)(n.p,{children:["(distance ",":x1"," a1 ",":x2"," a2 ",":y1"," b1 ",":y2"," b2)"]}),"\n",(0,r.jsxs)(n.p,{children:["(distance ",":x1"," a1 ",":y1"," b1 ",":z1"," c1 ",":x2"," a2 ",":y2"," b2 ",":z2"," c2)))"]}),"\n",(0,r.jsx)(n.p,{children:"(print (funcall (compiler-macro-function \u2019distance) form nil)))"}),"\n",(0,r.jsxs)(n.p,{children:["\u25b7 (LET ((#",":G6558"," (SETQ X 7))"]}),"\n",(0,r.jsxs)(n.p,{children:["\u25b7 (#",":G6559"," (DECF X))"]}),"\n",(0,r.jsxs)(n.p,{children:["\u25b7 (#",":G6560"," (DECF X))"]}),"\n",(0,r.jsxs)(n.p,{children:["\u25b7 (#",":G6561"," (DECF X)))"]}),"\n",(0,r.jsxs)(n.p,{children:["\u25b7 (DISTANCE ",":X1"," #",":G6558"," ",":X2"," #",":G6559"," ",":Y1"," #",":G6560"," ",":Y2"," #",":G6561","))"]}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 (DISTANCE-POSITIONAL (SETQ X 7) (DECF X) (DECF X) (DECF X))"}),"\n",(0,r.jsxs)(n.p,{children:["\u25b7 (LET ((#",":G6567"," (SETQ X 7))"]}),"\n",(0,r.jsxs)(n.p,{children:["\u25b7 (#",":G6568"," (INCF X)))"]}),"\n",(0,r.jsxs)(n.p,{children:["\u25b7 (DISTANCE ",":X1"," #",":G6567"," ",":Y1"," #",":G6568","))"]}),"\n",(0,r.jsxs)(n.p,{children:["\u25b7 (DISTANCE ",":X1"," (SETQ X 7) ",":Y1"," (INCF X) ",":X1"," (INCF X))"]}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 (DISTANCE-POSITIONAL A1 B1 A2 B2)"}),"\n",(0,r.jsx)(n.p,{children:"\u25b7 (DISTANCE-POSITIONAL A1 B1 A2 B2)"}),"\n",(0,r.jsxs)(n.p,{children:["\u25b7 (DISTANCE ",":X1"," A1 ",":Y1"," B1 ",":Z1"," C1 ",":X2"," A2 ",":Y2"," B2 ",":Z2"," C2)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"compiler-macro-function"}),", ",(0,r.jsx)(n.strong,{children:"defmacro"}),", ",(0,r.jsx)(n.strong,{children:"documentation"}),", Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["The consequences of writing a ",(0,r.jsx)(n.em,{children:"compiler macro"})," definition for a function in the COMMON-LISP ",(0,r.jsx)(n.em,{children:"package"})," are undefined; it is quite possible that in some ",(0,r.jsx)(n.em,{children:"implementations"})," such an attempt would override an equivalent or equally important definition. In general, it is recommended that a programmer only write ",(0,r.jsx)(n.em,{children:"compiler macro"})," definitions for ",(0,r.jsx)(n.em,{children:"functions"})," he or she personally maintains\u2013writing a ",(0,r.jsx)(n.em,{children:"compiler macro"})," definition for a function maintained elsewhere is normally considered a violation of traditional rules of modularity and data abstraction."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"defmacro"})," ",(0,r.jsx)(n.em,{children:"Macro"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"defmacro"})," ",(0,r.jsx)(n.em,{children:"name lambda-list"})," [[ ",(0,r.jsx)(n.em,{children:"{declaration}"}),"* ",(0,r.jsx)(n.em,{children:"| documentation"})," ]] ",(0,r.jsx)(n.em,{children:"{form}"}),"*"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"\u2192 name"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"name"}),"\u2014a ",(0,r.jsx)(n.em,{children:"symbol"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"lambda-list"}),"\u2014a ",(0,r.jsx)(n.em,{children:"macro lambda list"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,r.jsx)(n.strong,{children:"declare"})," ",(0,r.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"documentation"}),"\u2014a ",(0,r.jsx)(n.em,{children:"string"}),"; not evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"form"}),"\u2014a ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"defmacro"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Defines ",(0,r.jsx)(n.em,{children:"name"})," as a ",(0,r.jsx)(n.em,{children:"macro"})," by associating a ",(0,r.jsx)(n.em,{children:"macro function"})," with that ",(0,r.jsx)(n.em,{children:"name"})," in the global environment. The ",(0,r.jsx)(n.em,{children:"macro function"})," is defined in the same ",(0,r.jsx)(n.em,{children:"lexical environment"})," in which the ",(0,r.jsx)(n.strong,{children:"defmacro"})," ",(0,r.jsx)(n.em,{children:"form"})," appears."]}),"\n",(0,r.jsxs)(n.p,{children:["The parameter variables in ",(0,r.jsx)(n.em,{children:"lambda-list"})," are bound to destructured portions of the macro call."]}),"\n",(0,r.jsxs)(n.p,{children:["The expansion function accepts two arguments, a ",(0,r.jsx)(n.em,{children:"form"})," and an ",(0,r.jsx)(n.em,{children:"environment"}),". The expansion function returns a ",(0,r.jsx)(n.em,{children:"form"}),". The body of the expansion function is specified by ",(0,r.jsx)(n.em,{children:"forms"}),". ",(0,r.jsx)(n.em,{children:"Forms"})," are executed in order. The value of the last ",(0,r.jsx)(n.em,{children:"form"})," executed is returned as the expansion of the ",(0,r.jsx)(n.em,{children:"macro"}),". The body ",(0,r.jsx)(n.em,{children:"forms"})," of the expansion function (but not the ",(0,r.jsx)(n.em,{children:"lambda-list"}),") are implicitly enclosed in a ",(0,r.jsx)(n.em,{children:"block"})," whose name is ",(0,r.jsx)(n.em,{children:"name"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"lambda-list"})," conforms to the requirements described in Section 3.4.4 (Macro Lambda Lists)."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Documentation"})," is attached as a ",(0,r.jsx)(n.em,{children:"documentation string"})," to ",(0,r.jsx)(n.em,{children:"name"})," (as kind ",(0,r.jsx)(n.strong,{children:"function"}),") and to the ",(0,r.jsx)(n.em,{children:"macro function"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"defmacro"})," can be used to redefine a ",(0,r.jsx)(n.em,{children:"macro"})," or to replace a ",(0,r.jsx)(n.em,{children:"function"})," definition with a ",(0,r.jsx)(n.em,{children:"macro"})," definition."]}),"\n",(0,r.jsxs)(n.p,{children:["Recursive expansion of the ",(0,r.jsx)(n.em,{children:"form"})," returned must terminate, including the expansion of other ",(0,r.jsx)(n.em,{children:"macros"})," which are ",(0,r.jsx)(n.em,{children:"subforms"})," of other ",(0,r.jsx)(n.em,{children:"forms"})," returned."]}),"\n",(0,r.jsxs)(n.p,{children:["The consequences are undefined if the result of fully macroexpanding a ",(0,r.jsx)(n.em,{children:"form"})," contains any ",(0,r.jsx)(n.em,{children:"circular list structure"})," except in ",(0,r.jsx)(n.em,{children:"literal objects"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If a ",(0,r.jsx)(n.strong,{children:"defmacro"})," ",(0,r.jsx)(n.em,{children:"form"})," appears as a ",(0,r.jsx)(n.em,{children:"top level form"}),", the ",(0,r.jsx)(n.em,{children:"compiler"})," must store the ",(0,r.jsx)(n.em,{children:"macro"})," definition at compile time, so that occurrences of the macro later on in the file can be expanded correctly. Users must ensure that the body of the ",(0,r.jsx)(n.em,{children:"macro"})," can be evaluated at compile time if it is referenced within the ",(0,r.jsx)(n.em,{children:"file"})," being ",(0,r.jsx)(n.em,{children:"compiled"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.p,{children:'(defmacro mac1 (a b) "Mac1 multiplies and adds"'}),"\n",(0,r.jsxs)(n.p,{children:["\u2018(+ ,a (* ,b 3))) ",(0,r.jsx)(n.em,{children:"\u2192"})," MAC1"]}),"\n",(0,r.jsxs)(n.p,{children:["(mac1 4 5) ",(0,r.jsx)(n.em,{children:"\u2192"})," 19"]}),"\n",(0,r.jsxs)(n.p,{children:["(documentation \u2019mac1 \u2019function) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "Mac1 multiplies and adds"']}),"\n",(0,r.jsxs)(n.p,{children:["(defmacro mac2 (&optional (a 2 b) (c 3 d) &rest x) \u2018\u2019(,a ,b ,c ,d ,x)) ",(0,r.jsx)(n.em,{children:"\u2192"})," MAC2 (mac2 6) ",(0,r.jsx)(n.em,{children:"\u2192"})," (6 T 3 NIL NIL)"]}),"\n",(0,r.jsxs)(n.p,{children:["(mac2 6 3 8) ",(0,r.jsx)(n.em,{children:"\u2192"})," (6 T 3 T (8))"]}),"\n",(0,r.jsx)(n.p,{children:"(defmacro mac3 (&whole r a &optional (b 3) &rest x &key c (d a))"}),"\n",(0,r.jsxs)(n.p,{children:["\u2018\u2019(,r ,a ,b ,c ,d ,x)) ",(0,r.jsx)(n.em,{children:"\u2192"})," MAC3"]}),"\n",(0,r.jsxs)(n.p,{children:["(mac3 1 6 ",":d"," 8 ",":c"," 9 ",":d"," 10) ",(0,r.jsx)(n.em,{children:"\u2192"})," ((MAC3 1 6 ",":D"," 8 ",":C"," 9 ",":D"," 10) 1 6 9 8 (",":D"," 8 ",":C"," 9 ",":D"," 10))"]}),"\n",(0,r.jsxs)(n.p,{children:["The stipulation that an embedded ",(0,r.jsx)(n.em,{children:"destructuring lambda list"})," is permitted only where ",(0,r.jsx)(n.em,{children:"ordinary lambda list"})," syntax would permit a parameter name but not a ",(0,r.jsx)(n.em,{children:"list"})," is made to prevent ambiguity. For example, the following is not valid:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"defmacro"})}),"\n",(0,r.jsx)(n.p,{children:"(defmacro loser (x &optional (a b &rest c) &rest z)"}),"\n",(0,r.jsx)(n.p,{children:"...)"}),"\n",(0,r.jsxs)(n.p,{children:["because ",(0,r.jsx)(n.em,{children:"ordinary lambda list"})," syntax does permit a ",(0,r.jsx)(n.em,{children:"list"})," following &optional; the list (a b &rest c) would be interpreted as describing an optional parameter named a whose default value is that of the form b, with a supplied-p parameter named ",(0,r.jsx)(n.strong,{children:"&rest"})," (not valid), and an extraneous symbol c in the list (also not valid). An almost correct way to express this is"]}),"\n",(0,r.jsx)(n.p,{children:"(defmacro loser (x &optional ((a b &rest c)) &rest z)"}),"\n",(0,r.jsx)(n.p,{children:"...)"}),"\n",(0,r.jsxs)(n.p,{children:["The extra set of parentheses removes the ambiguity. However, the definition is now incorrect because a macro call such as (loser (car pool)) would not provide any argument form for the lambda list (a b &rest c), and so the default value against which to match the ",(0,r.jsx)(n.em,{children:"lambda list"})," would be ",(0,r.jsx)(n.strong,{children:"nil"})," because no explicit default value was specified. The consequences of this are unspecified since the empty list, ",(0,r.jsx)(n.strong,{children:"nil"}),", does not have ",(0,r.jsx)(n.em,{children:"forms"})," to satisfy the parameters a and b. The fully correct definition would be either"]}),"\n",(0,r.jsx)(n.p,{children:"(defmacro loser (x &optional ((a b &rest c) \u2019(nil nil)) &rest z)"}),"\n",(0,r.jsx)(n.p,{children:"...)"}),"\n",(0,r.jsx)(n.p,{children:"or"}),"\n",(0,r.jsx)(n.p,{children:"(defmacro loser (x &optional ((&optional a b &rest c)) &rest z)"}),"\n",(0,r.jsx)(n.p,{children:"...)"}),"\n",(0,r.jsx)(n.p,{children:"These differ slightly: the first requires that if the macro call specifies a explicitly then it must also specify b explicitly, whereas the second does not have this requirement. For example,"}),"\n",(0,r.jsx)(n.p,{children:"(loser (car pool) ((+ x 1)))"}),"\n",(0,r.jsx)(n.p,{children:"would be a valid call for the second definition but not for the first."}),"\n",(0,r.jsx)(n.p,{children:"(defmacro dm1a (&whole x) \u2018\u2019,x)"}),"\n",(0,r.jsxs)(n.p,{children:["(macroexpand \u2019(dm1a)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (QUOTE (DM1A))"]}),"\n",(0,r.jsx)(n.p,{children:"(macroexpand \u2019(dm1a a)) is an error."}),"\n",(0,r.jsx)(n.p,{children:"(defmacro dm1b (&whole x a &optional b) \u2018\u2019(,x ,a ,b))"}),"\n",(0,r.jsx)(n.p,{children:"(macroexpand \u2019(dm1b)) is an error."}),"\n",(0,r.jsxs)(n.p,{children:["(macroexpand \u2019(dm1b q)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (QUOTE ((DM1B Q) Q NIL))"]}),"\n",(0,r.jsxs)(n.p,{children:["(macroexpand \u2019(dm1b q r)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (QUOTE ((DM1B Q R) Q R))"]}),"\n",(0,r.jsx)(n.p,{children:"(macroexpand \u2019(dm1b q r s)) is an error."}),"\n",(0,r.jsx)(n.p,{children:"(defmacro dm2a (&whole form a b) \u2018\u2019(form ,form a ,a b ,b))"}),"\n",(0,r.jsxs)(n.p,{children:["(macroexpand \u2019(dm2a x y)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (QUOTE (FORM (DM2A X Y) A X B Y))"]}),"\n",(0,r.jsxs)(n.p,{children:["(dm2a x y) ",(0,r.jsx)(n.em,{children:"\u2192"})," (FORM (DM2A X Y) A X B Y)"]}),"\n",(0,r.jsx)(n.p,{children:"(defmacro dm2b (&whole form a (&whole b (c . d) &optional (e 5))"}),"\n",(0,r.jsx)(n.p,{children:"&body f &environment env)"}),"\n",(0,r.jsx)(n.p,{children:"\u201c(,\u2019,form \u201ea ,\u2019,b ,\u2019,(macroexpand c env) ,\u2019,d ,\u2019,e ,\u2019,f))"}),"\n",(0,r.jsx)(n.p,{children:";Note that because backquote is involved, implementations may differ"}),"\n",(0,r.jsx)(n.p,{children:";slightly in the nature (though not the functionality) of the expansion."}),"\n",(0,r.jsx)(n.p,{children:"(macroexpand \u2019(dm2b x1 (((incf x2) x3 x4)) x5 x6))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," (LIST* \u2019(DM2B X1 (((INCF X2) X3 X4))"]}),"\n",(0,r.jsx)(n.p,{children:"X5 X6)"}),"\n",(0,r.jsx)(n.p,{children:"X1"}),"\n",(0,r.jsx)(n.p,{children:"\u2019((((INCF X2) X3 X4)) (SETQ X2 (+ X2 1)) (X3 X4) 5 (X5 X6))),"}),"\n",(0,r.jsx)(n.p,{children:"T"}),"\n",(0,r.jsx)(n.p,{children:"(let ((x1 5))"}),"\n",(0,r.jsx)(n.p,{children:"(macrolet ((segundo (x) \u2018(cadr ,x)))"}),"\n",(0,r.jsx)(n.p,{children:"(dm2b x1 (((segundo x2) x3 x4)) x5 x6)))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," ((DM2B X1 (((SEGUNDO X2) X3 X4)) X5 X6)"]}),"\n",(0,r.jsx)(n.p,{children:"5 (((SEGUNDO X2) X3 X4)) (CADR X2) (X3 X4) 5 (X5 X6))"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"define-compiler-macro"}),", ",(0,r.jsx)(n.strong,{children:"destructuring-bind"}),", ",(0,r.jsx)(n.strong,{children:"documentation"}),", ",(0,r.jsx)(n.strong,{children:"macroexpand"}),","]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*macroexpand-hook*"}),", ",(0,r.jsx)(n.strong,{children:"macrolet"}),", ",(0,r.jsx)(n.strong,{children:"macro-function"}),", Section 3.1 (Evaluation), Section 3.2 (Compilation), Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"macro-function"})," ",(0,r.jsx)(n.em,{children:"Accessor"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"macro-function"})," ",(0,r.jsx)(n.em,{children:"symbol"})," &optional ",(0,r.jsx)(n.em,{children:"environment \u2192 function"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"(setf (macro-function"})," ",(0,r.jsx)(n.em,{children:"symbol"})," &optional ",(0,r.jsx)(n.em,{children:"environment"}),"**)** ",(0,r.jsx)(n.em,{children:"new-function"}),"**)**"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"symbol"}),"\u2014a ",(0,r.jsx)(n.em,{children:"symbol"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"environment"}),"\u2014an ",(0,r.jsx)(n.em,{children:"environment object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"function"}),"\u2014a ",(0,r.jsx)(n.em,{children:"macro function"})," or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"new-function"}),"\u2014a ",(0,r.jsx)(n.em,{children:"macro function"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Determines whether ",(0,r.jsx)(n.em,{children:"symbol"})," has a function definition as a macro in the specified ",(0,r.jsx)(n.em,{children:"environment"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If so, the macro expansion function, a function of two arguments, is returned. If ",(0,r.jsx)(n.em,{children:"symbol"})," has no function definition in the lexical environment ",(0,r.jsx)(n.em,{children:"environment"}),", or its definition is not a ",(0,r.jsx)(n.em,{children:"macro"}),", ",(0,r.jsx)(n.strong,{children:"macro-function"})," returns ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["It is possible for both ",(0,r.jsx)(n.strong,{children:"macro-function"})," and ",(0,r.jsx)(n.strong,{children:"special-operator-p"})," to return ",(0,r.jsx)(n.em,{children:"true"})," of ",(0,r.jsx)(n.em,{children:"symbol"}),". The ",(0,r.jsx)(n.em,{children:"macro"})," definition must be available for use by programs that understand only the standard Common Lisp ",(0,r.jsx)(n.em,{children:"special forms"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:["(defmacro macfun (x) \u2019(macro-function \u2019macfun)) ",(0,r.jsx)(n.em,{children:"\u2192"})," MACFUN"]}),"\n",(0,r.jsxs)(n.p,{children:["(not (macro-function \u2019macfun)) ",(0,r.jsx)(n.em,{children:"\u2192 false"})]}),"\n",(0,r.jsx)(n.p,{children:"(macrolet ((foo (&environment env)"}),"\n",(0,r.jsx)(n.p,{children:"(if (macro-function \u2019bar env)"}),"\n",(0,r.jsx)(n.p,{children:"\u201dyes"}),"\n",(0,r.jsx)(n.p,{children:"\u201dno)))"}),"\n",(0,r.jsx)(n.p,{children:"(list (foo)"}),"\n",(0,r.jsxs)(n.p,{children:["(macrolet ((bar () ",":beep","))"]}),"\n",(0,r.jsx)(n.p,{children:"(foo))))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," (NO YES)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:["(setf macro-function), ",(0,r.jsx)(n.strong,{children:"defmacro"}),", and ",(0,r.jsx)(n.strong,{children:"macrolet"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["The consequences are undefined if ",(0,r.jsx)(n.em,{children:"environment"})," is ",(0,r.jsx)(n.em,{children:"non-nil"})," in a use of ",(0,r.jsx)(n.strong,{children:"setf"})," of ",(0,r.jsx)(n.strong,{children:"macro-function"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"defmacro"}),", Section 3.1 (Evaluation)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"setf"})," can be used with ",(0,r.jsx)(n.strong,{children:"macro-function"})," to install a ",(0,r.jsx)(n.em,{children:"macro"})," as a symbol\u2019s global function definition: (setf (macro-function symbol) fn)"]}),"\n",(0,r.jsxs)(n.p,{children:["The value installed must be a ",(0,r.jsx)(n.em,{children:"function"})," that accepts two arguments, the entire macro call and an ",(0,r.jsx)(n.em,{children:"environment"}),", and computes the expansion for that call. Performing this operation causes ",(0,r.jsx)(n.em,{children:"symbol"})," to have only that macro definition as its global function definition; any previous definition, whether as a ",(0,r.jsx)(n.em,{children:"macro"})," or as a ",(0,r.jsx)(n.em,{children:"function"}),", is lost."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"macroexpand, macroexpand-1"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"macroexpand, macroexpand-1"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"macroexpand"})," ",(0,r.jsx)(n.em,{children:"form"})," &optional ",(0,r.jsx)(n.em,{children:"env \u2192 expansion, expanded-p"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"macroexpand-1"})," ",(0,r.jsx)(n.em,{children:"form"})," &optional ",(0,r.jsx)(n.em,{children:"env \u2192 expansion, expanded-p"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"form"}),"\u2014a ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"env"}),"\u2014an ",(0,r.jsx)(n.em,{children:"environment object"}),". The default is ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"expansion"}),"\u2014a ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"expanded-p"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"macroexpand"})," and ",(0,r.jsx)(n.strong,{children:"macroexpand-1"})," expand ",(0,r.jsx)(n.em,{children:"macros"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"form"})," is a ",(0,r.jsx)(n.em,{children:"macro form"}),", then ",(0,r.jsx)(n.strong,{children:"macroexpand-1"})," expands the ",(0,r.jsx)(n.em,{children:"macro form"})," call once."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"macroexpand"})," repeatedly expands ",(0,r.jsx)(n.em,{children:"form"})," until it is no longer a ",(0,r.jsx)(n.em,{children:"macro form"}),". In effect, ",(0,r.jsx)(n.strong,{children:"macroexpand"})," calls ",(0,r.jsx)(n.strong,{children:"macroexpand-1"})," repeatedly until the ",(0,r.jsx)(n.em,{children:"secondary value"})," it returns is ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"form"})," is a ",(0,r.jsx)(n.em,{children:"macro form"}),", then the ",(0,r.jsx)(n.em,{children:"expansion"})," is a ",(0,r.jsx)(n.em,{children:"macro expansion"})," and ",(0,r.jsx)(n.em,{children:"expanded-p"})," is ",(0,r.jsx)(n.em,{children:"true"}),". Otherwise, the ",(0,r.jsx)(n.em,{children:"expansion"})," is the given ",(0,r.jsx)(n.em,{children:"form"})," and ",(0,r.jsx)(n.em,{children:"expanded-p"})," is ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Macro expansion is carried out as follows. Once ",(0,r.jsx)(n.strong,{children:"macroexpand-1"})," has determined that the ",(0,r.jsx)(n.em,{children:"form"})," is a ",(0,r.jsx)(n.em,{children:"macro form"}),", it obtains an appropriate expansion ",(0,r.jsx)(n.em,{children:"function"})," for the ",(0,r.jsx)(n.em,{children:"macro"})," or ",(0,r.jsx)(n.em,{children:"symbol macro"}),". The value of ",(0,r.jsx)(n.strong,{children:"*macroexpand-hook*"})," is coerced to a ",(0,r.jsx)(n.em,{children:"function"})," and then called as a ",(0,r.jsx)(n.em,{children:"function"})," of three arguments: the expansion ",(0,r.jsx)(n.em,{children:"function"}),", the ",(0,r.jsx)(n.em,{children:"form"}),", and the ",(0,r.jsx)(n.em,{children:"env"}),". The ",(0,r.jsx)(n.em,{children:"value"})," returned from this call is taken to be the expansion of the ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["In addition to ",(0,r.jsx)(n.em,{children:"macro"})," definitions in the global environment, any local macro definitions established within ",(0,r.jsx)(n.em,{children:"env"})," by ",(0,r.jsx)(n.strong,{children:"macrolet"})," or ",(0,r.jsx)(n.strong,{children:"symbol-macrolet"})," are considered. If only ",(0,r.jsx)(n.em,{children:"form"})," is supplied as an argument, then the environment is effectively null, and only global macro definitions as established by ",(0,r.jsx)(n.strong,{children:"defmacro"})," are considered. ",(0,r.jsx)(n.em,{children:"Macro"})," definitions are shadowed by local ",(0,r.jsx)(n.em,{children:"function"})," definitions."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:["(defmacro alpha (x y) \u2018(beta ,x ,y)) ",(0,r.jsx)(n.em,{children:"\u2192"})," ALPHA"]}),"\n",(0,r.jsxs)(n.p,{children:["(defmacro beta (x y) \u2018(gamma ,x ,y)) ",(0,r.jsx)(n.em,{children:"\u2192"})," BETA"]}),"\n",(0,r.jsxs)(n.p,{children:["(defmacro delta (x y) \u2018(gamma ,x ,y)) ",(0,r.jsx)(n.em,{children:"\u2192"})," EPSILON"]}),"\n",(0,r.jsx)(n.p,{children:"(defmacro expand (form &environment env)"}),"\n",(0,r.jsx)(n.p,{children:"(multiple-value-bind (expansion expanded-p)"}),"\n",(0,r.jsx)(n.p,{children:"(macroexpand form env)"}),"\n",(0,r.jsxs)(n.p,{children:["\u2018(values \u2019,expansion \u2019,expanded-p))) ",(0,r.jsx)(n.em,{children:"\u2192"})," EXPAND"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"macroexpand, macroexpand-1"})}),"\n",(0,r.jsx)(n.p,{children:"(defmacro expand-1 (form &environment env)"}),"\n",(0,r.jsx)(n.p,{children:"(multiple-value-bind (expansion expanded-p)"}),"\n",(0,r.jsx)(n.p,{children:"(macroexpand-1 form env)"}),"\n",(0,r.jsxs)(n.p,{children:["\u2018(values \u2019,expansion \u2019,expanded-p))) ",(0,r.jsx)(n.em,{children:"\u2192"})," EXPAND-1"]}),"\n",(0,r.jsx)(n.p,{children:";; Simple examples involving just the global environment"}),"\n",(0,r.jsxs)(n.p,{children:["(macroexpand-1 \u2019(alpha a b)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (BETA A B), ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsxs)(n.p,{children:["(expand-1 (alpha a b)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (BETA A B), ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsxs)(n.p,{children:["(macroexpand \u2019(alpha a b)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (GAMMA A B), ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsxs)(n.p,{children:["(expand (alpha a b)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (GAMMA A B), ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsxs)(n.p,{children:["(macroexpand-1 \u2019not-a-macro) ",(0,r.jsx)(n.em,{children:"\u2192"})," NOT-A-MACRO, ",(0,r.jsx)(n.em,{children:"false"})]}),"\n",(0,r.jsxs)(n.p,{children:["(expand-1 not-a-macro) ",(0,r.jsx)(n.em,{children:"\u2192"})," NOT-A-MACRO, ",(0,r.jsx)(n.em,{children:"false"})]}),"\n",(0,r.jsxs)(n.p,{children:["(macroexpand \u2019(not-a-macro a b)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (NOT-A-MACRO A B), ",(0,r.jsx)(n.em,{children:"false"})]}),"\n",(0,r.jsxs)(n.p,{children:["(expand (not-a-macro a b)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (NOT-A-MACRO A B), ",(0,r.jsx)(n.em,{children:"false"})]}),"\n",(0,r.jsx)(n.p,{children:";; Examples involving lexical environments"}),"\n",(0,r.jsx)(n.p,{children:"(macrolet ((alpha (x y) \u2018(delta ,x ,y)))"}),"\n",(0,r.jsxs)(n.p,{children:["(macroexpand-1 \u2019(alpha a b))) ",(0,r.jsx)(n.em,{children:"\u2192"})," (BETA A B), ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsx)(n.p,{children:"(macrolet ((alpha (x y) \u2018(delta ,x ,y)))"}),"\n",(0,r.jsxs)(n.p,{children:["(expand-1 (alpha a b))) ",(0,r.jsx)(n.em,{children:"\u2192"})," (DELTA A B), ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsx)(n.p,{children:"(macrolet ((alpha (x y) \u2018(delta ,x ,y)))"}),"\n",(0,r.jsxs)(n.p,{children:["(macroexpand \u2019(alpha a b))) ",(0,r.jsx)(n.em,{children:"\u2192"})," (GAMMA A B), ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsx)(n.p,{children:"(macrolet ((alpha (x y) \u2018(delta ,x ,y)))"}),"\n",(0,r.jsxs)(n.p,{children:["(expand (alpha a b))) ",(0,r.jsx)(n.em,{children:"\u2192"})," (GAMMA A B), ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsx)(n.p,{children:"(macrolet ((beta (x y) \u2018(epsilon ,x ,y)))"}),"\n",(0,r.jsxs)(n.p,{children:["(expand (alpha a b))) ",(0,r.jsx)(n.em,{children:"\u2192"})," (EPSILON A B), ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsx)(n.p,{children:"(let ((x (list 1 2 3)))"}),"\n",(0,r.jsx)(n.p,{children:"(symbol-macrolet ((a (first x)))"}),"\n",(0,r.jsxs)(n.p,{children:["(expand a))) ",(0,r.jsx)(n.em,{children:"\u2192"})," (FIRST X), ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsx)(n.p,{children:"(let ((x (list 1 2 3)))"}),"\n",(0,r.jsx)(n.p,{children:"(symbol-macrolet ((a (first x)))"}),"\n",(0,r.jsxs)(n.p,{children:["(macroexpand \u2019a))) ",(0,r.jsx)(n.em,{children:"\u2192"})," A, ",(0,r.jsx)(n.em,{children:"false"})]}),"\n",(0,r.jsx)(n.p,{children:"(symbol-macrolet ((b (alpha x y)))"}),"\n",(0,r.jsxs)(n.p,{children:["(expand-1 b)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (ALPHA X Y), ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsx)(n.p,{children:"(symbol-macrolet ((b (alpha x y)))"}),"\n",(0,r.jsxs)(n.p,{children:["(expand b)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (GAMMA X Y), ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsx)(n.p,{children:"(symbol-macrolet ((b (alpha x y))"}),"\n",(0,r.jsx)(n.p,{children:"(a b))"}),"\n",(0,r.jsxs)(n.p,{children:["(expand-1 a)) ",(0,r.jsx)(n.em,{children:"\u2192"})," B, ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsx)(n.p,{children:"(symbol-macrolet ((b (alpha x y))"}),"\n",(0,r.jsx)(n.p,{children:"(a b))"}),"\n",(0,r.jsxs)(n.p,{children:["(expand a)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (GAMMA X Y), ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsx)(n.p,{children:";; Examples of shadowing behavior"}),"\n",(0,r.jsx)(n.p,{children:"(flet ((beta (x y) (+ x y)))"}),"\n",(0,r.jsxs)(n.p,{children:["(expand (alpha a b))) ",(0,r.jsx)(n.em,{children:"\u2192"})," (BETA A B), ",(0,r.jsx)(n.em,{children:"true"})]}),"\n",(0,r.jsx)(n.p,{children:"(macrolet ((alpha (x y) \u2018(delta ,x ,y)))"}),"\n",(0,r.jsx)(n.p,{children:"(flet ((alpha (x y) (+ x y)))"}),"\n",(0,r.jsxs)(n.p,{children:["(expand (alpha a b)))) ",(0,r.jsx)(n.em,{children:"\u2192"})," (ALPHA A B), ",(0,r.jsx)(n.em,{children:"false"})]}),"\n",(0,r.jsx)(n.p,{children:"(let ((x (list 1 2 3)))"}),"\n",(0,r.jsx)(n.p,{children:"(symbol-macrolet ((a (first x)))"}),"\n",(0,r.jsx)(n.p,{children:"(let ((a x))"}),"\n",(0,r.jsxs)(n.p,{children:["(expand a)))) ",(0,r.jsx)(n.em,{children:"\u2192"})," A, ",(0,r.jsx)(n.em,{children:"false"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"defmacro"}),", ",(0,r.jsx)(n.strong,{children:"setf"})," of ",(0,r.jsx)(n.strong,{children:"macro-function"}),", ",(0,r.jsx)(n.strong,{children:"macrolet"}),", ",(0,r.jsx)(n.strong,{children:"symbol-macrolet"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*macroexpand-hook*"}),", ",(0,r.jsx)(n.strong,{children:"defmacro"}),", ",(0,r.jsx)(n.strong,{children:"setf"})," of ",(0,r.jsx)(n.strong,{children:"macro-function"}),", ",(0,r.jsx)(n.strong,{children:"macrolet"}),", ",(0,r.jsx)(n.strong,{children:"symbol-macrolet"}),", Section 3.1 (Evaluation)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["Neither ",(0,r.jsx)(n.strong,{children:"macroexpand"})," nor ",(0,r.jsx)(n.strong,{children:"macroexpand-1"})," makes any explicit attempt to expand ",(0,r.jsx)(n.em,{children:"macro forms"})," that are either ",(0,r.jsx)(n.em,{children:"subforms"})," of the ",(0,r.jsx)(n.em,{children:"form"})," or ",(0,r.jsx)(n.em,{children:"subforms"})," of the ",(0,r.jsx)(n.em,{children:"expansion"}),". Such expansion might occur implicitly, however, due to the semantics or implementation of the ",(0,r.jsx)(n.em,{children:"macro function"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"define-symbol-macro"})," ",(0,r.jsx)(n.em,{children:"Macro"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"define-symbol-macro"})," ",(0,r.jsx)(n.em,{children:"symbol expansion"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"\u2192 symbol"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"symbol"}),"\u2014a ",(0,r.jsx)(n.em,{children:"symbol"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"expansion"}),"\u2014a ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Provides a mechanism for globally affecting the ",(0,r.jsx)(n.em,{children:"macro expansion"})," of the indicated ",(0,r.jsx)(n.em,{children:"symbol"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Globally establishes an expansion function for the ",(0,r.jsx)(n.em,{children:"symbol macro"})," named by ",(0,r.jsx)(n.em,{children:"symbol"}),". The only guaranteed property of an expansion ",(0,r.jsx)(n.em,{children:"function"})," for a ",(0,r.jsx)(n.em,{children:"symbol macro"})," is that when it is applied to the ",(0,r.jsx)(n.em,{children:"form"})," and the ",(0,r.jsx)(n.em,{children:"environment"})," it returns the correct expansion. (In particular, it is ",(0,r.jsx)(n.em,{children:"implementation dependent"})," whether the expansion is conceptually stored in the expansion function, the ",(0,r.jsx)(n.em,{children:"environment"}),", or both.)"]}),"\n",(0,r.jsxs)(n.p,{children:["Each global reference to ",(0,r.jsx)(n.em,{children:"symbol"})," (",(0,r.jsx)(n.em,{children:"i.e."}),", not ",(0,r.jsx)(n.em,{children:"shadowed"})," <sub>2</sub> by a ",(0,r.jsx)(n.em,{children:"binding"})," for a ",(0,r.jsx)(n.em,{children:"variable"})," or ",(0,r.jsx)(n.em,{children:"symbol macro"})," named by the same ",(0,r.jsx)(n.em,{children:"symbol"}),") is expanded by the normal macro expansion process; see Section 3.1.2.1.1 (Symbols as Forms). The expansion of a ",(0,r.jsx)(n.em,{children:"symbol macro"})," is subject to further ",(0,r.jsx)(n.em,{children:"macro expansion"})," in the same ",(0,r.jsx)(n.em,{children:"lexical environment"})," as the ",(0,r.jsx)(n.em,{children:"symbol macro"})," reference, exactly analogous to normal ",(0,r.jsx)(n.em,{children:"macros"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The consequences are unspecified if a ",(0,r.jsx)(n.strong,{children:"special"})," declaration is made for ",(0,r.jsx)(n.em,{children:"symbol"})," while in the scope of this definition (",(0,r.jsx)(n.em,{children:"i.e."}),", when it is not ",(0,r.jsx)(n.em,{children:"shadowed"})," <sub>2</sub> by a ",(0,r.jsx)(n.em,{children:"binding"})," for a ",(0,r.jsx)(n.em,{children:"variable"})," or ",(0,r.jsx)(n.em,{children:"symbol macro"})," named by the same ",(0,r.jsx)(n.em,{children:"symbol"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["Any use of ",(0,r.jsx)(n.strong,{children:"setq"})," to set the value of the ",(0,r.jsx)(n.em,{children:"symbol"})," while in the scope of this definition is treated as if it were a ",(0,r.jsx)(n.strong,{children:"setf"}),". ",(0,r.jsx)(n.strong,{children:"psetq"})," of ",(0,r.jsx)(n.em,{children:"symbol"})," is treated as if it were a ",(0,r.jsx)(n.strong,{children:"psetf"}),", and ",(0,r.jsx)(n.strong,{children:"multiple-value-setq"})," is treated as if it were a ",(0,r.jsx)(n.strong,{children:"setf"})," of ",(0,r.jsx)(n.strong,{children:"values"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.em,{children:"binding"})," for a ",(0,r.jsx)(n.em,{children:"symbol macro"})," can be ",(0,r.jsx)(n.em,{children:"shadowed"})," <sub>2</sub> by ",(0,r.jsx)(n.strong,{children:"let"})," or ",(0,r.jsx)(n.strong,{children:"symbol-macrolet"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:["(defvar *things* (list \u2019alpha \u2019beta \u2019gamma)) ",(0,r.jsx)(n.em,{children:"\u2192"})," *THINGS*"]}),"\n",(0,r.jsxs)(n.p,{children:["(define-symbol-macro thing1 (first *things*)) ",(0,r.jsx)(n.em,{children:"\u2192"})," THING1"]}),"\n",(0,r.jsxs)(n.p,{children:["(define-symbol-macro thing2 (second *things*)) ",(0,r.jsx)(n.em,{children:"\u2192"})," THING2"]}),"\n",(0,r.jsxs)(n.p,{children:["(define-symbol-macro thing3 (third *things*)) ",(0,r.jsx)(n.em,{children:"\u2192"})," THING3"]}),"\n",(0,r.jsxs)(n.p,{children:["thing1 ",(0,r.jsx)(n.em,{children:"\u2192"})," ALPHA"]}),"\n",(0,r.jsxs)(n.p,{children:["(setq thing1 \u2019ONE) ",(0,r.jsx)(n.em,{children:"\u2192"})," ONE"]}),"\n",(0,r.jsxs)(n.p,{children:["*things* ",(0,r.jsx)(n.em,{children:"\u2192"})," (ONE BETA GAMMA)"]}),"\n",(0,r.jsxs)(n.p,{children:["(multiple-value-setq (thing2 thing3) (values \u2019two \u2019three)) ",(0,r.jsx)(n.em,{children:"\u2192"})," TWO"]}),"\n",(0,r.jsxs)(n.p,{children:["thing3 ",(0,r.jsx)(n.em,{children:"\u2192"})," THREE"]}),"\n",(0,r.jsxs)(n.p,{children:["*things* ",(0,r.jsx)(n.em,{children:"\u2192"})," (ONE TWO THREE)"]}),"\n",(0,r.jsxs)(n.p,{children:["(list thing2 (let ((thing2 2)) thing2)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (TWO 2)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"symbol"})," is already defined as a ",(0,r.jsx)(n.em,{children:"global variable"}),", an error of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"program-error"})," is signaled."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"symbol-macrolet"}),", ",(0,r.jsx)(n.strong,{children:"macroexpand"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"symbol-macrolet"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"symbol-macrolet"})," ",(0,r.jsx)(n.em,{children:"Special Operator"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"symbol-macrolet"})," (",(0,r.jsx)(n.em,{children:"{"}),"(",(0,r.jsx)(n.em,{children:"symbol expansion"}),")",(0,r.jsx)(n.em,{children:"}"}),"*) ",(0,r.jsx)(n.em,{children:"{declaration}"}),"* ",(0,r.jsx)(n.em,{children:"{form}"}),"*"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192 {result}"}),"*"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"symbol"}),"\u2014a ",(0,r.jsx)(n.em,{children:"symbol"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"expansion"}),"\u2014a ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,r.jsx)(n.strong,{children:"declare"})," ",(0,r.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"forms"}),"\u2014an ",(0,r.jsx)(n.em,{children:"implicit progn"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"results"}),"\u2014the ",(0,r.jsx)(n.em,{children:"values"})," returned by the ",(0,r.jsx)(n.em,{children:"forms"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"symbol-macrolet"})," provides a mechanism for affecting the ",(0,r.jsx)(n.em,{children:"macro expansion"})," environment for ",(0,r.jsx)(n.em,{children:"symbols"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"symbol-macrolet"})," lexically establishes expansion functions for each of the ",(0,r.jsx)(n.em,{children:"symbol macros"})," named by ",(0,r.jsx)(n.em,{children:"symbols"}),". The only guaranteed property of an expansion ",(0,r.jsx)(n.em,{children:"function"})," for a ",(0,r.jsx)(n.em,{children:"symbol macro"})," is that when it is applied to the ",(0,r.jsx)(n.em,{children:"form"})," and the ",(0,r.jsx)(n.em,{children:"environment"})," it returns the correct expansion. (In particular, it is ",(0,r.jsx)(n.em,{children:"implementation-dependent"})," whether the expansion is conceptually stored in the expansion function, the ",(0,r.jsx)(n.em,{children:"environment"}),", or both.)"]}),"\n",(0,r.jsxs)(n.p,{children:["Each reference to ",(0,r.jsx)(n.em,{children:"symbol"})," as a variable within the lexical ",(0,r.jsx)(n.em,{children:"scope"})," of ",(0,r.jsx)(n.strong,{children:"symbol-macrolet"})," is expanded by the normal macro expansion process; see Section 3.1.2.1.1 (Symbols as Forms). The expansion of a symbol macro is subject to further macro expansion in the same lexical environment as the symbol macro invocation, exactly analogous to normal ",(0,r.jsx)(n.em,{children:"macros"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Exactly the same ",(0,r.jsx)(n.em,{children:"declarations"})," are allowed as for ",(0,r.jsx)(n.strong,{children:"let"})," with one exception: ",(0,r.jsx)(n.strong,{children:"symbol-macrolet"})," signals an error if a ",(0,r.jsx)(n.strong,{children:"special"})," declaration names one of the ",(0,r.jsx)(n.em,{children:"symbols"})," being defined by ",(0,r.jsx)(n.strong,{children:"symbol-macrolet"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["When the ",(0,r.jsx)(n.em,{children:"forms"})," of the ",(0,r.jsx)(n.strong,{children:"symbol-macrolet"})," form are expanded, any use of ",(0,r.jsx)(n.strong,{children:"setq"})," to set the value of one of the specified variables is treated as if it were a ",(0,r.jsx)(n.strong,{children:"setf"}),". ",(0,r.jsx)(n.strong,{children:"psetq"})," of a ",(0,r.jsx)(n.em,{children:"symbol"})," defined as a symbol macro is treated as if it were a ",(0,r.jsx)(n.strong,{children:"psetf"}),", and ",(0,r.jsx)(n.strong,{children:"multiple-value-setq"})," is treated as if it were a ",(0,r.jsx)(n.strong,{children:"setf"})," of ",(0,r.jsx)(n.strong,{children:"values"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The use of ",(0,r.jsx)(n.strong,{children:"symbol-macrolet"})," can be shadowed by ",(0,r.jsx)(n.strong,{children:"let"}),". In other words, ",(0,r.jsx)(n.strong,{children:"symbol-macrolet"})," only substitutes for occurrences of ",(0,r.jsx)(n.em,{children:"symbol"})," that would be in the ",(0,r.jsx)(n.em,{children:"scope"})," of a lexical binding of ",(0,r.jsx)(n.em,{children:"symbol"})," surrounding the ",(0,r.jsx)(n.em,{children:"forms"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.p,{children:";;; The following is equivalent to"}),"\n",(0,r.jsx)(n.p,{children:";;; (list \u2019foo (let ((x \u2019bar)) x)),"})]})}function x(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}const m={title:"3.7 Destructive Operations"},j="3.7 Destructive Operations",p={id:"chap-3/d-h-destructive-operations",title:"3.7 Destructive Operations",description:"3.7.1 Modification of Literal Objects",source:"@site/docs/chap-3/d-h-destructive-operations.md",sourceDirName:"chap-3",slug:"/chap-3/d-h-destructive-operations",permalink:"/cl-language-reference/docs/chap-3/d-h-destructive-operations",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/chap-3/d-h-destructive-operations.md",tags:[],version:"current",frontMatter:{title:"3.7 Destructive Operations"},sidebar:"tutorialSidebar",previous:{title:"3.6 Traversal Rules and Side Effects",permalink:"/cl-language-reference/docs/chap-3/d-g-traversal-rules-and-side-effects"},next:{title:"intro",permalink:"/cl-language-reference/docs/chap-3/intro"}},f={},u=[{value:"3.7.1 Modification of Literal Objects",id:"371-modification-of-literal-objects",level:2},{value:"3.7.2 Transfer of Control during a Destructive Operation",id:"372-transfer-of-control-during-a-destructive-operation",level:2},{value:"3.7.2.1 Examples of Transfer of Control during a Destructive Operation",id:"3721-examples-of-transfer-of-control-during-a-destructive-operation",level:3}];function g(e){const n={h1:"h1",h2:"h2",h3:"h3",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"37-destructive-operations",children:"3.7 Destructive Operations"}),"\n","\n",(0,r.jsx)(c,{}),"\n",(0,r.jsx)(n.h2,{id:"371-modification-of-literal-objects",children:"3.7.1 Modification of Literal Objects"}),"\n","\n",(0,r.jsx)(t,{}),"\n",(0,r.jsx)(n.h2,{id:"372-transfer-of-control-during-a-destructive-operation",children:"3.7.2 Transfer of Control during a Destructive Operation"}),"\n","\n",(0,r.jsx)(a,{}),"\n",(0,r.jsx)(n.h3,{id:"3721-examples-of-transfer-of-control-during-a-destructive-operation",children:"3.7.2.1 Examples of Transfer of Control during a Destructive Operation"}),"\n","\n","\n",(0,r.jsx)(x,{})]})}function b(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>c});var r=s(7294);const i={},l=r.createContext(i);function c(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);