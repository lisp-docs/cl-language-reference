"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[27462],{14120:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>x,toc:()=>p});var i=r(85893),s=r(11151);function t(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"exp, expt"})," ",(0,i.jsx)(n.em,{children:"Function"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"exp"})," ",(0,i.jsx)(n.em,{children:"number \u2192 result"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"expt"})," ",(0,i.jsx)(n.em,{children:"base-number power-number \u2192 result"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"number"}),"\u2014a ",(0,i.jsx)(n.em,{children:"number"})," ."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"base-number"}),"\u2014a ",(0,i.jsx)(n.em,{children:"number"})," ."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"power-number"}),"\u2014a ",(0,i.jsx)(n.em,{children:"number"})," ."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"result"}),"\u2014a ",(0,i.jsx)(n.em,{children:"number"})," ."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"exp"})," and ",(0,i.jsx)(n.strong,{children:"expt"})," perform exponentiation."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"exp"})," returns ",(0,i.jsx)(n.em,{children:"e"})," raised to the power ",(0,i.jsx)(n.em,{children:"number"}),", where ",(0,i.jsx)(n.em,{children:"e"})," is the base of the natural logarithms. ",(0,i.jsx)(n.strong,{children:"exp"})," has no branch cut."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"expt"})," returns ",(0,i.jsx)(n.em,{children:"base-number"})," raised to the power ",(0,i.jsx)(n.em,{children:"power-number"}),". If the ",(0,i.jsx)(n.em,{children:"base-number"})," is a ",(0,i.jsx)(n.em,{children:"rational"})," and ",(0,i.jsx)(n.em,{children:"power-number"})," is an ",(0,i.jsx)(n.em,{children:"integer"})," , the calculation is exact and the result will be of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"rational"}),"; otherwise a floating-point approximation might result. For ",(0,i.jsx)(n.strong,{children:"expt"})," of a ",(0,i.jsx)(n.em,{children:"complex rational"})," to an ",(0,i.jsx)(n.em,{children:"integer"})," power, the calculation must be exact and the result is of type (or rational (complex rational))."]}),"\n",(0,i.jsxs)(n.p,{children:["The result of ",(0,i.jsx)(n.strong,{children:"expt"})," can be a ",(0,i.jsx)(n.em,{children:"complex"})," , even when neither argument is a ",(0,i.jsx)(n.em,{children:"complex"})," , if ",(0,i.jsx)(n.em,{children:"base-number"})," is negative and ",(0,i.jsx)(n.em,{children:"power-number"})," is not an ",(0,i.jsx)(n.em,{children:"integer"})," . The result is always the ",(0,i.jsx)(n.em,{children:"principal complex value"}),". For example, (expt -8 1/3) is not permitted to return -2, even though -2 is one of the cube roots of -8. The ",(0,i.jsx)(n.em,{children:"principal"})," cube root is a ",(0,i.jsx)(n.em,{children:"complex"})," approximately equal to #C(1.0 1.73205), not -2."]}),"\n",(0,i.jsx)(n.p,{children:"<b>expt</b> is defined as <i>b<sup>x</sup> = e<sup>xlogb</sup></i>. This defines the <i>principal values</i> precisely. The range of <b>expt</b> is the entire complex plane. Regarded as a function of <i>x</i>, with <i>b</i> fixed, there is no branch cut. Regarded as a function of <i>b</i>, with <i>x</i> fixed, there is in general a branch cut along the negative real axis, continuous with quadrant II. The domain excludes the origin. By definition, 0<sup>0</sup>=1. If <i>b</i>=0 and the real part of <i>x</i> is strictly positive, then <i>b<sup>x</sup></i>=0. For all other values of <i>x</i>, 0<i><sup>x</sup></i>is an error."}),"\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.em,{children:"power-number"})," is an ",(0,i.jsx)(n.em,{children:"integer"})," 0, then the result is always the value one in the ",(0,i.jsx)(n.em,{children:"type"})," of ",(0,i.jsx)(n.em,{children:"base-number"}),", even if the ",(0,i.jsx)(n.em,{children:"base-number"})," is zero (of any ",(0,i.jsx)(n.em,{children:"type"}),"). That is:"]}),"\n",(0,i.jsxs)(n.p,{children:["(expt x 0) ",(0,i.jsx)(n.em,{children:"\u2261"})," (coerce 1 (type-of x))"]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.em,{children:"power-number"})," is a zero of any other ",(0,i.jsx)(n.em,{children:"type"}),", then the result is also the value one, in the ",(0,i.jsx)(n.em,{children:"type"})," of the arguments after the application of the contagion rules in Section 12.1.1.2 (Contagion in Numeric Operations), with one exception: the consequences are undefined if ",(0,i.jsx)(n.em,{children:"base-number"})," is zero when ",(0,i.jsx)(n.em,{children:"power-number"})," is zero and not of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"integer"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsxs)(n.p,{children:["(exp 0) ",(0,i.jsx)(n.em,{children:"\u2192"})," 1.0"]}),"\n",(0,i.jsxs)(n.p,{children:["(exp 1) ",(0,i.jsx)(n.em,{children:"\u2192"})," 2.718282"]}),"\n",(0,i.jsxs)(n.p,{children:["(exp (log 5)) ",(0,i.jsx)(n.em,{children:"\u2192"})," 5.0"]}),"\n",(0,i.jsxs)(n.p,{children:["(expt 2 8) ",(0,i.jsx)(n.em,{children:"\u2192"})," 256"]}),"\n",(0,i.jsxs)(n.p,{children:["(expt 4 .5) ",(0,i.jsx)(n.em,{children:"\u2192"})," 2.0"]}),"\n",(0,i.jsxs)(n.p,{children:["(expt #c(0 1) 2) ",(0,i.jsx)(n.em,{children:"\u2192"})," -1"]}),"\n",(0,i.jsxs)(n.p,{children:["(expt #c(2 2) 3) ",(0,i.jsx)(n.em,{children:"\u2192"})," #C(-16 16)"]}),"\n",(0,i.jsxs)(n.p,{children:["(expt #c(2 2) 4) ",(0,i.jsx)(n.em,{children:"\u2192"})," -64"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"log"}),", Section 12.1.3.3 (Rule of Float Substitutability)"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(n.p,{children:["Implementations of ",(0,i.jsx)(n.strong,{children:"expt"})," are permitted to use different algorithms for the cases of a ",(0,i.jsx)(n.em,{children:"power-number"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"rational"})," and a ",(0,i.jsx)(n.em,{children:"power-number"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"float"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that by the following logic, (sqrt (expt ",(0,i.jsx)(n.em,{children:"x"})," 3)) is not equivalent to (expt ",(0,i.jsx)(n.em,{children:"x"})," 3/2)."]}),"\n",(0,i.jsx)(n.p,{children:"(setq x (exp (/ (* 2 pi #c(0 1)) 3))) ;exp(2.pi.i/3)"}),"\n",(0,i.jsxs)(n.p,{children:["(expt x 3) ",(0,i.jsx)(n.em,{children:"\u2192"})," 1 ;except for round-off error"]}),"\n",(0,i.jsxs)(n.p,{children:["(sqrt (expt x 3)) ",(0,i.jsx)(n.em,{children:"\u2192"})," 1 ;except for round-off error"]}),"\n",(0,i.jsxs)(n.p,{children:["(expt x 3/2) ",(0,i.jsx)(n.em,{children:"\u2192"})," -1 ;except for round-off error"]})]})}function c(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}const o={},l="exp, expt",x={id:"chap-12/bc-c-dictionary/expaaexpt",title:"exp, expt",description:"Expanded Reference: exp, expt",source:"@site/docs/chap-12/bc-c-dictionary/expaaexpt.md",sourceDirName:"chap-12/bc-c-dictionary",slug:"/chap-12/bc-c-dictionary/expaaexpt",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/expaaexpt",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-12/bc-c-dictionary/expaaexpt.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"evenp, oddp",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/evenpaaoddp"},next:{title:"fixnum",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/fixnum"}},a={},p=[{value:"Expanded Reference: exp, expt",id:"expanded-reference-exp-expt",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"exp-expt",children:"exp, expt"}),"\n","\n","\n",(0,i.jsx)(c,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-exp-expt",children:"Expanded Reference: exp, expt"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(exp, expt )\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>c});var i=r(67294);const s={},t=i.createContext(s);function c(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);