"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[24647],{61813:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>x,frontMatter:()=>c,metadata:()=>o,toc:()=>u});var r=s(85893),t=s(11151);function l(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"values"})," ",(0,r.jsx)(n.em,{children:"Accessor"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"values"})," &rest ",(0,r.jsx)(n.em,{children:"object ! {object}"}),"*"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"(setf (values"})," &rest ",(0,r.jsx)(n.em,{children:"place"}),"**)** ",(0,r.jsx)(n.em,{children:"new-values"}),"**)**"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"object"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"place"}),"\u2014a ",(0,r.jsx)(n.em,{children:"place"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"new-value"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"values"})," returns the ",(0,r.jsx)(n.em,{children:"objects"})," as ",(0,r.jsx)(n.em,{children:"multiple values"}),(0,r.jsx)("sub",{children:"2"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"setf"})," of ",(0,r.jsx)(n.strong,{children:"values"})," is used to store the ",(0,r.jsx)(n.em,{children:"multiple values"}),(0,r.jsx)("sub",{children:"2"})," ",(0,r.jsx)(n.em,{children:"new-values"})," into the ",(0,r.jsx)(n.em,{children:"places"}),". See Section 5.1.2.3 (VALUES Forms as Places)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(values) \u2192 hno valuesi \n(values 1) \u2192 1 \n(values 1 2) \u2192 1, 2 \n(values 1 2 3) \u2192 1, 2, 3 \n(values (values 1 2 3) 4 5) \u2192 1, 4, 5 \n(defun polar (x y) \n  (values (sqrt (+ (\\* x x) (\\* y y))) (atan y x))) \u2192 POLAR \n(multiple-value-bind (r theta) (polar 3.0 4.0) \n  (vector r theta)) \n\u2192 #(5.0 0.927295) \nSometimes it is desirable to indicate explicitly that a function returns exactly one value. For example, the function \n(defun foo (x y) \n  (floor (+ x y) y)) \u2192 FOO \nreturns two values because **floor** returns two values. It may be that the second value makes no sense, or that for eciency reasons it is desired not to compute the second value. **values** is the standard idiom for indicating that only one value is to be returned: \n\n(defun foo (x y) \n  (values (floor (+ x y) y))) \u2192 FOO \nThis works because **values** returns exactly one value for each of *args*; as for any function call, if any of *args* produces more than one value, all but the first are discarded. \n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"values-list"}),", ",(0,r.jsx)(n.strong,{children:"multiple-value-bind"}),", ",(0,r.jsx)(n.strong,{children:"multiple-values-limit"}),", Section 3.1 (Evaluation)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.strong,{children:"values"})," is a ",(0,r.jsx)(n.em,{children:"function"}),", not a ",(0,r.jsx)(n.em,{children:"macro"})," or ",(0,r.jsx)(n.em,{children:"special form"}),", it receives as ",(0,r.jsx)(n.em,{children:"arguments"})," only the ",(0,r.jsx)(n.em,{children:"primary values"})," of its ",(0,r.jsx)(n.em,{children:"argument forms"}),"."]})]})}function a(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}const c={},i="values",o={id:"chap-5/f-d-dictionary/values",title:"values",description:"Expanded Reference: values",source:"@site/docs/chap-5/f-d-dictionary/values.md",sourceDirName:"chap-5/f-d-dictionary",slug:"/chap-5/f-d-dictionary/values",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/values",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-5/f-d-dictionary/values.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"unwind-protect",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/unwindprotect"},next:{title:"values-list",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/valueslist"}},d={},u=[{value:"Expanded Reference: values",id:"expanded-reference-values",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"values",children:"values"}),"\n","\n","\n",(0,r.jsx)(a,{}),"\n",(0,r.jsx)(n.h2,{id:"expanded-reference-values",children:"Expanded Reference: values"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(values )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>a});var r=s(67294);const t={},l=r.createContext(t);function a(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);