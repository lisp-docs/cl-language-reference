"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[34245],{96765:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>d,default:()=>x,frontMatter:()=>l,metadata:()=>o,toc:()=>h});var s=n(85893),t=n(11151);function r(e){const i={em:"em",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"shared-initialize"})," ",(0,s.jsx)(i.em,{children:"Standard Generic Function"})]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"shared-initialize"})," ",(0,s.jsx)(i.em,{children:"instance slot-names"})," &rest ",(0,s.jsx)(i.em,{children:"initargs"})," &key &allow-other-keys ",(0,s.jsx)(i.em,{children:"\u2192 instance"})]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Method Signatures:"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"shared-initialize"})," (",(0,s.jsx)(i.em,{children:"instance"})," ",(0,s.jsx)(i.strong,{children:"standard-object"}),") ",(0,s.jsx)(i.em,{children:"slot-names"})," &rest ",(0,s.jsx)(i.em,{children:"initargs"})]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:"instance"}),"\u2014an ",(0,s.jsx)(i.em,{children:"object"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:"slot-names"}),"\u2014a ",(0,s.jsx)(i.em,{children:"list"})," or ",(0,s.jsx)(i.strong,{children:"t"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:"initargs"}),"\u2014a ",(0,s.jsx)(i.em,{children:"list"})," of ",(0,s.jsx)(i.em,{children:"keyword/value pairs"})," (of initialization argument ",(0,s.jsx)(i.em,{children:"names"})," and ",(0,s.jsx)(i.em,{children:"values"}),")."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(i.p,{children:["The generic function ",(0,s.jsx)(i.strong,{children:"shared-initialize"})," is used to fill the ",(0,s.jsx)(i.em,{children:"slots"})," of an ",(0,s.jsx)(i.em,{children:"instance"})," using ",(0,s.jsx)(i.em,{children:"initargs"})," and ",":initform"," forms. It is called when an instance is created, when an instance is re-initialized, when an instance is updated to conform to a redefined ",(0,s.jsx)(i.em,{children:"class"}),", and when an instance is updated to conform to a different ",(0,s.jsx)(i.em,{children:"class"}),". The generic function ",(0,s.jsx)(i.strong,{children:"shared-initialize"})," is called by the system-supplied primary ",(0,s.jsx)(i.em,{children:"method"})," for ",(0,s.jsx)(i.strong,{children:"initialize-instance"}),", ",(0,s.jsx)(i.strong,{children:"reinitialize-instance"}),", ",(0,s.jsx)(i.strong,{children:"update-instance-for-redefined-class"}),", and ",(0,s.jsx)(i.strong,{children:"update-instance-for-different-class"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["The generic function ",(0,s.jsx)(i.strong,{children:"shared-initialize"})," takes the following arguments: the ",(0,s.jsx)(i.em,{children:"instance"})," to be initialized, a specification of a set of ",(0,s.jsx)(i.em,{children:"slot-names accessible"})," in that ",(0,s.jsx)(i.em,{children:"instance"}),", and any number of ",(0,s.jsx)(i.em,{children:"initargs"}),". The arguments after the first two must form an ",(0,s.jsx)(i.em,{children:"initialization argument list"}),". The system-supplied"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"shared-initialize"})}),"\n",(0,s.jsxs)(i.p,{children:["primary ",(0,s.jsx)(i.em,{children:"method"})," on ",(0,s.jsx)(i.strong,{children:"shared-initialize"})," initializes the ",(0,s.jsx)(i.em,{children:"slots"})," with values according to the ",(0,s.jsx)(i.em,{children:"initargs"})," and supplied ",":initform"," forms. ",(0,s.jsx)(i.em,{children:"Slot-names"})," indicates which ",(0,s.jsx)(i.em,{children:"slots"})," should be initialized according to their ",":initform"," forms if no ",(0,s.jsx)(i.em,{children:"initargs"})," are provided for those ",(0,s.jsx)(i.em,{children:"slots"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["The system-supplied primary ",(0,s.jsx)(i.em,{children:"method"})," behaves as follows, regardless of whether the ",(0,s.jsx)(i.em,{children:"slots"})," are local or shared:"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:"\u2022"})," If an ",(0,s.jsx)(i.em,{children:"initarg"})," in the ",(0,s.jsx)(i.em,{children:"initialization argument list"})," specifies a value for that ",(0,s.jsx)(i.em,{children:"slot"}),", that value is stored into the ",(0,s.jsx)(i.em,{children:"slot"}),", even if a value has already been stored in the ",(0,s.jsx)(i.em,{children:"slot"})," before the ",(0,s.jsx)(i.em,{children:"method"})," is run."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:"\u2022"})," Any ",(0,s.jsx)(i.em,{children:"slots"})," indicated by ",(0,s.jsx)(i.em,{children:"slot-names"})," that are still unbound at this point are initialized according to their ",":initform"," forms. For any such ",(0,s.jsx)(i.em,{children:"slot"})," that has an ",":initform"," form, that ",(0,s.jsx)(i.em,{children:"form"})," is evaluated in the lexical environment of its defining ",(0,s.jsx)(i.strong,{children:"defclass"})," ",(0,s.jsx)(i.em,{children:"form"})," and the result is stored into the ",(0,s.jsx)(i.em,{children:"slot"}),". For example, if a ",(0,s.jsx)(i.em,{children:"before method"})," stores a value in the ",(0,s.jsx)(i.em,{children:"slot"}),", the ",":initform"," form will not be used to supply a value for the ",(0,s.jsx)(i.em,{children:"slot"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:"\u2022"})," The rules mentioned in Section 7.1.4 (Rules for Initialization Arguments) are obeyed."]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.em,{children:"slots-names"})," argument specifies the ",(0,s.jsx)(i.em,{children:"slots"})," that are to be initialized according to their ",":initform"," forms if no initialization arguments apply. It can be a ",(0,s.jsx)(i.em,{children:"list"})," of slot ",(0,s.jsx)(i.em,{children:"names"}),", which specifies the set of those slot ",(0,s.jsx)(i.em,{children:"names"}),"; or it can be the ",(0,s.jsx)(i.em,{children:"symbol"})," ",(0,s.jsx)(i.strong,{children:"t"}),", which specifies the set of all of the ",(0,s.jsx)(i.em,{children:"slots"}),"."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"initialize-instance"}),", ",(0,s.jsx)(i.strong,{children:"reinitialize-instance"}),", ",(0,s.jsx)(i.strong,{children:"update-instance-for-redefined-class"}),","]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"update-instance-for-different-class"}),", ",(0,s.jsx)(i.strong,{children:"slot-boundp"}),", ",(0,s.jsx)(i.strong,{children:"slot-makunbound"}),", Section 7.1 (Object Creation and Initialization), Section 7.1.4 (Rules for Initialization Arguments), Section 7.1.2 (Declaring the Validity of Initialization Arguments)"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:"Initargs"})," are declared as valid by using the ",":initarg"," option to ",(0,s.jsx)(i.strong,{children:"defclass"}),", or by defining ",(0,s.jsx)(i.em,{children:"methods"})," for ",(0,s.jsx)(i.strong,{children:"shared-initialize"}),". The keyword name of each keyword parameter specifier in the ",(0,s.jsx)(i.em,{children:"lambda list"})," of any ",(0,s.jsx)(i.em,{children:"method"})," defined on ",(0,s.jsx)(i.strong,{children:"shared-initialize"})," is declared as a valid ",(0,s.jsx)(i.em,{children:"initarg"})," name for all ",(0,s.jsx)(i.em,{children:"classes"})," for which that ",(0,s.jsx)(i.em,{children:"method"})," is applicable."]}),"\n",(0,s.jsxs)(i.p,{children:["Implementations are permitted to optimize ",":initform"," forms that neither produce nor depend on side effects, by evaluating these ",(0,s.jsx)(i.em,{children:"forms"})," and storing them into slots before running any ",(0,s.jsx)(i.strong,{children:"initialize-instance"})," methods, rather than by handling them in the primary ",(0,s.jsx)(i.strong,{children:"initialize-instance"})," method. (This optimization might be implemented by having the ",(0,s.jsx)(i.strong,{children:"allocate-instance"})," method copy a prototype instance.)"]}),"\n",(0,s.jsxs)(i.p,{children:["Implementations are permitted to optimize default initial value forms for ",(0,s.jsx)(i.em,{children:"initargs"})," associated with slots by not actually creating the complete initialization argument ",(0,s.jsx)(i.em,{children:"list"})," when the only ",(0,s.jsx)(i.em,{children:"method"})," that would receive the complete ",(0,s.jsx)(i.em,{children:"list"})," is the ",(0,s.jsx)(i.em,{children:"method"})," on ",(0,s.jsx)(i.strong,{children:"standard-object"}),". In this case default initial value"]}),"\n",(0,s.jsxs)(i.p,{children:["forms can be treated like ",":initform"," forms. This optimization has no visible effects other than a performance improvement."]})]})}function a(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}const l={},d="shared-initialize",o={id:"chap-7/h-h-dictionary/sharedinitialize",title:"shared-initialize",description:"Expanded Reference: shared-initialize",source:"@site/docs/chap-7/h-h-dictionary/sharedinitialize.md",sourceDirName:"chap-7/h-h-dictionary",slug:"/chap-7/h-h-dictionary/sharedinitialize",permalink:"/cl-language-reference/docs/chap-7/h-h-dictionary/sharedinitialize",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-7/h-h-dictionary/sharedinitialize.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"remove-method",permalink:"/cl-language-reference/docs/chap-7/h-h-dictionary/removemethod"},next:{title:"slot-boundp",permalink:"/cl-language-reference/docs/chap-7/h-h-dictionary/slotboundp"}},c={},h=[{value:"Expanded Reference: shared-initialize",id:"expanded-reference-shared-initialize",level:2}];function m(e){const i={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"shared-initialize",children:"shared-initialize"}),"\n","\n","\n",(0,s.jsx)(a,{}),"\n",(0,s.jsx)(i.h2,{id:"expanded-reference-shared-initialize",children:"Expanded Reference: shared-initialize"}),"\n",(0,s.jsx)(i.admonition,{type:"tip",children:(0,s.jsx)(i.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lisp",children:"(shared-initialize )\n"})})]})}function x(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},11151:(e,i,n)=>{n.d(i,{Z:()=>l,a:()=>a});var s=n(67294);const t={},r=s.createContext(t);function a(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);