"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[35330],{73217:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>f,frontMatter:()=>l,metadata:()=>a,toc:()=>h});var s=t(85893),i=t(11151);function r(e){const n={em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"function"})," ",(0,s.jsx)(n.em,{children:"System Class"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Class Precedence List:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"function"}),", ",(0,s.jsx)(n.strong,{children:"t"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"function"})," is an ",(0,s.jsx)(n.em,{children:"object"})," that represents code to be executed when an appropriate number of arguments is supplied. A ",(0,s.jsx)(n.em,{children:"function"})," is produced by the ",(0,s.jsx)(n.strong,{children:"function"})," ",(0,s.jsx)(n.em,{children:"special form"}),", the ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"coerce"}),", or the ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"compile"}),". A ",(0,s.jsx)(n.em,{children:"function"})," can be directly invoked by using it as the first argument to ",(0,s.jsx)(n.strong,{children:"funcall"}),", ",(0,s.jsx)(n.strong,{children:"apply"}),", or ",(0,s.jsx)(n.strong,{children:"multiple-value-call"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,s.jsx)(n.p,{children:"Specializing."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:["(function [",(0,s.jsx)(n.em,{children:"arg-typespec"})," [",(0,s.jsx)(n.em,{children:"value-typespec"}),"]])"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"arg-typespec::"}),"=(",(0,s.jsx)(n.em,{children:"{typespec}"}),"*"]}),"\n",(0,s.jsxs)(n.p,{children:["[&optional ",(0,s.jsx)(n.em,{children:"{typespec}"}),"*]"]}),"\n",(0,s.jsxs)(n.p,{children:["[&rest ",(0,s.jsx)(n.em,{children:"typespec"}),"]"]}),"\n",(0,s.jsxs)(n.p,{children:["[&key ",(0,s.jsx)(n.em,{children:"{"}),"(",(0,s.jsx)(n.em,{children:"keyword typespec"}),")",(0,s.jsx)(n.em,{children:"}"}),"*])"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"typespec"}),"\u2014a ",(0,s.jsx)(n.em,{children:"type specifier"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"value-typespec"}),"\u2014a ",(0,s.jsx)(n.em,{children:"type specifier"})," ."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["The list form of the ",(0,s.jsx)(n.strong,{children:"function"})," ",(0,s.jsx)(n.em,{children:"type-specifier"})," can be used only for declaration and not for discrimination. Every element of this ",(0,s.jsx)(n.em,{children:"type"})," is a ",(0,s.jsx)(n.em,{children:"function"})," that accepts arguments of the types specified by the ",(0,s.jsx)(n.em,{children:"argj-types"})," and returns values that are members of the ",(0,s.jsx)(n.em,{children:"types"})," specified by ",(0,s.jsx)(n.em,{children:"value-type"}),". The ",(0,s.jsx)(n.strong,{children:"&optional"}),", ",(0,s.jsx)(n.strong,{children:"&rest"}),", ",(0,s.jsx)(n.strong,{children:"&key"}),", and ",(0,s.jsx)(n.strong,{children:"&allow-other-keys"})," markers can appear in the list of argument types. The ",(0,s.jsx)(n.em,{children:"type specifier"})," provided with ",(0,s.jsx)(n.strong,{children:"&rest"})," is the ",(0,s.jsx)(n.em,{children:"type"})," of each actual argument, not the ",(0,s.jsx)(n.em,{children:"type"})," of the corresponding variable."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"&key"})," parameters should be supplied as lists of the form (",(0,s.jsx)(n.em,{children:"keyword type"}),"). The ",(0,s.jsx)(n.em,{children:"keyword"})," must be a valid keyword-name symbol as must be supplied in the actual arguments of a call. This is usually a ",(0,s.jsx)(n.em,{children:"symbol"})," in the KEYWORD ",(0,s.jsx)(n.em,{children:"package"})," but can be any ",(0,s.jsx)(n.em,{children:"symbol"}),". When ",(0,s.jsx)(n.strong,{children:"&key"})," is given in a ",(0,s.jsx)(n.strong,{children:"function"})," ",(0,s.jsx)(n.em,{children:"type specifier lambda list"}),", the ",(0,s.jsx)(n.em,{children:"keyword parameters"})," given are exhaustive unless ",(0,s.jsx)(n.strong,{children:"&allow-other-keys"})," is also present. ",(0,s.jsx)(n.strong,{children:"&allow-other-keys"})," is an indication that other keyword arguments might actually be supplied and, if supplied, can be used. For example, the ",(0,s.jsx)(n.em,{children:"type"})," of the ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"make-list"})," could be declared as follows:"]}),"\n",(0,s.jsxs)(n.p,{children:["(function ((integer 0) &key (",":initial-element"," t)) list)"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"value-type"})," can be a ",(0,s.jsx)(n.strong,{children:"values"})," ",(0,s.jsx)(n.em,{children:"type specifier"})," in order to indicate the ",(0,s.jsx)(n.em,{children:"types"})," of ",(0,s.jsx)(n.em,{children:"multiple values"}),". Consider a declaration of the following form:"]}),"\n",(0,s.jsx)(n.p,{children:"(ftype (function (arg0-type arg1-type ...) val-type) f))"}),"\n",(0,s.jsxs)(n.p,{children:["Any ",(0,s.jsx)(n.em,{children:"form"})," (f arg0 arg1 ...) within the scope of that declaration is equivalent to the following: (the val-type (f (the arg0-type arg0) (the arg1-type arg1) ...))"]}),"\n",(0,s.jsxs)(n.p,{children:["That is, the consequences are undefined if any of the arguments are not of the specified ",(0,s.jsx)(n.em,{children:"types"})," or the result is not of the specified ",(0,s.jsx)(n.em,{children:"type"}),". In particular, if any argument is not of the correct ",(0,s.jsx)(n.em,{children:"type"}),", the result is not guaranteed to be of the specified ",(0,s.jsx)(n.em,{children:"type"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Thus, an ",(0,s.jsx)(n.strong,{children:"ftype"})," declaration for a ",(0,s.jsx)(n.em,{children:"function"})," describes ",(0,s.jsx)(n.em,{children:"calls"})," to the ",(0,s.jsx)(n.em,{children:"function"}),", not the actual definition of the ",(0,s.jsx)(n.em,{children:"function"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Consider a declaration of the following form:"}),"\n",(0,s.jsx)(n.p,{children:"(type (function (arg0-type arg1-type ...) val-type) fn-valued-variable)"}),"\n",(0,s.jsxs)(n.p,{children:["This declaration has the interpretation that, within the scope of the declaration, the consequences are unspecified if the value of fn-valued-variable is called with arguments not of the specified ",(0,s.jsx)(n.em,{children:"types"}),"; the value resulting from a valid call will be of type val-type."]}),"\n",(0,s.jsxs)(n.p,{children:["As with variable type declarations, nested declarations imply intersections of ",(0,s.jsx)(n.em,{children:"types"}),", as follows:"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," Consider the following two declarations of ",(0,s.jsx)(n.strong,{children:"ftype"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"(ftype (function (arg0-type1 arg1-type1 ...) val-type1) f))"}),"\n",(0,s.jsx)(n.p,{children:"and"}),"\n",(0,s.jsx)(n.p,{children:"(ftype (function (arg0-type2 arg1-type2 ...) val-type2) f))"}),"\n",(0,s.jsx)(n.p,{children:"If both these declarations are in effect, then within the shared scope of the declarations, calls to f can be treated as if f were declared as follows:"}),"\n",(0,s.jsx)(n.p,{children:"(ftype (function ((and arg0-type1 arg0-type2) (and arg1-type1 arg1-type2 ...) ...) (and val-type1 val-type2))"}),"\n",(0,s.jsx)(n.p,{children:"f))"}),"\n",(0,s.jsxs)(n.p,{children:["It is permitted to ignore one or all of the ",(0,s.jsx)(n.strong,{children:"ftype"})," declarations in force."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," If two (or more) type declarations are in effect for a variable, and they are both function declarations, the declarations combine similarly."]})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}const l={title:"function"},o="function",a={id:"chap-4/e-e-dictionary/function_system-class",title:"function",description:"Expanded Reference: function",source:"@site/docs/chap-4/e-e-dictionary/function_system-class.md",sourceDirName:"chap-4/e-e-dictionary",slug:"/chap-4/e-e-dictionary/function_system-class",permalink:"/cl-language-reference/docs/chap-4/e-e-dictionary/function_system-class",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-4/e-e-dictionary/function_system-class.md",tags:[],version:"current",frontMatter:{title:"function"},sidebar:"tutorialSidebar",previous:{title:"deftype",permalink:"/cl-language-reference/docs/chap-4/e-e-dictionary/deftype_macro"},next:{title:"generic-function",permalink:"/cl-language-reference/docs/chap-4/e-e-dictionary/generic-function_system-class"}},d={},h=[{value:"Expanded Reference: function",id:"expanded-reference-function",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"function",children:"function"}),"\n","\n","\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-function",children:"Expanded Reference: function"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(function )\n"})})]})}function f(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>c});var s=t(67294);const i={},r=s.createContext(i);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);