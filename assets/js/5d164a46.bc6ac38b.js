"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[98486],{57090:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>o,default:()=>p,frontMatter:()=>d,metadata:()=>a,toc:()=>h});var s=t(85893),r=t(11151);function i(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components},{DictionaryLink:t,GlossaryTerm:i}=n;return t||l("DictionaryLink",!0),i||l("GlossaryTerm",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"set-difference, nset-difference"})," ",(0,s.jsx)(i,{styled:!0,term:"function",children:(0,s.jsx)("i",{children:"Function"})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{styled:!0,term:"set-difference",children:(0,s.jsx)("b",{children:"set-difference"})})," ",(0,s.jsx)(n.em,{children:"list-1 list-2"})," &key ",(0,s.jsx)(n.em,{children:"key test test-not \u2192 result-list"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{styled:!0,term:"nset-difference",children:(0,s.jsx)("b",{children:"nset-difference"})})," ",(0,s.jsx)(n.em,{children:"list-1 list-2"})," &key ",(0,s.jsx)(n.em,{children:"key test test-not \u2192 result-list"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"list-1"}),"\u2014a ",(0,s.jsx)(i,{styled:!0,term:"proper list",children:(0,s.jsx)("i",{children:"proper list"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"list-2"}),"\u2014a ",(0,s.jsx)(i,{styled:!0,term:"proper list",children:(0,s.jsx)("i",{children:"proper list"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"test"}),"\u2014a ",(0,s.jsx)(i,{styled:!0,term:"designator",children:(0,s.jsx)("i",{children:"designator"})})," for a ",(0,s.jsx)(i,{styled:!0,term:"function",children:(0,s.jsx)("i",{children:"function"})})," of two ",(0,s.jsx)(i,{styled:!0,term:"argument",children:(0,s.jsx)("i",{children:"arguments"})})," that returns a ",(0,s.jsx)(i,{styled:!0,term:"generalized boolean",children:(0,s.jsx)("i",{children:"generalized boolean"})}),". ",(0,s.jsxs)(n.em,{children:["test-not",(0,s.jsx)(i,{styled:!0,term:"t",children:(0,s.jsx)("i",{children:"\u2014a "})}),"designator"]})," for a ",(0,s.jsx)(i,{styled:!0,term:"function",children:(0,s.jsx)("i",{children:"function"})})," of two ",(0,s.jsx)(i,{styled:!0,term:"argument",children:(0,s.jsx)("i",{children:"arguments"})})," that returns a ",(0,s.jsx)(i,{styled:!0,term:"generalized boolean",children:(0,s.jsx)("i",{children:"generalized boolean"})}),"."]}),"\n",(0,s.jsx)(t,{styled:!0,term:"set-difference, nset-difference",children:(0,s.jsx)("b",{children:"set-difference, nset-difference"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(i,{styled:!0,term:"key",children:(0,s.jsx)("i",{children:"key"})}),"\u2014a ",(0,s.jsx)(i,{styled:!0,term:"designator",children:(0,s.jsx)("i",{children:"designator"})})," for a ",(0,s.jsx)(i,{styled:!0,term:"function",children:(0,s.jsx)("i",{children:"function"})})," of one argument, or ",(0,s.jsx)(t,{styled:!0,term:"nil",children:(0,s.jsx)("b",{children:"nil"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"result-list"}),"\u2014a ",(0,s.jsx)(i,{styled:!0,term:"list",children:(0,s.jsx)("i",{children:"list"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{styled:!0,term:"set-difference",children:(0,s.jsx)("b",{children:"set-difference"})})," returns a ",(0,s.jsx)(i,{styled:!0,term:"list",children:(0,s.jsx)("i",{children:"list"})})," of elements of ",(0,s.jsx)(n.em,{children:"list-1"})," that do not appear in ",(0,s.jsx)(n.em,{children:"list-2"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{styled:!0,term:"nset-difference",children:(0,s.jsx)("b",{children:"nset-difference"})})," is the destructive version of ",(0,s.jsx)(t,{styled:!0,term:"set-difference",children:(0,s.jsx)("b",{children:"set-difference"})}),". It may destroy ",(0,s.jsx)(n.em,{children:"list-1"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For all possible ordered pairs consisting of one element from ",(0,s.jsx)(n.em,{children:"list-1"})," and one element from ",(0,s.jsx)(n.em,{children:"list-2"}),", the ",":test"," or ",":test-not"," function is used to determine whether they ",(0,s.jsx)(i,{styled:!0,term:"satisfy the test",children:(0,s.jsx)("i",{children:"satisfy the test"})}),". The first argument to the ",":test"," or ",":test-not"," function is the part of an element of ",(0,s.jsx)(n.em,{children:"list-1"})," that is returned by the ",":key"," function (if supplied); the second argument is the part of an element of ",(0,s.jsx)(n.em,{children:"list-2"})," that is returned by the ",":key"," function (if supplied)."]}),"\n",(0,s.jsxs)(n.p,{children:["If ",":key"," is supplied, its argument is a ",(0,s.jsx)(n.em,{children:"list-1"})," or ",(0,s.jsx)(n.em,{children:"list-2"})," element. The ",":key"," function typically returns part of the supplied element. If ",":key"," is not supplied, the ",(0,s.jsx)(n.em,{children:"list-1"})," or ",(0,s.jsx)(n.em,{children:"list-2"})," element is used."]}),"\n",(0,s.jsxs)(n.p,{children:["An element of ",(0,s.jsx)(n.em,{children:"list-1"})," appears in the result if and only if it does not match any element of ",(0,s.jsx)(n.em,{children:"list-2"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["There is no guarantee that the order of elements in the result will reflect the ordering of the arguments in any particular way. The result ",(0,s.jsx)(i,{styled:!0,term:"list",children:(0,s.jsx)("i",{children:"list"})})," may share cells with, or be ",(0,s.jsx)(t,{styled:!0,term:"eq",children:(0,s.jsx)("b",{children:"eq"})})," to, either of ",(0,s.jsx)(n.em,{children:"list-1"})," or ",(0,s.jsx)(n.em,{children:"list-2"}),", if appropriate."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:'(setq lst1 (list "A" "b" "C" "d") \n      lst2 (list "a" "B" "C" "d")) \u2192 ("a" "B" "C" "d") \n(set-difference lst1 lst2) \u2192 ("d" "C" "b" "A") \n(set-difference lst1 lst2 :test \u2019equal) \u2192 ("b" "A") \n(set-difference lst1 lst2 :test #\u2019equalp) \u2192 NIL \n(nset-difference lst1 lst2 :test #\u2019string=) \u2192 ("A" "b") \n(setq lst1 \u2019(("a" . "b") ("c" . "d") ("e" . "f"))) \n\u2192 (("a" . "b") ("c" . "d") ("e" . "f")) \n(setq lst2 \u2019(("c" . "a") ("e" . "b") ("d" . "a"))) \n\u2192 (("c" . "a") ("e" . "b") ("d" . "a")) \n(nset-difference lst1 lst2 :test #\u2019string= :key #\u2019cdr) \n\u2192 (("c" . "d") ("e" . "f")) \nlst1 \u2192 (("a" . "b") ("c" . "d") ("e" . "f")) \nlst2 \u2192 (("c" . "a") ("e" . "b") ("d" . "a")) \n;; Remove all flavor names that contain "c" or "w". \n(set-difference \u2019("strawberry" "chocolate" "banana" \n\t\t\t       "lemon" "pistachio" "rhubarb") \n\t\t \u2019(#\\c #\\w) \n\t\t :test #\u2019(lambda (s c) (find c s))) \n\u2192 ("banana" "rhubarb" "lemon") ;One possible ordering. \n\n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{styled:!0,term:"nset-difference",children:(0,s.jsx)("b",{children:"nset-difference"})})," may destroy ",(0,s.jsx)(n.em,{children:"list-1"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(n.p,{children:["Should be prepared to signal an error of ",(0,s.jsx)(i,{styled:!0,term:"type",children:(0,s.jsx)("i",{children:"type"})})," ",(0,s.jsx)(t,{styled:!0,term:"type-error",children:(0,s.jsx)("b",{children:"type-error"})})," if ",(0,s.jsx)(n.em,{children:"list-1"})," and ",(0,s.jsx)(n.em,{children:"list-2"})," are not ",(0,s.jsx)(i,{styled:!0,term:"proper list",children:(0,s.jsx)("i",{children:"proper lists"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(n.p,{children:"Section 3.2.1 (Compiler Terminology), Section 3.6 (Traversal Rules and Side Effects)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",":test-not"," parameter is deprecated."]})]})}function c(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}function l(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const d={title:"set-difference, nset-difference"},o="set-difference, nset-difference",a={id:"chap-14/be-c-dictionary/set-difference_nset-difference_function",title:"set-difference, nset-difference",description:"Expanded Reference: set-difference, nset-difference",source:"@site/docs/chap-14/be-c-dictionary/set-difference_nset-difference_function.md",sourceDirName:"chap-14/be-c-dictionary",slug:"/chap-14/be-c-dictionary/set-difference_nset-difference_function",permalink:"/cl-language-reference/chap-14/be-c-dictionary/set-difference_nset-difference_function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/chap-14/be-c-dictionary/set-difference_nset-difference_function.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{title:"set-difference, nset-difference"},sidebar:"tutorialSidebar",previous:{title:"rplaca, rplacd",permalink:"/cl-language-reference/chap-14/be-c-dictionary/rplaca_rplacd_function"},next:{title:"set-exclusive-or, nset-exclusive-or",permalink:"/cl-language-reference/chap-14/be-c-dictionary/set-exclusive-or_nset-exclusive-or_function"}},f={},h=[{value:"Expanded Reference: set-difference, nset-difference",id:"expanded-reference-set-difference-nset-difference",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"set-difference-nset-difference",children:"set-difference, nset-difference"}),"\n","\n","\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-set-difference-nset-difference",children:"Expanded Reference: set-difference, nset-difference"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(set-difference, nset-difference )\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>c});var s=t(67294);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);