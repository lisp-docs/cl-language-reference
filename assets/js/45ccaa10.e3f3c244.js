"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[52408],{65090:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>h,metadata:()=>o,toc:()=>d});var r=t(85893),a=t(11151);function s(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"with-hash-table-iterator"})," ",(0,r.jsx)(n.em,{children:"Macro"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"with-hash-table-iterator"})," (",(0,r.jsx)(n.em,{children:"name hash-table"}),") ",(0,r.jsx)(n.em,{children:"{declaration}"}),"* ",(0,r.jsx)(n.em,{children:"{form}"}),"* \u2192 {result}*"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"name"}),"\u2014a name suitable for the first argument to ",(0,r.jsx)(n.strong,{children:"macrolet"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"hash-table"}),"\u2014a ",(0,r.jsx)(n.em,{children:"form"}),", evaluated once, that should produce a ",(0,r.jsx)(n.em,{children:"hash table"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,r.jsx)(n.strong,{children:"declare"})," ",(0,r.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"forms"}),"\u2014an ",(0,r.jsx)(n.em,{children:"implicit progn"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"results"}),"\u2014the ",(0,r.jsx)(n.em,{children:"values"})," returned by ",(0,r.jsx)(n.em,{children:"forms"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Within the lexical scope of the body, ",(0,r.jsx)(n.em,{children:"name"})," is defined via ",(0,r.jsx)(n.strong,{children:"macrolet"})," such that successive invocations of (",(0,r.jsx)(n.em,{children:"name"}),") return the items, one by one, from the ",(0,r.jsx)(n.em,{children:"hash table"})," that is obtained by evaluating ",(0,r.jsx)(n.em,{children:"hash-table"})," only once."]}),"\n",(0,r.jsxs)(n.p,{children:["An invocation (",(0,r.jsx)(n.em,{children:"name"}),") returns three values as follows:"]}),"\n",(0,r.jsxs)(n.p,{children:["1. A ",(0,r.jsx)(n.em,{children:"generalized boolean"})," that is ",(0,r.jsx)(n.em,{children:"true"})," if an entry is returned."]}),"\n",(0,r.jsxs)(n.p,{children:["2. The key from the ",(0,r.jsx)(n.em,{children:"hash-table"})," entry."]}),"\n",(0,r.jsxs)(n.p,{children:["3. The value from the ",(0,r.jsx)(n.em,{children:"hash-table"})," entry."]}),"\n",(0,r.jsxs)(n.p,{children:["After all entries have been returned by successive invocations of (",(0,r.jsx)(n.em,{children:"name"}),"), then only one value is returned, namely ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["It is unspecified what happens if any of the implicit interior state of an iteration is returned outside the dynamic extent of the ",(0,r.jsx)(n.strong,{children:"with-hash-table-iterator"})," ",(0,r.jsx)(n.em,{children:"form"})," such as by returning some ",(0,r.jsx)(n.em,{children:"closure"})," over the invocation ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Any number of invocations of ",(0,r.jsx)(n.strong,{children:"with-hash-table-iterator"})," can be nested, and the body of the innermost one can invoke all of the locally ",(0,r.jsx)(n.em,{children:"established macros"}),", provided all of those ",(0,r.jsx)(n.em,{children:"macros"})," have ",(0,r.jsx)(n.em,{children:"distinct"})," names."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:' \n\nThe following function should return **t** on any *hash table*, and signal an error if the usage of **with-hash-table-iterator** does not agree with the corresponding usage of **maphash**. \n\nHash \n\n \n\n \n\n(defun test-hash-table-iterator (hash-table) \n\n(let ((all-entries \u2019()) \n\n(generated-entries \u2019()) \n\n(unique (list nil))) \n\n(maphash #\u2019(lambda (key value) (push (list key value) all-entries)) \n\nhash-table) \n\n(with-hash-table-iterator (generator-fn hash-table) \n\n(loop \n\n(multiple-value-bind (more? key value) (generator-fn) \n\n(unless more? (return)) \n\n(unless (eql value (gethash key hash-table unique)) \n\n(error "Key &#126;S not found for value &#126;S" key value)) \n\n(push (list key value) generated-entries)))) \n\n(unless (= (length all-entries) \n\n(length generated-entries) \n\n(length (union all-entries generated-entries \n\n:key #\u2019car :test (hash-table-test hash-table)))) \n\n(error "Generated entries and Maphash entries don\u2019t correspond")) \n\nt)) \n\nThe following could be an acceptable definition of **maphash**, implemented by **with-hash-table-iterator**. \n\n(defun maphash (function hash-table) \n\n(with-hash-table-iterator (next-entry hash-table) \n\n(loop (multiple-value-bind (more key value) (next-entry) \n\n(unless more (return nil)) \n\n(funcall function key value))))) \n\n\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["The consequences are undefined if the local function named ",(0,r.jsx)(n.em,{children:"name established"})," by ",(0,r.jsx)(n.strong,{children:"with-hash-table-iterator"})," is called after it has returned ",(0,r.jsx)(n.em,{children:"false"})," as its ",(0,r.jsx)(n.em,{children:"primary value"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:"Section 3.6 (Traversal Rules and Side Effects)"})]})}function i(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}const h={},l="with-hash-table-iterator",o={id:"chap-18/bi-c-dictionary/withhashtableiterator",title:"with-hash-table-iterator",description:"Expanded Reference: with-hash-table-iterator",source:"@site/docs/chap-18/bi-c-dictionary/withhashtableiterator.md",sourceDirName:"chap-18/bi-c-dictionary",slug:"/chap-18/bi-c-dictionary/withhashtableiterator",permalink:"/cl-language-reference/docs/chap-18/bi-c-dictionary/withhashtableiterator",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-18/bi-c-dictionary/withhashtableiterator.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"sxhash",permalink:"/cl-language-reference/docs/chap-18/bi-c-dictionary/sxhash"},next:{title:"19. Filenames",permalink:"/cl-language-reference/docs/category/19-filenames"}},c={},d=[{value:"Expanded Reference: with-hash-table-iterator",id:"expanded-reference-with-hash-table-iterator",level:2}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"with-hash-table-iterator",children:"with-hash-table-iterator"}),"\n","\n","\n",(0,r.jsx)(i,{}),"\n",(0,r.jsx)(n.h2,{id:"expanded-reference-with-hash-table-iterator",children:"Expanded Reference: with-hash-table-iterator"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(with-hash-table-iterator )\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>h,a:()=>i});var r=t(67294);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function h(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);