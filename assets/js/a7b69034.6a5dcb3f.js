"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[3051],{27620:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>x});var i=s(85893),r=s(11151);function t(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=n;return s||h("DictionaryLink",!0),t||h("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"with-accessors"})," ",(0,i.jsx)(t,{term:"macro",children:(0,i.jsx)("i",{children:"Macro"})})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(s,{term:"with-accessors",children:(0,i.jsx)("b",{children:"with-accessors"})})," (",(0,i.jsx)(n.em,{children:"{slot-entry}"}),"*) ",(0,i.jsx)(n.em,{children:"instance-form {declaration}"}),"* ",(0,i.jsx)(t,{term:"form",children:(0,i.jsx)("i",{children:"{form}"})}),"*"]}),"\n",(0,i.jsx)(n.p,{children:"\u2192 {result}*"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"slot-entry::"}),"=(",(0,i.jsx)(n.em,{children:"variable-name accessor-name"}),")"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"variable-name"}),"\u2014a ",(0,i.jsx)(n.em,{children:"variable name"}),"; not evaluated."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"accessor-name"}),"\u2014a ",(0,i.jsx)(t,{styled:!0,term:"function name",children:(0,i.jsx)("i",{children:"function name"})}),"; not evaluated."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"instance-form"}),"\u2014a ",(0,i.jsx)(t,{term:"form",children:(0,i.jsx)("i",{children:"form"})}),"; evaluated."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(t,{term:"declaration",children:(0,i.jsx)("i",{children:"declaration"})}),"\u2014a ",(0,i.jsx)(s,{term:"declare",children:(0,i.jsx)("b",{children:"declare"})})," ",(0,i.jsx)(t,{term:"expression",children:(0,i.jsx)("i",{children:"expression"})}),"; not evaluated."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(t,{term:"form",children:(0,i.jsx)("i",{children:"forms"})}),"\u2014an ",(0,i.jsx)(t,{styled:!0,term:"implicit progn",children:(0,i.jsx)("i",{children:"implicit progn"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"results"}),"\u2014the ",(0,i.jsx)(t,{term:"value",children:(0,i.jsx)("i",{children:"values"})})," returned by the ",(0,i.jsx)(t,{term:"form",children:(0,i.jsx)("i",{children:"forms"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["Creates a lexical environment in which the slots specified by ",(0,i.jsx)(n.em,{children:"slot-entry"})," are lexically available through their accessors as if they were variables. The macro ",(0,i.jsx)(s,{term:"with-accessors",children:(0,i.jsx)("b",{children:"with-accessors"})})," invokes the appropriate accessors to ",(0,i.jsx)(t,{term:"access",children:(0,i.jsx)("i",{children:"access"})})," the ",(0,i.jsx)(t,{term:"slot",children:(0,i.jsx)("i",{children:"slots"})})," specified by ",(0,i.jsx)(n.em,{children:"slot-entry"}),". Both ",(0,i.jsx)(s,{term:"setf",children:(0,i.jsx)("b",{children:"setf"})})," and ",(0,i.jsx)(s,{term:"setq",children:(0,i.jsx)("b",{children:"setq"})})," can be used to set the value of the ",(0,i.jsx)(t,{term:"slot",children:(0,i.jsx)("i",{children:"slot"})}),"."]}),"\n",(0,i.jsx)(s,{term:"with-accessors",children:(0,i.jsx)("b",{children:"with-accessors"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:'(defclass thing () \n  ((x :initarg :x :accessor thing-x) \n   (y :initarg :y :accessor thing-y))) \n\u2192 #<STANDARD-CLASS THING 250020173> \n(defmethod (setf thing-x) :before (new-x (thing thing)) \n  (format t "~&Changing X from ~D to ~D in ~S.~%" \n\t  (thing-x thing) new-x thing)) \n(setq thing1 (make-instance \u2019thing :x 1 :y 2)) \u2192 #<THING 43135676> \n(setq thing2 (make-instance \u2019thing :x 7 :y 8)) \u2192 #<THING 43147374> \n(with-accessors ((x1 thing-x) (y1 thing-y)) \n    thing1 \n  (with-accessors ((x2 thing-x) (y2 thing-y)) \n      thing2 \n    (list (list x1 (thing-x thing1) y1 (thing-y thing1) \n\t\tx2 (thing-x thing2) y2 (thing-y thing2)) \n\t  (setq x1 (+ y1 x2)) \n\t  (list x1 (thing-x thing1) y1 (thing-y thing1) \n\t\tx2 (thing-x thing2) y2 (thing-y thing2)) \n\t  (setf (thing-x thing2) (list x1)) \n\t  (list x1 (thing-x thing1) y1 (thing-y thing1) \n\t\tx2 (thing-x thing2) y2 (thing-y thing2))))) \n\u25b7 Changing X from 1 to 9 in #<THING 43135676>. \n\u25b7 Changing X from 7 to (9) in #<THING 43147374>. \n\u2192 ((1 1 2 2 7 7 8 8) \n   9 \n   (9 9 2 2 7 7 8 8) \n   (9) \n   (9 9 2 2 (9) (9) 8 8)) \n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,i.jsx)(s,{term:"defclass",children:(0,i.jsx)("b",{children:"defclass"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,i.jsxs)(n.p,{children:["The consequences are undefined if any ",(0,i.jsx)(n.em,{children:"accessor-name"})," is not the name of an accessor for the ",(0,i.jsx)(t,{term:"instance",children:(0,i.jsx)("i",{children:"instance"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(s,{term:"with-slots",children:(0,i.jsx)("b",{children:"with-slots"})}),", ",(0,i.jsx)(s,{term:"symbol-macrolet",children:(0,i.jsx)("b",{children:"symbol-macrolet"})})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(s,{term:"with-accessors",children:(0,i.jsx)("b",{children:"with-accessors"})})," expression of the form:"]}),"\n",(0,i.jsxs)(n.p,{children:["(with-accessors (",(0,i.jsx)("i",{children:"slot-entry"}),(0,i.jsx)("sub",{children:"1"}),(0,i.jsxs)("i",{children:[". . . slot-entry",(0,i.jsx)("sub",{children:"n"})]}),") ",(0,i.jsx)("i",{children:"instance-form form"}),(0,i.jsx)("sub",{children:"1"}),(0,i.jsxs)("i",{children:[". . . form",(0,i.jsx)("sub",{children:"k"})]}),")"]}),"\n",(0,i.jsx)(n.p,{children:"expands into the equivalent of"}),"\n",(0,i.jsxs)(n.p,{children:["(let ((",(0,i.jsx)(n.em,{children:"in instance-form"}),"))"]}),"\n",(0,i.jsxs)(n.p,{children:["(symbol-macrolet (",(0,i.jsx)("i",{children:"Q"}),(0,i.jsx)("sub",{children:"1"}),(0,i.jsxs)("i",{children:[". . . Q",(0,i.jsx)("sub",{children:"n"})]}),") ",(0,i.jsx)("i",{children:"form"}),(0,i.jsx)("sub",{children:"1"}),(0,i.jsxs)("i",{children:[". . . form",(0,i.jsx)("sub",{children:"k"})]}),"))"]}),"\n",(0,i.jsxs)(n.p,{children:["where ",(0,i.jsxs)("i",{children:["Q",(0,i.jsx)("sub",{children:"i"})]}),"is"]}),"\n",(0,i.jsxs)(n.p,{children:["(",(0,i.jsxs)("i",{children:["variable-name",(0,i.jsx)("sub",{children:"i"})]})," () (",(0,i.jsxs)("i",{children:["accessor-name",(0,i.jsx)("sub",{children:"i"})," in"]}),"))"]})]})}function c(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const l={title:"with-accessors"},a="with-accessors",o={id:"chap-7/h-h-dictionary/with-accessors_macro",title:"with-accessors",description:"Expanded Reference: with-accessors",source:"@site/docs/chap-7/h-h-dictionary/with-accessors_macro.md",sourceDirName:"chap-7/h-h-dictionary",slug:"/chap-7/h-h-dictionary/with-accessors_macro",permalink:"/cl-language-reference/chap-7/h-h-dictionary/with-accessors_macro",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/chap-7/h-h-dictionary/with-accessors_macro.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{title:"with-accessors"},sidebar:"tutorialSidebar",previous:{title:"update-instance-for-redefined-class",permalink:"/cl-language-reference/chap-7/h-h-dictionary/update-instance-for-redefined-class_standard-generic-function"},next:{title:"with-slots",permalink:"/cl-language-reference/chap-7/h-h-dictionary/with-slots_macro"}},d={},x=[{value:"Expanded Reference: with-accessors",id:"expanded-reference-with-accessors",level:2}];function j(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"with-accessors",children:"with-accessors"}),"\n","\n","\n",(0,i.jsx)(c,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-with-accessors",children:"Expanded Reference: with-accessors"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(with-accessors )\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(j,{...e})}):j(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>h,a:()=>c});var i=s(67294);const r={},t=i.createContext(r);function c(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function h(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);