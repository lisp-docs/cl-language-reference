"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[46257],{11737:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>m,frontMatter:()=>h,metadata:()=>l,toc:()=>x});var i=n(85893),t=n(11151);function s(e){const r={em:"em",p:"p",...(0,t.a)(),...e.components},{DictionaryLink:n,GlossaryTerm:s}=r;return n||d("DictionaryLink",!0),s||d("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["This section describes the algorithm used by the ",(0,i.jsx)(r.em,{children:"Lisp reader"})," to parse ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"objects"})})," from an ",(0,i.jsx)(r.em,{children:"input character stream"}),", including how the ",(0,i.jsx)(r.em,{children:"Lisp reader"})," processes ",(0,i.jsx)(s,{styled:!0,term:"macro character",children:(0,i.jsx)("i",{children:"macro characters"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["When dealing with ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"tokens"})}),", the reader\u2019s basic function is to distinguish representations of ",(0,i.jsx)(s,{term:"symbol",children:(0,i.jsx)("i",{children:"symbols"})})," from those of ",(0,i.jsx)(s,{term:"number",children:(0,i.jsx)("i",{children:"numbers"})}),". When a ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," is accumulated, it is assumed to represent a ",(0,i.jsx)(s,{term:"number",children:(0,i.jsx)("i",{children:"number"})})," if it satisfies the syntax for numbers listed in Figure 2\u20139. If it does not represent a ",(0,i.jsx)(s,{term:"number",children:(0,i.jsx)("i",{children:"number"})})," , it is then assumed to be a ",(0,i.jsx)(s,{styled:!0,term:"potential number",children:(0,i.jsx)("i",{children:"potential number"})})," if it satisfies the rules governing the syntax for a ",(0,i.jsx)(s,{styled:!0,term:"potential number",children:(0,i.jsx)("i",{children:"potential number"})})," . If a valid ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," is neither a representation of a ",(0,i.jsx)(s,{term:"number",children:(0,i.jsx)("i",{children:"number"})})," nor a ",(0,i.jsx)(s,{styled:!0,term:"potential number",children:(0,i.jsx)("i",{children:"potential number"})})," , it represents a ",(0,i.jsx)(s,{term:"symbol",children:(0,i.jsx)("i",{children:"symbol"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["The algorithm performed by the ",(0,i.jsx)(r.em,{children:"Lisp reader"})," is as follows:"]}),"\n",(0,i.jsxs)(r.p,{children:["1. If at end of file, end-of-file processing is performed as specified in ",(0,i.jsx)(n,{term:"read",children:(0,i.jsx)("b",{children:"read"})}),". Otherwise, one ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"character"})})," , ",(0,i.jsx)(r.em,{children:"x"}),", is read from the ",(0,i.jsx)(r.em,{children:"input stream"}),", and dispatched according to the ",(0,i.jsx)(s,{styled:!0,term:"syntax type",children:(0,i.jsx)("i",{children:"syntax type"})})," of ",(0,i.jsx)(r.em,{children:"x"})," to one of steps 2 to 7."]}),"\n",(0,i.jsxs)(r.p,{children:["2. If ",(0,i.jsx)(r.em,{children:"x"})," is an ",(0,i.jsx)(r.em,{children:"invalid character"})," , an error of ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(n,{term:"reader-error",children:(0,i.jsx)("b",{children:"reader-error"})})," is signaled."]}),"\n",(0,i.jsxs)(r.p,{children:["3. If ",(0,i.jsx)(r.em,{children:"x"})," is a ",(0,i.jsx)(s,{term:"whitespace",children:(0,i.jsx)("i",{children:"whitespace"})}),(0,i.jsx)("sub",{children:"2"})," ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"character"})})," , then it is discarded and step 1 is re-entered."]}),"\n",(0,i.jsxs)(r.p,{children:["4. If ",(0,i.jsx)(r.em,{children:"x"})," is a ",(0,i.jsx)(s,{term:"terminating",children:(0,i.jsx)("i",{children:"terminating"})})," or ",(0,i.jsx)(r.em,{children:"non-terminating macro character"})," then its associated ",(0,i.jsx)(s,{styled:!0,term:"reader macro function",children:(0,i.jsx)("i",{children:"reader macro function"})})," is called with two ",(0,i.jsx)(s,{term:"argument",children:(0,i.jsx)("i",{children:"arguments"})}),", the ",(0,i.jsx)(r.em,{children:"input stream"})," and ",(0,i.jsx)(r.em,{children:"x"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(s,{styled:!0,term:"reader macro function",children:(0,i.jsx)("i",{children:"reader macro function"})})," may read ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"characters"})})," from the ",(0,i.jsx)(r.em,{children:"input stream"}),"; if it does, it will see those ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"characters"})})," following the ",(0,i.jsx)(s,{styled:!0,term:"macro character",children:(0,i.jsx)("i",{children:"macro character"})})," . The ",(0,i.jsx)(r.em,{children:"Lisp reader"})," may be invoked recursively from the ",(0,i.jsx)(s,{styled:!0,term:"reader macro function",children:(0,i.jsx)("i",{children:"reader macro function"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(s,{styled:!0,term:"reader macro function",children:(0,i.jsx)("i",{children:"reader macro function"})})," must not have any side effects other than on the ",(0,i.jsx)(r.em,{children:"input stream"}),"; because of backtracking and restarting of the ",(0,i.jsx)(n,{term:"read",children:(0,i.jsx)("b",{children:"read"})})," operation, front ends to the ",(0,i.jsx)(r.em,{children:"Lisp reader"})," (",(0,i.jsx)(r.em,{children:"e.g."}),", \u201ceditors\u201d and \u201crubout handlers\u201d) may cause the ",(0,i.jsx)(s,{styled:!0,term:"reader macro function",children:(0,i.jsx)("i",{children:"reader macro function"})})," to be called repeatedly during the reading of a single ",(0,i.jsx)(s,{term:"expression",children:(0,i.jsx)("i",{children:"expression"})})," in which ",(0,i.jsx)(r.em,{children:"x"})," only appears once."]}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(s,{styled:!0,term:"reader macro function",children:(0,i.jsx)("i",{children:"reader macro function"})})," may return zero values or one value. If one value is returned, then that value is returned as the result of the read operation; the algorithm is done. If zero values are returned, then step 1 is re-entered."]}),"\n",(0,i.jsxs)(r.p,{children:["5. If ",(0,i.jsx)(r.em,{children:"x"})," is a ",(0,i.jsx)(r.em,{children:"single escape character"})," then the next ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"character"})})," , ",(0,i.jsx)(r.em,{children:"y"}),", is read, or an error of ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(n,{term:"end-of-file",children:(0,i.jsx)("b",{children:"end-of-file"})})," is signaled if at the end of file. ",(0,i.jsx)(r.em,{children:"y"})," is treated as if it is a ",(0,i.jsx)(s,{term:"constituent",children:(0,i.jsx)("i",{children:"constituent"})})," whose only ",(0,i.jsx)(s,{styled:!0,term:"constituent trait",children:(0,i.jsx)("i",{children:"constituent trait"})})," is ",(0,i.jsx)(s,{term:"alphabetic",children:(0,i.jsx)("i",{children:"alphabetic"})}),(0,i.jsx)("sub",{children:"2"}),". ",(0,i.jsx)(r.em,{children:"y"})," is used to begin a ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})}),", and step 8 is entered."]}),"\n",(0,i.jsxs)(r.p,{children:["6. If ",(0,i.jsx)(r.em,{children:"x"})," is a ",(0,i.jsx)(r.em,{children:"multiple escape character"})," then a ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," (initially containing no ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"characters"})}),") is begun and step 9 is entered."]}),"\n",(0,i.jsxs)(r.p,{children:["7. If ",(0,i.jsx)(r.em,{children:"x"})," is a ",(0,i.jsx)(r.em,{children:"constituent character"})," , then it begins a ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})}),". After the ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," is read in, it will be interpreted either as a Lisp ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," or as being of invalid syntax. If the ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," represents an"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})}),", that ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," is returned as the result of the read operation. If the ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," is of invalid syntax, an error is signaled. If ",(0,i.jsx)(r.em,{children:"x"})," is a ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"character"})})," with ",(0,i.jsx)(s,{term:"case",children:(0,i.jsx)("i",{children:"case"})}),", it might be replaced with the corresponding ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"character"})})," of the opposite ",(0,i.jsx)(s,{term:"case",children:(0,i.jsx)("i",{children:"case"})}),", depending on the ",(0,i.jsx)(s,{styled:!0,term:"readtable case",children:(0,i.jsx)("i",{children:"readtable case"})})," of the ",(0,i.jsx)(s,{styled:!0,term:"current readtable",children:(0,i.jsx)("i",{children:"current readtable"})}),", as outlined in Section 23.1.2 (Effect of Readtable Case on the Lisp Reader). ",(0,i.jsx)(r.em,{children:"X"})," is used to begin a ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})}),", and step 8 is entered."]}),"\n",(0,i.jsxs)(r.p,{children:["8. At this point a ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," is being accumulated, and an even number of ",(0,i.jsx)(r.em,{children:"multiple escape characters"})," have been encountered. If at end of file, step 10 is entered. Otherwise, a ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"character"})})," , ",(0,i.jsx)(r.em,{children:"y"}),", is read, and one of the following actions is performed according to its ",(0,i.jsx)(s,{styled:!0,term:"syntax type",children:(0,i.jsx)("i",{children:"syntax type"})}),":"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"\u2022"})," If ",(0,i.jsx)(r.em,{children:"y"})," is a ",(0,i.jsx)(s,{term:"constituent",children:(0,i.jsx)("i",{children:"constituent"})})," or ",(0,i.jsx)(r.em,{children:"non-terminating macro character"})," :"]}),"\n",(0,i.jsxs)(r.p,{children:["\u2013 If ",(0,i.jsx)(r.em,{children:"y"})," is a ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"character"})})," with ",(0,i.jsx)(s,{term:"case",children:(0,i.jsx)("i",{children:"case"})}),", it might be replaced with the corresponding"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"character"})})," of the opposite ",(0,i.jsx)(s,{term:"case",children:(0,i.jsx)("i",{children:"case"})}),", depending on the ",(0,i.jsx)(s,{styled:!0,term:"readtable case",children:(0,i.jsx)("i",{children:"readtable case"})})," of the ",(0,i.jsx)(r.em,{children:"current"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(s,{term:"readtable",children:(0,i.jsx)("i",{children:"readtable"})}),", as outlined in Section 23.1.2 (Effect of Readtable Case on the Lisp"]}),"\n",(0,i.jsx)(r.p,{children:"Reader)."}),"\n",(0,i.jsxs)(r.p,{children:["\u2013 ",(0,i.jsx)(r.em,{children:"Y"})," is appended to the ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," being built."]}),"\n",(0,i.jsx)(r.p,{children:"\u2013 Step 8 is repeated."}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"\u2022"})," If ",(0,i.jsx)(r.em,{children:"y"})," is a ",(0,i.jsx)(r.em,{children:"single escape character"})," , then the next ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"character"})})," , ",(0,i.jsx)(r.em,{children:"z"}),", is read, or an error of ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(n,{term:"end-of-file",children:(0,i.jsx)("b",{children:"end-of-file"})})," is signaled if at end of file. ",(0,i.jsx)(r.em,{children:"Z"})," is treated as if it is a ",(0,i.jsx)(s,{term:"constituent",children:(0,i.jsx)("i",{children:"constituent"})})," whose only ",(0,i.jsx)(s,{styled:!0,term:"constituent trait",children:(0,i.jsx)("i",{children:"constituent trait"})})," is ",(0,i.jsx)(s,{term:"alphabetic",children:(0,i.jsx)("i",{children:"alphabetic"})}),(0,i.jsx)("sub",{children:"2"}),". ",(0,i.jsx)(r.em,{children:"Z"})," is appended to the ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," being built, and step 8 is repeated."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"\u2022"})," If ",(0,i.jsx)(r.em,{children:"y"})," is a ",(0,i.jsx)(r.em,{children:"multiple escape character"})," , then step 9 is entered."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"\u2022"})," If ",(0,i.jsx)(r.em,{children:"y"})," is an ",(0,i.jsx)(r.em,{children:"invalid character"})," , an error of ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(n,{term:"reader-error",children:(0,i.jsx)("b",{children:"reader-error"})})," is signaled."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"\u2022"})," If ",(0,i.jsx)(r.em,{children:"y"})," is a ",(0,i.jsx)(r.em,{children:"terminating macro character"})," , then it terminates the ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})}),". First the ",(0,i.jsx)(r.em,{children:"character y"})," is unread (see ",(0,i.jsx)(n,{term:"unread-char",children:(0,i.jsx)("b",{children:"unread-char"})}),"), and then step 10 is entered."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"\u2022"})," If ",(0,i.jsx)(r.em,{children:"y"})," is a ",(0,i.jsx)(s,{term:"whitespace",children:(0,i.jsx)("i",{children:"whitespace"})}),(0,i.jsx)("sub",{children:"2"})," ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"character"})})," , then it terminates the ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})}),". First the ",(0,i.jsx)(r.em,{children:"character y"})," is unread if appropriate (see ",(0,i.jsx)(n,{term:"read-preserving-whitespace",children:(0,i.jsx)("b",{children:"read-preserving-whitespace"})}),"), and then step 10 is entered."]}),"\n",(0,i.jsxs)(r.p,{children:["9. At this point a ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," is being accumulated, and an odd number of ",(0,i.jsx)(r.em,{children:"multiple escape characters"})," have been encountered. If at end of file, an error of ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(n,{term:"end-of-file",children:(0,i.jsx)("b",{children:"end-of-file"})})," is signaled. Otherwise, a ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"character"})})," , ",(0,i.jsx)(r.em,{children:"y"}),", is read, and one of the following actions is performed according to its ",(0,i.jsx)(s,{styled:!0,term:"syntax type",children:(0,i.jsx)("i",{children:"syntax type"})}),":"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"\u2022"})," If ",(0,i.jsx)(r.em,{children:"y"})," is a ",(0,i.jsx)(s,{term:"constituent",children:(0,i.jsx)("i",{children:"constituent"})}),", macro, or ",(0,i.jsx)(s,{term:"whitespace",children:(0,i.jsx)("i",{children:"whitespace"})}),(0,i.jsx)("sub",{children:"2"})," ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"character"})})," , ",(0,i.jsx)(r.em,{children:"y"})," is treated as a ",(0,i.jsx)(s,{term:"constituent",children:(0,i.jsx)("i",{children:"constituent"})})," whose only ",(0,i.jsx)(s,{styled:!0,term:"constituent trait",children:(0,i.jsx)("i",{children:"constituent trait"})})," is ",(0,i.jsx)(s,{term:"alphabetic",children:(0,i.jsx)("i",{children:"alphabetic"})}),(0,i.jsx)("sub",{children:"2"}),". ",(0,i.jsx)(r.em,{children:"Y"})," is appended to the ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," being built, and step 9 is repeated."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"\u2022"})," If ",(0,i.jsx)(r.em,{children:"y"})," is a ",(0,i.jsx)(r.em,{children:"single escape character"})," , then the next ",(0,i.jsx)(s,{term:"character",children:(0,i.jsx)("i",{children:"character"})})," , ",(0,i.jsx)(r.em,{children:"z"}),", is read, or an error of ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(n,{term:"end-of-file",children:(0,i.jsx)("b",{children:"end-of-file"})})," is signaled if at end of file. ",(0,i.jsx)(r.em,{children:"Z"})," is treated as a ",(0,i.jsx)(s,{term:"constituent",children:(0,i.jsx)("i",{children:"constituent"})})," whose only ",(0,i.jsx)(s,{styled:!0,term:"constituent trait",children:(0,i.jsx)("i",{children:"constituent trait"})})," is ",(0,i.jsx)(s,{term:"alphabetic",children:(0,i.jsx)("i",{children:"alphabetic"})}),(0,i.jsx)("sub",{children:"2"}),". ",(0,i.jsx)(r.em,{children:"Z"})," is appended to the ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," being built, and step 9 is repeated."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"\u2022"})," If ",(0,i.jsx)(r.em,{children:"y"})," is a ",(0,i.jsx)(r.em,{children:"multiple escape character"})," , then step 8 is entered."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"\u2022"})," If ",(0,i.jsx)(r.em,{children:"y"})," is an ",(0,i.jsx)(r.em,{children:"invalid character"})," , an error of ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(n,{term:"reader-error",children:(0,i.jsx)("b",{children:"reader-error"})})," is signaled."]}),"\n",(0,i.jsxs)(r.p,{children:["10. An entire ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," has been accumulated. The ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," represented by the ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," is returned as the result of the read operation, or an error of ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(n,{term:"reader-error",children:(0,i.jsx)("b",{children:"reader-error"})})," is signaled if the ",(0,i.jsx)(s,{term:"token",children:(0,i.jsx)("i",{children:"token"})})," is not of valid syntax."]})]})}function c(e={}){const{wrapper:r}={...(0,t.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}function d(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const h={title:"2.2 Reader Algorithm"},a="2.2 Reader Algorithm",l={id:"chap-2/c-c-reader-algorithm",title:"2.2 Reader Algorithm",description:"",source:"@site/docs/chap-2/c-c-reader-algorithm.md",sourceDirName:"chap-2",slug:"/chap-2/c-c-reader-algorithm",permalink:"/cl-language-reference/chap-2/c-c-reader-algorithm",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/chap-2/c-c-reader-algorithm.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{title:"2.2 Reader Algorithm"},sidebar:"tutorialSidebar",previous:{title:"2.1 Character Syntax",permalink:"/cl-language-reference/chap-2/c-b-character-syntax"},next:{title:"2.3 Interpretation of Tokens",permalink:"/cl-language-reference/chap-2/c-d-interpretation-of-tokens"}},o={},x=[];function j(e){const r={h1:"h1",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"22-reader-algorithm",children:"2.2 Reader Algorithm"}),"\n","\n","\n",(0,i.jsx)(c,{})]})}function m(e={}){const{wrapper:r}={...(0,t.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(j,{...e})}):j(e)}},11151:(e,r,n)=>{n.d(r,{Z:()=>d,a:()=>c});var i=n(67294);const t={},s=i.createContext(t);function c(e){const r=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);