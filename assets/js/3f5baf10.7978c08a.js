"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[19770],{37077:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>l,frontMatter:()=>c,metadata:()=>s,toc:()=>m});var o=t(85893),i=t(11151);const c={},r="find-method-combination",s={id:"meta-object-protocol/find-method-combination",title:"find-method-combination",description:"Generic Function FIND-METHOD-COMBINATION",source:"@site/docs/meta-object-protocol/find-method-combination.md",sourceDirName:"meta-object-protocol",slug:"/meta-object-protocol/find-method-combination",permalink:"/cl-language-reference/meta-object-protocol/find-method-combination",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/find-method-combination.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"finalize-inheritance",permalink:"/cl-language-reference/meta-object-protocol/finalize-inheritance"},next:{title:"Funcallable Instances",permalink:"/cl-language-reference/meta-object-protocol/funcallable-instances"}},a={},m=[];function d(e){const n={em:"em",h1:"h1",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"find-method-combination",children:"find-method-combination"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Generic Function"})," ",(0,o.jsx)(n.strong,{children:"FIND-METHOD-COMBINATION"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"find-method-combination"})," ",(0,o.jsx)(n.em,{children:"generic-function"})," ",(0,o.jsx)(n.em,{children:"method-combination-type-name"})," ",(0,o.jsx)(n.em,{children:"method-combination-options"})," => ",(0,o.jsx)(n.em,{children:"method-combination"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Arguments and values:"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"generic-function"})," -- A generic function metaobject."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"method-combination-type-name"})," -- A symbol which names a type of method combination."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"method-combination-options"})," -- A list of arguments to the method combination type."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"method-combination"})," -- A method combination metaobject."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Description:"})}),"\n",(0,o.jsx)(n.p,{children:"This generic function is called to determine the method combination object used by a generic function."}),"\n",(0,o.jsx)(n.p,{children:"Further details of method combination metaobjects are not specified."})]})}function l(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>r});var o=t(67294);const i={},c=o.createContext(i);function r(e){const n=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);