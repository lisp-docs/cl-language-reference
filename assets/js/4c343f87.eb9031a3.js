"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[84332],{58817:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>m,frontMatter:()=>d,metadata:()=>h,toc:()=>j});var i=r(85893),n=r(11151);function s(e){const t={em:"em",p:"p",...(0,n.a)(),...e.components},{DictionaryLink:r,GlossaryTerm:s}=t;return r||l("DictionaryLink",!0),s||l("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," is a (possibly infinite) set of ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"objects"})}),". An ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," can belong to more than one ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})}),". ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"Types"})})," are never explicitly represented as ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"objects"})})," by Common Lisp. Instead, they are referred to indirectly by the use of ",(0,i.jsx)(s,{styled:!0,term:"type specifier",children:(0,i.jsx)("i",{children:"type specifiers"})}),", which are ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"objects"})})," that denote ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"types"})}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["New ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"types"})})," can be defined using ",(0,i.jsx)(r,{term:"deftype",children:(0,i.jsx)("b",{children:"deftype"})}),", ",(0,i.jsx)(r,{term:"defstruct",children:(0,i.jsx)("b",{children:"defstruct"})}),", ",(0,i.jsx)(r,{term:"defclass",children:(0,i.jsx)("b",{children:"defclass"})}),", and ",(0,i.jsx)(r,{term:"define-condition",children:(0,i.jsx)("b",{children:"define-condition"})}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(s,{term:"function",children:(0,i.jsx)("i",{children:"function"})})," ",(0,i.jsx)(r,{term:"typep",children:(0,i.jsx)("b",{children:"typep"})}),", a set membership test, is used to determine whether a given ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," is of a given ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})}),". The function ",(0,i.jsx)(r,{term:"subtypep",children:(0,i.jsx)("b",{children:"subtypep"})}),", a subset test, is used to determine whether a given ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," is a ",(0,i.jsx)(s,{term:"subtype",children:(0,i.jsx)("i",{children:"subtype"})})," of another given ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})}),". The function ",(0,i.jsx)(r,{term:"type-of",children:(0,i.jsx)("b",{children:"type-of"})})," returns a particular ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," to which a given"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," belongs, even though that ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," must belong to one or more other ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"types"})})," as well. (For example, every ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," is of ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(r,{term:"t",children:(0,i.jsx)("b",{children:"t"})}),", but ",(0,i.jsx)(r,{term:"type-of",children:(0,i.jsx)("b",{children:"type-of"})})," always returns a ",(0,i.jsx)(s,{styled:!0,term:"type specifier",children:(0,i.jsx)("i",{children:"type specifier"})})," for a ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," more specific than ",(0,i.jsx)(r,{term:"t",children:(0,i.jsx)("b",{children:"t"})}),".)"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"Objects"})}),", not ",(0,i.jsx)(s,{term:"variable",children:(0,i.jsx)("i",{children:"variables"})}),", have ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"types"})}),". Normally, any ",(0,i.jsx)(s,{term:"variable",children:(0,i.jsx)("i",{children:"variable"})})," can have any ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," as its ",(0,i.jsx)(s,{term:"value",children:(0,i.jsx)("i",{children:"value"})}),". It is possible to declare that a ",(0,i.jsx)(s,{term:"variable",children:(0,i.jsx)("i",{children:"variable"})})," takes on only values of a given ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," by making an explicit ",(0,i.jsx)(s,{styled:!0,term:"type declaration",children:(0,i.jsx)("i",{children:"type declaration"})}),". ",(0,i.jsx)(s,{styled:!0,term:"type",children:(0,i.jsx)("i",{children:"Types"})})," are arranged in a directed acyclic graph, except for the presence of equivalences."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(s,{term:"declaration",children:(0,i.jsx)("i",{children:"Declarations"})})," can be made about ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"types"})})," using ",(0,i.jsx)(r,{term:"declare",children:(0,i.jsx)("b",{children:"declare"})}),", ",(0,i.jsx)(r,{term:"proclaim",children:(0,i.jsx)("b",{children:"proclaim"})}),", ",(0,i.jsx)(r,{term:"declaim",children:(0,i.jsx)("b",{children:"declaim"})}),", or ",(0,i.jsx)(r,{term:"the",children:(0,i.jsx)("b",{children:"the"})}),". For more information about ",(0,i.jsx)(s,{term:"declaration",children:(0,i.jsx)("i",{children:"declarations"})}),", see Section 3.3 (Declarations)."]}),"\n",(0,i.jsxs)(t.p,{children:["Among the fundamental ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"objects"})})," of the object system are ",(0,i.jsx)(t.em,{children:"classes"}),". A ",(0,i.jsx)(s,{term:"class",children:(0,i.jsx)("i",{children:"class"})})," determines the structure and behavior of a set of other ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"objects"})}),", which are called its ",(0,i.jsx)(s,{term:"instance",children:(0,i.jsx)("i",{children:"instances"})}),". Every ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," is a ",(0,i.jsx)(s,{styled:!0,term:"direct instance",children:(0,i.jsx)("i",{children:"direct instance"})})," of a ",(0,i.jsx)(s,{term:"class",children:(0,i.jsx)("i",{children:"class"})}),". The ",(0,i.jsx)(s,{term:"class",children:(0,i.jsx)("i",{children:"class"})})," of an ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," determines the set of operations that can be performed on the ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})}),". For more information, see Section 4.3 (Classes)."]}),"\n",(0,i.jsxs)(t.p,{children:["It is possible to write ",(0,i.jsx)(s,{term:"function",children:(0,i.jsx)("i",{children:"functions"})})," that have behavior ",(0,i.jsx)(s,{term:"specialized",children:(0,i.jsx)("i",{children:"specialized"})})," to the class of the ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"objects"})})," which are their ",(0,i.jsx)(s,{term:"argument",children:(0,i.jsx)("i",{children:"arguments"})}),". For more information, see Section 7.6 (Generic Functions and Methods)."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(s,{term:"class",children:(0,i.jsx)("i",{children:"class"})})," of the ",(0,i.jsx)(s,{term:"class",children:(0,i.jsx)("i",{children:"class"})})," of an ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," is called its ",(0,i.jsx)(s,{term:"metaclass",children:(0,i.jsx)("i",{children:"metaclass"})}),". For more information about ",(0,i.jsx)(t.em,{children:"metaclasses"}),", see Section 7.4 (Meta-Objects)."]})]})}function c(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}function l(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const d={title:"4.1 Introduction"},o="4.1 Introduction",h={id:"chap-4/e-b-introduction",title:"4.1 Introduction",description:"",source:"@site/docs/chap-4/e-b-introduction.md",sourceDirName:"chap-4",slug:"/chap-4/e-b-introduction",permalink:"/cl-language-reference/chap-4/e-b-introduction",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-4/e-b-introduction.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{title:"4.1 Introduction"},sidebar:"tutorialSidebar",previous:{title:"4. Types and Classes",permalink:"/cl-language-reference/category/4-types-and-classes"},next:{title:"4.2 Types",permalink:"/cl-language-reference/chap-4/e-c-types"}},a={},j=[];function x(e){const t={h1:"h1",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"41-introduction",children:"4.1 Introduction"}),"\n","\n","\n",(0,i.jsx)(c,{})]})}function m(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},11151:(e,t,r)=>{r.d(t,{Z:()=>l,a:()=>c});var i=r(67294);const n={},s=i.createContext(n);function c(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);