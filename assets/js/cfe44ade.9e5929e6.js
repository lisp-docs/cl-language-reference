"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[75654],{59976:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>r});var n=t(85893),a=t(11151);const c={},l="Classes",i={id:"meta-object-protocol/classes",title:"Classes",description:"Classes",source:"@site/docs/meta-object-protocol/classes.md",sourceDirName:"meta-object-protocol",slug:"/meta-object-protocol/classes",permalink:"/cl-language-reference/meta-object-protocol/classes",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/classes.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"T",permalink:"/cl-language-reference/meta-object-protocol/class-t"},next:{title:"Compile-file processing of the user interface macros",permalink:"/cl-language-reference/meta-object-protocol/compile-file-processing-of-the-user-interface-macros"}},o={},r=[{value:"Classes",id:"classes-1",level:3}];function d(e){const s={code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"classes",children:"Classes"}),"\n",(0,n.jsx)(s.h3,{id:"classes-1",children:"Classes"}),"\n",(0,n.jsxs)(s.p,{children:["A ",(0,n.jsx)(s.em,{children:"class metaobject"})," determines the structure and the default behavior of its instances. The following information is associated with class metaobjects:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"The name, if there is one, is available as an object."}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"The direct subclasses, direct superclasses and class precedence list are available as lists of class metaobjects."}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"The slots defined directly in the class are available as a list of direct slot definition metaobjects. The slots which are accessible in instances of the class are available as a list of effective slot definition metaobjects."}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:["The documentation is available as a string or ",(0,n.jsx)(s.code,{children:"nil"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"The methods which use the class as a specializer, and the generic functions associated with those methods are available as lists of method and generic function metaobjects respectively."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},11151:(e,s,t)=>{t.d(s,{Z:()=>i,a:()=>l});var n=t(67294);const a={},c=n.createContext(a);function l(e){const s=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),n.createElement(c.Provider,{value:s},e.children)}}}]);