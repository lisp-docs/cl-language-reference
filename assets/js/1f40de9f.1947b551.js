"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[13186],{45111:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>h});var r=t(85893),a=t(11151);function o(e){const n={em:"em",p:"p",strong:"strong",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"abort"})," ",(0,r.jsx)(n.em,{children:"Restart"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Data Arguments Required:"})}),"\n",(0,r.jsx)(n.p,{children:"None."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["The intent of the ",(0,r.jsx)(n.strong,{children:"abort"})," restart is to allow return to the innermost \u201ccommand level.\u201d Implementors are encouraged to make sure that there is always a restart named ",(0,r.jsx)(n.strong,{children:"abort"})," around any user code so that user code can call ",(0,r.jsx)(n.strong,{children:"abort"})," at any time and expect something reasonable to happen; exactly what the reasonable thing is may vary somewhat. Typically, in an interactive listener, the invocation of"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"abort"})," returns to the ",(0,r.jsx)(n.em,{children:"Lisp reader"})," phase of the ",(0,r.jsx)(n.em,{children:"Lisp read-eval-print loop"}),", though in some batch or multi-processing situations there may be situations in which having it kill the running process is more appropriate."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:["Section 9.1.4.2 (Restarts), Section 9.1.4.2.2 (Interfaces to Restarts), ",(0,r.jsx)(n.strong,{children:"invoke-restart"}),", ",(0,r.jsx)(n.strong,{children:"abort"})," (",(0,r.jsx)(n.em,{children:"function"}),")"]})]})}function s(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}const i={},c="abort",d={id:"chap-9/j-c-dictionary/abort",title:"abort",description:"Expanded Reference: abort",source:"@site/docs/chap-9/j-c-dictionary/abort.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/abort",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/abort",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/abort.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"9.2 Conditions Dictionary",permalink:"/cl-language-reference/docs/category/92-conditions-dictionary"},next:{title:"assert",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/assert"}},l={},h=[{value:"Expanded Reference: abort",id:"expanded-reference-abort",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"abort",children:"abort"}),"\n","\n","\n",(0,r.jsx)(s,{}),"\n",(0,r.jsx)(n.h2,{id:"expanded-reference-abort",children:"Expanded Reference: abort"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(abort )\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>s});var r=t(67294);const a={},o=r.createContext(a);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);