"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[93295],{8394:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>j,frontMatter:()=>t,metadata:()=>h,toc:()=>o});var s=r(85893),i=r(11151);function d(e){const n={em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"destructuring-bind"})," ",(0,s.jsx)(n.em,{children:"Macro"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"destructuring-bind"})," ",(0,s.jsx)(n.em,{children:"lambda-list expression {declaration}"}),"* ",(0,s.jsx)(n.em,{children:"{form}"}),"*"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2192 {result}"}),"*"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"lambda-list"}),"\u2014a ",(0,s.jsx)(n.em,{children:"destructuring lambda list"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"expression"}),"\u2014a ",(0,s.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,s.jsx)(n.strong,{children:"declare"})," ",(0,s.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"forms"}),"\u2014an ",(0,s.jsx)(n.em,{children:"implicit progn"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"results"}),"\u2014the ",(0,s.jsx)(n.em,{children:"values"})," returned by the ",(0,s.jsx)(n.em,{children:"forms"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"destructuring-bind"})," binds the variables specified in ",(0,s.jsx)(n.em,{children:"lambda-list"})," to the corresponding values in the tree structure resulting from the evaluation of ",(0,s.jsx)(n.em,{children:"expression"}),"; then ",(0,s.jsx)(n.strong,{children:"destructuring-bind"})," evaluates ",(0,s.jsx)(n.em,{children:"forms"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"lambda-list"})," supports destructuring as described in Section 3.4.5 (Destructuring Lambda Lists). ",(0,s.jsx)(n.strong,{children:"Examples:"})]}),"\n",(0,s.jsx)(n.p,{children:"(defun iota (n) (loop for i from 1 to n collect i)) ;helper"}),"\n",(0,s.jsx)(n.p,{children:"(destructuring-bind ((a &optional (b \u2019bee)) one two three)"}),"\n",(0,s.jsx)(n.p,{children:"\u2018((alpha) ,@(iota 3))"}),"\n",(0,s.jsxs)(n.p,{children:["(list a b three two one)) ",(0,s.jsx)(n.em,{children:"\u2192"})," (ALPHA BEE 3 2 1)"]}),"\n",(0,s.jsx)(n.p,{children:"Data and Control"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(n.p,{children:["If the result of evaluating the ",(0,s.jsx)(n.em,{children:"expression"})," does not match the destructuring pattern, an error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"error"})," should be signaled."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"macrolet"}),", ",(0,s.jsx)(n.strong,{children:"defmacro"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"let, let"}),(0,s.jsx)(n.em,{children:"\u2217 Special Operator"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"let"})," (",(0,s.jsx)(n.em,{children:"{var |"})," (",(0,s.jsx)(n.em,{children:"var"})," [",(0,s.jsx)(n.em,{children:"init-form"}),"])",(0,s.jsx)(n.em,{children:"}"}),"*) ",(0,s.jsx)(n.em,{children:"{declaration}"}),"* ",(0,s.jsx)(n.em,{children:"{form}"}),"* ",(0,s.jsx)(n.em,{children:"\u2192 {result}"}),"*"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"let*"})," (",(0,s.jsx)(n.em,{children:"{var |"})," (",(0,s.jsx)(n.em,{children:"var"})," [",(0,s.jsx)(n.em,{children:"init-form"}),"])",(0,s.jsx)(n.em,{children:"}"}),"*) ",(0,s.jsx)(n.em,{children:"{declaration}"}),"* ",(0,s.jsx)(n.em,{children:"{form}"}),"* ",(0,s.jsx)(n.em,{children:"\u2192 {result}"}),"*"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"var"}),"\u2014a ",(0,s.jsx)(n.em,{children:"symbol"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"init-form"}),"\u2014a ",(0,s.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,s.jsx)(n.strong,{children:"declare"})," ",(0,s.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"form"}),"\u2014a ",(0,s.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"results"}),"\u2014the ",(0,s.jsx)(n.em,{children:"values"})," returned by the ",(0,s.jsx)(n.em,{children:"forms"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"let"})," and ",(0,s.jsx)(n.strong,{children:"let*"})," create new variable ",(0,s.jsx)(n.em,{children:"bindings"})," and execute a series of ",(0,s.jsx)(n.em,{children:"forms"})," that use these ",(0,s.jsx)(n.em,{children:"bindings"}),". ",(0,s.jsx)(n.strong,{children:"let"})," performs the ",(0,s.jsx)(n.em,{children:"bindings"})," in parallel and ",(0,s.jsx)(n.strong,{children:"let*"})," does them sequentially."]}),"\n",(0,s.jsx)(n.p,{children:"The form"}),"\n",(0,s.jsxs)(n.p,{children:["(let ((",(0,s.jsx)(n.em,{children:"var1 init-form-1"})," )"]}),"\n",(0,s.jsxs)(n.p,{children:["(",(0,s.jsx)(n.em,{children:"var2 init-form-2"})," )"]}),"\n",(0,s.jsx)(n.p,{children:"..."}),"\n",(0,s.jsxs)(n.p,{children:["(",(0,s.jsx)(n.em,{children:"varm init-form-m"}),"))"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"declaration1"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"declaration2"})}),"\n",(0,s.jsx)(n.p,{children:"..."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"declarationp"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"form1"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"form2"})}),"\n",(0,s.jsx)(n.p,{children:"..."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"formn"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"let, let"}),(0,s.jsx)(n.em,{children:"\u2217"})]}),"\n",(0,s.jsxs)(n.p,{children:["first evaluates the expressions ",(0,s.jsx)(n.em,{children:"init-form-1"}),", ",(0,s.jsx)(n.em,{children:"init-form-2"}),", and so on, in that order, saving the resulting values. Then all of the variables ",(0,s.jsx)(n.em,{children:"varj"})," are bound to the corresponding values; each ",(0,s.jsx)(n.em,{children:"binding"})," is lexical unless there is a ",(0,s.jsx)(n.strong,{children:"special"})," declaration to the contrary. The expressions ",(0,s.jsx)(n.em,{children:"formk"})," are then evaluated in order; the values of all but the last are discarded (that is, the body of a ",(0,s.jsx)(n.strong,{children:"let"})," is an ",(0,s.jsx)(n.em,{children:"implicit progn"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"let*"})," is similar to ",(0,s.jsx)(n.strong,{children:"let"}),", but the ",(0,s.jsx)(n.em,{children:"bindings"})," of variables are performed sequentially rather than in parallel. The expression for the ",(0,s.jsx)(n.em,{children:"init-form"})," of a ",(0,s.jsx)(n.em,{children:"var"})," can refer to ",(0,s.jsx)(n.em,{children:"vars"})," previously bound in the ",(0,s.jsx)(n.strong,{children:"let*"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The form"}),"\n",(0,s.jsxs)(n.p,{children:["(let* ((",(0,s.jsx)(n.em,{children:"var1 init-form-1"})," )"]}),"\n",(0,s.jsxs)(n.p,{children:["(",(0,s.jsx)(n.em,{children:"var2 init-form-2"})," )"]}),"\n",(0,s.jsx)(n.p,{children:"..."}),"\n",(0,s.jsxs)(n.p,{children:["(",(0,s.jsx)(n.em,{children:"varm init-form-m"}),"))"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"declaration1"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"declaration2"})}),"\n",(0,s.jsx)(n.p,{children:"..."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"declarationp"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"form1"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"form2"})}),"\n",(0,s.jsx)(n.p,{children:"..."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"formn"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["first evaluates the expression ",(0,s.jsx)(n.em,{children:"init-form-1"}),", then binds the variable ",(0,s.jsx)(n.em,{children:"var1"})," to that value; then it evaluates ",(0,s.jsx)(n.em,{children:"init-form-2"})," and binds ",(0,s.jsx)(n.em,{children:"var2"}),", and so on. The expressions ",(0,s.jsx)(n.em,{children:"formj"})," are then evaluated in order; the values of all but the last are discarded (that is, the body of ",(0,s.jsx)(n.strong,{children:"let*"})," is an implicit ",(0,s.jsx)(n.strong,{children:"progn"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["For both ",(0,s.jsx)(n.strong,{children:"let"})," and ",(0,s.jsx)(n.strong,{children:"let*"}),", if there is not an ",(0,s.jsx)(n.em,{children:"init-form"})," associated with a ",(0,s.jsx)(n.em,{children:"var"}),", ",(0,s.jsx)(n.em,{children:"var"})," is initialized to ",(0,s.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The special form ",(0,s.jsx)(n.strong,{children:"let"})," has the property that the ",(0,s.jsx)(n.em,{children:"scope"})," of the name binding does not include any initial value form. For ",(0,s.jsx)(n.strong,{children:"let*"}),", a variable\u2019s ",(0,s.jsx)(n.em,{children:"scope"})," also includes the remaining initial value forms for subsequent variable bindings."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(n.p,{children:["(setq a \u2019top) ",(0,s.jsx)(n.em,{children:"\u2192"})," TOP"]}),"\n",(0,s.jsxs)(n.p,{children:["(defun dummy-function () a) ",(0,s.jsx)(n.em,{children:"\u2192"})," DUMMY-FUNCTION"]}),"\n",(0,s.jsx)(n.p,{children:"(let ((a \u2019inside) (b a))"}),"\n",(0,s.jsxs)(n.p,{children:['(format nil "~S ~S ~S" a b (dummy-function))) ',(0,s.jsx)(n.em,{children:"\u2192"}),' "INSIDE TOP TOP"']}),"\n",(0,s.jsx)(n.p,{children:"(let* ((a \u2019inside) (b a))"}),"\n",(0,s.jsxs)(n.p,{children:['(format nil "~S ~S ~S" a b (dummy-function))) ',(0,s.jsx)(n.em,{children:"\u2192"}),' "INSIDE INSIDE TOP"']}),"\n",(0,s.jsx)(n.p,{children:"(let ((a \u2019inside) (b a))"}),"\n",(0,s.jsx)(n.p,{children:"(declare (special a))"}),"\n",(0,s.jsxs)(n.p,{children:['(format nil "~S ~S ~S" a b (dummy-function))) ',(0,s.jsx)(n.em,{children:"\u2192"}),' "INSIDE TOP INSIDE"']}),"\n",(0,s.jsx)(n.p,{children:"The code"}),"\n",(0,s.jsx)(n.p,{children:"(let (x)"}),"\n",(0,s.jsx)(n.p,{children:"Data and Control"}),"\n",(0,s.jsx)(n.p,{children:"(declare (integer x))"}),"\n",(0,s.jsx)(n.p,{children:"(setq x (gcd y z))"}),"\n",(0,s.jsx)(n.p,{children:"...)"}),"\n",(0,s.jsxs)(n.p,{children:["is incorrect; although x is indeed set before it is used, and is set to a value of the declared type ",(0,s.jsx)(n.em,{children:"integer"})," , nevertheless x initially takes on the value ",(0,s.jsx)(n.strong,{children:"nil"})," in violation of the type declaration."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"progv"})})]})}function l(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}const t={},c="destructuring-bind",h={id:"chap-5/f-d-dictionary/destructuringbind",title:"destructuring-bind",description:"Expanded Reference: destructuring-bind",source:"@site/docs/chap-5/f-d-dictionary/destructuringbind.md",sourceDirName:"chap-5/f-d-dictionary",slug:"/chap-5/f-d-dictionary/destructuringbind",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/destructuringbind",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-5/f-d-dictionary/destructuringbind.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"defparameter, defvar",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/defparameteraadefvar"},next:{title:"eq",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/eq"}},a={},o=[{value:"Expanded Reference: destructuring-bind",id:"expanded-reference-destructuring-bind",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"destructuring-bind",children:"destructuring-bind"}),"\n","\n","\n",(0,s.jsx)(l,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-destructuring-bind",children:"Expanded Reference: destructuring-bind"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(destructuring-bind )\n"})})]})}function j(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>t,a:()=>l});var s=r(67294);const i={},d=s.createContext(i);function l(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);