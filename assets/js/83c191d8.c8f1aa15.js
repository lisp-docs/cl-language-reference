"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[27809],{31226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var a=n(85893),o=n(11151);const r={},d="make-method-lambda-standard-generic-function-standard-method",c={id:"meta-object-protocol/dictionary/make-method-lambda-standard-generic-function-standard-method",title:"make-method-lambda-standard-generic-function-standard-method",description:"Method MAKE-METHOD-LAMBDA",source:"@site/docs/meta-object-protocol/dictionary/make-method-lambda-standard-generic-function-standard-method.md",sourceDirName:"meta-object-protocol/dictionary",slug:"/meta-object-protocol/dictionary/make-method-lambda-standard-generic-function-standard-method",permalink:"/cl-language-reference/meta-object-protocol/dictionary/make-method-lambda-standard-generic-function-standard-method",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/dictionary/make-method-lambda-standard-generic-function-standard-method.md",tags:[],version:"current",lastUpdatedBy:"daninus14",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"make-instance",permalink:"/cl-language-reference/meta-object-protocol/dictionary/make-instance"},next:{title:"make-method-lambda",permalink:"/cl-language-reference/meta-object-protocol/dictionary/make-method-lambda"}},i={},s=[];function m(e){const t={a:"a",em:"em",h1:"h1",p:"p",strong:"strong",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"make-method-lambda-standard-generic-function-standard-method",children:"make-method-lambda-standard-generic-function-standard-method"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"Method"})," ",(0,a.jsx)(t.strong,{children:"MAKE-METHOD-LAMBDA"})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Syntax:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"make-method-lambda"})," (",(0,a.jsx)(t.em,{children:"generic-function"})," standard-generic-function) (",(0,a.jsx)(t.em,{children:"method"})," standard-method) ",(0,a.jsx)(t.em,{children:"lambda-expression"})," ",(0,a.jsx)(t.em,{children:"environment"})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Description:"})}),"\n",(0,a.jsxs)(t.p,{children:["This is a method on the generic function",(0,a.jsx)(t.a,{href:"/meta-object-protocol/make-method-lambda",children:"make-method-lambda"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"This method returns a method lambda which accepts two arguments, the list of arguments to the generic function, and the list of next methods. What initialization arguments may be returned in the second value are unspecified."}),"\n",(0,a.jsx)(t.p,{children:"This method can be overridden."})]})}function l(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>d});var a=n(67294);const o={},r=a.createContext(o);function d(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);