"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[62001],{67155:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>o});var s=a(85893),t=a(11151);const c={},i="allocate-instance",l={id:"meta-object-protocol/dictionary/allocate-instance",title:"allocate-instance",description:"Generic Function ALLOCATE-INSTANCE",source:"@site/docs/meta-object-protocol/dictionary/allocate-instance.md",sourceDirName:"meta-object-protocol/dictionary",slug:"/meta-object-protocol/dictionary/allocate-instance",permalink:"/cl-language-reference/meta-object-protocol/dictionary/allocate-instance",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/dictionary/allocate-instance.md",tags:[],version:"current",lastUpdatedBy:"daninus14",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"allocate-instance-standard-class",permalink:"/cl-language-reference/meta-object-protocol/dictionary/allocate-instance-standard-class"},next:{title:"BUILT-IN-CLASS",permalink:"/cl-language-reference/meta-object-protocol/dictionary/class-built-in-class"}},r={},o=[{value:"<strong>allocate-instance</strong> (<em>class</em> standard-class) <em><code>&amp;rest</code></em> <em>initargs</em>\n<strong>allocate-instance</strong> (<em>class</em> funcallable-standard-class) <em><code>&amp;rest</code></em> <em>initargs</em>\n<strong>allocate-instance</strong> (<em>class</em> built-in-class) <em><code>&amp;rest</code></em> <em>initargs</em>",id:"allocate-instance-class-standard-class-rest-initargsallocate-instance-class-funcallable-standard-class-rest-initargsallocate-instance-class-built-in-class-rest-initargs",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"allocate-instance",children:"allocate-instance"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Generic Function"})," ",(0,s.jsx)(n.strong,{children:"ALLOCATE-INSTANCE"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"allocate-instance"})," ",(0,s.jsx)(n.em,{children:"class"})," ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"&rest"})})," ",(0,s.jsx)(n.em,{children:"initargs"})," => ",(0,s.jsx)(n.em,{children:"instance"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"class"})," -- A class metaobject."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"initargs"})," -- A list of alternating initialization argument names and values."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"instance"})," -- A newly allocated instance of ",(0,s.jsx)(n.em,{children:"class"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsx)(n.p,{children:"This generic function is called to create a new, uninitialized instance of a class. The interpretation of the concept of an ``uninitialized'' instance depends on the class metaobject class."}),"\n",(0,s.jsxs)(n.p,{children:["Before allocating the new instance,",(0,s.jsx)(n.a,{href:"/meta-object-protocol/class-finalized-p",children:"class-finalized-p"})," is called to see if ",(0,s.jsx)(n.em,{children:"class"})," has been finalized. If it has not been finalized, ",(0,s.jsx)(n.a,{href:"/meta-object-protocol/finalize-inheritance",children:"finalize-inheritance"})," is called before the new instance is allocated."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"allocate-instance-class-standard-class-rest-initargsallocate-instance-class-funcallable-standard-class-rest-initargsallocate-instance-class-built-in-class-rest-initargs",children:[(0,s.jsxs)(n.a,{href:"/meta-object-protocol/allocate-instance-standard-class",children:[(0,s.jsx)(n.strong,{children:"allocate-instance"})," (",(0,s.jsx)(n.em,{children:"class"})," standard-class) ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"&rest"})})," ",(0,s.jsx)(n.em,{children:"initargs"})]}),"\n",(0,s.jsxs)(n.a,{href:"/meta-object-protocol/allocate-instance-funcallable-standard-class",children:[(0,s.jsx)(n.strong,{children:"allocate-instance"})," (",(0,s.jsx)(n.em,{children:"class"})," funcallable-standard-class) ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"&rest"})})," ",(0,s.jsx)(n.em,{children:"initargs"})]}),"\n",(0,s.jsxs)(n.a,{href:"/meta-object-protocol/allocate-instance-built-in-class",children:[(0,s.jsx)(n.strong,{children:"allocate-instance"})," (",(0,s.jsx)(n.em,{children:"class"})," built-in-class) ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.code,{children:"&rest"})})," ",(0,s.jsx)(n.em,{children:"initargs"})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Comments and remarks:"})}),"\n",(0,s.jsxs)(n.p,{children:["See also the ",(0,s.jsx)(n.a,{href:"http://www.lispworks.com/documentation/HyperSpec/Body/f_alloca.htm#allocate-instance",children:"description of this function in the Common Lisp HyperSpec"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The description above suggests that ",(0,s.jsx)(n.code,{children:"allocate-instance"})," checks to see whether the class is finalized and if not, calls ",(0,s.jsx)(n.a,{href:"/meta-object-protocol/finalize-inheritance",children:"finalize-inheritance"}),". However, the ",(0,s.jsx)(n.em,{children:"initargs"})," passed to ",(0,s.jsx)(n.code,{children:"allocate-instance"})," should be the defaulted initargs, and computing those initargs requires the class to be finalized. Therefore, ",(0,s.jsx)(n.a,{href:"/meta-object-protocol/finalize-inheritance",children:"finalize-inheritance"})," must be called ",(0,s.jsx)(n.em,{children:"before"})," ",(0,s.jsx)(n.code,{children:"allocate-instance"})," is called. Peeking at PCL source confirms that ",(0,s.jsx)(n.a,{href:"/meta-object-protocol/finalize-inheritance",children:"finalize-inheritance"})," is called from ",(0,s.jsx)(n.a,{href:"/meta-object-protocol/make-instance",children:"make-instance"})," before ",(0,s.jsx)(n.code,{children:"allocate-instance"})," is called."]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,n,a)=>{a.d(n,{Z:()=>l,a:()=>i});var s=a(67294);const t={},c=s.createContext(t);function i(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);