"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[22272],{20275:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>j,frontMatter:()=>a,metadata:()=>h,toc:()=>o});var s=r(85893),i=r(11151);function t(e){const n={em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"array"})," ",(0,s.jsx)(n.em,{children:"System Class"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Class Precedence List:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"array"}),", ",(0,s.jsx)(n.strong,{children:"t"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)("i",{children:"array"})," contains ",(0,s.jsx)("i",{children:"objects"})," arranged according to a Cartesian coordinate system. An ",(0,s.jsx)("i",{children:"array"})," provides mappings from a set of ",(0,s.jsx)("i",{children:"fixnums {i"}),(0,s.jsx)("sub",{children:"0"}),(0,s.jsx)("i",{children:", i"}),(0,s.jsx)("sub",{children:"1"}),(0,s.jsxs)("i",{children:[", . . . , i",(0,s.jsx)("sub",{children:"r\u2212"})]}),"1",(0,s.jsx)("i",{children:"}"})," to corresponding ",(0,s.jsx)("i",{children:"elements"})," of the ",(0,s.jsx)("i",{children:"array"}),", where 0 ",(0,s.jsxs)("i",{children:["\u2264 i",(0,s.jsx)("sub",{children:"j"})]})," < ",(0,s.jsxs)("i",{children:["d",(0,s.jsx)("sub",{children:"j"})]})," , ",(0,s.jsx)("i",{children:"r"})," is the rank of the array, and ",(0,s.jsxs)("i",{children:["d",(0,s.jsx)("sub",{children:"j"})]})," is the size of ",(0,s.jsx)("i",{children:"dimension j"})," of the array."]}),"\n",(0,s.jsxs)(n.p,{children:["When an ",(0,s.jsx)(n.em,{children:"array"})," is created, the program requesting its creation may declare that all ",(0,s.jsx)(n.em,{children:"elements"})," are of a particular ",(0,s.jsx)(n.em,{children:"type"}),", called the ",(0,s.jsx)(n.em,{children:"expressed array element type"}),". The implementation is permitted to ",(0,s.jsx)(n.em,{children:"upgrade"})," this type in order to produce the ",(0,s.jsx)(n.em,{children:"actual array element type"}),", which is the ",(0,s.jsx)(n.em,{children:"element type"})," for the ",(0,s.jsx)(n.em,{children:"array"})," is actually ",(0,s.jsx)(n.em,{children:"specialized"}),". See the ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"upgraded-array-element-type"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,s.jsx)(n.p,{children:"Specializing."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:["(array [",(0,s.jsx)(n.em,{children:"{element-type |"})," ",(0,s.jsx)(n.strong,{children:"*"}),(0,s.jsx)(n.em,{children:"}"})," [",(0,s.jsx)(n.em,{children:"dimension-spec"}),"]])"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"dimension-spec::"}),"=",(0,s.jsx)(n.em,{children:"rank |"})," ",(0,s.jsx)(n.strong,{children:"*"})," ",(0,s.jsx)(n.em,{children:"|"})," (",(0,s.jsx)(n.em,{children:"{dimension |"})," ",(0,s.jsx)(n.strong,{children:"*"}),(0,s.jsx)(n.em,{children:"}"}),"*)"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"dimension"}),"\u2014a ",(0,s.jsx)(n.em,{children:"valid array dimension"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"element-type"}),"\u2014a ",(0,s.jsx)(n.em,{children:"type specifier"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"rank"}),"\u2014a non-negative ",(0,s.jsx)(n.em,{children:"fixnum"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["This denotes the set of ",(0,s.jsx)(n.em,{children:"arrays"})," whose ",(0,s.jsx)(n.em,{children:"element type"}),", ",(0,s.jsx)(n.em,{children:"rank"}),", and ",(0,s.jsx)(n.em,{children:"dimensions"})," match any given ",(0,s.jsx)(n.em,{children:"element-type"}),", ",(0,s.jsx)(n.em,{children:"rank"}),", and ",(0,s.jsx)(n.em,{children:"dimensions"}),". Specifically:"]}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.em,{children:"element-type"})," is the ",(0,s.jsx)(n.em,{children:"symbol"})," ",(0,s.jsx)(n.strong,{children:"*"}),", ",(0,s.jsx)(n.em,{children:"arrays"})," are not excluded on the basis of their ",(0,s.jsx)(n.em,{children:"element type"}),". Otherwise, only those ",(0,s.jsx)(n.em,{children:"arrays"})," are included whose ",(0,s.jsx)(n.em,{children:"actual array element type"})," is the result of ",(0,s.jsx)(n.em,{children:"upgrading element-type"}),"; see Section 15.1.2.1 (Array Upgrading)."]}),"\n",(0,s.jsxs)(n.p,{children:["If the ",(0,s.jsx)(n.em,{children:"dimension-spec"})," is a ",(0,s.jsx)(n.em,{children:"rank"}),", the set includes only those ",(0,s.jsx)(n.em,{children:"arrays"})," having that ",(0,s.jsx)(n.em,{children:"rank"}),". If the ",(0,s.jsx)(n.em,{children:"dimension-spec"})," is a ",(0,s.jsx)(n.em,{children:"list"})," of ",(0,s.jsx)(n.em,{children:"dimensions"}),", the set includes only those ",(0,s.jsx)(n.em,{children:"arrays"})," having a ",(0,s.jsx)(n.em,{children:"rank"})," given by the ",(0,s.jsx)(n.em,{children:"length"})," of the ",(0,s.jsx)(n.em,{children:"dimensions"}),", and having the indicated ",(0,s.jsx)(n.em,{children:"dimensions"}),"; in this case, ",(0,s.jsx)(n.strong,{children:"*"})," matches any value for the corresponding ",(0,s.jsx)(n.em,{children:"dimension"}),". If the ",(0,s.jsx)(n.em,{children:"dimension-spec"})," is the ",(0,s.jsx)(n.em,{children:"symbol"})," ",(0,s.jsx)(n.strong,{children:"*"}),", the set is not restricted on the basis of ",(0,s.jsx)(n.em,{children:"rank"})," or ",(0,s.jsx)(n.em,{children:"dimension"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"*print-array*"}),", ",(0,s.jsx)(n.strong,{children:"aref"}),", ",(0,s.jsx)(n.strong,{children:"make-array"}),", ",(0,s.jsx)(n.strong,{children:"vector"}),", Section 2.4.8.12 (Sharpsign A), Section 22.1.3.8 (Printing Other Arrays)"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that the type (array t) is a proper ",(0,s.jsx)(n.em,{children:"subtype"})," of the type (array *). The reason is that the type (array t) is the set of ",(0,s.jsx)(n.em,{children:"arrays"})," that can hold any ",(0,s.jsx)(n.em,{children:"object"})," (the ",(0,s.jsx)(n.em,{children:"elements"})," are of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"t"}),", which includes all ",(0,s.jsx)(n.em,{children:"objects"}),"). On the other hand, the type (array *) is the set of all ",(0,s.jsx)(n.em,{children:"arrays"})," whatsoever,"]}),"\n",(0,s.jsxs)(n.p,{children:["including for example ",(0,s.jsx)(n.em,{children:"arrays"})," that can hold only ",(0,s.jsx)(n.em,{children:"characters"}),". The type (array character) is not a ",(0,s.jsx)(n.em,{children:"subtype"})," of the type (array t); the two sets are ",(0,s.jsx)(n.em,{children:"disjoint"})," because the type (array character) is not the set of all ",(0,s.jsx)(n.em,{children:"arrays"})," that can hold ",(0,s.jsx)(n.em,{children:"characters"}),", but rather the set of ",(0,s.jsx)(n.em,{children:"arrays"})," that are specialized to hold precisely ",(0,s.jsx)(n.em,{children:"characters"})," and no other ",(0,s.jsx)(n.em,{children:"objects"}),"."]})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}const a={},d="array",h={id:"chap-15/bf-c-dictionary/array",title:"array",description:"Expanded Reference: array",source:"@site/docs/chap-15/bf-c-dictionary/array.md",sourceDirName:"chap-15/bf-c-dictionary",slug:"/chap-15/bf-c-dictionary/array",permalink:"/cl-language-reference/docs/chap-15/bf-c-dictionary/array",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-15/bf-c-dictionary/array.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"aref",permalink:"/cl-language-reference/docs/chap-15/bf-c-dictionary/aref"},next:{title:"array-dimension",permalink:"/cl-language-reference/docs/chap-15/bf-c-dictionary/arraydimension"}},l={},o=[{value:"Expanded Reference: array",id:"expanded-reference-array",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"array",children:"array"}),"\n","\n","\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-array",children:"Expanded Reference: array"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(array )\n"})})]})}function j(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>c});var s=r(67294);const i={},t=s.createContext(i);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);