"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[51232],{32809:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>x,frontMatter:()=>d,metadata:()=>l,toc:()=>h});var s=r(85893),c=r(11151);function t(e){const n={em:"em",p:"p",strong:"strong",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"check-type"})," ",(0,s.jsx)(n.em,{children:"Macro"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"check-type"})," ",(0,s.jsx)(n.em,{children:"place typespec"})," [",(0,s.jsx)(n.em,{children:"string"}),"] ",(0,s.jsx)(n.em,{children:"\u2192"})," ",(0,s.jsx)(n.strong,{children:"nil"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"place"}),"\u2014a ",(0,s.jsx)(n.em,{children:"place"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"typespec"}),"\u2014a ",(0,s.jsx)(n.em,{children:"type specifier"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"string"}),"\u2014a ",(0,s.jsx)(n.em,{children:"string"}),"; evaluated."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"check-type"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"check-type"})," signals a ",(0,s.jsx)(n.em,{children:"correctable error"})," of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"type-error"})," if the contents of ",(0,s.jsx)(n.em,{children:"place"})," are not of the type ",(0,s.jsx)(n.em,{children:"typespec"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"check-type"})," can return only if the ",(0,s.jsx)(n.strong,{children:"store-value"})," ",(0,s.jsx)(n.em,{children:"restart"})," is invoked, either explicitly from a handler or implicitly as one of the options offered by the debugger. If the ",(0,s.jsx)(n.strong,{children:"store-value"})," ",(0,s.jsx)(n.em,{children:"restart"})," is invoked, ",(0,s.jsx)(n.strong,{children:"check-type"})," stores the new value that is the argument to the ",(0,s.jsx)(n.em,{children:"restart"})," invocation (or that is prompted for interactively by the debugger) in ",(0,s.jsx)(n.em,{children:"place"})," and starts over, checking the type of the new value and signaling another error if it is still not of the desired ",(0,s.jsx)(n.em,{children:"type"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The first time ",(0,s.jsx)(n.em,{children:"place"})," is ",(0,s.jsx)(n.em,{children:"evaluated"}),", it is ",(0,s.jsx)(n.em,{children:"evaluated"})," by normal evaluation rules. It is later ",(0,s.jsx)(n.em,{children:"evaluated"})," as a ",(0,s.jsx)(n.em,{children:"place"})," if the type check fails and the ",(0,s.jsx)(n.strong,{children:"store-value"})," ",(0,s.jsx)(n.em,{children:"restart"})," is used; see Section 5.1.1.1 (Evaluation of Subforms to Places)."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"string"})," should be an English description of the type, starting with an indefinite article (\u201ca\u201d or \u201can\u201d). If ",(0,s.jsx)(n.em,{children:"string"})," is not supplied, it is computed automatically from ",(0,s.jsx)(n.em,{children:"typespec"}),". The automatically generated message mentions ",(0,s.jsx)(n.em,{children:"place"}),", its contents, and the desired type. An implementation may choose to generate a somewhat differently worded error message if it recognizes that ",(0,s.jsx)(n.em,{children:"place"})," is of a particular form, such as one of the arguments to the function that called ",(0,s.jsx)(n.strong,{children:"check-type"}),". ",(0,s.jsx)(n.em,{children:"string"})," is allowed because some applications of ",(0,s.jsx)(n.strong,{children:"check-type"})," may require a more specific description of what is wanted than can be generated automatically from ",(0,s.jsx)(n.em,{children:"typespec"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.p,{children:"(setq aardvarks \u2019(sam harry fred))"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2192"})," (SAM HARRY FRED)"]}),"\n",(0,s.jsx)(n.p,{children:"(check-type aardvarks (array * (3)))"}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Error: The value of AARDVARKS, (SAM HARRY FRED),"}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 is not a 3-long array."}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 To continue, type ",":CONTINUE"," followed by an option number:"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 1: Specify a value to use instead."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 2: Return to Lisp Toplevel."}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 Debug> ",":CONTINUE"," 1"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Use Value: #(SAM FRED HARRY)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,s.jsx)(n.p,{children:"aardvarks"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2192"})," #<ARRAY-T-3 13571>"]}),"\n",(0,s.jsx)(n.p,{children:"(map \u2019list #\u2019identity aardvarks)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2192"})," (SAM FRED HARRY)"]}),"\n",(0,s.jsx)(n.p,{children:"(setq aardvark-count \u2019foo)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2192"})," FOO"]}),"\n",(0,s.jsx)(n.p,{children:'(check-type aardvark-count (integer 0 *) "A positive integer")'}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Error: The value of AARDVARK-COUNT, FOO, is not a positive integer."}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 To continue, type ",":CONTINUE"," followed by an option number:"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 1: Specify a value to use instead."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 2: Top level."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"check-type"})}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 Debug> ",":CONTINUE"," 2"]}),"\n",(0,s.jsx)(n.p,{children:"(defmacro define-adder (name amount)"}),"\n",(0,s.jsx)(n.p,{children:'(check-type name (and symbol (not null)) "a name for an adder function") (check-type amount integer)'}),"\n",(0,s.jsx)(n.p,{children:"\u2018(defun ,name (x) (+ x ,amount)))"}),"\n",(0,s.jsx)(n.p,{children:"(macroexpand \u2019(define-adder add3 3))"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2192"})," (defun add3 (x) (+ x 3))"]}),"\n",(0,s.jsx)(n.p,{children:"(macroexpand \u2019(define-adder 7 7))"}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 Error: The value of NAME, 7, is not a name for an adder function. \u25b7 To continue, type ",":CONTINUE"," followed by an option number:"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 1: Specify a value to use instead."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 2: Top level."}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 Debug> ",":Continue"," 1"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Specify a value to use instead."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Type a form to be evaluated and used instead: \u2019ADD7"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2192"})," (defun add7 (x) (+ x 7))"]}),"\n",(0,s.jsx)(n.p,{children:"(macroexpand \u2019(define-adder add5 something))"}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Error: The value of AMOUNT, SOMETHING, is not an integer."}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 To continue, type ",":CONTINUE"," followed by an option number:"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 1: Specify a value to use instead."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 2: Top level."}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 Debug> ",":Continue"," 1"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Type a form to be evaluated and used instead: 5"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2192"})," (defun add5 (x) (+ x 5))"]}),"\n",(0,s.jsx)(n.p,{children:"Control is transferred to a handler."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,s.jsx)(n.p,{children:"The debugger might be entered."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"*break-on-signals*"})}),"\n",(0,s.jsx)(n.p,{children:"The implementation."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(n.p,{children:"Section 9.1 (Condition System Concepts)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:["(check-type ",(0,s.jsx)(n.em,{children:"place typespec"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2261"})," (assert (typep ",(0,s.jsx)(n.em,{children:"place"})," \u2019",(0,s.jsx)(n.em,{children:"typespec"}),") (",(0,s.jsx)(n.em,{children:"place"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["\u2019type-error ",":datum"," ",(0,s.jsx)(n.em,{children:"place"})," ",":expected-type"," \u2019",(0,s.jsx)(n.em,{children:"typespec"}),")"]})]})}function i(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}const d={},a="check-type",l={id:"chap-9/j-c-dictionary/checktype",title:"check-type",description:"Expanded Reference: check-type",source:"@site/docs/chap-9/j-c-dictionary/checktype.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/checktype",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/checktype",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/checktype.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"cerror",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/cerror"},next:{title:"compute-restarts",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/computerestarts"}},o={},h=[{value:"Expanded Reference: check-type",id:"expanded-reference-check-type",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"check-type",children:"check-type"}),"\n","\n","\n",(0,s.jsx)(i,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-check-type",children:"Expanded Reference: check-type"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(check-type )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>i});var s=r(67294);const c={},t=s.createContext(c);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);