"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[4332],{8817:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>j,frontMatter:()=>o,metadata:()=>l,toc:()=>h});var t=s(5893),r=s(1151);function c(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"4.1 Introduction"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.em,{children:"type"})," is a (possibly infinite) set of ",(0,t.jsx)(n.em,{children:"objects"}),". An ",(0,t.jsx)(n.em,{children:"object"})," can belong to more than one ",(0,t.jsx)(n.em,{children:"type"}),". ",(0,t.jsx)(n.em,{children:"Types"})," are never explicitly represented as ",(0,t.jsx)(n.em,{children:"objects"})," by Common Lisp. Instead, they are referred to indirectly by the use of ",(0,t.jsx)(n.em,{children:"type specifiers"}),", which are ",(0,t.jsx)(n.em,{children:"objects"})," that denote ",(0,t.jsx)(n.em,{children:"types"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["New ",(0,t.jsx)(n.em,{children:"types"})," can be defined using ",(0,t.jsx)(n.strong,{children:"deftype"}),", ",(0,t.jsx)(n.strong,{children:"defstruct"}),", ",(0,t.jsx)(n.strong,{children:"defclass"}),", and ",(0,t.jsx)(n.strong,{children:"define-condition"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.em,{children:"function"})," ",(0,t.jsx)(n.strong,{children:"typep"}),", a set membership test, is used to determine whether a given ",(0,t.jsx)(n.em,{children:"object"})," is of a given ",(0,t.jsx)(n.em,{children:"type"}),". The function ",(0,t.jsx)(n.strong,{children:"subtypep"}),", a subset test, is used to determine whether a given ",(0,t.jsx)(n.em,{children:"type"})," is a ",(0,t.jsx)(n.em,{children:"subtype"})," of another given ",(0,t.jsx)(n.em,{children:"type"}),". The function ",(0,t.jsx)(n.strong,{children:"type-of"})," returns a particular ",(0,t.jsx)(n.em,{children:"type"})," to which a given"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"object"})," belongs, even though that ",(0,t.jsx)(n.em,{children:"object"})," must belong to one or more other ",(0,t.jsx)(n.em,{children:"types"})," as well. (For example, every ",(0,t.jsx)(n.em,{children:"object"})," is of ",(0,t.jsx)(n.em,{children:"type"})," ",(0,t.jsx)(n.strong,{children:"t"}),", but ",(0,t.jsx)(n.strong,{children:"type-of"})," always returns a ",(0,t.jsx)(n.em,{children:"type specifier"})," for a ",(0,t.jsx)(n.em,{children:"type"})," more specific than ",(0,t.jsx)(n.strong,{children:"t"}),".)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Objects"}),", not ",(0,t.jsx)(n.em,{children:"variables"}),", have ",(0,t.jsx)(n.em,{children:"types"}),". Normally, any ",(0,t.jsx)(n.em,{children:"variable"})," can have any ",(0,t.jsx)(n.em,{children:"object"})," as its ",(0,t.jsx)(n.em,{children:"value"}),". It is possible to declare that a ",(0,t.jsx)(n.em,{children:"variable"})," takes on only values of a given ",(0,t.jsx)(n.em,{children:"type"})," by making an explicit ",(0,t.jsx)(n.em,{children:"type declaration"}),". ",(0,t.jsx)(n.em,{children:"Types"})," are arranged in a directed acyclic graph, except for the presence of equivalences."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Declarations"})," can be made about ",(0,t.jsx)(n.em,{children:"types"})," using ",(0,t.jsx)(n.strong,{children:"declare"}),", ",(0,t.jsx)(n.strong,{children:"proclaim"}),", ",(0,t.jsx)(n.strong,{children:"declaim"}),", or ",(0,t.jsx)(n.strong,{children:"the"}),". For more information about ",(0,t.jsx)(n.em,{children:"declarations"}),", see Section 3.3 (Declarations)."]}),"\n",(0,t.jsxs)(n.p,{children:["Among the fundamental ",(0,t.jsx)(n.em,{children:"objects"})," of the object system are ",(0,t.jsx)(n.em,{children:"classes"}),". A ",(0,t.jsx)(n.em,{children:"class"})," determines the structure and behavior of a set of other ",(0,t.jsx)(n.em,{children:"objects"}),", which are called its ",(0,t.jsx)(n.em,{children:"instances"}),". Every ",(0,t.jsx)(n.em,{children:"object"})," is a ",(0,t.jsx)(n.em,{children:"direct instance"})," of a ",(0,t.jsx)(n.em,{children:"class"}),". The ",(0,t.jsx)(n.em,{children:"class"})," of an ",(0,t.jsx)(n.em,{children:"object"})," determines the set of operations that can be performed on the ",(0,t.jsx)(n.em,{children:"object"}),". For more information, see Section 4.3 (Classes)."]}),"\n",(0,t.jsxs)(n.p,{children:["It is possible to write ",(0,t.jsx)(n.em,{children:"functions"})," that have behavior ",(0,t.jsx)(n.em,{children:"specialized"})," to the class of the ",(0,t.jsx)(n.em,{children:"objects"})," which are their ",(0,t.jsx)(n.em,{children:"arguments"}),". For more information, see Section 7.6 (Generic Functions and Methods)."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.em,{children:"class"})," of the ",(0,t.jsx)(n.em,{children:"class"})," of an ",(0,t.jsx)(n.em,{children:"object"})," is called its ",(0,t.jsx)(n.em,{children:"metaclass"}),". For more information about ",(0,t.jsx)(n.em,{children:"metaclasses"}),", see Section 7.4 (Meta-Objects)."]})]})}function i(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}const o={title:"4.1 Introduction"},a="4.1 Introduction",l={id:"chap-4/e-b-introduction",title:"4.1 Introduction",description:"",source:"@site/docs/chap-4/e-b-introduction.md",sourceDirName:"chap-4",slug:"/chap-4/e-b-introduction",permalink:"/cl-language-reference/docs/chap-4/e-b-introduction",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/chap-4/e-b-introduction.md",tags:[],version:"current",frontMatter:{title:"4.1 Introduction"},sidebar:"tutorialSidebar",previous:{title:"4. Types and Classes",permalink:"/cl-language-reference/docs/category/4-types-and-classes"},next:{title:"4.2 Types",permalink:"/cl-language-reference/docs/chap-4/e-c-types"}},d={},h=[];function m(e){const n={h1:"h1",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"41-introduction",children:"4.1 Introduction"}),"\n","\n","\n",(0,t.jsx)(i,{})]})}function j(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>i});var t=s(7294);const r={},c=t.createContext(r);function i(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);