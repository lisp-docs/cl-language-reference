"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[55524],{37632:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>x,frontMatter:()=>t,metadata:()=>a,toc:()=>h});var l=i(85893),s=i(11151);function o(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"eval-when"})," ",(0,l.jsx)(n.em,{children:"Special Operator"})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"eval-when"})," (",(0,l.jsx)(n.em,{children:"{situation}"}),"*) ",(0,l.jsx)(n.em,{children:"{form}"}),"* ",(0,l.jsx)(n.em,{children:"\u2192 {result}"}),"*"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.em,{children:"situation"}),"\u2014One of the ",(0,l.jsx)(n.em,{children:"symbols"})," ",":compile-toplevel",", ",":load-toplevel",", ",":execute",", ",(0,l.jsx)(n.strong,{children:"compile"}),", ",(0,l.jsx)(n.strong,{children:"load"}),", or ",(0,l.jsx)(n.strong,{children:"eval"}),". The use of ",(0,l.jsx)(n.strong,{children:"eval"}),", ",(0,l.jsx)(n.strong,{children:"compile"}),", and ",(0,l.jsx)(n.strong,{children:"load"})," is deprecated."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.em,{children:"forms"}),"\u2014an ",(0,l.jsx)(n.em,{children:"implicit progn"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.em,{children:"results"}),"\u2014the ",(0,l.jsx)(n.em,{children:"values"})," of the ",(0,l.jsx)(n.em,{children:"forms"})," if they are executed, or ",(0,l.jsx)(n.strong,{children:"nil"})," if they are not."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Description:"})}),"\n",(0,l.jsxs)(n.p,{children:["The body of an ",(0,l.jsx)(n.strong,{children:"eval-when"})," form is processed as an ",(0,l.jsx)(n.em,{children:"implicit progn"}),", but only in the ",(0,l.jsx)(n.em,{children:"situations"})," listed."]}),"\n",(0,l.jsxs)(n.p,{children:["The use of the ",(0,l.jsx)(n.em,{children:"situations"})," ",":compile-toplevel"," (or compile) and ",":load-toplevel"," (or load) controls whether and when ",(0,l.jsx)(n.em,{children:"evaluation"})," occurs when ",(0,l.jsx)(n.strong,{children:"eval-when"})," appears as a ",(0,l.jsx)(n.em,{children:"top level form"})," in code processed by ",(0,l.jsx)(n.strong,{children:"compile-file"}),". See Section 3.2.3 (File Compilation)."]}),"\n",(0,l.jsxs)(n.p,{children:["The use of the ",(0,l.jsx)(n.em,{children:"situation"})," ",":execute"," (or eval) controls whether evaluation occurs for other ",(0,l.jsx)(n.strong,{children:"eval-when"})," ",(0,l.jsx)(n.em,{children:"forms"}),"; that is, those that are not ",(0,l.jsx)(n.em,{children:"top level forms"}),", or those in code processed by ",(0,l.jsx)(n.strong,{children:"eval"})," or ",(0,l.jsx)(n.strong,{children:"compile"}),". If the ",":execute"," situation is specified in such a ",(0,l.jsx)(n.em,{children:"form"}),", then the body ",(0,l.jsx)(n.em,{children:"forms"})," are processed as an ",(0,l.jsx)(n.em,{children:"implicit progn"}),"; otherwise, the ",(0,l.jsx)(n.strong,{children:"eval-when"})," ",(0,l.jsx)(n.em,{children:"form"})," returns ",(0,l.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"eval-when"})," normally appears as a ",(0,l.jsx)(n.em,{children:"top level form"}),", but it is meaningful for it to appear as a ",(0,l.jsx)(n.em,{children:"non-top-level form"}),". However, the compile-time side effects described in Section 3.2 (Compilation) only take place when ",(0,l.jsx)(n.strong,{children:"eval-when"})," appears as a ",(0,l.jsx)(n.em,{children:"top level form"}),"."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,l.jsxs)(n.p,{children:["One example of the use of ",(0,l.jsx)(n.strong,{children:"eval-when"})," is that for the compiler to be able to read a file properly when it uses user-defined ",(0,l.jsx)(n.em,{children:"reader macros"}),", it is necessary to write"]}),"\n",(0,l.jsxs)(n.p,{children:["(eval-when (",":compile-toplevel"," ",":load-toplevel"," ",":execute",")"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"eval-when"})}),"\n",(0,l.jsx)(n.p,{children:"(set-macro-character #$ #\u2019(lambda (stream char)"}),"\n",(0,l.jsx)(n.p,{children:"(declare (ignore char))"}),"\n",(0,l.jsxs)(n.p,{children:["(list \u2019dollar (read stream))))) ",(0,l.jsx)(n.em,{children:"\u2192"})," T"]}),"\n",(0,l.jsxs)(n.p,{children:["This causes the call to ",(0,l.jsx)(n.strong,{children:"set-macro-character"})," to be executed in the compiler\u2019s execution environment, thereby modifying its reader syntax table."]}),"\n",(0,l.jsxs)(n.p,{children:[";;; The EVAL-WHEN in this case is not at toplevel, so only the ",":EXECUTE"]}),"\n",(0,l.jsx)(n.p,{children:";;; keyword is considered. At compile time, this has no effect."}),"\n",(0,l.jsx)(n.p,{children:";;; At load time (if the LET is at toplevel), or at execution time"}),"\n",(0,l.jsx)(n.p,{children:";;; (if the LET is embedded in some other form which does not execute"}),"\n",(0,l.jsx)(n.p,{children:";;; until later) this sets (SYMBOL-FUNCTION \u2019FOO1) to a function which"}),"\n",(0,l.jsx)(n.p,{children:";;; returns 1."}),"\n",(0,l.jsx)(n.p,{children:"(let ((x 1))"}),"\n",(0,l.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":load-toplevel"," ",":compile-toplevel",")"]}),"\n",(0,l.jsx)(n.p,{children:"(setf (symbol-function \u2019foo1) #\u2019(lambda () x))))"}),"\n",(0,l.jsx)(n.p,{children:";;; If this expression occurs at the toplevel of a file to be compiled,"}),"\n",(0,l.jsx)(n.p,{children:";;; it has BOTH a compile time AND a load-time effect of setting"}),"\n",(0,l.jsx)(n.p,{children:";;; (SYMBOL-FUNCTION \u2019FOO2) to a function which returns 2."}),"\n",(0,l.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":load-toplevel"," ",":compile-toplevel",")"]}),"\n",(0,l.jsx)(n.p,{children:"(let ((x 2))"}),"\n",(0,l.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":load-toplevel"," ",":compile-toplevel",")"]}),"\n",(0,l.jsx)(n.p,{children:"(setf (symbol-function \u2019foo2) #\u2019(lambda () x)))))"}),"\n",(0,l.jsx)(n.p,{children:";;; If this expression occurs at the toplevel of a file to be compiled,"}),"\n",(0,l.jsx)(n.p,{children:";;; it has BOTH a compile time AND a load-time effect of setting the"}),"\n",(0,l.jsx)(n.p,{children:";;; function cell of FOO3 to a function which returns 3."}),"\n",(0,l.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":load-toplevel"," ",":compile-toplevel",")"]}),"\n",(0,l.jsx)(n.p,{children:"(setf (symbol-function \u2019foo3) #\u2019(lambda () 3)))"}),"\n",(0,l.jsx)(n.p,{children:";;; #4: This always does nothing. It simply returns NIL."}),"\n",(0,l.jsxs)(n.p,{children:["(eval-when (",":compile-toplevel",")"]}),"\n",(0,l.jsxs)(n.p,{children:["(eval-when (",":compile-toplevel",")"]}),"\n",(0,l.jsx)(n.p,{children:"(print \u2019foo4)))"}),"\n",(0,l.jsx)(n.p,{children:";;; If this form occurs at toplevel of a file to be compiled, FOO5 is"}),"\n",(0,l.jsx)(n.p,{children:";;; printed at compile time. If this form occurs in a non-top-level"}),"\n",(0,l.jsx)(n.p,{children:";;; position, nothing is printed at compile time. Regardless of context,"}),"\n",(0,l.jsx)(n.p,{children:";;; nothing is ever printed at load time or execution time."}),"\n",(0,l.jsxs)(n.p,{children:["(eval-when (",":compile-toplevel",")"]}),"\n",(0,l.jsxs)(n.p,{children:["(eval-when (",":execute",")"]}),"\n",(0,l.jsx)(n.p,{children:"(print \u2019foo5)))"}),"\n",(0,l.jsx)(n.p,{children:";;; If this form occurs at toplevel of a file to be compiled, FOO6 is"}),"\n",(0,l.jsx)(n.p,{children:";;; printed at compile time. If this form occurs in a non-top-level"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"eval-when"})}),"\n",(0,l.jsx)(n.p,{children:";;; position, nothing is printed at compile time. Regardless of context,"}),"\n",(0,l.jsx)(n.p,{children:";;; nothing is ever printed at load time or execution time."}),"\n",(0,l.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":load-toplevel",")"]}),"\n",(0,l.jsxs)(n.p,{children:["(eval-when (",":compile-toplevel",")"]}),"\n",(0,l.jsx)(n.p,{children:"(print \u2019foo6)))"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"compile-file"}),", Section 3.2 (Compilation)"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,l.jsxs)(n.p,{children:["The following effects are logical consequences of the definition of ",(0,l.jsx)(n.strong,{children:"eval-when"}),":"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.em,{children:"\u2022"})," Execution of a single ",(0,l.jsx)(n.strong,{children:"eval-when"})," expression executes the body code at most once."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.em,{children:"\u2022 Macros"})," intended for use in ",(0,l.jsx)(n.em,{children:"top level forms"})," should be written so that side-effects are done by the ",(0,l.jsx)(n.em,{children:"forms"})," in the macro expansion. The macro-expander itself should not do the side-effects."]}),"\n",(0,l.jsx)(n.p,{children:"For example:"}),"\n",(0,l.jsx)(n.p,{children:"Wrong:"}),"\n",(0,l.jsx)(n.p,{children:"(defmacro foo ()"}),"\n",(0,l.jsx)(n.p,{children:"(really-foo)"}),"\n",(0,l.jsx)(n.p,{children:"\u2018(really-foo))"}),"\n",(0,l.jsx)(n.p,{children:"Right:"}),"\n",(0,l.jsx)(n.p,{children:"(defmacro foo ()"}),"\n",(0,l.jsxs)(n.p,{children:["\u2018(eval-when (",":compile-toplevel"," ",":execute"," ",":load-toplevel",") (really-foo)))"]}),"\n",(0,l.jsxs)(n.p,{children:["Adherence to this convention means that such ",(0,l.jsx)(n.em,{children:"macros"})," behave intuitively when appearing as ",(0,l.jsx)(n.em,{children:"non-top-level forms"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.em,{children:"\u2022"})," Placing a variable binding around an ",(0,l.jsx)(n.strong,{children:"eval-when"})," reliably captures the binding because the compile-time-too mode cannot occur (",(0,l.jsx)(n.em,{children:"i.e."}),", introducing a variable binding means that the ",(0,l.jsx)(n.strong,{children:"eval-when"})," is not a ",(0,l.jsx)(n.em,{children:"top level form"}),"). For example,"]}),"\n",(0,l.jsx)(n.p,{children:"(let ((x 3))"}),"\n",(0,l.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":load-toplevel"," ",":compile-toplevel",") (print x)))"]}),"\n",(0,l.jsxs)(n.p,{children:["prints 3 at execution (",(0,l.jsx)(n.em,{children:"i.e."}),", load) time, and does not print anything at compile time. This is important so that expansions of ",(0,l.jsx)(n.strong,{children:"defun"})," and ",(0,l.jsx)(n.strong,{children:"defmacro"})," can be done in terms of ",(0,l.jsx)(n.strong,{children:"eval-when"})," and can correctly capture the ",(0,l.jsx)(n.em,{children:"lexical environment"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"(defun bar (x) (defun foo () (+ x 3)))"}),"\n",(0,l.jsx)(n.p,{children:"(defun bar (x)"}),"\n",(0,l.jsxs)(n.p,{children:["(progn (eval-when (",":compile-toplevel",")"]}),"\n",(0,l.jsx)(n.p,{children:"(compiler::notice-function-definition \u2019foo \u2019(x)))"}),"\n",(0,l.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":load-toplevel",")"]}),"\n",(0,l.jsx)(n.p,{children:"(setf (symbol-function \u2019foo) #\u2019(lambda () (+ x 3))))))"}),"\n",(0,l.jsx)(n.p,{children:"which would be treated by the above rules the same as"}),"\n",(0,l.jsx)(n.p,{children:"(defun bar (x)"}),"\n",(0,l.jsx)(n.p,{children:"(setf (symbol-function \u2019foo) #\u2019(lambda () (+ x 3))))"}),"\n",(0,l.jsxs)(n.p,{children:["when the definition of bar is not a ",(0,l.jsx)(n.em,{children:"top level form"}),"."]})]})}function r(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}const t={},c="eval-when",a={id:"chap-3/d-i-dictionary/evalwhen",title:"eval-when",description:"Expanded Reference: eval-when",source:"@site/docs/chap-3/d-i-dictionary/evalwhen.md",sourceDirName:"chap-3/d-i-dictionary",slug:"/chap-3/d-i-dictionary/evalwhen",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/evalwhen",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-3/d-i-dictionary/evalwhen.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"eval",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/eval"},next:{title:"lambda",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/lambda"}},d={},h=[{value:"Expanded Reference: eval-when",id:"expanded-reference-eval-when",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"eval-when",children:"eval-when"}),"\n","\n","\n",(0,l.jsx)(r,{}),"\n",(0,l.jsx)(n.h2,{id:"expanded-reference-eval-when",children:"Expanded Reference: eval-when"}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lisp",children:"(eval-when )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(p,{...e})}):p(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>t,a:()=>r});var l=i(67294);const s={},o=l.createContext(s);function r(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);