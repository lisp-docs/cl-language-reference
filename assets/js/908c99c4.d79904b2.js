"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[68403],{55304:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>o});var i=n(85893),s=n(11151);function t(e){const r={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components},{ClLinks:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"simple-array"})," ",(0,i.jsx)(n,{term:"type",children:(0,i.jsx)("i",{children:"Type"})})]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Supertypes:"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(n,{term:"simple-array",children:(0,i.jsx)("b",{children:"simple-array"})}),", ",(0,i.jsx)(n,{term:"array",children:(0,i.jsx)("b",{children:"array"})}),", ",(0,i.jsx)(n,{term:"t",children:(0,i.jsx)("b",{children:"t"})})]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(n,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," of an ",(0,i.jsx)(n,{term:"array",children:(0,i.jsx)("i",{children:"array"})})," that is not displaced to another ",(0,i.jsx)(n,{term:"array",children:(0,i.jsx)("i",{children:"array"})}),", has no ",(0,i.jsx)(r.em,{children:"fill pointer"})," , and is not ",(0,i.jsx)(r.em,{children:"expressly adjustable"})," is a ",(0,i.jsx)(n,{term:"subtype",children:(0,i.jsx)("i",{children:"subtype"})})," of ",(0,i.jsx)(n,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(n,{term:"simple-array",children:(0,i.jsx)("b",{children:"simple-array"})}),". The concept of a ",(0,i.jsx)(r.em,{children:"simple array"})," exists to allow the implementation to use a specialized representation and to allow the user to declare that certain values will always be ",(0,i.jsx)(r.em,{children:"simple arrays"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(n,{term:"type",children:(0,i.jsx)("i",{children:"types"})})," ",(0,i.jsx)(n,{term:"simple-vector",children:(0,i.jsx)("b",{children:"simple-vector"})}),", ",(0,i.jsx)(n,{term:"simple-string",children:(0,i.jsx)("b",{children:"simple-string"})}),", and ",(0,i.jsx)(n,{term:"simple-bit-vector",children:(0,i.jsx)("b",{children:"simple-bit-vector"})})," are ",(0,i.jsx)(r.em,{children:"disjoint subtypes"})," of ",(0,i.jsx)(n,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(n,{term:"simple-array",children:(0,i.jsx)("b",{children:"simple-array"})}),", for they respectively mean (simple-array t (*)), the union of all (simple-array ",(0,i.jsx)(r.em,{children:"c"})," (*)) for any ",(0,i.jsx)(r.em,{children:"c"})," being a ",(0,i.jsx)(n,{term:"subtype",children:(0,i.jsx)("i",{children:"subtype"})})," of ",(0,i.jsx)(n,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(n,{term:"character",children:(0,i.jsx)("b",{children:"character"})}),", and (simple-array bit (*))."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,i.jsx)(r.p,{children:"Specializing."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,i.jsxs)(r.p,{children:["(simple-array [",(0,i.jsx)(r.em,{children:"{element-type |"})," ",(0,i.jsx)(r.strong,{children:"*"}),(0,i.jsx)(r.em,{children:"}"})," [",(0,i.jsx)(r.em,{children:"dimension-spec"}),"]])"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"dimension-spec::"}),"=",(0,i.jsx)(r.em,{children:"rank |"})," ",(0,i.jsx)(r.strong,{children:"*"})," ",(0,i.jsx)(r.em,{children:"|"})," (",(0,i.jsx)(r.em,{children:"{dimension |"})," ",(0,i.jsx)(r.strong,{children:"*"}),(0,i.jsx)(r.em,{children:"}"}),"*)"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(n,{term:"dimension",children:(0,i.jsx)("i",{children:"dimension"})}),"\u2014a ",(0,i.jsx)(r.em,{children:"valid array dimension"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"element-type"}),"\u2014a ",(0,i.jsx)(r.em,{children:"type specifier"})," ."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(n,{term:"rank",children:(0,i.jsx)("i",{children:"rank"})}),"\u2014a non-negative ",(0,i.jsx)(n,{term:"fixnum",children:(0,i.jsx)("i",{children:"fixnum"})}),"."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,i.jsxs)(r.p,{children:["This ",(0,i.jsx)(r.em,{children:"compound type specifier"})," is treated exactly as the corresponding ",(0,i.jsx)(r.em,{children:"compound type specifier"})," for ",(0,i.jsx)(n,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(n,{term:"array",children:(0,i.jsx)("b",{children:"array"})})," would be treated, except that the set is further constrained to include only ",(0,i.jsx)(r.em,{children:"simple arrays"}),"."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(r.p,{children:["It is ",(0,i.jsx)(n,{term:"implementation-dependent",children:(0,i.jsx)("i",{children:"implementation-dependent"})})," whether ",(0,i.jsx)(r.em,{children:"displaced arrays"}),", ",(0,i.jsx)(r.em,{children:"vectors"})," with ",(0,i.jsx)(r.em,{children:"fill pointers"}),", or arrays that are ",(0,i.jsx)(r.em,{children:"actually adjustable"})," are ",(0,i.jsx)(r.em,{children:"simple arrays"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["(simple-array *) refers to all ",(0,i.jsx)(r.em,{children:"simple arrays"})," regardless of element type, (simple-array ",(0,i.jsx)(r.em,{children:"type specifier"}),") refers only to those ",(0,i.jsx)(r.em,{children:"simple arrays"})," that can result from giving ",(0,i.jsx)(r.em,{children:"type-specifier"})," as the ",":element-type"," argument to ",(0,i.jsx)(n,{term:"make-array",children:(0,i.jsx)("b",{children:"make-array"})}),"."]})]})}function c(e={}){const{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}const l={title:"simple-array"},a="simple-array",d={id:"chap-15/bf-c-dictionary/simple-array_type",title:"simple-array",description:"Expanded Reference: simple-array",source:"@site/docs/chap-15/bf-c-dictionary/simple-array_type.md",sourceDirName:"chap-15/bf-c-dictionary",slug:"/chap-15/bf-c-dictionary/simple-array_type",permalink:"/cl-language-reference/chap-15/bf-c-dictionary/simple-array_type",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-15/bf-c-dictionary/simple-array_type.md",tags:[],version:"current",frontMatter:{title:"simple-array"},sidebar:"tutorialSidebar",previous:{title:"row-major-aref",permalink:"/cl-language-reference/chap-15/bf-c-dictionary/row-major-aref_accessor"},next:{title:"simple-bit-vector-p",permalink:"/cl-language-reference/chap-15/bf-c-dictionary/simple-bit-vector-p_function"}},p={},o=[{value:"Expanded Reference: simple-array",id:"expanded-reference-simple-array",level:2}];function h(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"simple-array",children:"simple-array"}),"\n","\n","\n",(0,i.jsx)(c,{}),"\n",(0,i.jsx)(r.h2,{id:"expanded-reference-simple-array",children:"Expanded Reference: simple-array"}),"\n",(0,i.jsx)(r.admonition,{type:"tip",children:(0,i.jsx)(r.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lisp",children:"(simple-array )\n"})})]})}function m(e={}){const{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},11151:(e,r,n)=>{n.d(r,{Z:()=>l,a:()=>c});var i=n(67294);const s={},t=i.createContext(s);function c(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);