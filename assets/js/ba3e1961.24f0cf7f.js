"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[61718],{71846:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>j,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var t=c(85893),r=c(11151);function s(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"copy-tree"})," ",(0,t.jsx)(n.em,{children:"Function"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"copy-tree"})," ",(0,t.jsx)(n.em,{children:"tree \u2192 new-tree"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"tree"}),"\u2014a ",(0,t.jsx)(n.em,{children:"tree"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"new-tree"}),"\u2014a ",(0,t.jsx)(n.em,{children:"tree"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(n.p,{children:["Creates a ",(0,t.jsx)(n.em,{children:"copy"})," of a ",(0,t.jsx)(n.em,{children:"tree"})," of ",(0,t.jsx)(n.em,{children:"conses"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.em,{children:"tree"})," is not a ",(0,t.jsx)(n.em,{children:"cons"}),", it is returned; otherwise, the result is a new ",(0,t.jsx)(n.em,{children:"cons"})," of the results of calling ",(0,t.jsx)(n.strong,{children:"copy-tree"})," on the ",(0,t.jsx)(n.em,{children:"car"})," and ",(0,t.jsx)(n.em,{children:"cdr"})," of ",(0,t.jsx)(n.em,{children:"tree"}),". In other words, all ",(0,t.jsx)(n.em,{children:"conses"})," in the ",(0,t.jsx)(n.em,{children:"tree"})," represented by ",(0,t.jsx)(n.em,{children:"tree"})," are copied recursively, stopping only when non-",(0,t.jsx)(n.em,{children:"conses"})," are encountered."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"copy-tree"})," does not preserve circularities and the sharing of substructure."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:'(setq object (list (cons 1 "one") \n\t\t   \n\t\t   \n\t\t   (cons 2 (list \u2019a \u2019b \u2019c)))) \n\u2192 ((1 . "one") (2 A B C)) \n(setq object-too object) \u2192 ((1 . "one") (2 A B C)) \n(setq copy-as-list (copy-list object)) \n(setq copy-as-alist (copy-alist object)) \n(setq copy-as-tree (copy-tree object)) \n(eq object object-too) \u2192 true \n(eq copy-as-tree object) \u2192 false \n(eql copy-as-tree object) \u2192 false \n(equal copy-as-tree object) \u2192 true \n(setf (first (cdr (second object))) "a" \n      (car (second object)) "two" \n      (car object) \u2019(one . 1)) \u2192 (ONE . 1) \nobject \u2192 ((ONE . 1) ("two" "a" B C)) \nobject-too \u2192 ((ONE . 1) ("two" "a" B C)) \ncopy-as-list \u2192 ((1 . "one") ("two" "a" B C)) \ncopy-as-alist \u2192 ((1 . "one") (2 "a" B C)) \ncopy-as-tree \u2192 ((1 . "one") (2 A B C)) \n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"tree-equal"})})]})}function o(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}const i={},a="copy-tree",l={id:"chap-14/be-c-dictionary/copytree",title:"copy-tree",description:"Expanded Reference: copy-tree",source:"@site/docs/chap-14/be-c-dictionary/copytree.md",sourceDirName:"chap-14/be-c-dictionary",slug:"/chap-14/be-c-dictionary/copytree",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/copytree",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-14/be-c-dictionary/copytree.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"copy-list",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/copylist"},next:{title:"endp",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/endp"}},d={},p=[{value:"Expanded Reference: copy-tree",id:"expanded-reference-copy-tree",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"copy-tree",children:"copy-tree"}),"\n","\n","\n",(0,t.jsx)(o,{}),"\n",(0,t.jsx)(n.h2,{id:"expanded-reference-copy-tree",children:"Expanded Reference: copy-tree"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"(copy-tree )\n"})})]})}function j(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},11151:(e,n,c)=>{c.d(n,{Z:()=>i,a:()=>o});var t=c(67294);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);