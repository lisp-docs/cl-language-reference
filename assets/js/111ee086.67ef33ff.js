"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[27427],{74997:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>c,metadata:()=>d,toc:()=>h});var s=t(85893),a=t(11151);function r(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"defconstant"})," ",(0,s.jsx)(n.em,{children:"Macro"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"defconstant"})," ",(0,s.jsx)(n.em,{children:"name initial-value"})," [",(0,s.jsx)(n.em,{children:"documentation"}),"] \u2192 name"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"name"}),"\u2014a ",(0,s.jsx)(n.em,{children:"symbol"}),"; not evaluated."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"initial-value"}),"\u2014a ",(0,s.jsx)(n.em,{children:"form"}),"; evaluated."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"documentation"}),"\u2014a ",(0,s.jsx)(n.em,{children:"string"}),"; not evaluated."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"defconstant"})," causes the global variable named by ",(0,s.jsx)(n.em,{children:"name"})," to be given a value that is the result of evaluating ",(0,s.jsx)(n.em,{children:"initial-value"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["A constant defined by ",(0,s.jsx)(n.strong,{children:"defconstant"})," can be redefined with ",(0,s.jsx)(n.strong,{children:"defconstant"}),". However, the consequences are undefined if an attempt is made to assign a ",(0,s.jsx)(n.em,{children:"value"})," to the ",(0,s.jsx)(n.em,{children:"symbol"})," using another operator, or to assign it to a ",(0,s.jsx)(n.em,{children:"different value"})," using a subsequent ",(0,s.jsx)(n.strong,{children:"defconstant"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.em,{children:"documentation"})," is supplied, it is attached to ",(0,s.jsx)(n.em,{children:"name"})," as a ",(0,s.jsx)(n.em,{children:"documentation string"})," of kind ",(0,s.jsx)(n.strong,{children:"variable"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"defconstant"})," normally appears as a ",(0,s.jsx)(n.em,{children:"top level form"}),", but it is meaningful for it to appear as a ",(0,s.jsx)(n.em,{children:"non-top-level form"}),". However, the compile-time side effects described below only take place when ",(0,s.jsx)(n.strong,{children:"defconstant"})," appears as a ",(0,s.jsx)(n.em,{children:"top level form"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The consequences are undefined if there are any ",(0,s.jsx)(n.em,{children:"bindings"})," of the variable named by ",(0,s.jsx)(n.em,{children:"name"})," at the time ",(0,s.jsx)(n.strong,{children:"defconstant"})," is executed or if the value is not ",(0,s.jsx)(n.strong,{children:"eql"})," to the value of ",(0,s.jsx)(n.em,{children:"initial-value"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The consequences are undefined when constant ",(0,s.jsx)(n.em,{children:"symbols"})," are rebound as either lexical or dynamic variables. In other words, a reference to a ",(0,s.jsx)(n.em,{children:"symbol"})," declared with ",(0,s.jsx)(n.strong,{children:"defconstant"})," always refers to its global value."]}),"\n",(0,s.jsxs)(n.p,{children:["The side effects of the execution of ",(0,s.jsx)(n.strong,{children:"defconstant"})," must be equivalent to at least the side effects of the execution of the following code:"]}),"\n",(0,s.jsxs)(n.p,{children:["(setf (symbol-value \u2019",(0,s.jsx)(n.em,{children:"name"}),") ",(0,s.jsx)(n.em,{children:"initial-value"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["(setf (documentation \u2019",(0,s.jsx)(n.em,{children:"name"})," \u2019variable) \u2019",(0,s.jsx)(n.em,{children:"documentation"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["If a ",(0,s.jsx)(n.strong,{children:"defconstant"})," ",(0,s.jsx)(n.em,{children:"form"})," appears as a ",(0,s.jsx)(n.em,{children:"top level form"}),", the ",(0,s.jsx)(n.em,{children:"compiler"})," must recognize that ",(0,s.jsx)(n.em,{children:"name"})," names a ",(0,s.jsx)(n.em,{children:"constant variable"}),". An implementation may choose to evaluate the value-form at compile time, load time, or both. Therefore, users must ensure that the ",(0,s.jsx)(n.em,{children:"initial-value"})," can be ",(0,s.jsx)(n.em,{children:"evaluated"})," at compile time (regardless of whether or not references to ",(0,s.jsx)(n.em,{children:"name"})," appear in the file) and that it always ",(0,s.jsx)(n.em,{children:"evaluates"})," to the same value."]}),"\n",(0,s.jsx)(n.p,{children:"Data and Control"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:'\n(defconstant this-is-a-constant \u2019never-changing "for a test") \u2192 THIS-IS-A-CONSTANT this-is-a-constant \u2192 NEVER-CHANGING \n(documentation \u2019this-is-a-constant \u2019variable) \u2192 "for a test" \n(constantp \u2019this-is-a-constant) \u2192 true \n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"declaim"}),", ",(0,s.jsx)(n.strong,{children:"defparameter"}),", ",(0,s.jsx)(n.strong,{children:"defvar"}),", ",(0,s.jsx)(n.strong,{children:"documentation"}),", ",(0,s.jsx)(n.strong,{children:"proclaim"}),", Section 3.1.2.1.1.3 (Constant Variables), Section 3.2 (Compilation)"]})]})}function i(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}const c={title:"defconstant"},o="defconstant",d={id:"chap-5/f-d-dictionary/defconstant_macro",title:"defconstant",description:"Expanded Reference: defconstant",source:"@site/docs/chap-5/f-d-dictionary/defconstant_macro.md",sourceDirName:"chap-5/f-d-dictionary",slug:"/chap-5/f-d-dictionary/defconstant_macro",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/defconstant_macro",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-5/f-d-dictionary/defconstant_macro.md",tags:[],version:"current",frontMatter:{title:"defconstant"},sidebar:"tutorialSidebar",previous:{title:"control-error",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/control-error_condition-type"},next:{title:"define-modify-macro",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/define-modify-macro_macro"}},l={},h=[{value:"Expanded Reference: defconstant",id:"expanded-reference-defconstant",level:2}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"defconstant",children:"defconstant"}),"\n","\n","\n",(0,s.jsx)(i,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-defconstant",children:"Expanded Reference: defconstant"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(defconstant )\n"})})]})}function f(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>i});var s=t(67294);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);