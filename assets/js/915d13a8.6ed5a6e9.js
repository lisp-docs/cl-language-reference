"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[55095],{27960:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>h});var s=r(85893),i=r(11151);function t(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"import"})," ",(0,s.jsx)(n.em,{children:"Function"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"import"})," ",(0,s.jsx)(n.em,{children:"symbols"})," &optional ",(0,s.jsx)(n.em,{children:"package \u2192"})," ",(0,s.jsx)(n.strong,{children:"t"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"symbols"}),"\u2014a ",(0,s.jsx)(n.em,{children:"designator"})," for a ",(0,s.jsx)(n.em,{children:"list"})," of ",(0,s.jsx)(n.em,{children:"symbols"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"package"}),"\u2014a ",(0,s.jsx)(n.em,{children:"package designator"})," . The default is the ",(0,s.jsx)(n.em,{children:"current package"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"import"})," adds ",(0,s.jsx)(n.em,{children:"symbol"})," or ",(0,s.jsx)(n.em,{children:"symbols"})," to the internals of ",(0,s.jsx)(n.em,{children:"package"}),", checking for name conflicts with existing ",(0,s.jsx)(n.em,{children:"symbols"})," either ",(0,s.jsx)(n.em,{children:"present"})," in ",(0,s.jsx)(n.em,{children:"package"})," or ",(0,s.jsx)(n.em,{children:"accessible"})," to it. Once the ",(0,s.jsx)(n.em,{children:"symbols"})," have been ",(0,s.jsx)(n.em,{children:"imported"}),", they may be referenced in the ",(0,s.jsx)(n.em,{children:"importing package"})," without the use of a ",(0,s.jsx)(n.em,{children:"package prefix"})," when using the ",(0,s.jsx)(n.em,{children:"Lisp reader"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:["A name conflict in ",(0,s.jsx)(n.strong,{children:"import"})," between the ",(0,s.jsx)(n.em,{children:"symbol"})," being imported and a symbol inherited from some other ",(0,s.jsx)(n.em,{children:"package"})," can be resolved in favor of the ",(0,s.jsx)(n.em,{children:"symbol"})," being ",(0,s.jsx)(n.em,{children:"imported"})," by making it a shadowing symbol, or in favor of the ",(0,s.jsx)(n.em,{children:"symbol"})," already ",(0,s.jsx)(n.em,{children:"accessible"})," by not doing the ",(0,s.jsx)(n.strong,{children:"import"}),". A name conflict in ",(0,s.jsx)(n.strong,{children:"import"})," with a ",(0,s.jsx)(n.em,{children:"symbol"})," already ",(0,s.jsx)(n.em,{children:"present"})," in the ",(0,s.jsx)(n.em,{children:"package"})," may be resolved by uninterning that ",(0,s.jsx)(n.em,{children:"symbol"}),", or by not doing the ",(0,s.jsx)(n.strong,{children:"import"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The imported ",(0,s.jsx)(n.em,{children:"symbol"})," is not automatically exported from the ",(0,s.jsx)(n.em,{children:"current package"}),", but if it is already ",(0,s.jsx)(n.em,{children:"present"})," and external, then the fact that it is external is not changed. If any ",(0,s.jsx)(n.em,{children:"symbol"})," to be ",(0,s.jsx)(n.em,{children:"imported"})," has no home package (",(0,s.jsx)(n.em,{children:"i.e."}),", (symbol-package ",(0,s.jsx)(n.em,{children:"symbol"}),") \u2192 nil), ",(0,s.jsx)(n.strong,{children:"import"})," sets the ",(0,s.jsx)(n.em,{children:"home package"})," of the ",(0,s.jsx)(n.em,{children:"symbol"})," to ",(0,s.jsx)(n.em,{children:"package"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If the ",(0,s.jsx)(n.em,{children:"symbol"})," is already ",(0,s.jsx)(n.em,{children:"present"})," in the importing ",(0,s.jsx)(n.em,{children:"package"}),", ",(0,s.jsx)(n.strong,{children:"import"})," has no effect."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:'\n(import \u2019common-lisp::car (make-package \u2019temp :use nil)) \u2192 T \n(find-symbol "CAR" \u2019temp) \u2192 CAR, :INTERNAL \n(find-symbol "CDR" \u2019temp) \u2192 NIL, NIL \nThe form (import \u2019editor:buffer) takes the external symbol named buffer in the EDITOR *package* (this symbol was located when the form was read by the *Lisp reader* ) and adds it to the *current package* as an *internal symbol*. The symbol buffer is then *present* in the *current package*. \n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,s.jsx)(n.p,{children:"The package system is modified."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,s.jsx)(n.p,{children:"Current state of the package system."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"import"})," signals a ",(0,s.jsx)(n.em,{children:"correctable"})," error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"package-error"})," if any of the ",(0,s.jsx)(n.em,{children:"symbols"})," to be ",(0,s.jsx)(n.em,{children:"imported"})," has the ",(0,s.jsx)(n.em,{children:"same name"})," (under ",(0,s.jsx)(n.strong,{children:"string="}),") as some distinct ",(0,s.jsx)(n.em,{children:"symbol"})," (under ",(0,s.jsx)(n.strong,{children:"eql"}),") already ",(0,s.jsx)(n.em,{children:"accessible"})," in the ",(0,s.jsx)(n.em,{children:"package"}),", even if the conflict is with a ",(0,s.jsx)(n.em,{children:"shadowing symbol"})," of the ",(0,s.jsx)(n.em,{children:"package"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"shadow"}),", ",(0,s.jsx)(n.strong,{children:"export"})]})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}const o={},a="import",l={id:"chap-11/bb-c-dictionary/import",title:"import",description:"Expanded Reference: import",source:"@site/docs/chap-11/bb-c-dictionary/import.md",sourceDirName:"chap-11/bb-c-dictionary",slug:"/chap-11/bb-c-dictionary/import",permalink:"/cl-language-reference/docs/chap-11/bb-c-dictionary/import",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-11/bb-c-dictionary/import.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"find-symbol** is operationally equivalent to **intern**, except that it never creates a new *symbol*. **find-package",permalink:"/cl-language-reference/docs/chap-11/bb-c-dictionary/findsymbolaaaisaoperationallyaequivalentatoaaainternaa"},next:{title:"in-package",permalink:"/cl-language-reference/docs/chap-11/bb-c-dictionary/inpackage"}},d={},h=[{value:"Expanded Reference: import",id:"expanded-reference-import",level:2}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"import",children:"import"}),"\n","\n","\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-import",children:"Expanded Reference: import"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(import )\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>c});var s=r(67294);const i={},t=s.createContext(i);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);