"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[98094],{97198:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var t=n(85893),o=n(11151);const a={},l="slot-boundp-using-class-funcallable-standard-class-standard-effective-slot-definition",c={id:"meta-object-protocol/slot-boundp-using-class-funcallable-standard-class-standard-effective-slot-definition",title:"slot-boundp-using-class-funcallable-standard-class-standard-effective-slot-definition",description:"Method SLOT-BOUNDP-USING-CLASS",source:"@site/docs/meta-object-protocol/slot-boundp-using-class-funcallable-standard-class-standard-effective-slot-definition.md",sourceDirName:"meta-object-protocol",slug:"/meta-object-protocol/slot-boundp-using-class-funcallable-standard-class-standard-effective-slot-definition",permalink:"/cl-language-reference/meta-object-protocol/slot-boundp-using-class-funcallable-standard-class-standard-effective-slot-definition",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/slot-boundp-using-class-funcallable-standard-class-standard-effective-slot-definition.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"slot-boundp-using-class-built-in-class",permalink:"/cl-language-reference/meta-object-protocol/slot-boundp-using-class-built-in-class"},next:{title:"slot-boundp-using-class-standard-class-standard-effective-slot-definition",permalink:"/cl-language-reference/meta-object-protocol/slot-boundp-using-class-standard-class-standard-effective-slot-definition"}},i={},d=[];function r(e){const s={a:"a",code:"code",em:"em",h1:"h1",p:"p",strong:"strong",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"slot-boundp-using-class-funcallable-standard-class-standard-effective-slot-definition",children:"slot-boundp-using-class-funcallable-standard-class-standard-effective-slot-definition"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Method"})," ",(0,t.jsx)(s.strong,{children:"SLOT-BOUNDP-USING-CLASS"})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Syntax:"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"slot-boundp-using-class"})," (",(0,t.jsx)(s.em,{children:"class"})," funcallable-standard-class) ",(0,t.jsx)(s.em,{children:"object"})," (",(0,t.jsx)(s.em,{children:"slot"})," standard-effective-slot-definition)"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(s.p,{children:["This is a method on the generic function",(0,t.jsx)(s.a,{href:"/meta-object-protocol/slot-boundp-using-class",children:"slot-boundp-using-class"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["This method implements the full behavior of this generic function for slots with allocation ",(0,t.jsx)(s.code,{children:":instance"})," and ",(0,t.jsx)(s.code,{children:":class"}),". If the supplied slot has an allocation other than ",(0,t.jsx)(s.code,{children:":instance"})," or ",(0,t.jsx)(s.code,{children:":class"})," an error is signaled."]}),"\n",(0,t.jsx)(s.p,{children:"Overriding this method is permitted, but may require overriding other methods in the standard implementation of the slot access protocol."})]})}function u(e={}){const{wrapper:s}={...(0,o.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},11151:(e,s,n)=>{n.d(s,{Z:()=>c,a:()=>l});var t=n(67294);const o={},a=t.createContext(o);function l(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);