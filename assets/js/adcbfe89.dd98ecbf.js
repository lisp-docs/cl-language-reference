"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[77635],{96731:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>i});var a=n(85893),c=n(11151);const s={},o="allocate-instance-standard-class",r={id:"meta-object-protocol/dictionary/allocate-instance-standard-class",title:"allocate-instance-standard-class",description:"Method ALLOCATE-INSTANCE",source:"@site/docs/meta-object-protocol/dictionary/allocate-instance-standard-class.md",sourceDirName:"meta-object-protocol/dictionary",slug:"/meta-object-protocol/dictionary/allocate-instance-standard-class",permalink:"/cl-language-reference/meta-object-protocol/dictionary/allocate-instance-standard-class",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/dictionary/allocate-instance-standard-class.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"allocate-instance-funcallable-standard-class",permalink:"/cl-language-reference/meta-object-protocol/dictionary/allocate-instance-funcallable-standard-class"},next:{title:"allocate-instance",permalink:"/cl-language-reference/meta-object-protocol/dictionary/allocate-instance"}},l={},i=[];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",p:"p",strong:"strong",...(0,c.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"allocate-instance-standard-class",children:"allocate-instance-standard-class"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"Method"})," ",(0,a.jsx)(t.strong,{children:"ALLOCATE-INSTANCE"})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Syntax:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"allocate-instance"})," ",(0,a.jsx)(t.em,{children:"(class"})," standard-class) ",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.code,{children:"&rest"})})," ",(0,a.jsx)(t.em,{children:"initargs"})," => ",(0,a.jsx)(t.em,{children:"instance"})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Description:"})}),"\n",(0,a.jsxs)(t.p,{children:["This is a method on the generic function",(0,a.jsx)(t.a,{href:"/meta-object-protocol/allocate-instance",children:"allocate-instance"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["This method allocates storage in the instance for each slot with allocation ",(0,a.jsx)(t.code,{children:":instance"}),". These slots are unbound. Slots with any other allocation are ignored by this method (no error is signaled)."]})]})}function h(e={}){const{wrapper:t}={...(0,c.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>o});var a=n(67294);const c={},s=a.createContext(c);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);