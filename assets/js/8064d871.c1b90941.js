"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[70851],{1562:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>r});var o=n(85893),s=n(11151);const a={},i="Methods",c={id:"meta-object-protocol/methods",title:"Methods",description:"Methods",source:"@site/docs/meta-object-protocol/methods.md",sourceDirName:"meta-object-protocol",slug:"/meta-object-protocol/methods",permalink:"/cl-language-reference/meta-object-protocol/methods",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/methods.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"method-specializers",permalink:"/cl-language-reference/meta-object-protocol/method-specializers"},next:{title:"Processing method bodies",permalink:"/cl-language-reference/meta-object-protocol/processing-method-bodies"}},l={},r=[{value:"Methods",id:"methods-1",level:3}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(t.h3,{id:"methods-1",children:"Methods"}),"\n",(0,o.jsxs)(t.p,{children:["A ",(0,o.jsx)(t.em,{children:"method metaobject"})," contains information about a specific method."]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"The qualifiers are available as a list of of non-null atoms."}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"The lambda list is available as a list."}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"The specializers are available as a list of specializer metaobjects."}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["The function is available as a function. This function can be applied to arguments and a list of next methods using ",(0,o.jsx)(t.a,{href:"http://www.lispworks.com/documentation/HyperSpec/Body/f_apply.htm#apply",children:"apply"})," or ",(0,o.jsx)(t.a,{href:"http://www.lispworks.com/documentation/HyperSpec/Body/f_funcal.htm#funcall",children:"funcall"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"When the method is associated with a generic function, that generic function metaobject is available. A method can be associated with at most one generic function at a time."}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["The documentation is available as a string or ",(0,o.jsx)(t.code,{children:"nil"}),"."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>i});var o=n(67294);const s={},a=o.createContext(s);function i(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);