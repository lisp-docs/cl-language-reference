"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[177],{86517:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>i});var s=t(85893),c=t(11151);const a={},l="funcallable-standard-instance-access",r={id:"meta-object-protocol/funcallable-standard-instance-access",title:"funcallable-standard-instance-access",description:"Function FUNCALLABLE-STANDARD-INSTANCE-ACCESS",source:"@site/docs/meta-object-protocol/funcallable-standard-instance-access.md",sourceDirName:"meta-object-protocol",slug:"/meta-object-protocol/funcallable-standard-instance-access",permalink:"/cl-language-reference/meta-object-protocol/funcallable-standard-instance-access",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/funcallable-standard-instance-access.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Funcallable Instances",permalink:"/cl-language-reference/meta-object-protocol/funcallable-instances"},next:{title:"generic-function-argument-precedence-order-standard-generic-function",permalink:"/cl-language-reference/meta-object-protocol/generic-function-argument-precedence-order-standard-generic-function"}},o={},i=[];function d(e){const n={a:"a",em:"em",h1:"h1",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"funcallable-standard-instance-access",children:"funcallable-standard-instance-access"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Function"})," ",(0,s.jsx)(n.strong,{children:"FUNCALLABLE-STANDARD-INSTANCE-ACCESS"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"funcallable-standard-instance-access"})," ",(0,s.jsx)(n.em,{children:"instance"})," ",(0,s.jsx)(n.em,{children:"location"})," => ",(0,s.jsx)(n.em,{children:"object"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"instance"})," -- An object."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"location"})," -- A slot location."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"object"})," -- An object."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsx)(n.p,{children:"This function is called to provide direct access to a slot in an instance. By usurping the normal slot lookup protocol, this function is intended to provide highly optimized access to the slots associated with an instance."}),"\n",(0,s.jsx)(n.p,{children:"The following restrictions apply to the use of this function:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsxs)(n.em,{children:["instance ",(0,s.jsx)(n.em,{children:"argument must be a funcallable instance (it must have been returned by"})]}),"**",(0,s.jsx)(n.a,{href:"/meta-object-protocol/allocate-instance-funcallable-standard-class",children:"allocate-instance (class funcallable-standard-class)"}),".**"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"instance"})," argument cannot be an non-updated obsolete instance."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"location"})," argument must be a location of one of the directly accessible slots of the instance's class."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The slot must be bound."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"The results are undefined if any of these restrictions are not met."})]})}function u(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>l});var s=t(67294);const c={},a=s.createContext(c);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);