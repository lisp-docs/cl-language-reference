"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[67127],{25031:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>m,frontMatter:()=>c,metadata:()=>l,toc:()=>h});var s=r(85893),t=r(11151);function i(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components},{ClLinks:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"define-setf-expander"})," ",(0,s.jsx)(r,{term:"macro",children:(0,s.jsx)("i",{children:"Macro"})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(r,{term:"define-setf-expander",children:(0,s.jsx)("b",{children:"define-setf-expander"})})," ",(0,s.jsx)(n.em,{children:"access-fn lambda-list"})]}),"\n",(0,s.jsxs)(n.p,{children:["[[ ",(0,s.jsx)(r,{term:"declaration",children:(0,s.jsx)("i",{children:"{declaration}"})}),"* ",(0,s.jsx)(n.em,{children:"| documentation"})," ]] ",(0,s.jsx)(r,{term:"form",children:(0,s.jsx)("i",{children:"{form}"})}),"*"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"! access-fn"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"access-fn"}),"\u2014a ",(0,s.jsx)(r,{term:"symbol",children:(0,s.jsx)("i",{children:"symbol"})})," that ",(0,s.jsx)(r,{term:"name",children:(0,s.jsx)("i",{children:"names"})})," a ",(0,s.jsx)(r,{term:"function",children:(0,s.jsx)("i",{children:"function"})})," or ",(0,s.jsx)(r,{term:"macro",children:(0,s.jsx)("i",{children:"macro"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"lambda-list"})," \u2013 ",(0,s.jsx)(n.em,{children:"macro lambda list"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(r,{term:"declaration",children:(0,s.jsx)("i",{children:"declaration"})}),"\u2014a ",(0,s.jsx)(r,{term:"declare",children:(0,s.jsx)("b",{children:"declare"})})," ",(0,s.jsx)(r,{term:"expression",children:(0,s.jsx)("i",{children:"expression"})}),"; not evaluated."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"documentation"}),"\u2014a ",(0,s.jsx)(r,{term:"string",children:(0,s.jsx)("i",{children:"string"})}),"; not evaluated."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(r,{term:"form",children:(0,s.jsx)("i",{children:"forms"})}),"\u2014an ",(0,s.jsx)(n.em,{children:"implicit progn"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(r,{term:"define-setf-expander",children:(0,s.jsx)("b",{children:"define-setf-expander"})})," specifies the means by which ",(0,s.jsx)(r,{term:"setf",children:(0,s.jsx)("b",{children:"setf"})})," updates a ",(0,s.jsx)(r,{term:"place",children:(0,s.jsx)("i",{children:"place"})})," that is referenced by ",(0,s.jsx)(n.em,{children:"access-fn"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(r,{term:"setf",children:(0,s.jsx)("b",{children:"setf"})})," is given a ",(0,s.jsx)(r,{term:"place",children:(0,s.jsx)("i",{children:"place"})})," that is specified in terms of ",(0,s.jsx)(n.em,{children:"access-fn"})," and a new value for the ",(0,s.jsx)(r,{term:"place",children:(0,s.jsx)("i",{children:"place"})}),", it is expanded into a form that performs the appropriate update."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"lambda-list"})," supports destructuring. See Section 3.4.4 (Macro Lambda Lists)."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Documentation"})," is attached to ",(0,s.jsx)(n.em,{children:"access-fn"})," as a ",(0,s.jsx)(n.em,{children:"documentation string"})," of kind ",(0,s.jsx)(r,{term:"setf",children:(0,s.jsx)("b",{children:"setf"})}),"."]}),"\n",(0,s.jsx)(r,{term:"define-setf-expander",children:(0,s.jsx)("b",{children:"define-setf-expander"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(r,{term:"form",children:(0,s.jsx)("i",{children:"Forms"})})," constitute the body of the ",(0,s.jsx)(n.em,{children:"setf expander"})," definition and must compute the ",(0,s.jsx)(n.em,{children:"setf expansion"})," for a call on ",(0,s.jsx)(r,{term:"setf",children:(0,s.jsx)("b",{children:"setf"})})," that references the ",(0,s.jsx)(r,{term:"place",children:(0,s.jsx)("i",{children:"place"})})," by means of the given ",(0,s.jsx)(n.em,{children:"access-fn"}),". The ",(0,s.jsx)(n.em,{children:"setf expander"})," function is defined in the same ",(0,s.jsx)(n.em,{children:"lexical environment"})," in which the ",(0,s.jsx)(r,{term:"define-setf-expander",children:(0,s.jsx)("b",{children:"define-setf-expander"})})," ",(0,s.jsx)(r,{term:"form",children:(0,s.jsx)("i",{children:"form"})})," appears. While ",(0,s.jsx)(r,{term:"form",children:(0,s.jsx)("i",{children:"forms"})})," are being executed, the variables in ",(0,s.jsx)(n.em,{children:"lambda-list"})," are bound to parts of the ",(0,s.jsx)(n.em,{children:"place form"}),". The"]}),"\n",(0,s.jsxs)(n.p,{children:["body ",(0,s.jsx)(r,{term:"form",children:(0,s.jsx)("i",{children:"forms"})})," (but not the ",(0,s.jsx)(n.em,{children:"lambda-list"}),") in a ",(0,s.jsx)(r,{term:"define-setf-expander",children:(0,s.jsx)("b",{children:"define-setf-expander"})})," ",(0,s.jsx)(r,{term:"form",children:(0,s.jsx)("i",{children:"form"})})," are implicitly enclosed in a ",(0,s.jsx)(r,{term:"block",children:(0,s.jsx)("i",{children:"block"})})," whose name is ",(0,s.jsx)(n.em,{children:"access-fn"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The evaluation of ",(0,s.jsx)(r,{term:"form",children:(0,s.jsx)("i",{children:"forms"})})," must result in the five values described in Section 5.1.1.2 (Setf Expansions)."]}),"\n",(0,s.jsxs)(n.p,{children:["If a ",(0,s.jsx)(r,{term:"define-setf-expander",children:(0,s.jsx)("b",{children:"define-setf-expander"})})," ",(0,s.jsx)(r,{term:"form",children:(0,s.jsx)("i",{children:"form"})})," appears as a ",(0,s.jsx)(n.em,{children:"top level form"}),", the ",(0,s.jsx)(r,{term:"compiler",children:(0,s.jsx)("i",{children:"compiler"})})," must make the ",(0,s.jsx)(n.em,{children:"setf expander"})," available so that it may be used to expand calls to ",(0,s.jsx)(r,{term:"setf",children:(0,s.jsx)("b",{children:"setf"})})," later on in the ",(0,s.jsx)(r,{term:"file",children:(0,s.jsx)("i",{children:"file"})}),". ",(0,s.jsx)(r,{term:"programmer",children:(0,s.jsx)("i",{children:"Programmers"})})," must ensure that the ",(0,s.jsx)(r,{term:"form",children:(0,s.jsx)("i",{children:"forms"})})," can be evaluated at compile time if the ",(0,s.jsx)(n.em,{children:"access-fn"})," is used in a ",(0,s.jsx)(r,{term:"place",children:(0,s.jsx)("i",{children:"place"})})," later in the same ",(0,s.jsx)(r,{term:"file",children:(0,s.jsx)("i",{children:"file"})}),". The ",(0,s.jsx)(r,{term:"compiler",children:(0,s.jsx)("i",{children:"compiler"})})," must make these ",(0,s.jsx)(n.em,{children:"setf expanders"})," available to compile-time calls to ",(0,s.jsx)(r,{term:"get-setf-expansion",children:(0,s.jsx)("b",{children:"get-setf-expansion"})})," when its ",(0,s.jsx)(r,{term:"environment",children:(0,s.jsx)("i",{children:"environment"})})," argument is a value received as the ",(0,s.jsx)(n.em,{children:"environment parameter"})," of a ",(0,s.jsx)(r,{term:"macro",children:(0,s.jsx)("i",{children:"macro"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:'(defun lastguy (x) (car (last x))) *!* LASTGUY \n(define-setf-expander lastguy (x &environment env) \n  "Set the last element in a list to the given value." \n  (multiple-value-bind (dummies vals newval setter getter) \n      (get-setf-expansion x env) \n    (let ((store (gensym))) \n      (values dummies \n\t      vals \n\t      \u2018(,store) \n\t      \u2018(progn (rplaca (last ,getter) ,store) ,store) \n\t      \u2018(lastguy ,getter))))) *!* LASTGUY \n(setq a (list \u2019a \u2019b \u2019c \u2019d) \n      b (list \u2019x) \n      c (list 1 2 3 (list 4 5 6))) *!* (1 2 3 (4 5 6)) \n(setf (lastguy a) 3) *!* 3 \n(setf (lastguy b) 7) *!* 7 \n(setf (lastguy (lastguy c)) \u2019lastguy-symbol) *!* LASTGUY-SYMBOL \na *!* (A B C 3) \nb *!* (7) \nc *!* (1 2 3 (4 5 LASTGUY-SYMBOL)) \n;;; Setf expander for the form (LDB bytespec int). \n;;; Recall that the int form must itself be suitable for SETF. \n(define-setf-expander ldb (bytespec int &environment env) \n  (multiple-value-bind (temps vals stores \n\t\t\t      store-form access-form) \n      (get-setf-expansion int env);Get setf expansion for int. \n    Data and Control \n    \n    \n    (let ((btemp (gensym)) ;Temp var for byte specifier. \n\t  (store (gensym)) ;Temp var for byte to store. \n\t  (stemp (first stores))) ;Temp var for int to store. \n      (if (cdr stores) (error "Can\u2019t expand this.")) \n;;; Return the setf expansion for LDB as five values. \n      (values (cons btemp temps) ;Temporary variables. \n\t      (cons bytespec vals) ;Value forms. \n\t      (list store) ;Store variables. \n\t      \u2018(let ((,stemp (dpb ,store ,btemp ,access-form))) \n\t\t ,store-form \n\t\t ,store) ;Storing form. \n\t      \u2018(ldb ,btemp ,access-form) ;Accessing form. \n\t      )))) \n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(r,{term:"setf",children:(0,s.jsx)("b",{children:"setf"})}),", ",(0,s.jsx)(r,{term:"defsetf",children:(0,s.jsx)("b",{children:"defsetf"})}),", ",(0,s.jsx)(n.strong,{children:"documentation"}),", ",(0,s.jsx)(r,{term:"get-setf-expansion",children:(0,s.jsx)("b",{children:"get-setf-expansion"})}),", Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(r,{term:"define-setf-expander",children:(0,s.jsx)("b",{children:"define-setf-expander"})})," di\u21b5ers from the long form of ",(0,s.jsx)(r,{term:"defsetf",children:(0,s.jsx)("b",{children:"defsetf"})})," in that while the body is being executed the ",(0,s.jsx)(r,{term:"variable",children:(0,s.jsx)("i",{children:"variables"})})," in ",(0,s.jsx)(n.em,{children:"lambda-list"})," are bound to parts of the ",(0,s.jsx)(n.em,{children:"place form"}),", not to temporary variables that will be bound to the values of such parts. In addition, ",(0,s.jsx)(r,{term:"define-setf-expander",children:(0,s.jsx)("b",{children:"define-setf-expander"})})," does not have ",(0,s.jsx)(r,{term:"defsetf",children:(0,s.jsx)("b",{children:"defsetf"})}),"\u2019s"]}),"\n",(0,s.jsxs)(n.p,{children:["restriction that ",(0,s.jsx)(n.em,{children:"access-fn"})," must be a ",(0,s.jsx)(r,{term:"function",children:(0,s.jsx)("i",{children:"function"})})," or a function-like ",(0,s.jsx)(r,{term:"macro",children:(0,s.jsx)("i",{children:"macro"})}),"; an arbitrary ",(0,s.jsx)(r,{term:"defmacro",children:(0,s.jsx)("b",{children:"defmacro"})})," destructuring pattern is permitted in ",(0,s.jsx)(n.em,{children:"lambda-list"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}const c={title:"define-setf-expander"},a="define-setf-expander",l={id:"chap-5/f-d-dictionary/define-setf-expander_macro",title:"define-setf-expander",description:"Expanded Reference: define-setf-expander",source:"@site/docs/chap-5/f-d-dictionary/define-setf-expander_macro.md",sourceDirName:"chap-5/f-d-dictionary",slug:"/chap-5/f-d-dictionary/define-setf-expander_macro",permalink:"/cl-language-reference/chap-5/f-d-dictionary/define-setf-expander_macro",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-5/f-d-dictionary/define-setf-expander_macro.md",tags:[],version:"current",frontMatter:{title:"define-setf-expander"},sidebar:"tutorialSidebar",previous:{title:"define-modify-macro",permalink:"/cl-language-reference/chap-5/f-d-dictionary/define-modify-macro_macro"},next:{title:"defparameter, defvar",permalink:"/cl-language-reference/chap-5/f-d-dictionary/defparameter_defvar_macro"}},o={},h=[{value:"Expanded Reference: define-setf-expander",id:"expanded-reference-define-setf-expander",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"define-setf-expander",children:"define-setf-expander"}),"\n","\n","\n",(0,s.jsx)(d,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-define-setf-expander",children:"Expanded Reference: define-setf-expander"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(define-setf-expander )\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>c,a:()=>d});var s=r(67294);const t={},i=s.createContext(t);function d(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);