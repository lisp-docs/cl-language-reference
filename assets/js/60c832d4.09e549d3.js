"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[46572],{32765:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>x,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var r=s(85893),i=s(11151);function t(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"="})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"="})," &rest ",(0,r.jsx)(n.em,{children:"numbers"}),(0,r.jsx)("sup",{children:"+"})," \u2192 generalized-boolean"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"/="})," &rest ",(0,r.jsx)(n.em,{children:"numbers"}),(0,r.jsx)("sup",{children:"+"})," \u2192 generalized-boolean"]}),"\n",(0,r.jsxs)(n.p,{children:["< &rest ",(0,r.jsx)(n.em,{children:"numbers"}),(0,r.jsx)("sup",{children:"+"})," \u2192 generalized-boolean"]}),"\n",(0,r.jsxs)(n.p,{children:["&gt; &rest ",(0,r.jsx)(n.em,{children:"numbers"}),(0,r.jsx)("sup",{children:"+"})," \u2192 generalized-boolean"]}),"\n",(0,r.jsxs)(n.p,{children:["<",(0,r.jsx)(n.strong,{children:"="})," &rest ",(0,r.jsx)(n.em,{children:"numbers"}),(0,r.jsx)("sup",{children:"+"})," \u2192 generalized-boolean"]}),"\n",(0,r.jsxs)(n.p,{children:["&gt;",(0,r.jsx)(n.strong,{children:"="})," &rest ",(0,r.jsx)(n.em,{children:"numbers"}),(0,r.jsx)("sup",{children:"+"})," \u2192 generalized-boolean"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"number"}),"\u2014for <, >, <",(0,r.jsx)(n.strong,{children:"="}),", >",(0,r.jsx)(n.strong,{children:"="}),": a ",(0,r.jsx)(n.em,{children:"real"}),"; for ",(0,r.jsx)(n.strong,{children:"="}),", ",(0,r.jsx)(n.strong,{children:"/="}),": a ",(0,r.jsx)(n.em,{children:"number"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"generalized-boolean"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"="}),", ",(0,r.jsx)(n.strong,{children:"/="}),", <, >, <",(0,r.jsx)(n.strong,{children:"="}),", and >",(0,r.jsx)(n.strong,{children:"="})," perform arithmetic comparisons on their arguments as follows: ",(0,r.jsx)(n.strong,{children:"="})]}),"\n",(0,r.jsxs)(n.p,{children:["The value of ",(0,r.jsx)(n.strong,{children:"="})," is ",(0,r.jsx)(n.em,{children:"true"})," if all ",(0,r.jsx)(n.em,{children:"numbers"})," are the same in value; otherwise it is ",(0,r.jsx)(n.em,{children:"false"}),". Two ",(0,r.jsx)(n.em,{children:"complexes"})," are considered equal by ",(0,r.jsx)(n.strong,{children:"="})," if their real and imaginary parts are equal according to ",(0,r.jsx)(n.strong,{children:"="}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"/="})}),"\n",(0,r.jsxs)(n.p,{children:["The value of ",(0,r.jsx)(n.strong,{children:"/="})," is ",(0,r.jsx)(n.em,{children:"true"})," if no two ",(0,r.jsx)(n.em,{children:"numbers"})," are the same in value; otherwise it is ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"=, /=,"})," ",(0,r.jsx)(n.em,{children:"<"}),(0,r.jsx)(n.strong,{children:","})," ",(0,r.jsx)(n.em,{children:">"}),(0,r.jsx)(n.strong,{children:","})," ",(0,r.jsx)(n.em,{children:"<"}),(0,r.jsx)(n.strong,{children:"=,"})," ",(0,r.jsx)(n.em,{children:">"}),(0,r.jsx)(n.strong,{children:"="})]}),"\n",(0,r.jsx)(n.p,{children:"<"}),"\n",(0,r.jsxs)(n.p,{children:["The value of < is ",(0,r.jsx)(n.em,{children:"true"})," if the ",(0,r.jsx)(n.em,{children:"numbers"})," are in monotonically increasing order; otherwise it is ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"&gt;"}),"\n",(0,r.jsxs)(n.p,{children:["The value of > is ",(0,r.jsx)(n.em,{children:"true"})," if the ",(0,r.jsx)(n.em,{children:"numbers"})," are in monotonically decreasing order; otherwise it is ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["<",(0,r.jsx)(n.strong,{children:"="})]}),"\n",(0,r.jsxs)(n.p,{children:["The value of <",(0,r.jsx)(n.strong,{children:"="})," is ",(0,r.jsx)(n.em,{children:"true"})," if the ",(0,r.jsx)(n.em,{children:"numbers"})," are in monotonically nondecreasing order; otherwise it is ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["&gt;",(0,r.jsx)(n.strong,{children:"="})]}),"\n",(0,r.jsxs)(n.p,{children:["The value of >",(0,r.jsx)(n.strong,{children:"="})," is ",(0,r.jsx)(n.em,{children:"true"})," if the ",(0,r.jsx)(n.em,{children:"numbers"})," are in monotonically nonincreasing order; otherwise it is ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"="}),", ",(0,r.jsx)(n.strong,{children:"/="}),", <, >, <",(0,r.jsx)(n.strong,{children:"="}),", and >",(0,r.jsx)(n.strong,{children:"="})," perform necessary type conversions."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"\nThe uses of these functions are illustrated in Figure 12\u201313. \n\n\n\n|<p>(= 3 3) is *true*. (/= 3 3) is *false*. </p><p>(= 3 5) is *false*. (/= 3 5) is *true*. </p><p>(= 3 3 3 3) is *true*. (/= 3 3 3 3) is *false*. </p><p>(= 3 3 5 3) is *false*. (/= 3 3 5 3) is *false*. </p><p>(= 3 6 5 2) is *false*. (/= 3 6 5 2) is *true*. </p><p>(= 3 2 3) is *false*. (/= 3 2 3) is *false*. </p><p>(< 3 5) is *true*. (<= 3 5) is *true*. </p><p>(< 3 -5) is *false*. (<= 3 -5) is *false*. </p><p>(< 3 3) is *false*. (<= 3 3) is *true*. </p><p>(< 0 3 4 6 7) is *true*. (<= 0 3 4 6 7) is *true*. </p><p>(< 0 3 4 4 6) is *false*. (<= 0 3 4 4 6) is *true*. </p><p>(> 4 3) is *true*. (>= 4 3) is *true*. </p><p>(> 4 3 2 1 0) is *true*. (>= 4 3 2 1 0) is *true*. </p><p>(> 4 3 3 2 0) is *false*. (>= 4 3 3 2 0) is *true*. </p><p>(> 4 3 1 2 0) is *false*. (>= 4 3 1 2 0) is *false*. </p><p>(= 3) is *true*. (/= 3) is *true*. </p><p>(< 3) is *true*. (<= 3) is *true*. </p><p>(= 3.0 #c(3.0 0.0)) is *true*. (/= 3.0 #c(3.0 1.0)) is *true*. </p><p>(= 3 3.0) is *true*. (= 3.0s0 3.0d0) is *true*. </p><p>(= 0.0 -0.0) is *true*. (= 5/2 2.5) is *true*. </p><p>(> 0.0 -0.0) is *false*. (= 0 -0.0) is *true*. </p><p>(<= 0 x 9) is *true* if x is between 0 and 9, inclusive </p><p>(< 0.0 x 1.0) is *true* if x is between 0.0 and 1.0, exclusive </p><p>(< -1 j (length v)) is *true* if j is a *valid array index* for a *vector* v</p>|\n| :- |\n\n**Figure 12\u201313. Uses of /=, =,** <**,** >**,** <**=, and** >**=** \n\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["Might signal ",(0,r.jsx)(n.strong,{children:"type-error"})," if some ",(0,r.jsx)(n.em,{children:"argument"})," is not a ",(0,r.jsx)(n.em,{children:"real"}),". Might signal ",(0,r.jsx)(n.strong,{children:"arithmetic-error"})," if otherwise unable to fulfill its contract."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"="})," differs from ",(0,r.jsx)(n.strong,{children:"eql"})," in that (= 0.0 -0.0) is always true, because ",(0,r.jsx)(n.strong,{children:"="})," compares the mathematical values of its operands, whereas ",(0,r.jsx)(n.strong,{children:"eql"})," compares the representational values, so to speak."]})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}const l={title:"="},o="=",d={id:"chap-12/bc-c-dictionary/equal_function",title:"=",description:"Expanded Reference: =",source:"@site/docs/chap-12/bc-c-dictionary/equal_function.md",sourceDirName:"chap-12/bc-c-dictionary",slug:"/chap-12/bc-c-dictionary/equal_function",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/equal_function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-12/bc-c-dictionary/equal_function.md",tags:[],version:"current",frontMatter:{title:"="},sidebar:"tutorialSidebar",previous:{title:"dpb",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/dpb_function"},next:{title:"evenp, oddp",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/evenp_oddp_function"}},a={},h=[{value:"Expanded Reference: =",id:"expanded-reference-",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"",children:"="}),"\n","\n","\n",(0,r.jsx)(c,{}),"\n",(0,r.jsx)(n.h2,{id:"expanded-reference-",children:"Expanded Reference: ="}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(= )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>c});var r=s(67294);const i={},t=r.createContext(i);function c(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);