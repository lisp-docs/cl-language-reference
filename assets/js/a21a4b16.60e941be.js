"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[31444],{47090:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>j,frontMatter:()=>l,metadata:()=>d,toc:()=>a});var s=r(85893),i=r(11151);function o(e){const n={del:"del",em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"break"})," ",(0,s.jsx)(n.em,{children:"Function"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"break"})," &optional ",(0,s.jsx)(n.em,{children:"format-control"})," &rest ",(0,s.jsx)(n.em,{children:"format-arguments \u2192"})," ",(0,s.jsx)(n.strong,{children:"nil"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"format-control"}),"\u2014a ",(0,s.jsx)(n.em,{children:"format control"}),". The default is ",(0,s.jsx)(n.em,{children:"implementation-dependent"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"format-arguments"}),"\u2014",(0,s.jsx)(n.em,{children:"format arguments"})," for the ",(0,s.jsx)(n.em,{children:"format-control"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"break"})," ",(0,s.jsx)(n.em,{children:"formats format-control"})," and ",(0,s.jsx)(n.em,{children:"format-arguments"})," and then goes directly into the debugger without allowing any possibility of interception by programmed error-handling facilities."]}),"\n",(0,s.jsxs)(n.p,{children:["If the ",(0,s.jsx)(n.strong,{children:"continue"})," ",(0,s.jsx)(n.em,{children:"restart"})," is used while in the debugger, ",(0,s.jsx)(n.strong,{children:"break"})," immediately returns ",(0,s.jsx)(n.strong,{children:"nil"})," without taking any unusual recovery action."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"break"})," binds ",(0,s.jsx)(n.strong,{children:"*debugger-hook*"})," to ",(0,s.jsx)(n.strong,{children:"nil"})," before attempting to enter the debugger."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(n.p,{children:['(break "You got here with arguments: ~',":S",'." \u2019(FOO 37 A))']}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 BREAK: You got here with these arguments: FOO, 37, A."}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 To continue, type ",":CONTINUE"," followed by an option number:"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 1: Return from BREAK."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 2: Top level."}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 Debug> ",":CONTINUE"," 1"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Return from BREAK."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,s.jsx)(n.p,{children:"The debugger is entered."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"*debug-io*"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"error"}),", ",(0,s.jsx)(n.strong,{children:"invoke-debugger"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"break"})," is used as a way of inserting temporary debugging \u201cbreakpoints\u201d in a program, not as a way of signaling errors. For this reason, ",(0,s.jsx)(n.strong,{children:"break"})," does not take the ",(0,s.jsx)(n.em,{children:"continue-format-control argument"})," that ",(0,s.jsx)(n.strong,{children:"cerror"})," takes. This and the lack of any possibility of interception by ",(0,s.jsx)(n.em,{children:"condition handling"})," are the only program-visible differences between ",(0,s.jsx)(n.strong,{children:"break"})," and ",(0,s.jsx)(n.strong,{children:"cerror"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The user interface aspects of ",(0,s.jsx)(n.strong,{children:"break"})," and ",(0,s.jsx)(n.strong,{children:"cerror"})," are permitted to vary more widely, in order to accomodate the interface needs of the ",(0,s.jsx)(n.em,{children:"implementation"}),". For example, it is permissible for a ",(0,s.jsx)(n.em,{children:"Lisp read-eval-print loop"})," to be entered by ",(0,s.jsx)(n.strong,{children:"break"})," rather than the conventional debugger."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"break"})," could be defined by:"]}),"\n",(0,s.jsx)(n.p,{children:'(defun break (&optional (format-control "Break") &rest format-arguments)'}),"\n",(0,s.jsx)(n.p,{children:'(with-simple-restart (continue "Return from BREAK.")'}),"\n",(0,s.jsx)(n.p,{children:"(let ((*debugger-hook* nil))"}),"\n",(0,s.jsx)(n.p,{children:"(invoke-debugger"}),"\n",(0,s.jsx)(n.p,{children:"(make-condition \u2019simple-condition"}),"\n",(0,s.jsxs)(n.p,{children:[":format-control"," format-control"]}),"\n",(0,s.jsxs)(n.p,{children:[":format-arguments"," format-arguments))))"]}),"\n",(0,s.jsx)(n.p,{children:"nil)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2217"}),(0,s.jsx)(n.strong,{children:"debugger-hook"}),(0,s.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,s.jsxs)(n.p,{children:["a ",(0,s.jsx)(n.em,{children:"designator"})," for a ",(0,s.jsx)(n.em,{children:"function"})," of two ",(0,s.jsx)(n.em,{children:"arguments"})," (a ",(0,s.jsx)(n.em,{children:"condition"})," and the ",(0,s.jsx)(n.em,{children:"value"})," of ",(0,s.jsx)(n.strong,{children:"*debugger-hook*"})," at the time the debugger was entered), or ",(0,s.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["When the ",(0,s.jsx)(n.em,{children:"value"})," of ",(0,s.jsx)(n.strong,{children:"*debugger-hook*"})," is ",(0,s.jsx)(n.em,{children:"non-nil"}),", it is called prior to normal entry into the debugger, either due to a call to ",(0,s.jsx)(n.strong,{children:"invoke-debugger"})," or due to automatic entry into the debugger from a call to ",(0,s.jsx)(n.strong,{children:"error"})," or ",(0,s.jsx)(n.strong,{children:"cerror"})," with a condition that is not handled. The ",(0,s.jsx)(n.em,{children:"function"})," may either handle the ",(0,s.jsx)(n.em,{children:"condition"})," (transfer control) or return normally (allowing the standard debugger to run). To minimize recursive errors while debugging, ",(0,s.jsx)(n.strong,{children:"*debugger-hook*"})," is bound to ",(0,s.jsx)(n.strong,{children:"nil"})," by ",(0,s.jsx)(n.strong,{children:"invoke-debugger"})," prior to calling the ",(0,s.jsx)(n.em,{children:"function"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.p,{children:'(defun one-of (choices &optional (prompt "Choice"))'}),"\n",(0,s.jsx)(n.p,{children:"(let ((n (length choices)) (i))"}),"\n",(0,s.jsx)(n.p,{children:"(do ((c choices (cdr c)) (i 1 (+ i 1)))"}),"\n",(0,s.jsx)(n.p,{children:"((null c))"}),"\n",(0,s.jsxs)(n.p,{children:['(format t "~&[~D] ',(0,s.jsx)(n.del,{children:"A"}),'%" i (car c)))']}),"\n",(0,s.jsx)(n.p,{children:"(do () ((typep i \u2018(integer 1 ,n)))"}),"\n",(0,s.jsx)(n.p,{children:'(format t "~&~A: " prompt)'}),"\n",(0,s.jsx)(n.p,{children:"(setq i (read))"}),"\n",(0,s.jsx)(n.p,{children:"(fresh-line))"}),"\n",(0,s.jsx)(n.p,{children:"(nth (- i 1) choices)))"}),"\n",(0,s.jsx)(n.p,{children:"(defun my-debugger (condition me-or-my-encapsulation)"}),"\n",(0,s.jsx)(n.p,{children:'(format t "~&Fooey: ~A" condition)'}),"\n",(0,s.jsx)(n.p,{children:"(let ((restart (one-of (compute-restarts))))"}),"\n",(0,s.jsx)(n.p,{children:'(if (not restart) (error "My debugger got an error."))'}),"\n",(0,s.jsx)(n.p,{children:"(let ((*debugger-hook* me-or-my-encapsulation))"}),"\n",(0,s.jsx)(n.p,{children:"(invoke-restart-interactively restart))))"}),"\n",(0,s.jsx)(n.p,{children:"(let ((*debugger-hook* #\u2019my-debugger))"}),"\n",(0,s.jsx)(n.p,{children:"(+ 3 \u2019a))"}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Fooey: The argument to +, A, is not a number."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 [1] Supply a replacement for A."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 [2] Return to Cloe Toplevel."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Choice: 1"}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Form to evaluate and use: (+ 5 \u2019b)"}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Fooey: The argument to +, B, is not a number."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 [1] Supply a replacement for B."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 [2] Supply a replacement for A."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 [3] Return to Cloe Toplevel."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Choice: 1"}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Form to evaluate and use: 1"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2192"})," 9"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"invoke-debugger"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:["When evaluating code typed in by the user interactively, it is sometimes useful to have the hook function bind ",(0,s.jsx)(n.strong,{children:"*debugger-hook*"})," to the ",(0,s.jsx)(n.em,{children:"function"})," that was its second argument so that recursive errors can be handled using the same interactive facility."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2217"}),(0,s.jsx)(n.strong,{children:"break-on-signals"}),(0,s.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,s.jsxs)(n.p,{children:["a ",(0,s.jsx)(n.em,{children:"type specifier"})," ."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2217"}),(0,s.jsx)(n.strong,{children:"break-on-signals"}),(0,s.jsx)(n.em,{children:"\u2217"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["When (typep ",(0,s.jsx)(n.em,{children:"condition"})," *break-on-signals*) returns ",(0,s.jsx)(n.em,{children:"true"}),", calls to ",(0,s.jsx)(n.strong,{children:"signal"}),", and to other ",(0,s.jsx)(n.em,{children:"operators"})," such as ",(0,s.jsx)(n.strong,{children:"error"})," that implicitly call ",(0,s.jsx)(n.strong,{children:"signal"}),", enter the debugger prior to ",(0,s.jsx)(n.em,{children:"signaling"})," the ",(0,s.jsx)(n.em,{children:"condition"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"continue"})," ",(0,s.jsx)(n.em,{children:"restart"})," can be used to continue with the normal ",(0,s.jsx)(n.em,{children:"signaling"})," process when a break occurs process due to ",(0,s.jsx)(n.strong,{children:"*break-on-signals*"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(n.p,{children:["*break-on-signals* ",(0,s.jsx)(n.em,{children:"\u2192"})," NIL"]}),"\n",(0,s.jsxs)(n.p,{children:["(ignore-errors (error \u2019simple-error ",":format-control",' "Fooey!"))']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2192"})," NIL, #<SIMPLE-ERROR 32207172>"]}),"\n",(0,s.jsx)(n.p,{children:"(let ((*break-on-signals* \u2019error))"}),"\n",(0,s.jsxs)(n.p,{children:["(ignore-errors (error \u2019simple-error ",":format-control",' "Fooey!")))']}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Break: Fooey!"}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 BREAK entered because of *BREAK-ON-SIGNALS*."}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 To continue, type ",":CONTINUE"," followed by an option number:"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 1: Continue to signal."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 2: Top level."}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 Debug> ",":CONTINUE"," 1"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Continue to signal."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2192"})," NIL, #<SIMPLE-ERROR 32212257>"]}),"\n",(0,s.jsx)(n.p,{children:"(let ((*break-on-signals* \u2019error))"}),"\n",(0,s.jsxs)(n.p,{children:["(error \u2019simple-error ",":format-control",' "Fooey!"))']}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Break: Fooey!"}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 BREAK entered because of *BREAK-ON-SIGNALS*."}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 To continue, type ",":CONTINUE"," followed by an option number:"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 1: Continue to signal."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 2: Top level."}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 Debug> ",":CONTINUE"," 1"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Continue to signal."}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Error: Fooey!"}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 To continue, type ",":CONTINUE"," followed by an option number:"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 1: Top level."}),"\n",(0,s.jsxs)(n.p,{children:["\u25b7 Debug> ",":CONTINUE"," 1"]}),"\n",(0,s.jsx)(n.p,{children:"\u25b7 Top level."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"break"}),", ",(0,s.jsx)(n.strong,{children:"signal"}),", ",(0,s.jsx)(n.strong,{children:"warn"}),", ",(0,s.jsx)(n.strong,{children:"error"}),", ",(0,s.jsx)(n.strong,{children:"typep"}),", Section 9.1 (Condition System Concepts)"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"*break-on-signals*"})," is intended primarily for use in debugging code that does signaling. When setting ",(0,s.jsx)(n.strong,{children:"*break-on-signals*"}),", the user is encouraged to choose the most restrictive specification"]}),"\n",(0,s.jsxs)(n.p,{children:["that suffices. Setting ",(0,s.jsx)(n.strong,{children:"*break-on-signals*"})," effectively violates the modular handling of ",(0,s.jsx)(n.em,{children:"condition"})," signaling. In practice, the complete effect of setting ",(0,s.jsx)(n.strong,{children:"*break-on-signals*"})," might be unpredictable in some cases since the user might not be aware of the variety or number of calls to ",(0,s.jsx)(n.strong,{children:"signal"})," that are used in code called only incidentally."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"*break-on-signals*"})," enables an early entry to the debugger but such an entry does not preclude an additional entry to the debugger in the case of operations such as ",(0,s.jsx)(n.strong,{children:"error"})," and ",(0,s.jsx)(n.strong,{children:"cerror"}),"."]})]})}function t(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}const l={},c="break",d={id:"chap-9/j-c-dictionary/break",title:"break",description:"Expanded Reference: break",source:"@site/docs/chap-9/j-c-dictionary/break.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/break",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/break",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/break.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"assert",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/assert"},next:{title:"cell-error",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/cellerror"}},h={},a=[{value:"Expanded Reference: break",id:"expanded-reference-break",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"break",children:"break"}),"\n","\n","\n",(0,s.jsx)(t,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-break",children:"Expanded Reference: break"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(break )\n"})})]})}function j(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>t});var s=r(67294);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);