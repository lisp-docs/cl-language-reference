"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[48974],{93112:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>m});var n=o(85893),c=o(11151);const i={},r="compute-effective-method",d={id:"meta-object-protocol/compute-effective-method",title:"compute-effective-method",description:"Generic Function COMPUTE-EFFECTIVE-METHOD",source:"@site/docs/meta-object-protocol/compute-effective-method.md",sourceDirName:"meta-object-protocol",slug:"/meta-object-protocol/compute-effective-method",permalink:"/cl-language-reference/meta-object-protocol/compute-effective-method",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/compute-effective-method.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"compute-effective-method-standard-generic-function",permalink:"/cl-language-reference/meta-object-protocol/compute-effective-method-standard-generic-function"},next:{title:"compute-effective-slot-definition-funcallable-standard-class",permalink:"/cl-language-reference/meta-object-protocol/compute-effective-slot-definition-funcallable-standard-class"}},s={},m=[{value:"<strong>compute-effective-method</strong> (<em>generic-function</em> standard-generic-function) <em>method-combination</em> <em>methods</em>",id:"compute-effective-method-generic-function-standard-generic-function-method-combination-methods",level:2}];function a(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",p:"p",strong:"strong",...(0,c.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"compute-effective-method",children:"compute-effective-method"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"Generic Function"})," ",(0,n.jsx)(t.strong,{children:"COMPUTE-EFFECTIVE-METHOD"})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Syntax:"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"compute-effective-method"})," ",(0,n.jsx)(t.em,{children:"generic-function"})," ",(0,n.jsx)(t.em,{children:"method-combination"})," ",(0,n.jsx)(t.em,{children:"methods"})," => ",(0,n.jsx)(t.em,{children:"effective-method"}),", ",(0,n.jsx)(t.em,{children:"options"}),","]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Arguments and values:"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"generic-function"})," -- A generic function metaobject."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"method-combination"})," -- A method combination metaobject."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"methods"})," -- A list of method metaobjects."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"effective-method"})," -- An effective method."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"options"})," -- A list of effective method options."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Description:"})}),"\n",(0,n.jsx)(t.p,{children:"This generic function is called to determine the effective method from a sorted list of method metaobjects."}),"\n",(0,n.jsxs)(t.p,{children:["An effective method is a form that describes how the applicable methods are to be combined. Inside of effective method forms are",(0,n.jsx)(t.a,{href:"http://www.lispworks.com/documentation/HyperSpec/Body/m_call_m.htm#call-method",children:"call-method"})," forms which indicate that a particular method is to be called. The arguments to the ",(0,n.jsx)(t.a,{href:"http://www.lispworks.com/documentation/HyperSpec/Body/m_call_m.htm#call-method",children:"call-method"})," form indicate exactly how the method function of the method should be called. (See ",(0,n.jsx)(t.a,{href:"/meta-object-protocol/make-method-lambda",children:"make-method-lambda"})," for more details about method functions.)"]}),"\n",(0,n.jsxs)(t.p,{children:["An effective method option has the same interpretation and syntax as either the ",(0,n.jsx)(t.code,{children:":arguments"})," or the ",(0,n.jsx)(t.code,{children:":generic-function"})," option in the long form of ",(0,n.jsx)(t.a,{href:"http://www.lispworks.com/documentation/HyperSpec/Body/m_defi_4.htm#define-method-combination",children:"define-method-combination"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["More information about the form and interpretation of effective methods and effective method options can be found under the description of the ",(0,n.jsx)(t.a,{href:"http://www.lispworks.com/documentation/HyperSpec/Body/m_defi_4.htm#define-method-combination",children:"define-method-combination"})," macro in the CLOS specification."]}),"\n",(0,n.jsx)(t.p,{children:"This generic function can be called by the user or the implementation. It is called by discriminating functions whenever a sorted list of applicable methods must be converted to an effective method."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Methods:"})}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:"compute-effective-method-generic-function-standard-generic-function-method-combination-methods",children:(0,n.jsxs)(t.a,{href:"/meta-object-protocol/compute-effective-method-standard-generic-function",children:[(0,n.jsx)(t.strong,{children:"compute-effective-method"})," (",(0,n.jsx)(t.em,{children:"generic-function"})," standard-generic-function) ",(0,n.jsx)(t.em,{children:"method-combination"})," ",(0,n.jsx)(t.em,{children:"methods"})]})})]})}function h(e={}){const{wrapper:t}={...(0,c.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},11151:(e,t,o)=>{o.d(t,{Z:()=>d,a:()=>r});var n=o(67294);const c={},i=n.createContext(c);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);