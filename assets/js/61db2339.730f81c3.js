"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[19375],{22535:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>j,frontMatter:()=>r,metadata:()=>d,toc:()=>h});var c=s(85893),t=s(11151);function a(e){const n={em:"em",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"allocate-instance"})," ",(0,c.jsx)(n.em,{children:"Standard Generic Function"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"allocate-instance"})," ",(0,c.jsx)(n.em,{children:"class"})," &rest ",(0,c.jsx)(n.em,{children:"initargs"})," &key &allow-other-keys \u2192 new-instance"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Method Signatures:"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"allocate-instance"})," (",(0,c.jsx)(n.em,{children:"class"})," ",(0,c.jsx)(n.strong,{children:"standard-class"}),") &rest ",(0,c.jsx)(n.em,{children:"initargs"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"allocate-instance"})," (",(0,c.jsx)(n.em,{children:"class"})," ",(0,c.jsx)(n.strong,{children:"structure-class"}),") &rest ",(0,c.jsx)(n.em,{children:"initargs"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.em,{children:"class"}),"\u2014a ",(0,c.jsx)(n.em,{children:"class"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.em,{children:"initargs"}),"\u2014a ",(0,c.jsx)(n.em,{children:"list"})," of ",(0,c.jsx)(n.em,{children:"keyword/value pairs"})," (initialization argument ",(0,c.jsx)(n.em,{children:"names"})," and ",(0,c.jsx)(n.em,{children:"values"}),"). ",(0,c.jsx)(n.em,{children:"new-instance"}),"\u2014an ",(0,c.jsx)(n.em,{children:"object"})," whose ",(0,c.jsx)(n.em,{children:"class"})," is ",(0,c.jsx)(n.em,{children:"class"}),"."]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Description:"})}),"\n",(0,c.jsxs)(n.p,{children:["The generic function ",(0,c.jsx)(n.strong,{children:"allocate-instance"})," creates and returns a new instance of the ",(0,c.jsx)(n.em,{children:"class"}),", without initializing it. When the ",(0,c.jsx)(n.em,{children:"class"})," is a ",(0,c.jsx)(n.em,{children:"standard class"}),", this means that the ",(0,c.jsx)(n.em,{children:"slots"})," are ",(0,c.jsx)(n.em,{children:"unbound"}),"; when the ",(0,c.jsx)(n.em,{children:"class"})," is a ",(0,c.jsx)(n.em,{children:"structure class"}),", this means the ",(0,c.jsx)(n.em,{children:"slots"}),"\u2019 ",(0,c.jsx)(n.em,{children:"values"})," are unspecified."]}),"\n",(0,c.jsxs)(n.p,{children:["The caller of ",(0,c.jsx)(n.strong,{children:"allocate-instance"})," is expected to have already checked the initialization arguments."]}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.em,{children:"generic function"})," ",(0,c.jsx)(n.strong,{children:"allocate-instance"})," is called by ",(0,c.jsx)(n.strong,{children:"make-instance"}),", as described in Section 7.1 (Object Creation and Initialization)."]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"defclass"}),", ",(0,c.jsx)(n.strong,{children:"make-instance"}),", ",(0,c.jsx)(n.strong,{children:"class-of"}),", Section 7.1 (Object Creation and Initialization)"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,c.jsxs)(n.p,{children:["The consequences of adding ",(0,c.jsx)(n.em,{children:"methods"})," to ",(0,c.jsx)(n.strong,{children:"allocate-instance"})," is unspecified. This capability might be added by the ",(0,c.jsx)(n.em,{children:"Metaobject Protocol"}),"."]})]})}function i(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(a,{...e})}):a(e)}const r={},l="allocate-instance",d={id:"chap-7/h-h-dictionary/allocateinstance",title:"allocate-instance",description:"Expanded Reference: allocate-instance",source:"@site/docs/chap-7/h-h-dictionary/allocateinstance.md",sourceDirName:"chap-7/h-h-dictionary",slug:"/chap-7/h-h-dictionary/allocateinstance",permalink:"/cl-language-reference/docs/chap-7/h-h-dictionary/allocateinstance",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-7/h-h-dictionary/allocateinstance.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"add-method",permalink:"/cl-language-reference/docs/chap-7/h-h-dictionary/addmethod"},next:{title:"(setf class-name)",permalink:"/cl-language-reference/docs/chap-7/h-h-dictionary/asetfaclassnamea"}},o={},h=[{value:"Expanded Reference: allocate-instance",id:"expanded-reference-allocate-instance",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h1,{id:"allocate-instance",children:"allocate-instance"}),"\n","\n","\n",(0,c.jsx)(i,{}),"\n",(0,c.jsx)(n.h2,{id:"expanded-reference-allocate-instance",children:"Expanded Reference: allocate-instance"}),"\n",(0,c.jsx)(n.admonition,{type:"tip",children:(0,c.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-lisp",children:"(allocate-instance )\n"})})]})}function j(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(x,{...e})}):x(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>r,a:()=>i});var c=s(67294);const t={},a=c.createContext(t);function i(e){const n=c.useContext(a);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),c.createElement(a.Provider,{value:n},e.children)}}}]);