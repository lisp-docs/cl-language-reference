"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[15382],{75241:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>g});var t=r(85893),i=r(11151);function o(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"invoke-debugger"})," ",(0,t.jsx)(n.em,{children:"Function"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"invoke-debugger"})," ",(0,t.jsx)(n.em,{children:"condition \u2192"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"condition"}),"\u2014a ",(0,t.jsx)(n.em,{children:"condition object"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"invoke-debugger"})," attempts to enter the debugger with ",(0,t.jsx)(n.em,{children:"condition"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.strong,{children:"*debugger-hook*"})," is not ",(0,t.jsx)(n.strong,{children:"nil"}),", it should be a ",(0,t.jsx)(n.em,{children:"function"})," (or the name of a ",(0,t.jsx)(n.em,{children:"function"}),") to be called prior to entry to the standard debugger. The ",(0,t.jsx)(n.em,{children:"function"})," is called with ",(0,t.jsx)(n.strong,{children:"*debugger-hook*"})," bound to ",(0,t.jsx)(n.strong,{children:"nil"}),", and the ",(0,t.jsx)(n.em,{children:"function"})," must accept two arguments: the ",(0,t.jsx)(n.em,{children:"condition"})," and the ",(0,t.jsx)(n.em,{children:"value"})," of ",(0,t.jsx)(n.strong,{children:"*debugger-hook*"})," prior to binding it to ",(0,t.jsx)(n.strong,{children:"nil"}),". If the ",(0,t.jsx)(n.em,{children:"function"})," returns normally, the standard debugger is entered."]}),"\n",(0,t.jsx)(n.p,{children:"The standard debugger never directly returns. Return can occur only by a non-local transfer of control, such as the use of a restart function."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:'\n(ignore-errors ;Normally, this would suppress debugger entry \n  (handler-bind ((error #\u2019invoke-debugger)) ;But this forces debugger entry \n    (error "Foo."))) \nDebug: Foo. \nTo continue, type :CONTINUE followed by an option number: \n1: Return to Lisp Toplevel. \nDebug> \n\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"*debugger-hook*"})," is bound to ",(0,t.jsx)(n.strong,{children:"nil"}),", program execution is discontinued, and the debugger is entered."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"*debug-io*"})," and ",(0,t.jsx)(n.strong,{children:"*debugger-hook*"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"error"}),", ",(0,t.jsx)(n.strong,{children:"break"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"break"})})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}const s={title:"invoke-debugger"},d="invoke-debugger",l={id:"chap-9/j-c-dictionary/invoke-debugger_function",title:"invoke-debugger",description:"Expanded Reference: invoke-debugger",source:"@site/docs/chap-9/j-c-dictionary/invoke-debugger_function.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/invoke-debugger_function",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/invoke-debugger_function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/invoke-debugger_function.md",tags:[],version:"current",frontMatter:{title:"invoke-debugger"},sidebar:"tutorialSidebar",previous:{title:"invalid-method-error",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/invalid-method-error_function"},next:{title:"invoke-restart-interactively",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/invoke-restart-interactively_function"}},a={},g=[{value:"Expanded Reference: invoke-debugger",id:"expanded-reference-invoke-debugger",level:2}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"invoke-debugger",children:"invoke-debugger"}),"\n","\n","\n",(0,t.jsx)(c,{}),"\n",(0,t.jsx)(n.h2,{id:"expanded-reference-invoke-debugger",children:"Expanded Reference: invoke-debugger"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"(invoke-debugger )\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>s,a:()=>c});var t=r(67294);const i={},o=t.createContext(i);function c(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);