"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[32937],{74037:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>x,frontMatter:()=>c,metadata:()=>d,toc:()=>m});var a=r(85893),t=r(11151);function i(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"defmacro"})," ",(0,a.jsx)(n.em,{children:"Macro"})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"defmacro"})," ",(0,a.jsx)(n.em,{children:"name lambda-list"})," [[ ",(0,a.jsx)(n.em,{children:"{declaration}"}),"* ",(0,a.jsx)(n.em,{children:"| documentation"})," ]] ",(0,a.jsx)(n.em,{children:"{form}"}),"*"]}),"\n",(0,a.jsx)(n.p,{children:"\u2192 name"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"name"}),"\u2014a ",(0,a.jsx)(n.em,{children:"symbol"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"lambda-list"}),"\u2014a ",(0,a.jsx)(n.em,{children:"macro lambda list"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,a.jsx)(n.strong,{children:"declare"})," ",(0,a.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"documentation"}),"\u2014a ",(0,a.jsx)(n.em,{children:"string"}),"; not evaluated."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"form"}),"\u2014a ",(0,a.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"defmacro"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsxs)(n.p,{children:["Defines ",(0,a.jsx)(n.em,{children:"name"})," as a ",(0,a.jsx)(n.em,{children:"macro"})," by associating a ",(0,a.jsx)(n.em,{children:"macro function"})," with that ",(0,a.jsx)(n.em,{children:"name"})," in the global environment. The ",(0,a.jsx)(n.em,{children:"macro function"})," is defined in the same ",(0,a.jsx)(n.em,{children:"lexical environment"})," in which the ",(0,a.jsx)(n.strong,{children:"defmacro"})," ",(0,a.jsx)(n.em,{children:"form"})," appears."]}),"\n",(0,a.jsxs)(n.p,{children:["The parameter variables in ",(0,a.jsx)(n.em,{children:"lambda-list"})," are bound to destructured portions of the macro call."]}),"\n",(0,a.jsxs)(n.p,{children:["The expansion function accepts two arguments, a ",(0,a.jsx)(n.em,{children:"form"})," and an ",(0,a.jsx)(n.em,{children:"environment"}),". The expansion function returns a ",(0,a.jsx)(n.em,{children:"form"}),". The body of the expansion function is specified by ",(0,a.jsx)(n.em,{children:"forms"}),". ",(0,a.jsx)(n.em,{children:"Forms"})," are executed in order. The value of the last ",(0,a.jsx)(n.em,{children:"form"})," executed is returned as the expansion of the ",(0,a.jsx)(n.em,{children:"macro"}),". The body ",(0,a.jsx)(n.em,{children:"forms"})," of the expansion function (but not the ",(0,a.jsx)(n.em,{children:"lambda-list"}),") are implicitly enclosed in a ",(0,a.jsx)(n.em,{children:"block"})," whose name is ",(0,a.jsx)(n.em,{children:"name"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.em,{children:"lambda-list"})," conforms to the requirements described in Section 3.4.4 (Macro Lambda Lists)."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Documentation"})," is attached as a ",(0,a.jsx)(n.em,{children:"documentation string"})," to ",(0,a.jsx)(n.em,{children:"name"})," (as kind ",(0,a.jsx)(n.strong,{children:"function"}),") and to the ",(0,a.jsx)(n.em,{children:"macro function"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"defmacro"})," can be used to redefine a ",(0,a.jsx)(n.em,{children:"macro"})," or to replace a ",(0,a.jsx)(n.em,{children:"function"})," definition with a ",(0,a.jsx)(n.em,{children:"macro"})," definition."]}),"\n",(0,a.jsxs)(n.p,{children:["Recursive expansion of the ",(0,a.jsx)(n.em,{children:"form"})," returned must terminate, including the expansion of other ",(0,a.jsx)(n.em,{children:"macros"})," which are ",(0,a.jsx)(n.em,{children:"subforms"})," of other ",(0,a.jsx)(n.em,{children:"forms"})," returned."]}),"\n",(0,a.jsxs)(n.p,{children:["The consequences are undefined if the result of fully macroexpanding a ",(0,a.jsx)(n.em,{children:"form"})," contains any ",(0,a.jsx)(n.em,{children:"circular list structure"})," except in ",(0,a.jsx)(n.em,{children:"literal objects"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["If a ",(0,a.jsx)(n.strong,{children:"defmacro"})," ",(0,a.jsx)(n.em,{children:"form"})," appears as a ",(0,a.jsx)(n.em,{children:"top level form"}),", the ",(0,a.jsx)(n.em,{children:"compiler"})," must store the ",(0,a.jsx)(n.em,{children:"macro"})," definition at compile time, so that occurrences of the macro later on in the file can be expanded correctly. Users must ensure that the body of the ",(0,a.jsx)(n.em,{children:"macro"})," can be evaluated at compile time if it is referenced within the ",(0,a.jsx)(n.em,{children:"file"})," being ",(0,a.jsx)(n.em,{children:"compiled"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lisp",children:'\n(defmacro mac1 (a b) "Mac1 multiplies and adds" \n\t  \u2018(+ ,a (\\* ,b 3))) \u2192 MAC1 \n(mac1 4 5) \u2192 19 \n(documentation \u2019mac1 \u2019function) \u2192 "Mac1 multiplies and adds" \n(defmacro mac2 (&optional (a 2 b) (c 3 d) &rest x) \u2018\u2019(,a ,b ,c ,d ,x)) \u2192 MAC2 (mac2 6) \u2192 (6 T 3 NIL NIL) \n(mac2 6 3 8) \u2192 (6 T 3 T (8)) \n(defmacro mac3 (&whole r a &optional (b 3) &rest x &key c (d a)) \n  \u2018\u2019(,r ,a ,b ,c ,d ,x)) \u2192 MAC3 \n(mac3 1 6 :d 8 :c 9 :d 10) \u2192 ((MAC3 1 6 :D 8 :C 9 :D 10) 1 6 9 8 (:D 8 :C 9 :D 10)) \nThe stipulation that an embedded *destructuring lambda list* is permitted only where *ordinary lambda list* syntax would permit a parameter name but not a *list* is made to prevent ambiguity. For example, the following is not valid:  \n\n**defmacro** \n(defmacro loser (x &optional (a b &rest c) &rest z) \n  ...) \nbecause *ordinary lambda list* syntax does permit a *list* following &optional; the list (a b &rest c) would be interpreted as describing an optional parameter named a whose default value is that of the form b, with a supplied-p parameter named **&rest** (not valid), and an extraneous symbol c in the list (also not valid). An almost correct way to express this is \n(defmacro loser (x &optional ((a b &rest c)) &rest z) \n  ...) \nThe extra set of parentheses removes the ambiguity. However, the definition is now incorrect because a macro call such as (loser (car pool)) would not provide any argument form for the lambda list (a b &rest c), and so the default value against which to match the *lambda list* would be **nil** because no explicit default value was specified. The consequences of this are unspecified since the empty list, **nil**, does not have *forms* to satisfy the parameters a and b. The fully correct definition would be either \n(defmacro loser (x &optional ((a b &rest c) \u2019(nil nil)) &rest z) \n  ...) \nor \n(defmacro loser (x &optional ((&optional a b &rest c)) &rest z) \n  ...) \nThese differ slightly: the first requires that if the macro call specifies a explicitly then it must also specify b explicitly, whereas the second does not have this requirement. For example, \n(loser (car pool) ((+ x 1))) \nwould be a valid call for the second definition but not for the first. \n(defmacro dm1a (&whole x) \u2018\u2019,x) \n(macroexpand \u2019(dm1a)) \u2192 (QUOTE (DM1A)) \n(macroexpand \u2019(dm1a a)) is an error. \n(defmacro dm1b (&whole x a &optional b) \u2018\u2019(,x ,a ,b)) \n(macroexpand \u2019(dm1b)) is an error. \n(macroexpand \u2019(dm1b q)) \u2192 (QUOTE ((DM1B Q) Q NIL)) \n(macroexpand \u2019(dm1b q r)) \u2192 (QUOTE ((DM1B Q R) Q R)) \n(macroexpand \u2019(dm1b q r s)) is an error. \n(defmacro dm2a (&whole form a b) \u2018\u2019(form ,form a ,a b ,b)) \n(macroexpand \u2019(dm2a x y)) \u2192 (QUOTE (FORM (DM2A X Y) A X B Y)) \n(dm2a x y) \u2192 (FORM (DM2A X Y) A X B Y) \n(defmacro dm2b (&whole form a (&whole b (c . d) &optional (e 5)) \n\t\t&body f &environment env)  \n\n  \u201c(,\u2019,form \u201ea ,\u2019,b ,\u2019,(macroexpand c env) ,\u2019,d ,\u2019,e ,\u2019,f)) \n\t\t\t\t\t;Note that because backquote is involved, implementations may differ \n\t\t\t\t\t;slightly in the nature (though not the functionality) of the expansion. \n(macroexpand \u2019(dm2b x1 (((incf x2) x3 x4)) x5 x6)) \n\u2192 (LIST\\* \u2019(DM2B X1 (((INCF X2) X3 X4)) \n\t\t   X5 X6) \n\t     X1 \n\t     \u2019((((INCF X2) X3 X4)) (SETQ X2 (+ X2 1)) (X3 X4) 5 (X5 X6))), \nT \n(let ((x1 5)) \n  (macrolet ((segundo (x) \u2018(cadr ,x))) \n    (dm2b x1 (((segundo x2) x3 x4)) x5 x6))) \n\u2192 ((DM2B X1 (((SEGUNDO X2) X3 X4)) X5 X6) \n     5 (((SEGUNDO X2) X3 X4)) (CADR X2) (X3 X4) 5 (X5 X6)) \n\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"define-compiler-macro"}),", ",(0,a.jsx)(n.strong,{children:"destructuring-bind"}),", ",(0,a.jsx)(n.strong,{children:"documentation"}),", ",(0,a.jsx)(n.strong,{children:"macroexpand"}),","]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"*macroexpand-hook*"}),", ",(0,a.jsx)(n.strong,{children:"macrolet"}),", ",(0,a.jsx)(n.strong,{children:"macro-function"}),", Section 3.1 (Evaluation), Section 3.2 (Compilation), Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)"]})]})}function o(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}const c={title:"defmacro"},s="defmacro",d={id:"chap-3/d-i-dictionary/defmacro_macro",title:"defmacro",description:"Expanded Reference: defmacro",source:"@site/docs/chap-3/d-i-dictionary/defmacro_macro.md",sourceDirName:"chap-3/d-i-dictionary",slug:"/chap-3/d-i-dictionary/defmacro_macro",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/defmacro_macro",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-3/d-i-dictionary/defmacro_macro.md",tags:[],version:"current",frontMatter:{title:"defmacro"},sidebar:"tutorialSidebar",previous:{title:"define-symbol-macro",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/define-symbol-macro_macro"},next:{title:"dynamic-extent",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/dynamic-extent_declaration"}},l={},m=[{value:"Expanded Reference: defmacro",id:"expanded-reference-defmacro",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"defmacro",children:"defmacro"}),"\n","\n","\n",(0,a.jsx)(o,{}),"\n",(0,a.jsx)(n.h2,{id:"expanded-reference-defmacro",children:"Expanded Reference: defmacro"}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lisp",children:"(defmacro )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>c,a:()=>o});var a=r(67294);const t={},i=a.createContext(t);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);