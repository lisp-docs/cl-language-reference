"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[75536],{17742:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>x,frontMatter:()=>c,metadata:()=>l,toc:()=>h});var i=s(85893),r=s(11151);function t(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," ",(0,i.jsx)(n.em,{children:"Standard Generic Function"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," ",(0,i.jsx)(n.em,{children:"previous current"})," &rest ",(0,i.jsx)(n.em,{children:"initargs"})," &key &allow-other-keys ",(0,i.jsx)(n.em,{children:"\u2192 implementation-dependent"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Method Signatures:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," (",(0,i.jsx)(n.em,{children:"previous"})," ",(0,i.jsx)(n.strong,{children:"standard-object"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["(",(0,i.jsx)(n.em,{children:"current"})," ",(0,i.jsx)(n.strong,{children:"standard-object"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["&rest ",(0,i.jsx)(n.em,{children:"initargs"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"previous"}),"\u2014a copy of the original ",(0,i.jsx)(n.em,{children:"instance"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"current"}),"\u2014the original ",(0,i.jsx)(n.em,{children:"instance"})," (altered)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"initargs"}),"\u2014an ",(0,i.jsx)(n.em,{children:"initialization argument list"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["The generic function ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," is not intended to be called by program mers. Programmers may write ",(0,i.jsx)(n.em,{children:"methods"})," for it. The ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," is called only by the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"change-class"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The system-supplied primary ",(0,i.jsx)(n.em,{children:"method"})," on ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," checks the validity of ",(0,i.jsx)(n.em,{children:"initargs"})," and signals an error if an ",(0,i.jsx)(n.em,{children:"initarg"})," is supplied that is not declared as valid. This ",(0,i.jsx)(n.em,{children:"method"})," then initializes ",(0,i.jsx)(n.em,{children:"slots"})," with values according to the ",(0,i.jsx)(n.em,{children:"initargs"}),", and initializes the newly added ",(0,i.jsx)(n.em,{children:"slots"})," with values according to their ",":initform"," forms. It does this by calling the generic function ",(0,i.jsx)(n.strong,{children:"shared-initialize"})," with the following arguments: the instance (",(0,i.jsx)(n.em,{children:"current"}),"), a list of ",(0,i.jsx)(n.em,{children:"names"})," of the newly added ",(0,i.jsx)(n.em,{children:"slots"}),", and the ",(0,i.jsx)(n.em,{children:"initargs"})," it received. Newly added ",(0,i.jsx)(n.em,{children:"slots"})," are those ",(0,i.jsx)(n.em,{children:"local slots"})," for which no ",(0,i.jsx)(n.em,{children:"slot"})," of the same name exists in the ",(0,i.jsx)(n.em,{children:"previous"})," class."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Methods"})," for ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," can be defined to specify actions to be taken when an ",(0,i.jsx)(n.em,{children:"instance"})," is updated. If only ",(0,i.jsx)(n.em,{children:"after methods"})," for ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," are defined, they will be run after the system-supplied primary ",(0,i.jsx)(n.em,{children:"method"})," for initialization and therefore will not interfere with the default behavior of ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Methods"})," on ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," can be defined to initialize ",(0,i.jsx)(n.em,{children:"slots"})," differently from ",(0,i.jsx)(n.strong,{children:"change-class"}),". The default behavior of ",(0,i.jsx)(n.strong,{children:"change-class"})," is described in Section 7.2 (Changing the Class of an Instance)."]}),"\n",(0,i.jsxs)(n.p,{children:["The arguments to ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," are computed by ",(0,i.jsx)(n.strong,{children:"change-class"}),". When ",(0,i.jsx)(n.strong,{children:"change-class"})," is invoked on an ",(0,i.jsx)(n.em,{children:"instance"}),", a copy of that ",(0,i.jsx)(n.em,{children:"instance"})," is made; ",(0,i.jsx)(n.strong,{children:"change-class"})," then de structively alters the original ",(0,i.jsx)(n.em,{children:"instance"}),". The first argument to ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"}),", ",(0,i.jsx)(n.em,{children:"previous"}),", is that copy; it holds the old ",(0,i.jsx)(n.em,{children:"slot"})," values temporarily. This argument has dynamic extent within ",(0,i.jsx)(n.strong,{children:"change-class"}),"; if it is referenced in any way once ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," returns, the results are undefined. The second argument to ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"}),", ",(0,i.jsx)(n.em,{children:"current"}),", is the altered original ",(0,i.jsx)(n.em,{children:"instance"}),". The intended use of ",(0,i.jsx)(n.em,{children:"previous"})," is to extract old ",(0,i.jsx)(n.em,{children:"slot"})," values by using ",(0,i.jsx)(n.strong,{children:"slot-value"})," or ",(0,i.jsx)(n.strong,{children:"with-slots"})," or by invoking a reader generic function, or to run other ",(0,i.jsx)(n.em,{children:"methods"})," that were applicable to ",(0,i.jsx)(n.em,{children:"instances"})," of the original ",(0,i.jsx)(n.em,{children:"class"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:" \n\n\n\nSee the example for the *function* **change-class**. \n\n\n\n\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,i.jsxs)(n.p,{children:["The system-supplied primary ",(0,i.jsx)(n.em,{children:"method"})," on ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," signals an error if an initialization argument is supplied that is not declared as valid."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"change-class"}),", ",(0,i.jsx)(n.strong,{children:"shared-initialize"}),", Section 7.2 (Changing the Class of an Instance), Section 7.1.4 (Rules for Initialization Arguments), Section 7.1.2 (Declaring the Validity of Initialization Arguments)"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Initargs"})," are declared as valid by using the ",":initarg"," option to ",(0,i.jsx)(n.strong,{children:"defclass"}),", or by defining ",(0,i.jsx)(n.em,{children:"methods"})," for ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," or ",(0,i.jsx)(n.strong,{children:"shared-initialize"}),". The keyword name of each keyword parameter specifier in the ",(0,i.jsx)(n.em,{children:"lambda list"})," of any ",(0,i.jsx)(n.em,{children:"method"})," defined on ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," or ",(0,i.jsx)(n.strong,{children:"shared-initialize"})," is declared as a valid ",(0,i.jsx)(n.em,{children:"initarg"})," name for all ",(0,i.jsx)(n.em,{children:"classes"})," for which that ",(0,i.jsx)(n.em,{children:"method"})," is applicable."]}),"\n",(0,i.jsxs)(n.p,{children:["The value returned by ",(0,i.jsx)(n.strong,{children:"update-instance-for-different-class"})," is ignored by ",(0,i.jsx)(n.strong,{children:"change-class"}),"."]})]})}function a(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}const c={},d="update-instance-for-different-class",l={id:"chap-7/h-h-dictionary/updateinstancefordifferentclass",title:"update-instance-for-different-class",description:"Expanded Reference: update-instance-for-different-class",source:"@site/docs/chap-7/h-h-dictionary/updateinstancefordifferentclass.md",sourceDirName:"chap-7/h-h-dictionary",slug:"/chap-7/h-h-dictionary/updateinstancefordifferentclass",permalink:"/cl-language-reference/docs/chap-7/h-h-dictionary/updateinstancefordifferentclass",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-7/h-h-dictionary/updateinstancefordifferentclass.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"unbound-slot-instance",permalink:"/cl-language-reference/docs/chap-7/h-h-dictionary/unboundslotinstance"},next:{title:"update-instance-for-redefined-class",permalink:"/cl-language-reference/docs/chap-7/h-h-dictionary/updateinstanceforredefinedclass"}},o={},h=[{value:"Expanded Reference: update-instance-for-different-class",id:"expanded-reference-update-instance-for-different-class",level:2}];function f(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"update-instance-for-different-class",children:"update-instance-for-different-class"}),"\n","\n","\n",(0,i.jsx)(a,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-update-instance-for-different-class",children:"Expanded Reference: update-instance-for-different-class"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(update-instance-for-different-class )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>a});var i=s(67294);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);