"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[72116],{23616:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>i});var t=a(85893),c=a(11151);const l={},s="allocate-instance-funcallable-standard-class",o={id:"meta-object-protocol/allocate-instance-funcallable-standard-class",title:"allocate-instance-funcallable-standard-class",description:"Method ALLOCATE-INSTANCE",source:"@site/docs/meta-object-protocol/allocate-instance-funcallable-standard-class.md",sourceDirName:"meta-object-protocol",slug:"/meta-object-protocol/allocate-instance-funcallable-standard-class",permalink:"/cl-language-reference/meta-object-protocol/allocate-instance-funcallable-standard-class",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/allocate-instance-funcallable-standard-class.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"allocate-instance-built-in-class",permalink:"/cl-language-reference/meta-object-protocol/allocate-instance-built-in-class"},next:{title:"allocate-instance-standard-class",permalink:"/cl-language-reference/meta-object-protocol/allocate-instance-standard-class"}},r={},i=[];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",p:"p",strong:"strong",...(0,c.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"allocate-instance-funcallable-standard-class",children:"allocate-instance-funcallable-standard-class"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Method"})," ",(0,t.jsx)(n.strong,{children:"ALLOCATE-INSTANCE"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"allocate-instance"})," ",(0,t.jsx)(n.em,{children:"(class"})," funcallable-standard-class) ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.code,{children:"&rest"})})," ",(0,t.jsx)(n.em,{children:"initargs"})," => ",(0,t.jsx)(n.em,{children:"instance"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a method on the generic function",(0,t.jsx)(n.a,{href:"/meta-object-protocol/allocate-instance",children:"allocate-instance"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This method allocates storage in the instance for each slot with allocation ",(0,t.jsx)(n.code,{children:":instance"}),". These slots are unbound. Slots with any other allocation are ignored by this method (no error is signaled)."]}),"\n",(0,t.jsxs)(n.p,{children:["The funcallable instance function of the instance is undefined --- the results are undefined if the instance is applied to arguments before ",(0,t.jsx)(n.a,{href:"/meta-object-protocol/set-funcallable-instance-function",children:"set-funcallable-instance-function"})," has been used to set the funcallable instance function."]})]})}function u(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,a)=>{a.d(n,{Z:()=>o,a:()=>s});var t=a(67294);const c={},l=t.createContext(c);function s(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);