"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[58286],{49207:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>h});var t=o(85893),i=o(11151);function s(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"loop-finish"})," ",(0,t.jsx)(n.em,{children:"Local Macro"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"loop-finish"})," \u27e8",(0,t.jsx)(n.em,{children:"no arguments"}),"\u27e9 \u2192*"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"loop-finish"})," ",(0,t.jsx)(n.em,{children:"macro"})," can be used lexically within an extended ",(0,t.jsx)(n.strong,{children:"loop"})," ",(0,t.jsx)(n.em,{children:"form"})," to terminate that ",(0,t.jsx)(n.em,{children:"form"})," \u201cnormally.\u201d That is, it transfers control to the loop epilogue of the lexically innermost extended ",(0,t.jsx)(n.strong,{children:"loop"})," ",(0,t.jsx)(n.em,{children:"form"}),". This permits execution of any ",(0,t.jsx)(n.strong,{children:"finally"})," clause (for effect) and the return of any accumulated result."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:' \n\n;; Terminate the loop, but return the accumulated count. \n\n(loop for i in \u2019(1 2 3 stop-here 4 5 6) \n\nwhen (symbolp i) do (loop-finish) \n\ncount i) \n\n\u2192 3 \n\n;; The preceding loop is equivalent to: \n\n(loop for i in \u2019(1 2 3 stop-here 4 5 6) \n\nuntil (symbolp i) \n\ncount i) \n\n\u2192 3 \n\n;; While LOOP-FINISH can be used can be used in a variety of \n\n;; situations it is really most needed in a situation where a need \n\n;; to exit is detected at other than the loop\u2019s \u2018top level\u2019 \n\n;; (where UNTIL or WHEN often work just as well), or where some \n\n;; computation must occur between the point where a need to exit is \n\n;; detected and the point where the exit actually occurs. For example: \n\n(defun tokenize-sentence (string) \n\n(macrolet ((add-word (wvar svar) \n\n\u2018(when ,wvar \n\n(push (coerce (nreverse ,wvar) \u2019string) ,svar) \n\n(setq ,wvar nil)))) \n\n\n\n \n\n \n\n**loop-finish** \n\n(loop with word = \u2019() and sentence = \u2019() and endpos = nil \n\nfor i below (length string) \n\ndo (let ((char (aref string i))) \n\n(case char \n\n(#\\Space (add-word word sentence)) \n\n(#\\. (setq endpos (1+ i)) (loop-finish)) \n\n(otherwise (push char word)))) \n\nfinally (add-word word sentence) \n\n(return (values (nreverse sentence) endpos))))) \n\n\u2192 TOKENIZE-SENTENCE \n\n(tokenize-sentence "this is a sentence. this is another sentence.") \n\n\u2192 ("this" "is" "a" "sentence"), 19 \n\n(tokenize-sentence "this is a sentence") \n\n\u2192 ("this" "is" "a" "sentence"), NIL \n\n\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,t.jsx)(n.p,{children:"Transfers control."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,t.jsxs)(n.p,{children:["Whether or not ",(0,t.jsx)(n.strong,{children:"loop-finish"})," is ",(0,t.jsx)(n.em,{children:"fbound"})," in the ",(0,t.jsx)(n.em,{children:"global environment"})," is ",(0,t.jsx)(n.em,{children:"implementation-dependent"}),"; however, the restrictions on redefinition and ",(0,t.jsx)(n.em,{children:"shadowing"})," of ",(0,t.jsx)(n.strong,{children:"loop-finish"})," are the same as for ",(0,t.jsx)(n.em,{children:"symbols"})," in the COMMON-LISP ",(0,t.jsx)(n.em,{children:"package"})," which are ",(0,t.jsx)(n.em,{children:"fbound"})," in the ",(0,t.jsx)(n.em,{children:"global environment"}),". The consequences of attempting to use ",(0,t.jsx)(n.strong,{children:"loop-finish"})," outside of ",(0,t.jsx)(n.strong,{children:"loop"})," are undefined."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"loop"}),", Section 6.1 (The LOOP Facility)"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Notes:"})})]})}function r(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}const a={},c="loop-finish",l={id:"chap-6/g-c-dictionary/loopfinish",title:"loop-finish",description:"Expanded Reference: loop-finish",source:"@site/docs/chap-6/g-c-dictionary/loopfinish.md",sourceDirName:"chap-6/g-c-dictionary",slug:"/chap-6/g-c-dictionary/loopfinish",permalink:"/cl-language-reference/docs/chap-6/g-c-dictionary/loopfinish",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-6/g-c-dictionary/loopfinish.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"go** may be used within the body of **dolist** to transfer control to a statement labeled by a *tag*. **loop",permalink:"/cl-language-reference/docs/chap-6/g-c-dictionary/goaaamayabeausedawithinatheabodyaofaaadolistaaatoatransferacontrolatoaaastatementalabeledabyaaaatagaaaaaloop"},next:{title:"7. Objects",permalink:"/cl-language-reference/docs/category/7-objects"}},d={},h=[{value:"Expanded Reference: loop-finish",id:"expanded-reference-loop-finish",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"loop-finish",children:"loop-finish"}),"\n","\n","\n",(0,t.jsx)(r,{}),"\n",(0,t.jsx)(n.h2,{id:"expanded-reference-loop-finish",children:"Expanded Reference: loop-finish"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"(loop-finish )\n"})})]})}function f(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},11151:(e,n,o)=>{o.d(n,{Z:()=>a,a:()=>r});var t=o(67294);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);