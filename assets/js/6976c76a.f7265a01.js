"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[40977],{68594:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>u});var t=r(85893),o=r(11151);function i(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components},{DictionaryLink:r,GlossaryTerm:i}=n;return r||c("DictionaryLink",!0),i||c("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["\u2217",(0,t.jsx)(r,{styled:!0,term:"debugger-hook",children:(0,t.jsx)("b",{children:(0,t.jsx)(n.em,{children:"debugger-hook"})})}),"\u2217 Variable"]})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,t.jsxs)(n.p,{children:["a ",(0,t.jsx)(i,{styled:!0,term:"designator",children:(0,t.jsx)("i",{children:"designator"})})," for a ",(0,t.jsx)(i,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})})," of two ",(0,t.jsx)(i,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"arguments"})})," (a ",(0,t.jsx)(i,{styled:!0,term:"condition",children:(0,t.jsx)("i",{children:"condition"})})," and the ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"value"})})," of ",(0,t.jsx)(r,{styled:!0,term:"debugger-hook",children:(0,t.jsx)("b",{children:"*debugger-hook*"})})," at the time the debugger was entered), or ",(0,t.jsx)(r,{styled:!0,term:"nil",children:(0,t.jsx)("b",{children:"nil"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{styled:!0,term:"nil",children:(0,t.jsx)("b",{children:"nil"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(n.p,{children:["When the ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"value"})})," of ",(0,t.jsx)(r,{styled:!0,term:"debugger-hook",children:(0,t.jsx)("b",{children:"*debugger-hook*"})})," is ",(0,t.jsx)(i,{styled:!0,term:"non-nil",children:(0,t.jsx)("i",{children:"non-nil"})}),", it is called prior to normal entry into the debugger, either due to a call to ",(0,t.jsx)(r,{styled:!0,term:"invoke-debugger",children:(0,t.jsx)("b",{children:"invoke-debugger"})})," or due to automatic entry into the debugger from a call to ",(0,t.jsx)(r,{styled:!0,term:"error",children:(0,t.jsx)("b",{children:"error"})})," or ",(0,t.jsx)(r,{styled:!0,term:"cerror",children:(0,t.jsx)("b",{children:"cerror"})})," with a condition that is not handled. The ",(0,t.jsx)(i,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})})," may either handle the ",(0,t.jsx)(i,{styled:!0,term:"condition",children:(0,t.jsx)("i",{children:"condition"})})," (transfer control) or return normally (allowing the standard debugger to run). To minimize recursive errors while debugging, ",(0,t.jsx)(r,{styled:!0,term:"debugger-hook",children:(0,t.jsx)("b",{children:"*debugger-hook*"})})," is bound to ",(0,t.jsx)(r,{styled:!0,term:"nil",children:(0,t.jsx)("b",{children:"nil"})})," by ",(0,t.jsx)(r,{styled:!0,term:"invoke-debugger",children:(0,t.jsx)("b",{children:"invoke-debugger"})})," prior to calling the ",(0,t.jsx)(i,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:'(defun one-of (choices &optional (prompt "Choice")) \n  (let ((n (length choices)) (i)) \n    (do ((c choices (cdr c)) (i 1 (+ i 1))) \n\t((null c)) \n      (format t "~&[~D] ~A~%" i (car c))) \n    (do () ((typep i \u2018(integer 1 ,n))) \n      (format t "~&~A: " prompt) \n      (setq i (read)) \n      \n      \n      (fresh-line)) \n    (nth (- i 1) choices))) \n(defun my-debugger (condition me-or-my-encapsulation) \n  (format t "~&Fooey: ~A" condition) \n  (let ((restart (one-of (compute-restarts)))) \n    (if (not restart) (error "My debugger got an error.")) \n    (let ((\\*debugger-hook\\* me-or-my-encapsulation)) \n      (invoke-restart-interactively restart)))) \n(let ((\\*debugger-hook\\* #\u2019my-debugger)) \n  (+ 3 \u2019a)) \n\u25b7 Fooey: The argument to +, A, is not a number. \n\u25b7 [1] Supply a replacement for A. \n\u25b7 [2] Return to Cloe Toplevel. \n\u25b7 Choice: 1 \n\u25b7 Form to evaluate and use: (+ 5 \u2019b) \n\u25b7 Fooey: The argument to +, B, is not a number. \n\u25b7 [1] Supply a replacement for B. \n\u25b7 [2] Supply a replacement for A. \n\u25b7 [3] Return to Cloe Toplevel. \n\u25b7 Choice: 1 \n\u25b7 Form to evaluate and use: 1 \n\u2192 9 \n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,t.jsx)(r,{styled:!0,term:"invoke-debugger",children:(0,t.jsx)("b",{children:"invoke-debugger"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,t.jsxs)(n.p,{children:["When evaluating code typed in by the user interactively, it is sometimes useful to have the hook function bind ",(0,t.jsx)(r,{styled:!0,term:"debugger-hook",children:(0,t.jsx)("b",{children:"*debugger-hook*"})})," to the ",(0,t.jsx)(i,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})})," that was its second argument so that recursive errors can be handled using the same interactive facility."]})]})}function d(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}function c(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const l={title:"debugger-hook"},s="*debugger-hook*",a={id:"chap-9/j-c-dictionary/debugger-hook_variable",title:"debugger-hook",description:"Expanded Reference: \\debugger-hook\\",source:"@site/docs/chap-9/j-c-dictionary/debugger-hook_variable.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/debugger-hook_variable",permalink:"/cl-language-reference/chap-9/j-c-dictionary/debugger-hook_variable",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/debugger-hook_variable.md",tags:[],version:"current",frontMatter:{title:"debugger-hook"},sidebar:"tutorialSidebar",previous:{title:"condition",permalink:"/cl-language-reference/chap-9/j-c-dictionary/condition_condition-type"},next:{title:"define-condition",permalink:"/cl-language-reference/chap-9/j-c-dictionary/define-condition_macro"}},h={},u=[{value:"Expanded Reference: *debugger-hook*",id:"expanded-reference-debugger-hook",level:2}];function g(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"debugger-hook",children:"*debugger-hook*"}),"\n","\n","\n",(0,t.jsx)(d,{}),"\n",(0,t.jsx)(n.h2,{id:"expanded-reference-debugger-hook",children:"Expanded Reference: *debugger-hook*"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"*debugger-hook*\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>c,a:()=>d});var t=r(67294);const o={},i=t.createContext(o);function d(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);