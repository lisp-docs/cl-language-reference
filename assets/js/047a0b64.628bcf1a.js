"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[84258],{9777:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>ee,contentTitle:()=>_,default:()=>se,frontMatter:()=>Y,metadata:()=>$,toc:()=>re});var s=n(85893),c=n(11151);function i(e){return(0,s.jsx)(s.Fragment,{})}function h(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(i,{...e})}):i()}function a(e){const r={em:"em",p:"p",strong:"strong",table:"table",th:"th",thead:"thead",tr:"tr",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["A ",(0,s.jsx)(r.em,{children:"character"})," is an ",(0,s.jsx)(r.em,{children:"object"})," that represents a unitary token (",(0,s.jsx)(r.em,{children:"e.g."}),", a letter, a special symbol, or a \u201ccontrol character\u201d) in an aggregate quantity of text (",(0,s.jsx)(r.em,{children:"e.g."}),", a ",(0,s.jsx)(r.em,{children:"string"})," or a text ",(0,s.jsx)(r.em,{children:"stream"}),")."]}),"\n",(0,s.jsxs)(r.p,{children:["Common Lisp allows an implementation to provide support for international language ",(0,s.jsx)(r.em,{children:"characters"})," as well as ",(0,s.jsx)(r.em,{children:"characters"})," used in specialized arenas (",(0,s.jsx)(r.em,{children:"e.g."}),", mathematics)."]}),"\n",(0,s.jsxs)(r.p,{children:["The following figures contain lists of ",(0,s.jsx)(r.em,{children:"defined names"})," applicable to ",(0,s.jsx)(r.em,{children:"characters"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["Figure 13\u20131 lists some ",(0,s.jsx)(r.em,{children:"defined names"})," relating to ",(0,s.jsx)(r.em,{children:"character attributes"})," and ",(0,s.jsx)(r.em,{children:"character predicates"}),"."]}),"\n",(0,s.jsx)(r.table,{children:(0,s.jsx)(r.thead,{children:(0,s.jsx)(r.tr,{children:(0,s.jsxs)(r.th,{style:{textAlign:"left"},children:["<p>",(0,s.jsx)(r.strong,{children:"alpha-char-p char-not-equal char"}),"> </p><p>",(0,s.jsx)(r.strong,{children:"alphanumericp char-not-greaterp char"}),">",(0,s.jsx)(r.strong,{children:"="})," </p><p>",(0,s.jsx)(r.strong,{children:"both-case-p char-not-lessp digit-char-p"})," </p><p>",(0,s.jsx)(r.strong,{children:"char-code-limit char/= graphic-char-p char-equal char"}),"< ",(0,s.jsx)(r.strong,{children:"lower-case-p"})," </p><p>",(0,s.jsx)(r.strong,{children:"char-greaterp char"}),"<",(0,s.jsx)(r.strong,{children:"= standard-char-p char-lessp char= upper-case-p"}),"</p>"]})})})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Figure 13\u20131. Character defined names \u2013 1"})}),"\n",(0,s.jsxs)(r.p,{children:["Figure 13\u20132 lists some ",(0,s.jsx)(r.em,{children:"character"})," construction and conversion ",(0,s.jsx)(r.em,{children:"defined names"}),"."]}),"\n",(0,s.jsx)(r.table,{children:(0,s.jsx)(r.thead,{children:(0,s.jsx)(r.tr,{children:(0,s.jsxs)(r.th,{style:{textAlign:"left"},children:["<p>",(0,s.jsx)(r.strong,{children:"char-code char-name code-char"})," </p><p>",(0,s.jsx)(r.strong,{children:"char-downcase char-upcase digit-char"})," </p><p>",(0,s.jsx)(r.strong,{children:"char-int character name-char"}),"</p>"]})})})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Figure 13\u20132. Character defined names \u2013 2"})})]})}function t(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}function d(e){return(0,s.jsx)(s.Fragment,{})}function l(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d()}function x(e){const r={em:"em",p:"p",strong:"strong",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["A ",(0,s.jsx)(r.em,{children:"script"})," is one of possibly several sets that form an ",(0,s.jsx)(r.em,{children:"exhaustive partition"})," of the type ",(0,s.jsx)(r.strong,{children:"character"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["The number of such sets and boundaries between them is ",(0,s.jsx)(r.em,{children:"implementation-defined"}),". Common Lisp does not require these sets to be ",(0,s.jsx)(r.em,{children:"types"}),", but an ",(0,s.jsx)(r.em,{children:"implementation"})," is permitted to define such ",(0,s.jsx)(r.em,{children:"types"})," as an extension. Since no ",(0,s.jsx)(r.em,{children:"character"})," from one ",(0,s.jsx)(r.em,{children:"script"})," can ever be a member of another ",(0,s.jsx)(r.em,{children:"script"}),", it is generally more useful to speak about ",(0,s.jsx)(r.em,{children:"character repertoires"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["Although the term \u201c",(0,s.jsx)(r.em,{children:"script"}),"\u201d is chosen for definitional compatibility with ISO terminology, no ",(0,s.jsx)(r.em,{children:"conforming implementation"})," is required to use any particular ",(0,s.jsx)(r.em,{children:"scripts"})," standardized by ISO or by any other standards organization."]}),"\n",(0,s.jsxs)(r.p,{children:["Whether and how the ",(0,s.jsx)(r.em,{children:"script"})," or ",(0,s.jsx)(r.em,{children:"scripts"})," used by any given ",(0,s.jsx)(r.em,{children:"implementation"})," are named is ",(0,s.jsx)(r.em,{children:"implementation-dependent"}),"."]})]})}function o(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}function j(e){const r={em:"em",p:"p",strong:"strong",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["A ",(0,s.jsx)(r.em,{children:"repertoire"})," is a ",(0,s.jsx)(r.em,{children:"type specifier"})," for a ",(0,s.jsx)(r.em,{children:"subtype"})," of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"character"}),". This term is generally used when describing a collection of ",(0,s.jsx)(r.em,{children:"characters"})," independent of their coding. ",(0,s.jsx)(r.em,{children:"Characters"})," in ",(0,s.jsx)(r.em,{children:"repertoires"})," are only identified by name, by ",(0,s.jsx)(r.em,{children:"glyph"}),", or by character description."]}),"\n",(0,s.jsxs)(r.p,{children:["A ",(0,s.jsx)(r.em,{children:"repertoire"})," can contain ",(0,s.jsx)(r.em,{children:"characters"})," from several ",(0,s.jsx)(r.em,{children:"scripts"}),", and a ",(0,s.jsx)(r.em,{children:"character"})," can appear in more than one ",(0,s.jsx)(r.em,{children:"repertoire"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["For some examples of ",(0,s.jsx)(r.em,{children:"repertoires"}),", see the coded character standards ISO 8859/1, ISO 8859/2, and ISO 6937/2. Note, however, that although the term \u201c",(0,s.jsx)(r.em,{children:"repertoire"}),"\u201d is chosen for definitional compatibility with ISO terminology, no ",(0,s.jsx)(r.em,{children:"conforming implementation"})," is required to use ",(0,s.jsx)(r.em,{children:"repertoires"})," standardized by ISO or any other standards organization."]})]})}function p(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(j,{...e})}):j(e)}function m(e){const r={em:"em",p:"p",strong:"strong",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"Characters"})," have only one ",(0,s.jsx)(r.em,{children:"standardized attribute"}),": a ",(0,s.jsx)(r.em,{children:"code"}),". A ",(0,s.jsx)(r.em,{children:"character"})," \u2019s ",(0,s.jsx)(r.em,{children:"code"})," is a non-negative ",(0,s.jsx)(r.em,{children:"integer"})," . This ",(0,s.jsx)(r.em,{children:"code"})," is composed from a character ",(0,s.jsx)(r.em,{children:"script"})," and a character label in an ",(0,s.jsx)(r.em,{children:"implementation dependent"})," way. See the ",(0,s.jsx)(r.em,{children:"functions"})," ",(0,s.jsx)(r.strong,{children:"char-code"})," and ",(0,s.jsx)(r.strong,{children:"code-char"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["Additional, ",(0,s.jsx)(r.em,{children:"implementation-defined attributes"})," of ",(0,s.jsx)(r.em,{children:"characters"})," are also permitted so that, for example, two ",(0,s.jsx)(r.em,{children:"characters"})," with the same ",(0,s.jsx)(r.em,{children:"code"})," may differ in some other, ",(0,s.jsx)(r.em,{children:"implementation-defined"})," way."]}),"\n",(0,s.jsxs)(r.p,{children:["For any ",(0,s.jsx)(r.em,{children:"implementation-defined attribute"})," there is a distinguished value called the ",(0,s.jsx)(r.em,{children:"null"})," value for that ",(0,s.jsx)(r.em,{children:"attribute"}),". A ",(0,s.jsx)(r.em,{children:"character"})," for which each ",(0,s.jsx)(r.em,{children:"implementation-defined attribute"})," has the null value for that ",(0,s.jsx)(r.em,{children:"attribute"})," is called a ",(0,s.jsx)(r.em,{children:"simple character"})," . If the ",(0,s.jsx)(r.em,{children:"implementation"})," has no ",(0,s.jsx)(r.em,{children:"implementation-defined attributes"}),", then all ",(0,s.jsx)(r.em,{children:"characters"})," are ",(0,s.jsx)(r.em,{children:"simple characters"}),"."]})]})}function g(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}function u(e){const r={em:"em",p:"p",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["There are several (overlapping) categories of ",(0,s.jsx)(r.em,{children:"characters"})," that have no formally associated ",(0,s.jsx)(r.em,{children:"type"})," but that are nevertheless useful to name. They include ",(0,s.jsx)(r.em,{children:"graphic characters"}),", ",(0,s.jsx)(r.em,{children:"alphabetic"}),"<sub>1</sub> ",(0,s.jsx)(r.em,{children:"characters"}),", ",(0,s.jsx)(r.em,{children:"characters"})," with ",(0,s.jsx)(r.em,{children:"case"})," (",(0,s.jsx)(r.em,{children:"uppercase"})," and ",(0,s.jsx)(r.em,{children:"lowercase characters"}),"), ",(0,s.jsx)(r.em,{children:"numeric characters"}),", ",(0,s.jsx)(r.em,{children:"alphanumeric characters"}),", and ",(0,s.jsx)(r.em,{children:"digits"})," (in a given ",(0,s.jsx)(r.em,{children:"radix"})," )."]}),"\n",(0,s.jsxs)(r.p,{children:["For each ",(0,s.jsx)(r.em,{children:"implementation-defined attribute"})," of a ",(0,s.jsx)(r.em,{children:"character"})," , the documentation for that ",(0,s.jsx)(r.em,{children:"implementa tion"})," must specify whether ",(0,s.jsx)(r.em,{children:"characters"})," that differ only in that ",(0,s.jsx)(r.em,{children:"attribute"})," are permitted to differ in whether are not they are members of one of the aforementioned categories."]}),"\n",(0,s.jsxs)(r.p,{children:["Note that these terms are defined independently of any special syntax which might have been enabled in the ",(0,s.jsx)(r.em,{children:"current readtable"}),"."]})]})}function f(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}function b(e){const r={em:"em",p:"p",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"Characters"})," that are classified as ",(0,s.jsx)(r.em,{children:"graphic"}),", or displayable, are each associated with a glyph, a visual representation of the ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:["A ",(0,s.jsx)(r.em,{children:"graphic character"})," is one that has a standard textual representation as a single ",(0,s.jsx)(r.em,{children:"glyph"}),", such as A or * or =. ",(0,s.jsx)(r.em,{children:"Space"}),", which effectively has a blank ",(0,s.jsx)(r.em,{children:"glyph"}),", is defined to be a ",(0,s.jsx)(r.em,{children:"graphic"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["Of the ",(0,s.jsx)(r.em,{children:"standard characters"}),", ",(0,s.jsx)(r.em,{children:"newline"})," is ",(0,s.jsx)(r.em,{children:"non-graphic"})," and all others are ",(0,s.jsx)(r.em,{children:"graphic"}),"; see Section 2.1.3 (Standard Characters)."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"Characters"})," that are not ",(0,s.jsx)(r.em,{children:"graphic"})," are called ",(0,s.jsx)(r.em,{children:"non-graphic"}),". ",(0,s.jsx)(r.em,{children:"Non-graphic characters"})," are sometimes informally called \u201cformatting characters\u201d or \u201ccontrol characters.\u201d"]}),"\n",(0,s.jsxs)(r.p,{children:["#\\Backspace, #\\Tab, #\\Rubout, #\\Linefeed, #\\Return, and #\\Page, if they are supported by the ",(0,s.jsx)(r.em,{children:"implementation"}),", are ",(0,s.jsx)(r.em,{children:"non-graphic"}),"."]})]})}function y(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(b,{...e})}):b(e)}function w(e){const r={em:"em",p:"p",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.em,{children:"alphabetic"}),"<sub>1</sub> ",(0,s.jsx)(r.em,{children:"characters"})," are a subset of the ",(0,s.jsx)(r.em,{children:"graphic characters"}),". Of the ",(0,s.jsx)(r.em,{children:"standard characters"}),", only these are the ",(0,s.jsx)(r.em,{children:"alphabetic"}),"<sub>1</sub> ",(0,s.jsx)(r.em,{children:"characters"}),":"]}),"\n",(0,s.jsx)(r.p,{children:"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z"}),"\n",(0,s.jsx)(r.p,{children:"a b c d e f g h i j k l m n o p q r s t u v w x y z"}),"\n",(0,s.jsx)(r.p,{children:"Any <i>implementation-defined character</i> that has <i>case</i> must be <i>alphabetic</i><sub>1</sub><sup>. For each <i>implementation</i></sup> defined graphic character</i> that has no <i>case</i>, it is <i>implementation-defined</i> whether that <i>character</i> is <i>alphabetic</i><sub>1</sub>."})]})}function v(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(w,{...e})}):w(e)}function S(e){const r={em:"em",p:"p",...(0,c.a)(),...e.components};return(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.em,{children:"characters"})," with ",(0,s.jsx)(r.em,{children:"case"})," are a subset of the ",(0,s.jsx)(r.em,{children:"alphabetic"}),"<sub>1</sub> ",(0,s.jsx)(r.em,{children:"characters"}),". A ",(0,s.jsx)(r.em,{children:"character"})," with ",(0,s.jsx)(r.em,{children:"case"})," has the property of being either ",(0,s.jsx)(r.em,{children:"uppercase"})," or ",(0,s.jsx)(r.em,{children:"lowercase"}),". Every ",(0,s.jsx)(r.em,{children:"character"})," with ",(0,s.jsx)(r.em,{children:"case"})," is in one-to-one correspondence with some other ",(0,s.jsx)(r.em,{children:"character"})," with the opposite ",(0,s.jsx)(r.em,{children:"case"}),"."]})}function A(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(S,{...e})}):S(e)}function C(e){const r={em:"em",p:"p",strong:"strong",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["An uppercase ",(0,s.jsx)(r.em,{children:"character"})," is one that has a corresponding ",(0,s.jsx)(r.em,{children:"lowercase character"})," that is ",(0,s.jsx)(r.em,{children:"different"})," (and can be obtained using ",(0,s.jsx)(r.strong,{children:"char-downcase"}),")."]}),"\n",(0,s.jsxs)(r.p,{children:["Of the ",(0,s.jsx)(r.em,{children:"standard characters"}),", only these are ",(0,s.jsx)(r.em,{children:"uppercase characters"}),":"]}),"\n",(0,s.jsx)(r.p,{children:"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z"})]})}function I(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(C,{...e})}):C(e)}function T(e){const r={em:"em",p:"p",strong:"strong",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["A lowercase ",(0,s.jsx)(r.em,{children:"character"})," is one that has a corresponding ",(0,s.jsx)(r.em,{children:"uppercase character"})," that is ",(0,s.jsx)(r.em,{children:"different"})," (and can be obtained using ",(0,s.jsx)(r.strong,{children:"char-upcase"}),")."]}),"\n",(0,s.jsxs)(r.p,{children:["Of the ",(0,s.jsx)(r.em,{children:"standard characters"}),", only these are ",(0,s.jsx)(r.em,{children:"lowercase characters"}),":"]}),"\n",(0,s.jsx)(r.p,{children:"a b c d e f g h i j k l m n o p q r s t u v w x y z"})]})}function N(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(T,{...e})}):T(e)}function F(e){const r={em:"em",p:"p",...(0,c.a)(),...e.components};return(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.em,{children:"uppercase standard characters"})," A through Z mentioned above respectively correspond to the ",(0,s.jsx)(r.em,{children:"lowercase standard characters"})," a through z mentioned above. For example, the ",(0,s.jsx)(r.em,{children:"uppercase character"})," E corresponds to the ",(0,s.jsx)(r.em,{children:"lowercase character"})," e, and vice versa."]})}function z(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(F,{...e})}):F(e)}function L(e){const r={em:"em",p:"p",...(0,c.a)(),...e.components};return(0,s.jsxs)(r.p,{children:["An ",(0,s.jsx)(r.em,{children:"implementation"})," may define that other ",(0,s.jsx)(r.em,{children:"implementation-defined graphic characters"})," have ",(0,s.jsx)(r.em,{children:"case"}),". Such definitions must always be done in pairs\u2014one ",(0,s.jsx)(r.em,{children:"uppercase character"})," in one-to-one ",(0,s.jsx)(r.em,{children:"correspondence"})," with one ",(0,s.jsx)(r.em,{children:"lowercase character"})," ."]})}function q(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(L,{...e})}):L(e)}function D(e){const r={em:"em",p:"p",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.em,{children:"numeric characters"})," are a subset of the ",(0,s.jsx)(r.em,{children:"graphic characters"}),". Of the ",(0,s.jsx)(r.em,{children:"standard characters"}),", only these are ",(0,s.jsx)(r.em,{children:"numeric characters"}),":"]}),"\n",(0,s.jsx)(r.p,{children:"0 1 2 3 4 5 6 7 8 9"}),"\n",(0,s.jsxs)(r.p,{children:["For each ",(0,s.jsx)(r.em,{children:"implementation-defined graphic character"})," that has no ",(0,s.jsx)(r.em,{children:"case"}),", the ",(0,s.jsx)(r.em,{children:"implementation"})," must define whether or not it is a ",(0,s.jsx)(r.em,{children:"numeric character"})," ."]})]})}function E(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(D,{...e})}):D(e)}function R(e){const r={em:"em",p:"p",...(0,c.a)(),...e.components};return(0,s.jsxs)(r.p,{children:["The set of ",(0,s.jsx)(r.em,{children:"alphanumeric characters"})," is the union of the set of ",(0,s.jsx)(r.em,{children:"alphabetic"}),"<sub>1</sub> ",(0,s.jsx)(r.em,{children:"characters"})," and the set of ",(0,s.jsx)(r.em,{children:"numeric characters"}),"."]})}function O(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(R,{...e})}):R(e)}function k(e){const r={em:"em",p:"p",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["What qualifies as a ",(0,s.jsx)(r.em,{children:"digit"})," depends on the ",(0,s.jsx)(r.em,{children:"radix"})," (an ",(0,s.jsx)(r.em,{children:"integer"})," between 2 and 36, inclusive). The potential ",(0,s.jsx)(r.em,{children:"digits"})," are:"]}),"\n",(0,s.jsx)(r.p,{children:"0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z"}),"\n",(0,s.jsxs)(r.p,{children:["Their respective weights are 0, 1, 2, ",(0,s.jsx)(r.em,{children:". . ."})," 35. In any given radix ",(0,s.jsx)(r.em,{children:"n"}),", only the first ",(0,s.jsx)(r.em,{children:"n"})," potential ",(0,s.jsx)(r.em,{children:"digits"})," are considered to be ",(0,s.jsx)(r.em,{children:"digits"}),". For example, the digits in radix 2 are 0 and 1, the digits in radix 10 are 0 through 9, and the digits in radix 16 are 0 through F."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"Case"})," is not significant in ",(0,s.jsx)(r.em,{children:"digits"}),"; for example, in radix 16, both F and f are ",(0,s.jsx)(r.em,{children:"digits"})," with weight 15."]})]})}function B(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(k,{...e})}):k(e)}function V(e){const r={em:"em",p:"p",strong:"strong",...(0,c.a)(),...e.components};return(0,s.jsxs)(r.p,{children:["Two ",(0,s.jsx)(r.em,{children:"characters"})," that are ",(0,s.jsx)(r.strong,{children:"eql"}),", ",(0,s.jsx)(r.strong,{children:"char="}),", or ",(0,s.jsx)(r.strong,{children:"char-equal"})," are not necessarily ",(0,s.jsx)(r.strong,{children:"eq"}),"."]})}function P(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(V,{...e})}):V(e)}function W(e){const r={em:"em",p:"p",strong:"strong",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["The total ordering on ",(0,s.jsx)(r.em,{children:"characters"})," is guaranteed to have the following properties:"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2022"})," If two ",(0,s.jsx)(r.em,{children:"characters"})," have the same ",(0,s.jsx)(r.em,{children:"implementation-defined attributes"}),", then their ordering by ",(0,s.jsx)(r.strong,{children:"char"}),"< is consistent with the numerical ordering by the predicate < on their code ",(0,s.jsx)(r.em,{children:"attributes"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2022"})," If two ",(0,s.jsx)(r.em,{children:"characters"})," differ in any ",(0,s.jsx)(r.em,{children:"attribute"}),", then they are not ",(0,s.jsx)(r.strong,{children:"char="}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2022"})," The total ordering is not necessarily the same as the total ordering on the ",(0,s.jsx)(r.em,{children:"integers"})," produced by applying ",(0,s.jsx)(r.strong,{children:"char-int"})," to the ",(0,s.jsx)(r.em,{children:"characters"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2022"})," While ",(0,s.jsx)(r.em,{children:"alphabetic"}),"<sub>1</sub> ",(0,s.jsx)(r.em,{children:"standard characters"})," of a given ",(0,s.jsx)(r.em,{children:"case"})," must obey a partial ordering, they need not be contiguous; it is permissible for ",(0,s.jsx)(r.em,{children:"uppercase"})," and ",(0,s.jsx)(r.em,{children:"lowercase characters"})," to be interleaved. Thus (char<= #\\a x #\\z) is not a valid way of determining whether or not x is a ",(0,s.jsx)(r.em,{children:"lowercase character"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:["Of the ",(0,s.jsx)(r.em,{children:"standard characters"}),", those which are ",(0,s.jsx)(r.em,{children:"alphanumeric"})," obey the following partial ordering:"]}),"\n",(0,s.jsx)(r.p,{children:"A<B<C<D<E<F<G<H<I<J<K<L<M<N<O<P<Q<R<S<T<U<V<W<X<Y<Z"}),"\n",(0,s.jsx)(r.p,{children:"a<b<c<d<e<f<g<h<i<j<k<l<m<n<o<p<q<r<s<t<u<v<w<x<y<z"}),"\n",(0,s.jsx)(r.p,{children:"0<1<2<3<4<5<6<7<8<9"}),"\n",(0,s.jsx)(r.p,{children:"either 9<A or Z<0"}),"\n",(0,s.jsx)(r.p,{children:"either 9<a or z<0"}),"\n",(0,s.jsxs)(r.p,{children:["This implies that, for ",(0,s.jsx)(r.em,{children:"standard characters"}),", ",(0,s.jsx)(r.em,{children:"alphabetic"}),"<sub>1</sub> ordering holds within each ",(0,s.jsx)(r.em,{children:"case"})," (",(0,s.jsx)(r.em,{children:"uppercase"})," and ",(0,s.jsx)(r.em,{children:"lowercase"}),"), and that the ",(0,s.jsx)(r.em,{children:"numeric characters"})," as a group are not interleaved with ",(0,s.jsx)(r.em,{children:"alphabetic characters"}),". However, the ordering or possible interleaving of ",(0,s.jsx)(r.em,{children:"uppercase characters"})," and ",(0,s.jsx)(r.em,{children:"lowercase characters"})," is ",(0,s.jsx)(r.em,{children:"implementation-defined"}),"."]})]})}function Z(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(W,{...e})}):W(e)}function M(e){const r={em:"em",p:"p",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["The following ",(0,s.jsx)(r.em,{children:"character names"})," must be present in all ",(0,s.jsx)(r.em,{children:"conforming implementations"}),":"]}),"\n",(0,s.jsx)(r.p,{children:"Newline"}),"\n",(0,s.jsx)(r.p,{children:"The character that represents the division between lines. An implementation must translate between #\\Newline, a single-character representation, and whatever external representation(s) may be used."}),"\n",(0,s.jsx)(r.p,{children:"Space"}),"\n",(0,s.jsx)(r.p,{children:"The space or blank character."}),"\n",(0,s.jsxs)(r.p,{children:["The following names are ",(0,s.jsx)(r.em,{children:"semi-standard"}),"; if an ",(0,s.jsx)(r.em,{children:"implementation"})," supports them, they should be used for the described ",(0,s.jsx)(r.em,{children:"characters"})," and no others."]}),"\n",(0,s.jsx)(r.p,{children:"Rubout"}),"\n",(0,s.jsx)(r.p,{children:"The rubout or delete character."}),"\n",(0,s.jsx)(r.p,{children:"Page"}),"\n",(0,s.jsx)(r.p,{children:"The form-feed or page-separator character."}),"\n",(0,s.jsx)(r.p,{children:"Tab"}),"\n",(0,s.jsx)(r.p,{children:"The tabulate character."}),"\n",(0,s.jsx)(r.p,{children:"Backspace"}),"\n",(0,s.jsx)(r.p,{children:"The backspace character."}),"\n",(0,s.jsx)(r.p,{children:"Return"}),"\n",(0,s.jsx)(r.p,{children:"The carriage return character."}),"\n",(0,s.jsx)(r.p,{children:"Linefeed"}),"\n",(0,s.jsx)(r.p,{children:"The line-feed character."}),"\n",(0,s.jsxs)(r.p,{children:["In some ",(0,s.jsx)(r.em,{children:"implementations"}),", one or more of these ",(0,s.jsx)(r.em,{children:"character names"})," might denote a ",(0,s.jsx)(r.em,{children:"standard character"})," ; for example, #\\Linefeed and #\\Newline might be the ",(0,s.jsx)(r.em,{children:"same character"})," in some ",(0,s.jsx)(r.em,{children:"implementations"}),"."]})]})}function G(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(M,{...e})}):M(e)}function U(e){const r={p:"p",...(0,c.a)(),...e.components};return(0,s.jsx)(r.p,{children:"When the character #\\Newline is written to an output file, the implementation must take the appropriate action to produce a line division. This might involve writing out a record or translating #\\Newline to a CR/LF sequence. When reading, a corresponding reverse transformation must take place."})}function H(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(U,{...e})}):U(e)}function J(e){const r={em:"em",p:"p",strong:"strong",...(0,c.a)(),...e.components};return(0,s.jsxs)(r.p,{children:["A ",(0,s.jsx)(r.em,{children:"character"})," is sometimes represented merely by its ",(0,s.jsx)(r.em,{children:"code"}),", and sometimes by another ",(0,s.jsx)(r.em,{children:"integer"})," value which is composed from the ",(0,s.jsx)(r.em,{children:"code"})," and all ",(0,s.jsx)(r.em,{children:"implementation-defined attributes"})," (in an ",(0,s.jsx)(r.em,{children:"implementation defined"})," way that might vary between ",(0,s.jsx)(r.em,{children:"Lisp images"})," even in the same ",(0,s.jsx)(r.em,{children:"implementation"}),"). This ",(0,s.jsx)(r.em,{children:"integer"})," , returned by the function ",(0,s.jsx)(r.strong,{children:"char-int"}),", is called the character\u2019s \u201cencoding.\u201d There is no corresponding function from a character\u2019s encoding back to the ",(0,s.jsx)(r.em,{children:"character"})," , since its primary intended uses include things like hashing where an inverse operation is not really called for."]})}function K(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(J,{...e})}):J(e)}function Q(e){const r={em:"em",p:"p",strong:"strong",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["An ",(0,s.jsx)(r.em,{children:"implementation"})," must document the ",(0,s.jsx)(r.em,{children:"character scripts"})," it supports. For each ",(0,s.jsx)(r.em,{children:"character script"})," supported, the documentation must describe at least the following:"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2022"})," Character labels, glyphs, and descriptions. Character labels must be uniquely named using only Latin capital letters A\u2013Z, hyphen (-), and digits 0\u20139."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2022"})," Reader canonicalization. Any mechanisms by which ",(0,s.jsx)(r.strong,{children:"read"})," treats ",(0,s.jsx)(r.em,{children:"different"})," characters as equivalent must be documented."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2022"})," The impact on ",(0,s.jsx)(r.strong,{children:"char-upcase"}),", ",(0,s.jsx)(r.strong,{children:"char-downcase"}),", and the case-sensitive ",(0,s.jsx)(r.em,{children:"format directives"}),". In particular, for each ",(0,s.jsx)(r.em,{children:"character"})," with ",(0,s.jsx)(r.em,{children:"case"}),", whether it is ",(0,s.jsx)(r.em,{children:"uppercase"})," or ",(0,s.jsx)(r.em,{children:"lowercase"}),", and which ",(0,s.jsx)(r.em,{children:"character"})," is its equivalent in the opposite case."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2022"})," The behavior of the case-insensitive ",(0,s.jsx)(r.em,{children:"functions"})," ",(0,s.jsx)(r.strong,{children:"char-equal"}),", ",(0,s.jsx)(r.strong,{children:"char-not-equal"}),", ",(0,s.jsx)(r.strong,{children:"char-lessp"}),", ",(0,s.jsx)(r.strong,{children:"char-greaterp"}),", ",(0,s.jsx)(r.strong,{children:"char-not-greaterp"}),", and ",(0,s.jsx)(r.strong,{children:"char-not-lessp"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2022"})," The behavior of any ",(0,s.jsx)(r.em,{children:"character predicates"}),"; in particular, the effects of ",(0,s.jsx)(r.strong,{children:"alpha-char-p"}),", ",(0,s.jsx)(r.strong,{children:"lower-case-p"}),", ",(0,s.jsx)(r.strong,{children:"upper-case-p"}),", ",(0,s.jsx)(r.strong,{children:"both-case-p"}),", ",(0,s.jsx)(r.strong,{children:"graphic-char-p"}),", and ",(0,s.jsx)(r.strong,{children:"alphanumericp"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2022"})," The interaction with file I/O, in particular, the supported coded character sets (for example, ISO8859/1-1987) and external encoding schemes supported are documented."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"character"})," ",(0,s.jsx)(r.em,{children:"System Class"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Class Precedence List:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"character"}),", ",(0,s.jsx)(r.strong,{children:"t"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["A ",(0,s.jsx)(r.em,{children:"character"})," is an ",(0,s.jsx)(r.em,{children:"object"})," that represents a unitary token in an aggregate quantity of text; see Section 13.1 (Character Concepts)."]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.em,{children:"types"})," ",(0,s.jsx)(r.strong,{children:"base-char"})," and ",(0,s.jsx)(r.strong,{children:"extended-char"})," form an ",(0,s.jsx)(r.em,{children:"exhaustive partition"})," of the ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"character"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(r.p,{children:"Section 13.1 (Character Concepts), Section 2.4.8.1 (Sharpsign Backslash), Section 22.1.3.2 (Printing Characters)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"base-char"})," ",(0,s.jsx)(r.em,{children:"Type"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Supertypes:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"base-char"}),", ",(0,s.jsx)(r.strong,{children:"character"}),", ",(0,s.jsx)(r.strong,{children:"t"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"base-char"})," is defined as the ",(0,s.jsx)(r.em,{children:"upgraded array element type"})," of ",(0,s.jsx)(r.strong,{children:"standard-char"}),". An ",(0,s.jsx)(r.em,{children:"implementation"})," can support additional ",(0,s.jsx)(r.em,{children:"subtypes"})," of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"character"})," (besides the ones listed in this standard) that might or might not be ",(0,s.jsx)(r.em,{children:"supertypes"})," of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"base-char"}),". In addition, an ",(0,s.jsx)(r.em,{children:"implementation"})," can define ",(0,s.jsx)(r.strong,{children:"base-char"})," to be the ",(0,s.jsx)(r.em,{children:"same type"})," as ",(0,s.jsx)(r.strong,{children:"character"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"Base characters"})," are distinguished in the following respects:"]}),"\n",(0,s.jsxs)(r.p,{children:["1. The ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"standard-char"})," is a ",(0,s.jsx)(r.em,{children:"subrepertoire"})," of the ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"base-char"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["2. The selection of ",(0,s.jsx)(r.em,{children:"base characters"})," that are not ",(0,s.jsx)(r.em,{children:"standard characters"})," is implementation defined."]}),"\n",(0,s.jsxs)(r.p,{children:["3. Only ",(0,s.jsx)(r.em,{children:"objects"})," of the ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"base-char"})," can be ",(0,s.jsx)(r.em,{children:"elements"})," of a ",(0,s.jsx)(r.em,{children:"base string"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["4. No upper bound is specified for the number of characters in the ",(0,s.jsx)(r.strong,{children:"base-char"})," ",(0,s.jsx)(r.em,{children:"repertoire"}),"; the size of that ",(0,s.jsx)(r.em,{children:"repertoire"})," is ",(0,s.jsx)(r.em,{children:"implementation-defined"}),". The lower bound is 96, the number of ",(0,s.jsx)(r.em,{children:"standard characters"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["Whether a character is a ",(0,s.jsx)(r.em,{children:"base character"})," depends on the way that an ",(0,s.jsx)(r.em,{children:"implementation"})," represents ",(0,s.jsx)(r.em,{children:"strings"}),", and not any other properties of the ",(0,s.jsx)(r.em,{children:"implementation"})," or the host operating system. For example, one implementation might encode all ",(0,s.jsx)(r.em,{children:"strings"})," as characters having 16-bit encodings, and another might have two kinds of ",(0,s.jsx)(r.em,{children:"strings"}),": those with characters having 8-bit encodings and those with characters having 16-bit encodings. In the first ",(0,s.jsx)(r.em,{children:"implementation"}),", the ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"base-char"})," is"]}),"\n",(0,s.jsxs)(r.p,{children:["equivalent to the ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"character"}),": there is only one kind of ",(0,s.jsx)(r.em,{children:"string"}),". In the second ",(0,s.jsx)(r.em,{children:"implementation"}),", the ",(0,s.jsx)(r.em,{children:"base characters"})," might be those ",(0,s.jsx)(r.em,{children:"characters"})," that could be stored in a ",(0,s.jsx)(r.em,{children:"string"})," of ",(0,s.jsx)(r.em,{children:"characters"})," having 8-bit encodings. In such an implementation, the ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"base-char"})," is a ",(0,s.jsx)(r.em,{children:"proper subtype"})," of the ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"character"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"standard-char"})," is a ",(0,s.jsx)(r.em,{children:"subtype"})," of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"base-char"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"standard-char"})," ",(0,s.jsx)(r.em,{children:"Type"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Supertypes:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"standard-char"}),", ",(0,s.jsx)(r.strong,{children:"base-char"}),", ",(0,s.jsx)(r.strong,{children:"character"}),", ",(0,s.jsx)(r.strong,{children:"t"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["A fixed set of 96 ",(0,s.jsx)(r.em,{children:"characters"})," required to be present in all ",(0,s.jsx)(r.em,{children:"conforming implementations"}),". ",(0,s.jsx)(r.em,{children:"Standard characters"})," are defined in Section 2.1.3 (Standard Characters)."]}),"\n",(0,s.jsxs)(r.p,{children:["Any ",(0,s.jsx)(r.em,{children:"character"})," that is not ",(0,s.jsx)(r.em,{children:"simple"})," is not a ",(0,s.jsx)(r.em,{children:"standard character"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(r.p,{children:"Section 2.1.3 (Standard Characters)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"extended-char"})," ",(0,s.jsx)(r.em,{children:"Type"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Supertypes:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"extended-char"}),", ",(0,s.jsx)(r.strong,{children:"character"}),", ",(0,s.jsx)(r.strong,{children:"t"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"extended-char"})," is equivalent to the ",(0,s.jsx)(r.em,{children:"type"})," (and character (not base-char))."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"extended-char"})," might have no ",(0,s.jsx)(r.em,{children:"elements"}),"<sub>4</sub> in ",(0,s.jsx)(r.em,{children:"implementations"})," in which all ",(0,s.jsx)(r.em,{children:"characters"})," are of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"base-char"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char=, char/=, char"}),"*<",(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:", char"})}),">",(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:", char"})}),"<",(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:"=, char"})}),">*",(0,s.jsx)(r.strong,{children:"=,"})," ",(0,s.jsx)(r.em,{children:". . ."})]}),"\n",(0,s.jsx)(r.p,{children:"<b>char=, char/=, char</b><i><</i><b>, char</b><i>></i><b>, char</b><i><</i><b>=, char</b><i>></i><b>=, <sup>char-equal, char-not-equal, char-lessp, char</sup> greaterp, char-not-greaterp, char-not-lessp</b> <i>Function</i>"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char"}),"= &rest ",(0,s.jsx)(r.em,{children:"characters"}),"<sup>+</sup> ",(0,s.jsx)(r.em,{children:"\u2192 generalized-boolean"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char"}),"*/* = &rest ",(0,s.jsx)(r.em,{children:"characters"}),"<sup>+</sup> ",(0,s.jsx)(r.em,{children:"\u2192 generalized-boolean"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char"}),"< &rest ",(0,s.jsx)(r.em,{children:"characters"}),"<sup>+</sup> ",(0,s.jsx)(r.em,{children:"\u2192 generalized-boolean"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char"}),"> &rest ",(0,s.jsx)(r.em,{children:"characters"}),"<sup>+</sup> ",(0,s.jsx)(r.em,{children:"\u2192 generalized-boolean"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char"}),"<= &rest ",(0,s.jsx)(r.em,{children:"characters"}),"<sup>+</sup> ",(0,s.jsx)(r.em,{children:"\u2192 generalized-boolean"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char"}),">= &rest ",(0,s.jsx)(r.em,{children:"characters"}),"<sup>+</sup> ",(0,s.jsx)(r.em,{children:"\u2192 generalized-boolean"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-equal"})," &rest ",(0,s.jsx)(r.em,{children:"characters"}),"<sup>+</sup> ",(0,s.jsx)(r.em,{children:"\u2192 generalized-boolean"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-not-equal"})," &rest ",(0,s.jsx)(r.em,{children:"characters"}),"<sup>+</sup> ",(0,s.jsx)(r.em,{children:"\u2192 generalized-boolean"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-lessp"})," &rest ",(0,s.jsx)(r.em,{children:"characters"}),"<sup>+</sup> ",(0,s.jsx)(r.em,{children:"\u2192 generalized-boolean"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-greaterp"})," &rest ",(0,s.jsx)(r.em,{children:"characters"}),"<sup>+</sup> ",(0,s.jsx)(r.em,{children:"\u2192 generalized-boolean"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-not-greaterp"})," &rest ",(0,s.jsx)(r.em,{children:"characters"}),"<sup>+</sup> ",(0,s.jsx)(r.em,{children:"\u2192 generalized-boolean"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-not-lessp"})," &rest ",(0,s.jsx)(r.em,{children:"characters"}),"<sup>+</sup> ",(0,s.jsx)(r.em,{children:"\u2192 generalized-boolean"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"character"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"generalized-boolean"}),"\u2014a ",(0,s.jsx)(r.em,{children:"generalized boolean"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["These predicates compare ",(0,s.jsx)(r.em,{children:"characters"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char="})," returns ",(0,s.jsx)(r.em,{children:"true"})," if all ",(0,s.jsx)(r.em,{children:"characters"})," are the ",(0,s.jsx)(r.em,{children:"same"}),"; otherwise, it returns ",(0,s.jsx)(r.em,{children:"false"}),". If two ",(0,s.jsx)(r.em,{children:"characters"})," differ in any ",(0,s.jsx)(r.em,{children:"implementation-defined attributes"}),", then they are not ",(0,s.jsx)(r.strong,{children:"char="}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char/="})," returns ",(0,s.jsx)(r.em,{children:"true"})," if all ",(0,s.jsx)(r.em,{children:"characters"})," are different; otherwise, it returns ",(0,s.jsx)(r.em,{children:"false"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char"}),"< returns ",(0,s.jsx)(r.em,{children:"true"})," if the ",(0,s.jsx)(r.em,{children:"characters"})," are monotonically increasing; otherwise, it returns ",(0,s.jsx)(r.em,{children:"false"}),". If two ",(0,s.jsx)(r.em,{children:"characters"})," have ",(0,s.jsx)(r.em,{children:"identical implementation-defined attributes"}),", then their ordering by ",(0,s.jsx)(r.strong,{children:"char"}),"< is consistent with the numerical ordering by the predicate < on their ",(0,s.jsx)(r.em,{children:"codes"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char"}),"> returns ",(0,s.jsx)(r.em,{children:"true"})," if the ",(0,s.jsx)(r.em,{children:"characters"})," are monotonically decreasing; otherwise, it returns ",(0,s.jsx)(r.em,{children:"false"}),". If two ",(0,s.jsx)(r.em,{children:"characters"})," have ",(0,s.jsx)(r.em,{children:"identical implementation-defined attributes"}),", then their ordering by ",(0,s.jsx)(r.strong,{children:"char"}),"> is consistent with the numerical ordering by the predicate > on their ",(0,s.jsx)(r.em,{children:"codes"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char"}),"<",(0,s.jsx)(r.strong,{children:"="})," returns ",(0,s.jsx)(r.em,{children:"true"})," if the ",(0,s.jsx)(r.em,{children:"characters"})," are monotonically nondecreasing; otherwise, it returns ",(0,s.jsx)(r.em,{children:"false"}),". If two ",(0,s.jsx)(r.em,{children:"characters"})," have ",(0,s.jsx)(r.em,{children:"identical implementation-defined attributes"}),", then their ordering by ",(0,s.jsx)(r.strong,{children:"char"}),"<",(0,s.jsx)(r.strong,{children:"="})," is consistent with the numerical ordering by the predicate <= on their ",(0,s.jsx)(r.em,{children:"codes"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char"}),">",(0,s.jsx)(r.strong,{children:"="})," returns ",(0,s.jsx)(r.em,{children:"true"})," if the ",(0,s.jsx)(r.em,{children:"characters"})," are monotonically nonincreasing; otherwise, it returns ",(0,s.jsx)(r.em,{children:"false"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char=, char/=, char"}),"*<",(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:", char"})}),">",(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:", char"})}),"<",(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:"=, char"})}),">*",(0,s.jsx)(r.strong,{children:"=,"})," ",(0,s.jsx)(r.em,{children:". . ."})]}),"\n",(0,s.jsxs)(r.p,{children:["If two ",(0,s.jsx)(r.em,{children:"characters"})," have ",(0,s.jsx)(r.em,{children:"identical implementation-defined attributes"}),", then their ordering by ",(0,s.jsx)(r.strong,{children:"char"}),">",(0,s.jsx)(r.strong,{children:"="})," is consistent with the numerical ordering by the predicate >= on their ",(0,s.jsx)(r.em,{children:"codes"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-equal"}),", ",(0,s.jsx)(r.strong,{children:"char-not-equal"}),", ",(0,s.jsx)(r.strong,{children:"char-lessp"}),", ",(0,s.jsx)(r.strong,{children:"char-greaterp"}),", ",(0,s.jsx)(r.strong,{children:"char-not-greaterp"}),", and ",(0,s.jsx)(r.strong,{children:"char-not-lessp"})," are similar to ",(0,s.jsx)(r.strong,{children:"char="}),", ",(0,s.jsx)(r.strong,{children:"char/="}),", ",(0,s.jsx)(r.strong,{children:"char"}),"<, ",(0,s.jsx)(r.strong,{children:"char"}),">, ",(0,s.jsx)(r.strong,{children:"char"}),"<",(0,s.jsx)(r.strong,{children:"="}),", ",(0,s.jsx)(r.strong,{children:"char"}),">",(0,s.jsx)(r.strong,{children:"="}),", respectively, except that they ignore differences in ",(0,s.jsx)(r.em,{children:"case"})," and might have an ",(0,s.jsx)(r.em,{children:"implementation-defined"})," behavior for ",(0,s.jsx)(r.em,{children:"non-simple characters"}),". For example, an ",(0,s.jsx)(r.em,{children:"implementation"})," might define that ",(0,s.jsx)(r.strong,{children:"char-equal"}),", ",(0,s.jsx)(r.em,{children:"etc."})," ignore certain ",(0,s.jsx)(r.em,{children:"implementation-defined attributes"}),". The effect, if any, of each ",(0,s.jsx)(r.em,{children:"implementation-defined attribute"})," upon these functions must be specified as part of the definition of that ",(0,s.jsx)(r.em,{children:"attribute"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(r.p,{children:["(char= #\\d #\\d) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char= #\\A #\\a) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char= #\\d #\\x) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char= #\\d #\\D) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char/= #\\d #\\d) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char/= #\\d #\\x) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char/= #\\d #\\D) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char= #\\d #\\d #\\d #\\d) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char/= #\\d #\\d #\\d #\\d) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char= #\\d #\\d #\\x #\\d) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char/= #\\d #\\d #\\x #\\d) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char= #\\d #\\y #\\x #\\c) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char/= #\\d #\\y #\\x #\\c) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char= #\\d #\\c #\\d) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char/= #\\d #\\c #\\d) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char< #\\d #\\x) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char<= #\\d #\\x) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char< #\\d #\\d) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char<= #\\d #\\d) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char< #\\a #\\e #\\y #\\z) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char<= #\\a #\\e #\\y #\\z) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char< #\\a #\\e #\\e #\\y) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char<= #\\a #\\e #\\e #\\y) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char> #\\e #\\d) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char>= #\\e #\\d) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char> #\\d #\\c #\\b #\\a) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char>= #\\d #\\c #\\b #\\a) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char> #\\d #\\d #\\c #\\a) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char>= #\\d #\\d #\\c #\\a) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char> #\\e #\\d #\\b #\\c #\\a) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char>= #\\e #\\d #\\b #\\c #\\a) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char> #\\z #\\A) ",(0,s.jsx)(r.em,{children:"\u2192 implementation-dependent"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char> #\\Z #\\a) ",(0,s.jsx)(r.em,{children:"\u2192 implementation-dependent"})]}),"\n",(0,s.jsxs)(r.p,{children:["(char-equal #\\A #\\a) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsx)(r.p,{children:"(stable-sort (list #\\b #\\A #\\B #\\a #\\c #\\C) #\u2019char-lessp)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2192"})," (#\\A #\\a #\\b #\\B #\\c #\\C)"]}),"\n",(0,s.jsx)(r.p,{children:"(stable-sort (list #\\b #\\A #\\B #\\a #\\c #\\C) #\u2019char<)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2192"})," (#\\A #\\B #\\C #\\a #\\b #\\c) ;Implementation A"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2192"})," (#\\a #\\b #\\c #\\A #\\B #\\C) ;Implementation B"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2192"})," (#\\a #\\A #\\b #\\B #\\c #\\C) ;Implementation C"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2192"})," (#\\A #\\a #\\B #\\b #\\C #\\c) ;Implementation D"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2192"})," (#\\A #\\B #\\a #\\b #\\C #\\c) ;Implementation E"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(r.p,{children:["Should signal an error of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"program-error"})," if at least one ",(0,s.jsx)(r.em,{children:"character"})," is not supplied."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(r.p,{children:"Section 2.1 (Character Syntax), Section 13.1.10 (Documentation of Implementation-Defined Scripts)"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(r.p,{children:["If characters differ in their ",(0,s.jsx)(r.em,{children:"code attribute"})," or any ",(0,s.jsx)(r.em,{children:"implementation-defined attribute"}),", they are considered to be different by ",(0,s.jsx)(r.strong,{children:"char="}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["There is no requirement that (eq c1 c2) be true merely because (char= c1 c2) is ",(0,s.jsx)(r.em,{children:"true"}),". While ",(0,s.jsx)(r.strong,{children:"eq"})," can distinguish two ",(0,s.jsx)(r.em,{children:"characters"})," that ",(0,s.jsx)(r.strong,{children:"char="})," does not, it is distinguishing them not as ",(0,s.jsx)(r.em,{children:"characters"}),", but in some sense on the basis of a lower level implementation characteristic. If (eq c1 c2) is ",(0,s.jsx)(r.em,{children:"true"}),", then (char= c1 c2) is also true. ",(0,s.jsx)(r.strong,{children:"eql"})," and ",(0,s.jsx)(r.strong,{children:"equal"})," compare ",(0,s.jsx)(r.em,{children:"characters"})," in the same way that ",(0,s.jsx)(r.strong,{children:"char="})," does."]}),"\n",(0,s.jsxs)(r.p,{children:["The manner in which ",(0,s.jsx)(r.em,{children:"case"})," is used by ",(0,s.jsx)(r.strong,{children:"char-equal"}),", ",(0,s.jsx)(r.strong,{children:"char-not-equal"}),", ",(0,s.jsx)(r.strong,{children:"char-lessp"}),", ",(0,s.jsx)(r.strong,{children:"char-greaterp"}),", ",(0,s.jsx)(r.strong,{children:"char-not-greaterp"}),", and ",(0,s.jsx)(r.strong,{children:"char-not-lessp"})," implies an ordering for ",(0,s.jsx)(r.em,{children:"standard characters"})," such that A=a, B=b, and so on, up to Z=z, and furthermore either 9<A or Z<0."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"character"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"character"})," ",(0,s.jsx)(r.em,{children:"character \u2192 denoted-character"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"character"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character designator"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"denoted-character"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns the ",(0,s.jsx)(r.em,{children:"character"})," denoted by the ",(0,s.jsx)(r.em,{children:"character designator"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(r.p,{children:["(character #\\a) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\a"]}),"\n",(0,s.jsxs)(r.p,{children:['(character "a") ',(0,s.jsx)(r.em,{children:"\u2192"})," #\\a"]}),"\n",(0,s.jsxs)(r.p,{children:["(character \u2019a) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\A"]}),"\n",(0,s.jsxs)(r.p,{children:["(character \u2019\\a) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\a"]}),"\n",(0,s.jsx)(r.p,{children:"(character 65.) is an error."}),"\n",(0,s.jsx)(r.p,{children:"(character \u2019apple) is an error."}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(r.p,{children:["Should signal an error of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"type-error"})," if ",(0,s.jsx)(r.em,{children:"object"})," is not a ",(0,s.jsx)(r.em,{children:"character designator"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"coerce"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(r.p,{children:["(character ",(0,s.jsx)(r.em,{children:"object"}),") ",(0,s.jsx)(r.em,{children:"\u2261"})," (coerce ",(0,s.jsx)(r.em,{children:"object"})," \u2019character)"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"characterp"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"characterp"})," ",(0,s.jsx)(r.em,{children:"object \u2192 generalized-boolean"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"object"}),"\u2014an ",(0,s.jsx)(r.em,{children:"object"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"generalized-boolean"}),"\u2014a ",(0,s.jsx)(r.em,{children:"generalized boolean"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns ",(0,s.jsx)(r.em,{children:"true"})," if ",(0,s.jsx)(r.em,{children:"object"})," is of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"character"}),"; otherwise, returns ",(0,s.jsx)(r.em,{children:"false"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(r.p,{children:["(characterp #\\a) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(characterp \u2019a) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:['(characterp "a") ',(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(characterp 65.) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(characterp #\\Newline) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsx)(r.p,{children:";; This next example presupposes an implementation"}),"\n",(0,s.jsx)(r.p,{children:";; in which #\\Rubout is an implementation-defined character."}),"\n",(0,s.jsxs)(r.p,{children:["(characterp #\\Rubout) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"character"})," (",(0,s.jsx)(r.em,{children:"type"})," and ",(0,s.jsx)(r.em,{children:"function"}),"), ",(0,s.jsx)(r.strong,{children:"typep"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(r.p,{children:["(characterp ",(0,s.jsx)(r.em,{children:"object"}),") ",(0,s.jsx)(r.em,{children:"\u2261"})," (typep ",(0,s.jsx)(r.em,{children:"object"})," \u2019character)"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"alpha-char-p"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"alpha-char-p"})," ",(0,s.jsx)(r.em,{children:"character \u2192 generalized-boolean"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"character"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"generalized-boolean"}),"\u2014a ",(0,s.jsx)(r.em,{children:"generalized boolean"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns ",(0,s.jsx)(r.em,{children:"true"})," if ",(0,s.jsx)(r.em,{children:"character"})," is an ",(0,s.jsx)(r.em,{children:"alphabetic"}),"<sub>1</sub> ",(0,s.jsx)(r.em,{children:"character"})," ; otherwise, returns ",(0,s.jsx)(r.em,{children:"false"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(r.p,{children:["(alpha-char-p #\\a) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(alpha-char-p #\\5) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(alpha-char-p #\\Newline) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsx)(r.p,{children:";; This next example presupposes an implementation"}),"\n",(0,s.jsx)(r.p,{children:";; in which #*\u03b1* is a defined character."}),"\n",(0,s.jsxs)(r.p,{children:["(alpha-char-p #*\u03b1*) ",(0,s.jsx)(r.em,{children:"\u2192 implementation-dependent"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Affected By:"})}),"\n",(0,s.jsxs)(r.p,{children:["None. (In particular, the results of this predicate are independent of any special syntax which might have been enabled in the ",(0,s.jsx)(r.em,{children:"current readtable"}),".)"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(r.p,{children:["Should signal an error of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"type-error"})," if ",(0,s.jsx)(r.em,{children:"character"})," is not a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"alphanumericp"}),", Section 13.1.10 (Documentation of Implementation-Defined Scripts)"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"alphanumericp"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"alphanumericp"})," ",(0,s.jsx)(r.em,{children:"character \u2192 generalized-boolean"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"character"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"generalized-boolean"}),"\u2014a ",(0,s.jsx)(r.em,{children:"generalized boolean"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns ",(0,s.jsx)(r.em,{children:"true"})," if ",(0,s.jsx)(r.em,{children:"character"})," is an ",(0,s.jsx)(r.em,{children:"alphabetic"}),"<sub>1</sub> ",(0,s.jsx)(r.em,{children:"character"})," or a ",(0,s.jsx)(r.em,{children:"numeric character"})," ; otherwise, returns ",(0,s.jsx)(r.em,{children:"false"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(r.p,{children:["(alphanumericp #\\Z) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(alphanumericp #\\9) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(alphanumericp #\\Newline) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(alphanumericp ##) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Affected By:"})}),"\n",(0,s.jsxs)(r.p,{children:["None. (In particular, the results of this predicate are independent of any special syntax which might have been enabled in the ",(0,s.jsx)(r.em,{children:"current readtable"}),".)"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(r.p,{children:["Should signal an error of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"type-error"})," if ",(0,s.jsx)(r.em,{children:"character"})," is not a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"alpha-char-p"}),", ",(0,s.jsx)(r.strong,{children:"graphic-char-p"}),", ",(0,s.jsx)(r.strong,{children:"digit-char-p"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(r.p,{children:["Alphanumeric characters are graphic as defined by ",(0,s.jsx)(r.strong,{children:"graphic-char-p"}),". The alphanumeric characters are a subset of the graphic characters. The standard characters A through Z, a through z, and 0 through 9 are alphanumeric characters."]}),"\n",(0,s.jsx)(r.p,{children:"(alphanumericp x)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2261"})," (or (alpha-char-p x) (not (null (digit-char-p x))))"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"digit-char"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"digit-char"})," ",(0,s.jsx)(r.em,{children:"weight"})," &optional ",(0,s.jsx)(r.em,{children:"radix \u2192 char"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"weight"}),"\u2014a non-negative ",(0,s.jsx)(r.em,{children:"integer"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"radix"}),"\u2014a ",(0,s.jsx)(r.em,{children:"radix"})," . The default is 10."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"char"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," or ",(0,s.jsx)(r.em,{children:"false"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["If ",(0,s.jsx)(r.em,{children:"weight"})," is less than ",(0,s.jsx)(r.em,{children:"radix"}),", ",(0,s.jsx)(r.strong,{children:"digit-char"})," returns a ",(0,s.jsx)(r.em,{children:"character"})," which has that ",(0,s.jsx)(r.em,{children:"weight"})," when considered as a digit in the specified radix. If the resulting ",(0,s.jsx)(r.em,{children:"character"})," is to be an ",(0,s.jsx)(r.em,{children:"alphabetic"}),"<sub>1</sub> ",(0,s.jsx)(r.em,{children:"character"})," , it will be an uppercase ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:["If ",(0,s.jsx)(r.em,{children:"weight"})," is greater than or equal to ",(0,s.jsx)(r.em,{children:"radix"}),", ",(0,s.jsx)(r.strong,{children:"digit-char"})," returns ",(0,s.jsx)(r.em,{children:"false"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(r.p,{children:["(digit-char 0) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\0"]}),"\n",(0,s.jsxs)(r.p,{children:["(digit-char 10 11) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\A"]}),"\n",(0,s.jsxs)(r.p,{children:["(digit-char 10 10) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(digit-char 7) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\7"]}),"\n",(0,s.jsxs)(r.p,{children:["(digit-char 12) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(digit-char 12 16) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\C ;not #\\c"]}),"\n",(0,s.jsxs)(r.p,{children:["(digit-char 6 2) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(digit-char 1 2) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\1"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"digit-char-p"}),", ",(0,s.jsx)(r.strong,{children:"graphic-char-p"}),", Section 2.1 (Character Syntax)"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"digit-char-p"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"digit-char-p"})," ",(0,s.jsx)(r.em,{children:"char"})," &optional ",(0,s.jsx)(r.em,{children:"radix \u2192 weight"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"char"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"radix"}),"\u2014a ",(0,s.jsx)(r.em,{children:"radix"})," . The default is 10."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"weight"}),"\u2014either a non-negative ",(0,s.jsx)(r.em,{children:"integer"})," less than ",(0,s.jsx)(r.em,{children:"radix"}),", or ",(0,s.jsx)(r.em,{children:"false"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["Tests whether ",(0,s.jsx)(r.em,{children:"char"})," is a digit in the specified ",(0,s.jsx)(r.em,{children:"radix"})," (",(0,s.jsx)(r.em,{children:"i.e."}),", with a weight less than ",(0,s.jsx)(r.em,{children:"radix"}),"). If it is a digit in that ",(0,s.jsx)(r.em,{children:"radix"}),", its weight is returned as an ",(0,s.jsx)(r.em,{children:"integer"})," ; otherwise ",(0,s.jsx)(r.strong,{children:"nil"})," is returned."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(r.p,{children:["(digit-char-p #\\5) ",(0,s.jsx)(r.em,{children:"\u2192"})," 5"]}),"\n",(0,s.jsxs)(r.p,{children:["(digit-char-p #\\5 2) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(digit-char-p #\\A) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(digit-char-p #\\a) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(digit-char-p #\\A 11) ",(0,s.jsx)(r.em,{children:"\u2192"})," 10"]}),"\n",(0,s.jsxs)(r.p,{children:["(digit-char-p #\\a 11) ",(0,s.jsx)(r.em,{children:"\u2192"})," 10"]}),"\n",(0,s.jsx)(r.p,{children:"(mapcar #\u2019(lambda (radix)"}),"\n",(0,s.jsx)(r.p,{children:"(map \u2019list #\u2019(lambda (x) (digit-char-p x radix))"}),"\n",(0,s.jsx)(r.p,{children:'"059AaFGZ"))'}),"\n",(0,s.jsx)(r.p,{children:"\u2019(2 8 10 16 36))"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2192"})," ((0 NIL NIL NIL NIL NIL NIL NIL)"]}),"\n",(0,s.jsx)(r.p,{children:"(0 5 NIL NIL NIL NIL NIL NIL)"}),"\n",(0,s.jsx)(r.p,{children:"(0 5 9 NIL NIL NIL NIL NIL)"}),"\n",(0,s.jsx)(r.p,{children:"(0 5 9 10 10 15 NIL NIL)"}),"\n",(0,s.jsx)(r.p,{children:"(0 5 9 10 10 15 16 35))"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Affected By:"})}),"\n",(0,s.jsxs)(r.p,{children:["None. (In particular, the results of this predicate are independent of any special syntax which might have been enabled in the ",(0,s.jsx)(r.em,{children:"current readtable"}),".)"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"alphanumericp"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(r.p,{children:["Digits are ",(0,s.jsx)(r.em,{children:"graphic characters"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"graphic-char-p"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"graphic-char-p"})," ",(0,s.jsx)(r.em,{children:"char \u2192 generalized-boolean"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"char"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"generalized-boolean"}),"\u2014a ",(0,s.jsx)(r.em,{children:"generalized boolean"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns ",(0,s.jsx)(r.em,{children:"true"})," if ",(0,s.jsx)(r.em,{children:"character"})," is a ",(0,s.jsx)(r.em,{children:"graphic character"})," ; otherwise, returns ",(0,s.jsx)(r.em,{children:"false"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(r.p,{children:["(graphic-char-p #\\G) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(graphic-char-p ##) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(graphic-char-p #\\Space) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(graphic-char-p #\\Newline) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(r.p,{children:["Should signal an error of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"type-error"})," if ",(0,s.jsx)(r.em,{children:"character"})," is not a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"read"}),", Section 2.1 (Character Syntax), Section 13.1.10 (Documentation of Implementation-Defined Scripts)"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"standard-char-p"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"standard-char-p"})," ",(0,s.jsx)(r.em,{children:"character \u2192 generalized-boolean"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"character"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"generalized-boolean"}),"\u2014a ",(0,s.jsx)(r.em,{children:"generalized boolean"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns ",(0,s.jsx)(r.em,{children:"true"})," if ",(0,s.jsx)(r.em,{children:"character"})," is of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"standard-char"}),"; otherwise, returns ",(0,s.jsx)(r.em,{children:"false"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(r.p,{children:["(standard-char-p #\\Space) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(standard-char-p #~) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsx)(r.p,{children:";; This next example presupposes an implementation"}),"\n",(0,s.jsx)(r.p,{children:";; in which #\\Bell is a defined character."}),"\n",(0,s.jsxs)(r.p,{children:["(standard-char-p #\\Bell) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(r.p,{children:["Should signal an error of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"type-error"})," if ",(0,s.jsx)(r.em,{children:"character"})," is not a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"char-upcase, char-downcase"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-upcase, char-downcase"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-upcase"})," ",(0,s.jsx)(r.em,{children:"character \u2192 corresponding-character"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-downcase"})," ",(0,s.jsx)(r.em,{children:"character \u2192 corresponding-character"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"character"}),", ",(0,s.jsx)(r.em,{children:"corresponding-character"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["If ",(0,s.jsx)(r.em,{children:"character"})," is a ",(0,s.jsx)(r.em,{children:"lowercase character"})," , ",(0,s.jsx)(r.strong,{children:"char-upcase"})," returns the corresponding ",(0,s.jsx)(r.em,{children:"uppercase character"})," . Otherwise, ",(0,s.jsx)(r.strong,{children:"char-upcase"})," just returns the given ",(0,s.jsx)(r.em,{children:"character"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["If ",(0,s.jsx)(r.em,{children:"character"})," is an ",(0,s.jsx)(r.em,{children:"uppercase character"})," , ",(0,s.jsx)(r.strong,{children:"char-downcase"})," returns the corresponding ",(0,s.jsx)(r.em,{children:"lowercase character"})," . Otherwise, ",(0,s.jsx)(r.strong,{children:"char-downcase"})," just returns the given ",(0,s.jsx)(r.em,{children:"character"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["The result only ever differs from ",(0,s.jsx)(r.em,{children:"character"})," in its ",(0,s.jsx)(r.em,{children:"code attribute"}),"; all ",(0,s.jsx)(r.em,{children:"implementation-defined attributes"})," are preserved."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(r.p,{children:["(char-upcase #\\a) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\A"]}),"\n",(0,s.jsxs)(r.p,{children:["(char-upcase #\\A) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\A"]}),"\n",(0,s.jsxs)(r.p,{children:["(char-downcase #\\a) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\a"]}),"\n",(0,s.jsxs)(r.p,{children:["(char-downcase #\\A) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\a"]}),"\n",(0,s.jsxs)(r.p,{children:["(char-upcase #\\9) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\9"]}),"\n",(0,s.jsxs)(r.p,{children:["(char-downcase #\\9) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\9"]}),"\n",(0,s.jsxs)(r.p,{children:["(char-upcase #@) ",(0,s.jsx)(r.em,{children:"\u2192"})," #@"]}),"\n",(0,s.jsxs)(r.p,{children:["(char-downcase #@) ",(0,s.jsx)(r.em,{children:"\u2192"})," #@"]}),"\n",(0,s.jsx)(r.p,{children:";; Note that this next example might run for a very long time in"}),"\n",(0,s.jsx)(r.p,{children:";; some implementations if CHAR-CODE-LIMIT happens to be very large"}),"\n",(0,s.jsx)(r.p,{children:";; for that implementation."}),"\n",(0,s.jsx)(r.p,{children:"(dotimes (code char-code-limit)"}),"\n",(0,s.jsx)(r.p,{children:"(let ((char (code-char code)))"}),"\n",(0,s.jsx)(r.p,{children:"(when char"}),"\n",(0,s.jsx)(r.p,{children:"(unless (cond ((upper-case-p char) (char= (char-upcase (char-downcase char)) char)) ((lower-case-p char) (char= (char-downcase (char-upcase char)) char))"}),"\n",(0,s.jsx)(r.p,{children:"(t (and (char= (char-upcase (char-downcase char)) char)"}),"\n",(0,s.jsx)(r.p,{children:"(char= (char-downcase (char-upcase char)) char))))"}),"\n",(0,s.jsx)(r.p,{children:"(return char)))))"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2192"})," NIL"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(r.p,{children:["Should signal an error of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"type-error"})," if ",(0,s.jsx)(r.em,{children:"character"})," is not a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"upper-case-p"}),", ",(0,s.jsx)(r.strong,{children:"alpha-char-p"}),", Section 13.1.4.3 (Characters With Case), Section 13.1.10 (Documen tation of Implementation-Defined Scripts)"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(r.p,{children:["If the ",(0,s.jsx)(r.em,{children:"corresponding-char"})," is ",(0,s.jsx)(r.em,{children:"different"})," than ",(0,s.jsx)(r.em,{children:"character"}),", then both the ",(0,s.jsx)(r.em,{children:"character"})," and the ",(0,s.jsx)(r.em,{children:"corresponding char"})," have ",(0,s.jsx)(r.em,{children:"case"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["Since ",(0,s.jsx)(r.strong,{children:"char-equal"})," ignores the ",(0,s.jsx)(r.em,{children:"case"})," of the ",(0,s.jsx)(r.em,{children:"characters"})," it compares, the ",(0,s.jsx)(r.em,{children:"corresponding-character"})," is always the ",(0,s.jsx)(r.em,{children:"same"})," as ",(0,s.jsx)(r.em,{children:"character"})," under ",(0,s.jsx)(r.strong,{children:"char-equal"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"upper-case-p, lower-case-p, both-case-p"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"upper-case-p"})," ",(0,s.jsx)(r.em,{children:"character \u2192 generalized-boolean"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"lower-case-p"})," ",(0,s.jsx)(r.em,{children:"character \u2192 generalized-boolean"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"both-case-p"})," ",(0,s.jsx)(r.em,{children:"character \u2192 generalized-boolean"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"character"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"generalized-boolean"}),"\u2014a ",(0,s.jsx)(r.em,{children:"generalized boolean"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["These functions test the case of a given ",(0,s.jsx)(r.em,{children:"character"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"upper-case-p"})," returns ",(0,s.jsx)(r.em,{children:"true"})," if ",(0,s.jsx)(r.em,{children:"character"})," is an ",(0,s.jsx)(r.em,{children:"uppercase character"})," ; otherwise, returns ",(0,s.jsx)(r.em,{children:"false"}),". ",(0,s.jsx)(r.strong,{children:"lower-case-p"})," returns ",(0,s.jsx)(r.em,{children:"true"})," if ",(0,s.jsx)(r.em,{children:"character"})," is a ",(0,s.jsx)(r.em,{children:"lowercase character"})," ; otherwise, returns ",(0,s.jsx)(r.em,{children:"false"}),". ",(0,s.jsx)(r.strong,{children:"both-case-p"})," returns ",(0,s.jsx)(r.em,{children:"true"})," if ",(0,s.jsx)(r.em,{children:"character"})," is a ",(0,s.jsx)(r.em,{children:"character"})," with ",(0,s.jsx)(r.em,{children:"case"}),"; otherwise, returns ",(0,s.jsx)(r.em,{children:"false"}),". ",(0,s.jsx)(r.strong,{children:"Examples:"})]}),"\n",(0,s.jsxs)(r.p,{children:["(upper-case-p #\\A) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(upper-case-p #\\a) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(both-case-p #\\a) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsxs)(r.p,{children:["(both-case-p #\\5) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(lower-case-p #\\5) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsxs)(r.p,{children:["(upper-case-p #\\5) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsx)(r.p,{children:";; This next example presupposes an implementation"}),"\n",(0,s.jsx)(r.p,{children:";; in which #\\Bell is an implementation-defined character."}),"\n",(0,s.jsxs)(r.p,{children:["(lower-case-p #\\Bell) ",(0,s.jsx)(r.em,{children:"\u2192 false"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(r.p,{children:["Should signal an error of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"type-error"})," if ",(0,s.jsx)(r.em,{children:"character"})," is not a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-upcase"}),", ",(0,s.jsx)(r.strong,{children:"char-downcase"}),", Section 13.1.4.3 (Characters With Case), Section 13.1.10 (Documentation of Implementation-Defined Scripts)"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-code"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-code"})," ",(0,s.jsx)(r.em,{children:"character \u2192 code"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"character"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"code"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character code"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-code"})," returns the ",(0,s.jsx)(r.em,{children:"code attribute"})," of ",(0,s.jsx)(r.em,{children:"character"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(r.p,{children:";; An implementation using ASCII character encoding"}),"\n",(0,s.jsx)(r.p,{children:";; might return these values:"}),"\n",(0,s.jsxs)(r.p,{children:["(char-code #$) ",(0,s.jsx)(r.em,{children:"\u2192"})," 36"]}),"\n",(0,s.jsxs)(r.p,{children:["(char-code #\\a) ",(0,s.jsx)(r.em,{children:"\u2192"})," 97"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(r.p,{children:["Should signal an error of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"type-error"})," if ",(0,s.jsx)(r.em,{children:"character"})," is not a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"char-code-limit"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-int"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-int"})," ",(0,s.jsx)(r.em,{children:"character \u2192 integer"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"character"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"integer"}),"\u2014a non-negative ",(0,s.jsx)(r.em,{children:"integer"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns a non-negative ",(0,s.jsx)(r.em,{children:"integer"})," encoding the ",(0,s.jsx)(r.em,{children:"character"})," object. The manner in which the ",(0,s.jsx)(r.em,{children:"integer"})," is computed is ",(0,s.jsx)(r.em,{children:"implementation-dependent"}),". In contrast to ",(0,s.jsx)(r.strong,{children:"sxhash"}),", the result is not guaranteed to be independent of the particular ",(0,s.jsx)(r.em,{children:"Lisp image"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["If ",(0,s.jsx)(r.em,{children:"character"})," has no ",(0,s.jsx)(r.em,{children:"implementation-defined attributes"}),", the results of ",(0,s.jsx)(r.strong,{children:"char-int"})," and ",(0,s.jsx)(r.strong,{children:"char-code"})," are the same."]}),"\n",(0,s.jsxs)(r.p,{children:["(char= ",(0,s.jsx)(r.em,{children:"c1 c2"}),") ",(0,s.jsx)(r.em,{children:"\u2261"})," (= (char-int ",(0,s.jsx)(r.em,{children:"c1"}),") (char-int ",(0,s.jsx)(r.em,{children:"c2"}),"))"]}),"\n",(0,s.jsxs)(r.p,{children:["for characters ",(0,s.jsx)(r.em,{children:"c1"})," and ",(0,s.jsx)(r.em,{children:"c2"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(r.p,{children:["(char-int #\\A) ",(0,s.jsx)(r.em,{children:"\u2192"})," 65 ; implementation A"]}),"\n",(0,s.jsxs)(r.p,{children:["(char-int #\\A) ",(0,s.jsx)(r.em,{children:"\u2192"})," 577 ; implementation B"]}),"\n",(0,s.jsxs)(r.p,{children:["(char-int #\\A) ",(0,s.jsx)(r.em,{children:"\u2192"})," 262145 ; implementation C"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"char-code"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"code-char"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"code-char"})," ",(0,s.jsx)(r.em,{children:"code \u2192 char-p"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"code"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character code"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"char-p"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," or ",(0,s.jsx)(r.strong,{children:"nil"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns a ",(0,s.jsx)(r.em,{children:"character"})," with the ",(0,s.jsx)(r.em,{children:"code attribute"})," given by ",(0,s.jsx)(r.em,{children:"code"}),". If no such ",(0,s.jsx)(r.em,{children:"character"})," exists and one cannot be created, ",(0,s.jsx)(r.strong,{children:"nil"})," is returned."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(r.p,{children:["(code-char 65.) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\A ;in an implementation using ASCII codes"]}),"\n",(0,s.jsxs)(r.p,{children:["(code-char (char-code #\\Space)) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\Space ;in any implementation"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Affected By:"})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.em,{children:"implementation"}),"\u2019s character encoding."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"char-code"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-code-limit"})," ",(0,s.jsx)(r.em,{children:"Constant Variable"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Constant Value:"})}),"\n",(0,s.jsxs)(r.p,{children:["A non-negative ",(0,s.jsx)(r.em,{children:"integer"})," , the exact magnitude of which is ",(0,s.jsx)(r.em,{children:"implementation-dependent"}),", but which is not less than 96 (the number of ",(0,s.jsx)(r.em,{children:"standard characters"}),")."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["The upper exclusive bound on the ",(0,s.jsx)(r.em,{children:"value"})," returned by the ",(0,s.jsx)(r.em,{children:"function"})," ",(0,s.jsx)(r.strong,{children:"char-code"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"char-code"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.em,{children:"value"})," of ",(0,s.jsx)(r.strong,{children:"char-code-limit"})," might be larger than the actual number of ",(0,s.jsx)(r.em,{children:"characters"})," supported by the ",(0,s.jsx)(r.em,{children:"implementation"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"char-name"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-name"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"char-name"})," ",(0,s.jsx)(r.em,{children:"character \u2192 name"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"character"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"name"}),"\u2014a ",(0,s.jsx)(r.em,{children:"string"})," or ",(0,s.jsx)(r.strong,{children:"nil"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns a ",(0,s.jsx)(r.em,{children:"string"})," that is the ",(0,s.jsx)(r.em,{children:"name"})," of the ",(0,s.jsx)(r.em,{children:"character"}),", or ",(0,s.jsx)(r.strong,{children:"nil"})," if the ",(0,s.jsx)(r.em,{children:"character"})," has no ",(0,s.jsx)(r.em,{children:"name"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["All ",(0,s.jsx)(r.em,{children:"non-graphic"})," characters are required to have ",(0,s.jsx)(r.em,{children:"names"})," unless they have some ",(0,s.jsx)(r.em,{children:"implementation-defined attribute"})," which is not ",(0,s.jsx)(r.em,{children:"null"}),". Whether or not other ",(0,s.jsx)(r.em,{children:"characters"})," have ",(0,s.jsx)(r.em,{children:"names"})," is ",(0,s.jsx)(r.em,{children:"implementation dependent"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.em,{children:"standard characters hNewlinei"})," and ",(0,s.jsx)(r.em,{children:"hSpacei"}),' have the respective names "Newline" and "Space". The ',(0,s.jsx)(r.em,{children:"semi-standard characters hTabi"}),", ",(0,s.jsx)(r.em,{children:"hPagei"}),", ",(0,s.jsx)(r.em,{children:"hRubouti"}),", ",(0,s.jsx)(r.em,{children:"hLinefeedi"}),", ",(0,s.jsx)(r.em,{children:"hReturni"}),", and ",(0,s.jsx)(r.em,{children:"hBackspacei"})," (if they are supported by the ",(0,s.jsx)(r.em,{children:"implementation"}),') have the respective names "Tab", "Page", "Rubout", "Linefeed", "Return", and "Backspace" (in the indicated case, even though name lookup by \u201c#\\\u201d and by the ',(0,s.jsx)(r.em,{children:"function"})," ",(0,s.jsx)(r.strong,{children:"name-char"})," is not case sensitive)."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(r.p,{children:["(char-name #\\ ) ",(0,s.jsx)(r.em,{children:"\u2192"}),' "Space"']}),"\n",(0,s.jsxs)(r.p,{children:["(char-name #\\Space) ",(0,s.jsx)(r.em,{children:"\u2192"}),' "Space"']}),"\n",(0,s.jsxs)(r.p,{children:["(char-name #\\Page) ",(0,s.jsx)(r.em,{children:"\u2192"}),' "Page"']}),"\n",(0,s.jsx)(r.p,{children:"(char-name #\\a)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2192"})," NIL"]}),"\n",(0,s.jsx)(r.p,{children:'<i><sup>or</sup>\u2192</i> "LOWERCASE-a"'}),"\n",(0,s.jsx)(r.p,{children:'<i><sup>or</sup>\u2192</i> "Small-A"'}),"\n",(0,s.jsx)(r.p,{children:'<i><sup>or</sup>\u2192</i> "LA01"'}),"\n",(0,s.jsx)(r.p,{children:"(char-name #\\A)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"\u2192"})," NIL"]}),"\n",(0,s.jsx)(r.p,{children:'<i><sup>or</sup>\u2192</i> "UPPERCASE-A"'}),"\n",(0,s.jsx)(r.p,{children:'<i><sup>or</sup>\u2192</i> "Capital-A"'}),"\n",(0,s.jsx)(r.p,{children:'<i><sup>or</sup>\u2192</i> "LA02"'}),"\n",(0,s.jsx)(r.p,{children:";; Even though its CHAR-NAME can vary, #\\A prints as #\\A"}),"\n",(0,s.jsxs)(r.p,{children:['(prin1-to-string (read-from-string (format nil "#\\~A" (or (char-name #\\A) "A")))) ',(0,s.jsx)(r.em,{children:"\u2192"}),' "#\\A"']}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(r.p,{children:["Should signal an error of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"type-error"})," if ",(0,s.jsx)(r.em,{children:"character"})," is not a ",(0,s.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"name-char"}),", Section 22.1.3.2 (Printing Characters)"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"Non-graphic characters"})," having ",(0,s.jsx)(r.em,{children:"names"})," are written by the ",(0,s.jsx)(r.em,{children:"Lisp printer"})," as \u201c#\\\u201d followed by the their ",(0,s.jsx)(r.em,{children:"name"}),"; see Section 22.1.3.2 (Printing Characters)."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"name-char"})," ",(0,s.jsx)(r.em,{children:"Function"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"name-char"})," ",(0,s.jsx)(r.em,{children:"name \u2192 char-p"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"name"}),"\u2014a ",(0,s.jsx)(r.em,{children:"string designator"})," ."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"char-p"}),"\u2014a ",(0,s.jsx)(r.em,{children:"character"})," or ",(0,s.jsx)(r.strong,{children:"nil"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns the ",(0,s.jsx)(r.em,{children:"character object"})," whose ",(0,s.jsx)(r.em,{children:"name"})," is ",(0,s.jsx)(r.em,{children:"name"})," (as determined by ",(0,s.jsx)(r.strong,{children:"string-equal"}),"\u2014",(0,s.jsx)(r.em,{children:"i.e."}),", lookup is not case sensitive). If such a ",(0,s.jsx)(r.em,{children:"character"})," does not exist, ",(0,s.jsx)(r.strong,{children:"nil"})," is returned."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsxs)(r.p,{children:["(name-char \u2019space) ",(0,s.jsx)(r.em,{children:"\u2192"})," #\\Space"]}),"\n",(0,s.jsxs)(r.p,{children:['(name-char "space") ',(0,s.jsx)(r.em,{children:"\u2192"})," #\\Space"]}),"\n",(0,s.jsxs)(r.p,{children:['(name-char "Space") ',(0,s.jsx)(r.em,{children:"\u2192"})," #\\Space"]}),"\n",(0,s.jsx)(r.p,{children:"(let ((x (char-name #\\a)))"}),"\n",(0,s.jsxs)(r.p,{children:["(or (not x) (eql (name-char x) #\\a))) ",(0,s.jsx)(r.em,{children:"\u2192 true"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(r.p,{children:["Should signal an error of ",(0,s.jsx)(r.em,{children:"type"})," ",(0,s.jsx)(r.strong,{children:"type-error"})," if ",(0,s.jsx)(r.em,{children:"name"})," is not a ",(0,s.jsx)(r.em,{children:"string designator"})," ."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"char-name"})})]})}function X(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(Q,{...e})}):Q(e)}const Y={title:"13.1 Character Concepts"},_="13.1 Character Concepts",$={id:"chap-13/bd-b-character-concepts",title:"13.1 Character Concepts",description:"13.1.1 Introduction to Characters",source:"@site/docs/chap-13/bd-b-character-concepts.md",sourceDirName:"chap-13",slug:"/chap-13/bd-b-character-concepts",permalink:"/cl-language-reference/docs/chap-13/bd-b-character-concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-13/bd-b-character-concepts.md",tags:[],version:"current",frontMatter:{title:"13.1 Character Concepts"},sidebar:"tutorialSidebar",previous:{title:"13. Characters",permalink:"/cl-language-reference/docs/category/13-characters"},next:{title:"14. Conses",permalink:"/cl-language-reference/docs/category/14-conses"}},ee={},re=[{value:"13.1.1 Introduction to Characters",id:"1311-introduction-to-characters",level:2},{value:"13.1.2 Introduction to Scripts and Repertoires",id:"1312-introduction-to-scripts-and-repertoires",level:2},{value:"13.1.2.1 Character Scripts",id:"13121-character-scripts",level:3},{value:"13.1.2.2 Character Repertoires",id:"13122-character-repertoires",level:3},{value:"13.1.3 Character Attributes",id:"1313-character-attributes",level:2},{value:"13.1.4 Character Categories",id:"1314-character-categories",level:2},{value:"13.1.4.1 Graphic Characters",id:"13141-graphic-characters",level:3},{value:"13.1.4.2 Alphabetic Characters",id:"13142-alphabetic-characters",level:3},{value:"13.1.4.3 Characters With Case",id:"13143-characters-with-case",level:3},{value:"13.1.4.3.1 Uppercase Characters",id:"131431-uppercase-characters",level:4},{value:"13.1.4.3.2 Lowercase Characters",id:"131432-lowercase-characters",level:4},{value:"13.1.4.3.3 Corresponding Characters in the Other Case",id:"131433-corresponding-characters-in-the-other-case",level:4},{value:"13.1.4.3.4 Case of Implementation",id:"131434-case-of-implementation",level:4},{value:"13.1.4.4 Numeric Characters",id:"13144-numeric-characters",level:3},{value:"13.1.4.5 Alphanumeric Characters",id:"13145-alphanumeric-characters",level:3},{value:"13.1.4.6 Digits in a Radix",id:"13146-digits-in-a-radix",level:3},{value:"13.1.5 Identity of Characters",id:"1315-identity-of-characters",level:2},{value:"13.1.6 Ordering of Characters",id:"1316-ordering-of-characters",level:2},{value:"13.1.7 Character Names",id:"1317-character-names",level:2},{value:"13.1.8 Treatment of Newline during Input and Output",id:"1318-treatment-of-newline-during-input-and-output",level:2},{value:"13.1.9 Character Encodings",id:"1319-character-encodings",level:2},{value:"13.1.10 Documentation of Implementation",id:"13110-documentation-of-implementation",level:2}];function ne(e){const r={h1:"h1",h2:"h2",h3:"h3",h4:"h4",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"131-character-concepts",children:"13.1 Character Concepts"}),"\n","\n",(0,s.jsx)(h,{}),"\n",(0,s.jsx)(r.h2,{id:"1311-introduction-to-characters",children:"13.1.1 Introduction to Characters"}),"\n","\n",(0,s.jsx)(t,{}),"\n",(0,s.jsx)(r.h2,{id:"1312-introduction-to-scripts-and-repertoires",children:"13.1.2 Introduction to Scripts and Repertoires"}),"\n","\n",(0,s.jsx)(l,{}),"\n",(0,s.jsx)(r.h3,{id:"13121-character-scripts",children:"13.1.2.1 Character Scripts"}),"\n","\n",(0,s.jsx)(o,{}),"\n",(0,s.jsx)(r.h3,{id:"13122-character-repertoires",children:"13.1.2.2 Character Repertoires"}),"\n","\n",(0,s.jsx)(p,{}),"\n",(0,s.jsx)(r.h2,{id:"1313-character-attributes",children:"13.1.3 Character Attributes"}),"\n","\n",(0,s.jsx)(g,{}),"\n",(0,s.jsx)(r.h2,{id:"1314-character-categories",children:"13.1.4 Character Categories"}),"\n","\n",(0,s.jsx)(f,{}),"\n",(0,s.jsx)(r.h3,{id:"13141-graphic-characters",children:"13.1.4.1 Graphic Characters"}),"\n","\n",(0,s.jsx)(y,{}),"\n",(0,s.jsx)(r.h3,{id:"13142-alphabetic-characters",children:"13.1.4.2 Alphabetic Characters"}),"\n","\n",(0,s.jsx)(v,{}),"\n",(0,s.jsx)(r.h3,{id:"13143-characters-with-case",children:"13.1.4.3 Characters With Case"}),"\n","\n",(0,s.jsx)(A,{}),"\n",(0,s.jsx)(r.h4,{id:"131431-uppercase-characters",children:"13.1.4.3.1 Uppercase Characters"}),"\n","\n",(0,s.jsx)(I,{}),"\n",(0,s.jsx)(r.h4,{id:"131432-lowercase-characters",children:"13.1.4.3.2 Lowercase Characters"}),"\n","\n",(0,s.jsx)(N,{}),"\n",(0,s.jsx)(r.h4,{id:"131433-corresponding-characters-in-the-other-case",children:"13.1.4.3.3 Corresponding Characters in the Other Case"}),"\n","\n",(0,s.jsx)(z,{}),"\n",(0,s.jsx)(r.h4,{id:"131434-case-of-implementation",children:"13.1.4.3.4 Case of Implementation"}),"\n","\n",(0,s.jsx)(q,{}),"\n",(0,s.jsx)(r.h3,{id:"13144-numeric-characters",children:"13.1.4.4 Numeric Characters"}),"\n","\n",(0,s.jsx)(E,{}),"\n",(0,s.jsx)(r.h3,{id:"13145-alphanumeric-characters",children:"13.1.4.5 Alphanumeric Characters"}),"\n","\n",(0,s.jsx)(O,{}),"\n",(0,s.jsx)(r.h3,{id:"13146-digits-in-a-radix",children:"13.1.4.6 Digits in a Radix"}),"\n","\n",(0,s.jsx)(B,{}),"\n",(0,s.jsx)(r.h2,{id:"1315-identity-of-characters",children:"13.1.5 Identity of Characters"}),"\n","\n",(0,s.jsx)(P,{}),"\n",(0,s.jsx)(r.h2,{id:"1316-ordering-of-characters",children:"13.1.6 Ordering of Characters"}),"\n","\n",(0,s.jsx)(Z,{}),"\n",(0,s.jsx)(r.h2,{id:"1317-character-names",children:"13.1.7 Character Names"}),"\n","\n",(0,s.jsx)(G,{}),"\n",(0,s.jsx)(r.h2,{id:"1318-treatment-of-newline-during-input-and-output",children:"13.1.8 Treatment of Newline during Input and Output"}),"\n","\n",(0,s.jsx)(H,{}),"\n",(0,s.jsx)(r.h2,{id:"1319-character-encodings",children:"13.1.9 Character Encodings"}),"\n","\n",(0,s.jsx)(K,{}),"\n",(0,s.jsx)(r.h2,{id:"13110-documentation-of-implementation",children:"13.1.10 Documentation of Implementation"}),"\n","\n","\n",(0,s.jsx)(X,{})]})}function se(e={}){const{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(ne,{...e})}):ne(e)}},11151:(e,r,n)=>{n.d(r,{Z:()=>a,a:()=>h});var s=n(67294);const c={},i=s.createContext(c);function h(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:h(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);