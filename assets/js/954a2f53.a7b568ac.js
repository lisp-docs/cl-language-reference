"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[76768],{92525:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>u,contentTitle:()=>y,default:()=>v,frontMatter:()=>m,metadata:()=>f,toc:()=>b});var n=r(85893),i=r(11151);function t(e){return(0,n.jsx)(n.Fragment,{})}function c(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(t,{...e})}):t()}function l(e){const s={em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components},{GlossaryTerm:r}=s;return r||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["Information about ",(0,n.jsx)(r,{term:"type",children:(0,n.jsx)("i",{children:"type"})})," usage is located in the sections specified in Figure 4\u20131. Figure 4\u20137 lists some ",(0,n.jsx)(s.em,{children:"classes"})," that are particularly relevant to the object system. Figure 9\u20131 lists the defined ",(0,n.jsx)(s.em,{children:"condition types"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["|",(0,n.jsx)(s.strong,{children:"Section"})," Data Type|"]}),"\n",(0,n.jsx)(s.p,{children:"| :- |"}),"\n",(0,n.jsxs)(s.p,{children:["|",(0,n.jsx)("p",{children:"Section 4.3 (Classes) Object System types "}),(0,n.jsx)("p",{children:"Section 7.5 (Slots) Object System types "}),(0,n.jsx)("p",{children:"Chapter 7 (Objects) Object System types "}),(0,n.jsx)("p",{children:"Section 7.6 (Generic Functions and Methods) Object System types "}),(0,n.jsx)("p",{children:"Section 9.1 (Condition System Concepts) Condition System types Chapter 4 (Types and Classes) Miscellaneous types "}),(0,n.jsx)("p",{children:"Chapter 2 (Syntax) All types\u2014read and print syntax Section 22.1 (The Lisp Printer) All types\u2014print syntax Section 3.2 (Compilation) All types\u2014compilation issues"}),"|"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Figure 4\u20131. Cross-References to Data Type Information"})})]})}function d(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}function o(e){const s={em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components},{DictionaryLink:r,GlossaryTerm:t}=s;return r||h("DictionaryLink",!0),t||h("GlossaryTerm",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"\u2022"})," The ",(0,n.jsx)(t,{term:"type",children:(0,n.jsx)("i",{children:"types"})})," ",(0,n.jsx)(r,{term:"cons",children:(0,n.jsx)("b",{children:"cons"})}),", ",(0,n.jsx)(r,{term:"symbol",children:(0,n.jsx)("b",{children:"symbol"})}),", ",(0,n.jsx)(r,{term:"array",children:(0,n.jsx)("b",{children:"array"})}),", ",(0,n.jsx)(r,{term:"number",children:(0,n.jsx)("b",{children:"number"})}),", ",(0,n.jsx)(r,{term:"character",children:(0,n.jsx)("b",{children:"character"})}),", ",(0,n.jsx)(r,{term:"hash-table",children:(0,n.jsx)("b",{children:"hash-table"})}),", ",(0,n.jsx)(r,{term:"function",children:(0,n.jsx)("b",{children:"function"})}),", ",(0,n.jsx)(r,{term:"readtable",children:(0,n.jsx)("b",{children:"readtable"})}),", ",(0,n.jsx)(r,{term:"package",children:(0,n.jsx)("b",{children:"package"})}),", ",(0,n.jsx)(r,{term:"pathname",children:(0,n.jsx)("b",{children:"pathname"})}),", ",(0,n.jsx)(r,{term:"stream",children:(0,n.jsx)("b",{children:"stream"})}),", ",(0,n.jsx)(r,{term:"random-state",children:(0,n.jsx)("b",{children:"random-state"})}),", ",(0,n.jsx)(r,{term:"condition",children:(0,n.jsx)("b",{children:"condition"})}),", ",(0,n.jsx)(r,{term:"restart",children:(0,n.jsx)("b",{children:"restart"})}),", and any single other ",(0,n.jsx)(t,{term:"type",children:(0,n.jsx)("i",{children:"type"})})," created by ",(0,n.jsx)(r,{term:"defstruct",children:(0,n.jsx)("b",{children:"defstruct"})}),", ",(0,n.jsx)(r,{term:"define-condition",children:(0,n.jsx)("b",{children:"define-condition"})}),", or ",(0,n.jsx)(r,{term:"defclass",children:(0,n.jsx)("b",{children:"defclass"})})," are ",(0,n.jsx)(s.em,{children:"pairwise disjoint"}),", except for type relations explicitly established by specifying ",(0,n.jsx)(s.em,{children:"superclasses"})," in ",(0,n.jsx)(r,{term:"defclass",children:(0,n.jsx)("b",{children:"defclass"})})," or ",(0,n.jsx)(r,{term:"define-condition",children:(0,n.jsx)("b",{children:"define-condition"})})," or the ",":include"," option of ",(0,n.jsx)(s.strong,{children:"destruct"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"\u2022"})," Any two ",(0,n.jsx)(t,{term:"type",children:(0,n.jsx)("i",{children:"types"})})," created by ",(0,n.jsx)(r,{term:"defstruct",children:(0,n.jsx)("b",{children:"defstruct"})})," are ",(0,n.jsx)(t,{term:"disjoint",children:(0,n.jsx)("i",{children:"disjoint"})})," unless one is a ",(0,n.jsx)(t,{term:"supertype",children:(0,n.jsx)("i",{children:"supertype"})})," of the other by virtue of the ",(0,n.jsx)(r,{term:"defstruct",children:(0,n.jsx)("b",{children:"defstruct"})})," ",":include"," option."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"\u2022"})," Any two ",(0,n.jsx)(s.em,{children:"distinct classes"})," created by ",(0,n.jsx)(r,{term:"defclass",children:(0,n.jsx)("b",{children:"defclass"})})," or ",(0,n.jsx)(r,{term:"define-condition",children:(0,n.jsx)("b",{children:"define-condition"})})," are ",(0,n.jsx)(t,{term:"disjoint",children:(0,n.jsx)("i",{children:"disjoint"})})," unless they have a common ",(0,n.jsx)(t,{term:"subclass",children:(0,n.jsx)("i",{children:"subclass"})})," or one ",(0,n.jsx)(t,{term:"class",children:(0,n.jsx)("i",{children:"class"})})," is a ",(0,n.jsx)(t,{term:"subclass",children:(0,n.jsx)("i",{children:"subclass"})})," of the other."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"\u2022"})," An implementation may be extended to add other ",(0,n.jsx)(t,{term:"subtype",children:(0,n.jsx)("i",{children:"subtype"})})," relationships between the specified ",(0,n.jsx)(t,{term:"type",children:(0,n.jsx)("i",{children:"types"})}),", as long as they do not violate the type relationships and disjointness requirements specified here. An implementation may define additional ",(0,n.jsx)(t,{term:"type",children:(0,n.jsx)("i",{children:"types"})})," that are ",(0,n.jsx)(t,{term:"subtype",children:(0,n.jsx)("i",{children:"subtypes"})})," or ",(0,n.jsx)(t,{term:"supertype",children:(0,n.jsx)("i",{children:"supertypes"})})," of any specified ",(0,n.jsx)(t,{term:"type",children:(0,n.jsx)("i",{children:"types"})}),", as long as each additional ",(0,n.jsx)(t,{term:"type",children:(0,n.jsx)("i",{children:"type"})})," is a ",(0,n.jsx)(t,{term:"subtype",children:(0,n.jsx)("i",{children:"subtype"})})," of"]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(t,{term:"type",children:(0,n.jsx)("i",{children:"type"})})," ",(0,n.jsx)(r,{term:"t",children:(0,n.jsx)("b",{children:"t"})})," and a ",(0,n.jsx)(t,{term:"supertype",children:(0,n.jsx)("i",{children:"supertype"})})," of ",(0,n.jsx)(t,{term:"type",children:(0,n.jsx)("i",{children:"type"})})," ",(0,n.jsx)(r,{term:"nil",children:(0,n.jsx)("b",{children:"nil"})})," and the disjointness requirements are not violated."]}),"\n",(0,n.jsxs)(s.p,{children:["At the discretion of the implementation, either ",(0,n.jsx)(r,{term:"standard-object",children:(0,n.jsx)("b",{children:"standard-object"})})," or ",(0,n.jsx)(r,{term:"structure-object",children:(0,n.jsx)("b",{children:"structure-object"})})," might appear in any class precedence list for a ",(0,n.jsx)(t,{styled:!0,term:"system class",children:(0,n.jsx)("i",{children:"system class"})})," that does not already specify either ",(0,n.jsx)(r,{term:"standard-object",children:(0,n.jsx)("b",{children:"standard-object"})})," or ",(0,n.jsx)(r,{term:"structure-object",children:(0,n.jsx)("b",{children:"structure-object"})}),". If it does, it must precede the ",(0,n.jsx)(t,{term:"class",children:(0,n.jsx)("i",{children:"class"})})," ",(0,n.jsx)(r,{term:"t",children:(0,n.jsx)("b",{children:"t"})})," and follow all other ",(0,n.jsx)(s.em,{children:"standardized classes"}),"."]})]})}function a(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}function h(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function p(e){const s={em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components},{DictionaryLink:r,GlossaryTerm:t}=s;return r||j("DictionaryLink",!0),t||j("GlossaryTerm",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:[(0,n.jsx)(t,{styled:!0,term:"type specifier",children:(0,n.jsx)("i",{children:"Type specifiers"})})," can be ",(0,n.jsx)(t,{term:"symbol",children:(0,n.jsx)("i",{children:"symbols"})}),", ",(0,n.jsx)(s.em,{children:"classes"}),", or ",(0,n.jsx)(t,{term:"list",children:(0,n.jsx)("i",{children:"lists"})}),". Figure 4\u20132 lists ",(0,n.jsx)(t,{term:"symbol",children:(0,n.jsx)("i",{children:"symbols"})})," that are ",(0,n.jsx)(s.em,{children:"standardized atomic type specifiers"}),", and Figure 4\u20133 lists ",(0,n.jsx)(s.em,{children:"standardized compound type specifier names"}),". For syntax information, see the dictionary entry for the corresponding ",(0,n.jsx)(t,{styled:!0,term:"type specifier",children:(0,n.jsx)("i",{children:"type specifier"})})," . It is possible to define new ",(0,n.jsx)(t,{styled:!0,term:"type specifier",children:(0,n.jsx)("i",{children:"type specifiers"})})," using ",(0,n.jsx)(r,{term:"defclass",children:(0,n.jsx)("b",{children:"defclass"})}),", ",(0,n.jsx)(r,{term:"define-condition",children:(0,n.jsx)("b",{children:"define-condition"})}),", ",(0,n.jsx)(r,{term:"defstruct",children:(0,n.jsx)("b",{children:"defstruct"})}),", or ",(0,n.jsx)(r,{term:"deftype",children:(0,n.jsx)("b",{children:"deftype"})}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["|",(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"arithmetic-error function simple-condition array generic-function simple-error atom hash-table simple-string base-char integer simple-type-error base-string keyword simple-vector bignum list simple-warning bit logical-pathname single-float bit-vector long-float standard-char broadcast-stream method standard-class built-in-class method-combination standard-generic-function cell-error nil standard-method character null standard-object class number storage-condition compiled-function package stream"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"complex package-error stream-error concatenated-stream parse-error string"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"condition pathname string-stream cons print-not-readable structure-class control-error program-error structure-object division-by-zero random-state style-warning double-float ratio symbol"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"echo-stream rational synonym-stream end-of-file reader-error t"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"error readtable two-way-stream extended-char real type-error file-error restart unbound-slot file-stream sequence unbound-variable fixnum serious-condition undefined-function float short-float unsigned-byte floating-point-inexact signed-byte vector"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"floating-point-invalid-operation simple-array warning"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"floating-point-overflow simple-base-string"})," "]}),(0,n.jsx)("p",{children:(0,n.jsx)(s.strong,{children:"floating-point-underflow simple-bit-vector"})}),"|"]}),"\n",(0,n.jsx)(s.p,{children:"| :- |"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Figure 4\u20132. Standardized Atomic Type Specifiers"})}),"\n",(0,n.jsxs)(s.p,{children:["If a ",(0,n.jsx)(t,{styled:!0,term:"type specifier",children:(0,n.jsx)("i",{children:"type specifier"})})," is a ",(0,n.jsx)(t,{term:"list",children:(0,n.jsx)("i",{children:"list"})}),", the ",(0,n.jsx)(t,{term:"car",children:(0,n.jsx)("i",{children:"car"})})," of the ",(0,n.jsx)(t,{term:"list",children:(0,n.jsx)("i",{children:"list"})})," is a ",(0,n.jsx)(t,{term:"symbol",children:(0,n.jsx)("i",{children:"symbol"})}),", and the rest of the ",(0,n.jsx)(t,{term:"list",children:(0,n.jsx)("i",{children:"list"})})," is subsidiary ",(0,n.jsx)(t,{term:"type",children:(0,n.jsx)("i",{children:"type"})})," information. Such a ",(0,n.jsx)(t,{styled:!0,term:"type specifier",children:(0,n.jsx)("i",{children:"type specifier"})})," is called a ",(0,n.jsx)(t,{styled:!0,term:"compound type specifier",children:(0,n.jsx)("i",{children:"compound type specifier"})}),". Except as explicitly stated otherwise, the subsidiary items can be unspecified. The unspecified subsidiary items are indicated by writing *. For example, to completely specify a ",(0,n.jsx)(t,{term:"vector",children:(0,n.jsx)("i",{children:"vector"})})," , the ",(0,n.jsx)(t,{term:"type",children:(0,n.jsx)("i",{children:"type"})})," of the elements and the length of the ",(0,n.jsx)(t,{term:"vector",children:(0,n.jsx)("i",{children:"vector"})})," must be present."]}),"\n",(0,n.jsx)(s.p,{children:"(vector double-float 100)"}),"\n",(0,n.jsx)(s.p,{children:"The following leaves the length unspecified:"}),"\n",(0,n.jsx)(s.p,{children:"(vector double-float *)"}),"\n",(0,n.jsx)(s.p,{children:"The following leaves the element type unspecified:"}),"\n",(0,n.jsx)(s.p,{children:"(vector * 100)"}),"\n",(0,n.jsxs)(s.p,{children:["Suppose that two ",(0,n.jsx)(t,{styled:!0,term:"type specifier",children:(0,n.jsx)("i",{children:"type specifiers"})})," are the same except that the first has a * where the second has a more explicit specification. Then the second denotes a ",(0,n.jsx)(t,{term:"subtype",children:(0,n.jsx)("i",{children:"subtype"})})," of the ",(0,n.jsx)(t,{term:"type",children:(0,n.jsx)("i",{children:"type"})})," denoted by the first."]}),"\n",(0,n.jsxs)(s.p,{children:["If a ",(0,n.jsx)(t,{term:"list",children:(0,n.jsx)("i",{children:"list"})})," has one or more unspecified items at the end, those items can be dropped. If dropping all occurrences of * results in a ",(0,n.jsx)(s.em,{children:"singleton list"}),", then the parentheses can be dropped as well (the list can be replaced by the ",(0,n.jsx)(t,{term:"symbol",children:(0,n.jsx)("i",{children:"symbol"})})," in its ",(0,n.jsx)(t,{term:"car",children:(0,n.jsx)("i",{children:"car"})})," ). For example, (vector double-float *) can be abbreviated to (vector double-float), and (vector * *) can be abbreviated to (vector) and then to vector."]}),"\n",(0,n.jsxs)(s.p,{children:["|",(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"and long-float simple-base-string array member simple-bit-vector"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"base-string mod simple-string"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"bit-vector not simple-vector"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"complex or single-float"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"cons rational string"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"double-float real unsigned-byte"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"eql satisfies values"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"float short-float vector"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"function signed-byte"})," "]}),(0,n.jsx)("p",{children:(0,n.jsx)(s.strong,{children:"integer simple-array"})}),"|"]}),"\n",(0,n.jsx)(s.p,{children:"| :- |"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Figure 4\u20133. Standardized Compound Type Specifier Names"})}),"\n",(0,n.jsxs)(s.p,{children:["Figure 4\u20134 show the ",(0,n.jsx)(t,{styled:!0,term:"defined name",children:(0,n.jsx)("i",{children:"defined names"})})," that can be used as ",(0,n.jsx)(s.em,{children:"compound type specifier names"})," but that cannot be used as ",(0,n.jsx)(t,{styled:!0,term:"atomic type specifier",children:(0,n.jsx)("i",{children:"atomic type specifiers"})}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["|",(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"and mod satisfies"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"eql not values"})," "]}),(0,n.jsx)("p",{children:(0,n.jsx)(s.strong,{children:"member or"})}),"|"]}),"\n",(0,n.jsx)(s.p,{children:"| :- |"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Figure 4\u20134. Standardized Compound-Only Type Specifier Names"})}),"\n",(0,n.jsxs)(s.p,{children:["New ",(0,n.jsx)(t,{styled:!0,term:"type specifier",children:(0,n.jsx)("i",{children:"type specifiers"})})," can come into existence in two ways."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"\u2022"})," Defining a structure by using ",(0,n.jsx)(r,{term:"defstruct",children:(0,n.jsx)("b",{children:"defstruct"})})," without using the ",":type"," specifier or defining a ",(0,n.jsx)(t,{term:"class",children:(0,n.jsx)("i",{children:"class"})})," by using ",(0,n.jsx)(r,{term:"defclass",children:(0,n.jsx)("b",{children:"defclass"})})," or ",(0,n.jsx)(r,{term:"define-condition",children:(0,n.jsx)("b",{children:"define-condition"})})," automatically causes the name of the structure or class to be a new ",(0,n.jsx)(s.em,{children:"type specifier symbol"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"\u2022"})," ",(0,n.jsx)(r,{term:"deftype",children:(0,n.jsx)("b",{children:"deftype"})})," can be used to define ",(0,n.jsx)(t,{styled:!0,term:"derived type specifier",children:(0,n.jsx)("i",{children:"derived type specifiers"})}),", which act as \u2018abbreviations\u2019 for other ",(0,n.jsx)(t,{styled:!0,term:"type specifier",children:(0,n.jsx)("i",{children:"type specifiers"})}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["A ",(0,n.jsx)(s.em,{children:"class object"})," can be used as a ",(0,n.jsx)(t,{styled:!0,term:"type specifier",children:(0,n.jsx)("i",{children:"type specifier"})})," . When used this way, it denotes the set of all members"]}),"\n",(0,n.jsxs)(s.p,{children:["of that ",(0,n.jsx)(t,{term:"class",children:(0,n.jsx)("i",{children:"class"})}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["Figure 4\u20135 shows some ",(0,n.jsx)(t,{styled:!0,term:"defined name",children:(0,n.jsx)("i",{children:"defined names"})})," relating to ",(0,n.jsx)(t,{term:"type",children:(0,n.jsx)("i",{children:"types"})})," and ",(0,n.jsx)(t,{term:"declaration",children:(0,n.jsx)("i",{children:"declarations"})}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["|",(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"coerce defstruct subtypep"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"declaim deftype the"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"declare ftype type"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"defclass locally type-of"})," "]}),(0,n.jsx)("p",{children:(0,n.jsx)(s.strong,{children:"define-condition proclaim typep"})}),"|"]}),"\n",(0,n.jsx)(s.p,{children:"| :- |"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Figure 4\u20135. Defined names relating to types and declarations."})}),"\n",(0,n.jsxs)(s.p,{children:["Figure 4\u20136 shows all ",(0,n.jsx)(t,{styled:!0,term:"defined name",children:(0,n.jsx)("i",{children:"defined names"})})," that are ",(0,n.jsx)(s.em,{children:"type specifier names"}),", whether for ",(0,n.jsx)(t,{styled:!0,term:"atomic type specifier",children:(0,n.jsx)("i",{children:"atomic type specifiers"})})," or ",(0,n.jsx)(t,{styled:!0,term:"compound type specifier",children:(0,n.jsx)("i",{children:"compound type specifiers"})}),"; this list is the union of the lists in Figure 4\u20132 and Figure 4\u20133."]}),"\n",(0,n.jsxs)(s.p,{children:["|",(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"and function simple-array arithmetic-error generic-function simple-base-string array hash-table simple-bit-vector atom integer simple-condition base-char keyword simple-error base-string list simple-string bignum logical-pathname simple-type-error bit long-float simple-vector bit-vector member simple-warning broadcast-stream method single-float built-in-class method-combination standard-char cell-error mod standard-class character nil standard-generic-function class not standard-method compiled-function null standard-object complex number storage-condition concatenated-stream or stream"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"condition package stream-error cons package-error string"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"control-error parse-error string-stream division-by-zero pathname structure-class double-float print-not-readable structure-object echo-stream program-error style-warning end-of-file random-state symbol"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"eql ratio synonym-stream error rational t"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"extended-char reader-error two-way-stream file-error readtable type-error file-stream real unbound-slot fixnum restart unbound-variable float satisfies undefined-function floating-point-inexact sequence unsigned-byte floating-point-invalid-operation serious-condition values"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(s.strong,{children:"floating-point-overflow short-float vector"})," "]}),(0,n.jsx)("p",{children:(0,n.jsx)(s.strong,{children:"floating-point-underflow signed-byte warning"})}),"|"]}),"\n",(0,n.jsx)(s.p,{children:"| :- |"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Figure 4\u20136. Standardized Type Specifier Names"})})]})}function x(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}function j(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const m={title:"4.2 Types"},y="4.2 Types",f={id:"chap-4/e-c-types",title:"4.2 Types",description:"4.2.1 Data Type Definition",source:"@site/docs/chap-4/e-c-types.md",sourceDirName:"chap-4",slug:"/chap-4/e-c-types",permalink:"/cl-language-reference/chap-4/e-c-types",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/chap-4/e-c-types.md",tags:[],version:"current",lastUpdatedBy:"daninus14",frontMatter:{title:"4.2 Types"},sidebar:"tutorialSidebar",previous:{title:"4.1 Introduction",permalink:"/cl-language-reference/chap-4/e-b-introduction"},next:{title:"4.3 Classes",permalink:"/cl-language-reference/chap-4/e-d-classes"}},u={},b=[{value:"4.2.1 Data Type Definition",id:"421-data-type-definition",level:2},{value:"4.2.2 Type Relationships",id:"422-type-relationships",level:2},{value:"4.2.3 Type Specifiers",id:"423-type-specifiers",level:2}];function g(e){const s={h1:"h1",h2:"h2",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"42-types",children:"4.2 Types"}),"\n","\n",(0,n.jsx)(c,{}),"\n",(0,n.jsx)(s.h2,{id:"421-data-type-definition",children:"4.2.1 Data Type Definition"}),"\n","\n",(0,n.jsx)(d,{}),"\n",(0,n.jsx)(s.h2,{id:"422-type-relationships",children:"4.2.2 Type Relationships"}),"\n","\n",(0,n.jsx)(a,{}),"\n",(0,n.jsx)(s.h2,{id:"423-type-specifiers",children:"4.2.3 Type Specifiers"}),"\n","\n","\n",(0,n.jsx)(x,{})]})}function v(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(g,{...e})}):g(e)}},11151:(e,s,r)=>{r.d(s,{Z:()=>l,a:()=>c});var n=r(67294);const i={},t=n.createContext(i);function c(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);