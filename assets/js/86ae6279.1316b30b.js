"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[82027],{73781:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>o,frontMatter:()=>t,metadata:()=>c,toc:()=>a});var n=r(85893),i=r(11151);const t={title:"G",sidebar_position:103},l=void 0,c={id:"chap-26/cg-b-glossary/g",title:"G",description:"G",source:"@site/docs/chap-26/cg-b-glossary/g.md",sourceDirName:"chap-26/cg-b-glossary",slug:"/chap-26/cg-b-glossary/g",permalink:"/cl-language-reference/docs/chap-26/cg-b-glossary/g",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-26/cg-b-glossary/g.md",tags:[],version:"current",sidebarPosition:103,frontMatter:{title:"G",sidebar_position:103},sidebar:"tutorialSidebar",previous:{title:"F",permalink:"/cl-language-reference/docs/chap-26/cg-b-glossary/f"},next:{title:"H",permalink:"/cl-language-reference/docs/chap-26/cg-b-glossary/h"}},d={},a=[];function h(e){const s={em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components},{ClLinks:r}=s;return r||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"G"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"general"})," ",(0,n.jsx)(s.em,{children:"adj."})," (of an ",(0,n.jsx)(r,{styled:!0,term:"array",children:(0,n.jsx)("i",{children:"array"})}),") having ",(0,n.jsx)(s.em,{children:"element type"})," ",(0,n.jsx)(r,{styled:!0,term:"t",children:(0,n.jsx)("b",{children:"t"})}),", and consequently able to have any ",(0,n.jsx)(r,{styled:!0,term:"object",children:(0,n.jsx)("i",{children:"object"})})," as an ",(0,n.jsx)(r,{styled:!0,term:"element",children:(0,n.jsx)("i",{children:"element"})}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"generalized boolean"})," ",(0,n.jsx)(s.em,{children:"n."})," an ",(0,n.jsx)(r,{styled:!0,term:"object",children:(0,n.jsx)("i",{children:"object"})})," used as a truth value, where the symbol ",(0,n.jsx)(r,{styled:!0,term:"nil",children:(0,n.jsx)("b",{children:"nil"})})]}),"\n",(0,n.jsxs)(s.p,{children:["represents ",(0,n.jsx)(r,{styled:!0,term:"false",children:(0,n.jsx)("i",{children:"false"})})," and all other ",(0,n.jsx)(r,{styled:!0,term:"object",children:(0,n.jsx)("i",{children:"objects"})})," represent ",(0,n.jsx)(r,{styled:!0,term:"true",children:(0,n.jsx)("i",{children:"true"})}),". See ",(0,n.jsx)(r,{styled:!0,term:"boolean",children:(0,n.jsx)("i",{children:"boolean"})}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"generalized instance"})," ",(0,n.jsx)(s.em,{children:"n."})," (of a ",(0,n.jsx)(r,{styled:!0,term:"class",children:(0,n.jsx)("i",{children:"class"})}),") an ",(0,n.jsx)(r,{styled:!0,term:"object",children:(0,n.jsx)("i",{children:"object"})})," the ",(0,n.jsx)(r,{styled:!0,term:"class",children:(0,n.jsx)("i",{children:"class"})})," of which is either that ",(0,n.jsx)(r,{styled:!0,term:"class",children:(0,n.jsx)("i",{children:"class"})})," itself, or some subclass of that ",(0,n.jsx)(r,{styled:!0,term:"class",children:(0,n.jsx)("i",{children:"class"})}),". (Because of the correspondence between types and classes, the term \u201cgeneralized instance of ",(0,n.jsx)(s.em,{children:"X"}),"\u201d implies \u201cobject of type ",(0,n.jsx)(s.em,{children:"X"}),"\u201d and in cases where ",(0,n.jsx)(s.em,{children:"X"})," is a ",(0,n.jsx)(r,{styled:!0,term:"class",children:(0,n.jsx)("i",{children:"class"})})," (or ",(0,n.jsx)(s.em,{children:"class name"}),") the reverse is also true. The former terminology emphasizes the view of ",(0,n.jsx)(s.em,{children:"X"})," as a ",(0,n.jsx)(r,{styled:!0,term:"class",children:(0,n.jsx)("i",{children:"class"})})," while the latter emphasizes the view of ",(0,n.jsx)(s.em,{children:"X"})," as a ",(0,n.jsx)(s.em,{children:"type specifier"})," .)"]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"generalized reference"})," ",(0,n.jsx)(s.em,{children:"n."})," a reference to a location storing an ",(0,n.jsx)(r,{styled:!0,term:"object",children:(0,n.jsx)("i",{children:"object"})})," as if to a"]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(r,{styled:!0,term:"variable",children:(0,n.jsx)("i",{children:"variable"})}),". (Such a reference can be either to ",(0,n.jsx)(r,{styled:!0,term:"read",children:(0,n.jsx)("i",{children:"read"})})," or ",(0,n.jsx)(r,{styled:!0,term:"write",children:(0,n.jsx)("i",{children:"write"})})," the location.) See Section 5.1 (Generalized Reference). See also ",(0,n.jsx)(r,{styled:!0,term:"place",children:(0,n.jsx)("i",{children:"place"})}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"generalized synonym stream"})," ",(0,n.jsx)(s.em,{children:"n."})," (with a ",(0,n.jsx)(s.em,{children:"synonym stream symbol"}),") 1. (to a ",(0,n.jsx)(r,{styled:!0,term:"stream",children:(0,n.jsx)("i",{children:"stream"})}),") a ",(0,n.jsx)(s.em,{children:"synonym stream"})," to the ",(0,n.jsx)(r,{styled:!0,term:"stream",children:(0,n.jsx)("i",{children:"stream"})}),", or a ",(0,n.jsx)(s.em,{children:"composite stream"})," which has as a target a"]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"generalized synonym stream"})," to the ",(0,n.jsx)(r,{styled:!0,term:"stream",children:(0,n.jsx)("i",{children:"stream"})}),". 2. (to a ",(0,n.jsx)(r,{styled:!0,term:"symbol",children:(0,n.jsx)("i",{children:"symbol"})}),") a ",(0,n.jsx)(s.em,{children:"synonym stream"})," to the ",(0,n.jsx)(r,{styled:!0,term:"symbol",children:(0,n.jsx)("i",{children:"symbol"})}),", or a ",(0,n.jsx)(s.em,{children:"composite stream"})," which has as a target a ",(0,n.jsx)(s.em,{children:"generalized synonym stream"})," to the ",(0,n.jsx)(r,{styled:!0,term:"symbol",children:(0,n.jsx)("i",{children:"symbol"})}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"generic function"})," ",(0,n.jsx)(s.em,{children:"n."})," a ",(0,n.jsx)(r,{styled:!0,term:"function",children:(0,n.jsx)("i",{children:"function"})})," whose behavior depends on the ",(0,n.jsx)(s.em,{children:"classes"})," or identities of the arguments supplied to it and whose parts include, among other things, a set of ",(0,n.jsx)(r,{styled:!0,term:"method",children:(0,n.jsx)("i",{children:"methods"})}),", a ",(0,n.jsx)(s.em,{children:"lambda list"}),", and a ",(0,n.jsx)(s.em,{children:"method combination"})," type."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"generic function lambda list"})," ",(0,n.jsx)(s.em,{children:"n."})," A ",(0,n.jsx)(s.em,{children:"lambda list"})," that is used to describe data flow into a ",(0,n.jsx)(s.em,{children:"generic function"}),". See Section 3.4.2 (Generic Function Lambda Lists)."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(r,{styled:!0,term:"gensym",children:(0,n.jsx)("b",{children:"gensym"})})," ",(0,n.jsx)(s.em,{children:"n. Trad."})," an ",(0,n.jsx)(s.em,{children:"uninterned symbol"}),". See the ",(0,n.jsx)(r,{styled:!0,term:"function",children:(0,n.jsx)("i",{children:"function"})})," ",(0,n.jsx)(r,{styled:!0,term:"gensym",children:(0,n.jsx)("b",{children:"gensym"})}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"global declaration"})," ",(0,n.jsx)(s.em,{children:"n."})," a ",(0,n.jsx)(r,{styled:!0,term:"form",children:(0,n.jsx)("i",{children:"form"})})," that makes certain kinds of information about code globally available; that is, a ",(0,n.jsx)(r,{styled:!0,term:"proclaim",children:(0,n.jsx)("b",{children:"proclaim"})})," ",(0,n.jsx)(r,{styled:!0,term:"form",children:(0,n.jsx)("i",{children:"form"})})," or a ",(0,n.jsx)(r,{styled:!0,term:"declaim",children:(0,n.jsx)("b",{children:"declaim"})})," ",(0,n.jsx)(r,{styled:!0,term:"form",children:(0,n.jsx)("i",{children:"form"})}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"global environment"})," ",(0,n.jsx)(s.em,{children:"n."})," that part of an ",(0,n.jsx)(r,{styled:!0,term:"environment",children:(0,n.jsx)("i",{children:"environment"})})," that contains ",(0,n.jsx)(r,{styled:!0,term:"binding",children:(0,n.jsx)("i",{children:"bindings"})})," with ",(0,n.jsx)(s.em,{children:"indefinite scope"})," and ",(0,n.jsx)(s.em,{children:"indefinite extent"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"global variable"})," ",(0,n.jsx)(s.em,{children:"n."})," a ",(0,n.jsx)(s.em,{children:"dynamic variable"})," or a ",(0,n.jsx)(s.em,{children:"constant variable"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"glyph"})," ",(0,n.jsx)(s.em,{children:"n."})," a visual representation. \u201cGraphic characters have associated glyphs.\u201d"]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(r,{styled:!0,term:"go",children:(0,n.jsx)("b",{children:"go"})})," ",(0,n.jsx)(s.em,{children:"v."})," to transfer control to a ",(0,n.jsx)(s.em,{children:"go point"}),". See the ",(0,n.jsx)(s.em,{children:"special operator"})," ",(0,n.jsx)(r,{styled:!0,term:"go",children:(0,n.jsx)("b",{children:"go"})}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"go point"})," one of possibly several ",(0,n.jsx)(s.em,{children:"exit points"})," that are ",(0,n.jsx)(s.em,{children:"established"})," by ",(0,n.jsx)(r,{styled:!0,term:"tagbody",children:(0,n.jsx)("b",{children:"tagbody"})})," (or other abstractions, such as ",(0,n.jsx)(s.strong,{children:"prog"}),", which are built from ",(0,n.jsx)(r,{styled:!0,term:"tagbody",children:(0,n.jsx)("b",{children:"tagbody"})}),")."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"go tag"})," ",(0,n.jsx)(s.em,{children:"n."})," the ",(0,n.jsx)(r,{styled:!0,term:"symbol",children:(0,n.jsx)("i",{children:"symbol"})})," or ",(0,n.jsx)(s.em,{children:"integer"})," that, within the ",(0,n.jsx)(s.em,{children:"lexical scope"})," of a ",(0,n.jsx)(r,{styled:!0,term:"tagbody",children:(0,n.jsx)("b",{children:"tagbody"})})," ",(0,n.jsx)(r,{styled:!0,term:"form",children:(0,n.jsx)("i",{children:"form"})}),", names an ",(0,n.jsx)(s.em,{children:"exit point established"})," by that ",(0,n.jsx)(r,{styled:!0,term:"tagbody",children:(0,n.jsx)("b",{children:"tagbody"})})," ",(0,n.jsx)(r,{styled:!0,term:"form",children:(0,n.jsx)("i",{children:"form"})}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"graphic"})," ",(0,n.jsx)(s.em,{children:"adj."})," (of a ",(0,n.jsx)(r,{styled:!0,term:"character",children:(0,n.jsx)("i",{children:"character"})})," ) being a \u201cprinting\u201d or \u201cdisplayable\u201d ",(0,n.jsx)(r,{styled:!0,term:"character",children:(0,n.jsx)("i",{children:"character"})})," that has a standard visual representation as a single ",(0,n.jsx)(r,{styled:!0,term:"glyph",children:(0,n.jsx)("i",{children:"glyph"})}),", such as A or * or =. ",(0,n.jsx)(r,{styled:!0,term:"space",children:(0,n.jsx)("i",{children:"Space"})})," is defined to be ",(0,n.jsx)(r,{styled:!0,term:"graphic",children:(0,n.jsx)("i",{children:"graphic"})}),". Of the ",(0,n.jsx)(s.em,{children:"standard characters"}),", all but ",(0,n.jsx)(r,{styled:!0,term:"newline",children:(0,n.jsx)("i",{children:"newline"})})," are ",(0,n.jsx)(r,{styled:!0,term:"graphic",children:(0,n.jsx)("i",{children:"graphic"})}),". See ",(0,n.jsx)(r,{styled:!0,term:"non-graphic",children:(0,n.jsx)("i",{children:"non-graphic"})}),"."]})]})}function o(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},11151:(e,s,r)=>{r.d(s,{Z:()=>c,a:()=>l});var n=r(67294);const i={},t=n.createContext(i);function l(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);