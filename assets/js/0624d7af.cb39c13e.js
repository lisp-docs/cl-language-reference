"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[11927],{32138:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>a,toc:()=>h});var r=i(85893),t=i(11151);function o(n){const e={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"signal"})," ",(0,r.jsx)(e.em,{children:"Function"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"signal"})," ",(0,r.jsx)(e.em,{children:"datum"})," &rest ",(0,r.jsx)(e.em,{children:"arguments \u2192"})," ",(0,r.jsx)(e.strong,{children:"nil"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.em,{children:"datum"}),", ",(0,r.jsx)(e.em,{children:"arguments"}),"\u2014",(0,r.jsx)(e.em,{children:"designators"})," for a ",(0,r.jsx)(e.em,{children:"condition"})," of default type ",(0,r.jsx)(e.strong,{children:"simple-condition"}),"."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.em,{children:"Signals"})," the ",(0,r.jsx)(e.em,{children:"condition"})," denoted by the given ",(0,r.jsx)(e.em,{children:"datum"})," and ",(0,r.jsx)(e.em,{children:"arguments"}),". If the ",(0,r.jsx)(e.em,{children:"condition"})," is not handled, ",(0,r.jsx)(e.strong,{children:"signal"})," returns ",(0,r.jsx)(e.strong,{children:"nil"}),"."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lisp",children:'\n(defun handle-division-conditions (condition) \n  (format t "Considering condition for division condition handling~%") \n  (when (and (typep condition \u2019arithmetic-error) \n\t     (eq \u2019/ (arithmetic-error-operation condition))) \n    (invoke-debugger condition))) \nHANDLE-DIVISION-CONDITIONS \n(defun handle-other-arithmetic-errors (condition) \n  (format t "Considering condition for arithmetic condition handling~%") \n  (when (typep condition \u2019arithmetic-error) \n    (abort))) \nHANDLE-OTHER-ARITHMETIC-ERRORS \n(define-condition a-condition-with-no-handler (condition) ()) \nA-CONDITION-WITH-NO-HANDLER \n(signal \u2019a-condition-with-no-handler) \nNIL \n(handler-bind ((condition #\u2019handle-division-conditions) \n\t       (condition #\u2019handle-other-arithmetic-errors)) \n  (signal \u2019a-condition-with-no-handler)) \nConsidering condition for division condition handling \nConsidering condition for arithmetic condition handling \nNIL \n(handler-bind ((arithmetic-error #\u2019handle-division-conditions) \n\t       (arithmetic-error #\u2019handle-other-arithmetic-errors)) \n  (signal \u2019arithmetic-error :operation \u2019\\* :operands \u2019(1.2 b))) \nConsidering condition for division condition handling \nConsidering condition for arithmetic condition handling \nBack to Lisp Toplevel \n\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Side Effects:"})}),"\n",(0,r.jsxs)(e.p,{children:["The debugger might be entered due to ",(0,r.jsx)(e.strong,{children:"*break-on-signals*"}),"."]}),"\n",(0,r.jsx)(e.p,{children:"Handlers for the condition being signaled might transfer control."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Affected By:"})}),"\n",(0,r.jsx)(e.p,{children:"Existing handler bindings."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"*break-on-signals*"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"*break-on-signals*"}),", ",(0,r.jsx)(e.strong,{children:"error"}),", ",(0,r.jsx)(e.strong,{children:"simple-condition"}),", Section 9.1.4 (Signaling and Handling Conditions)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(e.p,{children:["If (typep ",(0,r.jsx)(e.em,{children:"datum"})," *break-on-signals*) ",(0,r.jsx)(e.em,{children:"yields true"}),", the debugger is entered prior to beginning the signaling process. The ",(0,r.jsx)(e.strong,{children:"continue"})," ",(0,r.jsx)(e.em,{children:"restart"})," can be used to continue with the signaling process. This is also true for all other ",(0,r.jsx)(e.em,{children:"functions"})," and ",(0,r.jsx)(e.em,{children:"macros"})," that should, might, or must ",(0,r.jsx)(e.em,{children:"signal conditions"}),"."]})]})}function s(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(o,{...n})}):o(n)}const c={title:"signal"},d="signal",a={id:"chap-9/j-c-dictionary/signal_function",title:"signal",description:"Expanded Reference: signal",source:"@site/docs/chap-9/j-c-dictionary/signal_function.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/signal_function",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/signal_function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/signal_function.md",tags:[],version:"current",frontMatter:{title:"signal"},sidebar:"tutorialSidebar",previous:{title:"serious-condition",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/serious-condition_condition-type"},next:{title:"simple-condition",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/simple-condition_condition-type"}},l={},h=[{value:"Expanded Reference: signal",id:"expanded-reference-signal",level:2}];function g(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"signal",children:"signal"}),"\n","\n","\n",(0,r.jsx)(s,{}),"\n",(0,r.jsx)(e.h2,{id:"expanded-reference-signal",children:"Expanded Reference: signal"}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsx)(e.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lisp",children:"(signal )\n"})})]})}function p(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(g,{...n})}):g(n)}},11151:(n,e,i)=>{i.d(e,{Z:()=>c,a:()=>s});var r=i(67294);const t={},o=r.createContext(t);function s(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);