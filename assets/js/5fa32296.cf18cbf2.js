"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[948],{79311:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=s(85893),t=s(11151);function r(e){const n={em:"em",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"signed-byte"})," ",(0,i.jsx)(n.em,{children:"Type"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Supertypes:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"signed-byte"}),", ",(0,i.jsx)(n.strong,{children:"integer"}),", ",(0,i.jsx)(n.strong,{children:"rational"}),", ",(0,i.jsx)(n.strong,{children:"real"}),", ",(0,i.jsx)(n.strong,{children:"number"}),", ",(0,i.jsx)(n.strong,{children:"t"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["The atomic ",(0,i.jsx)(n.em,{children:"type specifier"})," ",(0,i.jsx)(n.strong,{children:"signed-byte"})," denotes the same type as is denoted by the ",(0,i.jsx)(n.em,{children:"type specifier"})," ",(0,i.jsx)(n.strong,{children:"integer"}),"; however, the list forms of these two ",(0,i.jsx)(n.em,{children:"type specifiers"})," have different semantics."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,i.jsx)(n.p,{children:"Abbreviating."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:["(signed-byte [",(0,i.jsx)(n.em,{children:"s |"})," ",(0,i.jsx)(n.strong,{children:"*"}),"])"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"s"}),"\u2014a positive ",(0,i.jsx)(n.em,{children:"integer"})," ."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["This denotes the set of ",(0,i.jsx)("i",{children:"integers"})," that can be represented in two\u2019s-complement form in a ",(0,i.jsx)("i",{children:"byte"})," of ",(0,i.jsx)("i",{children:"s"})," bits. This is equivalent to (integer ",(0,i.jsx)("i",{children:"\u2212"}),"2",(0,i.jsxs)("sup",{children:[(0,i.jsx)("i",{children:"s\u2212"}),"1"]})," 2",(0,i.jsxs)("sup",{children:[(0,i.jsx)("i",{children:"s\u2212"}),"1"]})," ",(0,i.jsx)("i",{children:"\u2212"})," 1). The type ",(0,i.jsx)(n.strong,{children:"signed-byte"})," or the type (signed-byte *) is the same as the ",(0,i.jsx)("i",{children:"type"})," ",(0,i.jsx)(n.strong,{children:"integer"}),"."]})]})}function c(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}const o={},d="signed-byte",l={id:"chap-12/bc-c-dictionary/signedbyte",title:"signed-byte",description:"Expanded Reference: signed-byte",source:"@site/docs/chap-12/bc-c-dictionary/signedbyte.md",sourceDirName:"chap-12/bc-c-dictionary",slug:"/chap-12/bc-c-dictionary/signedbyte",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/signedbyte",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-12/bc-c-dictionary/signedbyte.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"short-float-epsilon, short-float-negative-epsilon, single-float-epsilon, single-float-negative-epsilon, double-float-epsilon, double-float-negative-epsilon, long-float-epsilon, long-float-negative-epsilon",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/shortfloatepsilon"},next:{title:"signum",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/signum"}},a={},p=[{value:"Expanded Reference: signed-byte",id:"expanded-reference-signed-byte",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"signed-byte",children:"signed-byte"}),"\n","\n","\n",(0,i.jsx)(c,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-signed-byte",children:"Expanded Reference: signed-byte"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(signed-byte )\n"})})]})}function g(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>c});var i=s(67294);const t={},r=i.createContext(t);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);