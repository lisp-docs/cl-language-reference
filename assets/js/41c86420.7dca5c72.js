"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[48457],{29994:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>x,frontMatter:()=>d,metadata:()=>l,toc:()=>h});var s=r(85893),i=r(11151);function t(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"parse-integer"})," ",(0,s.jsx)(n.em,{children:"Function"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"parse-integer"})," ",(0,s.jsx)(n.em,{children:"string"})," &key ",(0,s.jsx)(n.em,{children:"start end radix junk-allowed \u2192 integer, pos"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"string"}),"\u2014a ",(0,s.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"start"}),", ",(0,s.jsx)(n.em,{children:"end"}),"\u2014",(0,s.jsx)(n.em,{children:"bounding index designators"})," of ",(0,s.jsx)(n.em,{children:"string"}),". The defaults for ",(0,s.jsx)(n.em,{children:"start"})," and ",(0,s.jsx)(n.em,{children:"end"})," are 0 and ",(0,s.jsx)(n.strong,{children:"nil"}),", respectively."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"radix"}),"\u2014a ",(0,s.jsx)(n.em,{children:"radix"})," . The default is 10."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"junk-allowed"}),"\u2014a ",(0,s.jsx)(n.em,{children:"generalized boolean"}),". The default is ",(0,s.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"integer"}),"\u2014an ",(0,s.jsx)(n.em,{children:"integer"})," or ",(0,s.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"pos"}),"\u2014a ",(0,s.jsx)(n.em,{children:"bounding index"})," of ",(0,s.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"parse-integer"})," parses an ",(0,s.jsx)(n.em,{children:"integer"})," in the specified ",(0,s.jsx)(n.em,{children:"radix"})," from the substring of ",(0,s.jsx)(n.em,{children:"string"})," delimited by ",(0,s.jsx)(n.em,{children:"start"})," and ",(0,s.jsx)(n.em,{children:"end"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"parse-integer"})," expects an optional sign (+ or -) followed by a a non-empty sequence of digits to be interpreted in the specified ",(0,s.jsx)(n.em,{children:"radix"}),". Optional leading and trailing ",(0,s.jsx)(n.em,{children:"whitespace"}),(0,s.jsx)("sub",{children:"1"})," is ignored."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"parse-integer"})," does not recognize the syntactic radix-specifier prefixes #O, #B, #X, and #",(0,s.jsx)(n.em,{children:"n"}),"R, nor does it recognize a trailing decimal point."]}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.em,{children:"junk-allowed"})," is ",(0,s.jsx)(n.em,{children:"false"}),", an error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"parse-error"})," is signaled if substring does not consist entirely of the representation of a signed ",(0,s.jsx)(n.em,{children:"integer"})," , possibly surrounded on either side by ",(0,s.jsx)(n.em,{children:"whitespace"}),(0,s.jsx)("sub",{children:"1"})," ",(0,s.jsx)(n.em,{children:"characters"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The first ",(0,s.jsx)(n.em,{children:"value"})," returned is either the ",(0,s.jsx)(n.em,{children:"integer"})," that was parsed, or else ",(0,s.jsx)(n.strong,{children:"nil"})," if no syntactically correct ",(0,s.jsx)(n.em,{children:"integer"})," was seen but ",(0,s.jsx)(n.em,{children:"junk-allowed"})," was ",(0,s.jsx)(n.em,{children:"true"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The second ",(0,s.jsx)(n.em,{children:"value"})," is either the index into the ",(0,s.jsx)(n.em,{children:"string"})," of the delimiter that terminated the parse, or the upper ",(0,s.jsx)(n.em,{children:"bounding index"})," of the substring if the parse terminated at the end of the substring (as is always the case if ",(0,s.jsx)(n.em,{children:"junk-allowed"})," is ",(0,s.jsx)(n.em,{children:"false"}),")."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:'\n(parse-integer "123") \u2192 123, 3 \n(parse-integer "123" :start 1 :radix 5) \u2192 13, 3 \n(parse-integer "no-integer" :junk-allowed t) \u2192 NIL, 0 \n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.em,{children:"junk-allowed"})," is ",(0,s.jsx)(n.em,{children:"false"}),", an error is signaled if substring does not consist entirely of the representation of an ",(0,s.jsx)(n.em,{children:"integer"})," , possibly surrounded on either side by ",(0,s.jsx)(n.em,{children:"whitespace"}),(0,s.jsx)("sub",{children:"1"})," characters."]})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}const d={},a="parse-integer",l={id:"chap-12/bc-c-dictionary/parseinteger",title:"parse-integer",description:"Expanded Reference: parse-integer",source:"@site/docs/chap-12/bc-c-dictionary/parseinteger.md",sourceDirName:"chap-12/bc-c-dictionary",slug:"/chap-12/bc-c-dictionary/parseinteger",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/parseinteger",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-12/bc-c-dictionary/parseinteger.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"numerator, denominator",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/numerator"},next:{title:"phase",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/phase"}},o={},h=[{value:"Expanded Reference: parse-integer",id:"expanded-reference-parse-integer",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"parse-integer",children:"parse-integer"}),"\n","\n","\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-parse-integer",children:"Expanded Reference: parse-integer"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(parse-integer )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>c});var s=r(67294);const i={},t=s.createContext(i);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);