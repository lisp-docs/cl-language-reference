"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[53802],{68211:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>d,metadata:()=>o,toc:()=>h});var i=t(85893),r=t(11151);function c(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"defun"})," ",(0,i.jsx)(n.em,{children:"Macro"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"defun"})," ",(0,i.jsx)(n.em,{children:"function-name lambda-list"})," [[ ",(0,i.jsx)(n.em,{children:"{declaration}"}),"* ",(0,i.jsx)(n.em,{children:"| documentation"})," ]] ",(0,i.jsx)(n.em,{children:"{form}"}),"*"]}),"\n",(0,i.jsx)(n.p,{children:"\u2192 function-name"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"function-name"}),"\u2014a ",(0,i.jsx)(n.em,{children:"function name"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"lambda-list"}),"\u2014an ",(0,i.jsx)(n.em,{children:"ordinary lambda list"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,i.jsx)(n.strong,{children:"declare"})," ",(0,i.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"documentation"}),"\u2014a ",(0,i.jsx)(n.em,{children:"string"}),"; not evaluated."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"forms"}),"\u2014an ",(0,i.jsx)(n.em,{children:"implicit progn"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"block-name"}),"\u2014the ",(0,i.jsx)(n.em,{children:"function block name"})," of the ",(0,i.jsx)(n.em,{children:"function-name"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["Defines a new ",(0,i.jsx)(n.em,{children:"function"})," named ",(0,i.jsx)(n.em,{children:"function-name"})," in the ",(0,i.jsx)(n.em,{children:"global environment"}),". The body of the ",(0,i.jsx)(n.em,{children:"function"})," defined by ",(0,i.jsx)(n.strong,{children:"defun"})," consists of ",(0,i.jsx)(n.em,{children:"forms"}),"; they are executed as an ",(0,i.jsx)(n.em,{children:"implicit progn"})," when the ",(0,i.jsx)(n.em,{children:"function"})," is called. ",(0,i.jsx)(n.strong,{children:"defun"})," can be used to define a new ",(0,i.jsx)(n.em,{children:"function"}),", to install a corrected version of an incorrect definition, to redefine an already-defined ",(0,i.jsx)(n.em,{children:"function"}),", or to redefine a ",(0,i.jsx)(n.em,{children:"macro"})," as a ",(0,i.jsx)(n.em,{children:"function"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"defun"})," implicitly puts a ",(0,i.jsx)(n.strong,{children:"block"})," named ",(0,i.jsx)(n.em,{children:"block-name"})," around the body ",(0,i.jsx)(n.em,{children:"forms"})," (but not the ",(0,i.jsx)(n.em,{children:"forms"})," in the ",(0,i.jsx)(n.em,{children:"lambda-list"}),") of the ",(0,i.jsx)(n.em,{children:"function"})," defined."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Documentation"})," is attached as a ",(0,i.jsx)(n.em,{children:"documentation string"})," to ",(0,i.jsx)(n.em,{children:"name"})," (as kind ",(0,i.jsx)(n.strong,{children:"function"}),") and to the ",(0,i.jsx)(n.em,{children:"function object"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Evaluating ",(0,i.jsx)(n.strong,{children:"defun"})," causes ",(0,i.jsx)(n.em,{children:"function-name"})," to be a global name for the ",(0,i.jsx)(n.em,{children:"function"})," specified by the ",(0,i.jsx)(n.em,{children:"lambda expression"})]}),"\n",(0,i.jsxs)(n.p,{children:["(lambda ",(0,i.jsx)(n.em,{children:"lambda-list"})]}),"\n",(0,i.jsxs)(n.p,{children:["[[ ",(0,i.jsx)(n.em,{children:"{declaration}"}),"* ",(0,i.jsx)(n.em,{children:"| documentation"})," ]]"]}),"\n",(0,i.jsxs)(n.p,{children:["(block ",(0,i.jsx)(n.em,{children:"block-name {form}"}),"*))"]}),"\n",(0,i.jsxs)(n.p,{children:["processed in the ",(0,i.jsx)(n.em,{children:"lexical environment"})," in which ",(0,i.jsx)(n.strong,{children:"defun"})," was executed."]}),"\n",(0,i.jsx)(n.p,{children:"Data and Control"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"defun"})}),"\n",(0,i.jsx)(n.p,{children:"(None of the arguments are evaluated at macro expansion time.)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"defun"})," is not required to perform any compile-time side effects. In particular, ",(0,i.jsx)(n.strong,{children:"defun"})," does not make the ",(0,i.jsx)(n.em,{children:"function"})," definition available at compile time. An ",(0,i.jsx)(n.em,{children:"implementation"})," may choose to store information about the ",(0,i.jsx)(n.em,{children:"function"})," for the purposes of compile-time error-checking (such as checking the number of arguments on calls), or to enable the ",(0,i.jsx)(n.em,{children:"function"})," to be expanded inline."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:'\n(defun recur (x) \n  (when (> x 0) \n    (recur (1- x)))) \u2192 RECUR \n(defun ex (a b &amp;optional c (d 66) &amp;rest keys &amp;key test (start 0)) \n\t   (list a b c d keys test start)) \u2192 EX \n\t   (ex 1 2) \u2192 (1 2 NIL 66 NIL NIL 0) \n\t   (ex 1 2 3 4 :test \u2019equal :start 50) \n\t   \u2192 (1 2 3 4 (:TEST EQUAL :START 50) EQUAL 50) \n\t   (ex :test 1 :start 2) \u2192 (:TEST 1 :START 2 NIL NIL 0) \n\t   ;; This function assumes its callers have checked the types of the \n\t   ;; arguments, and authorizes the compiler to build in that assumption. \n\t   (defun discriminant (a b c) \n\t     (declare (number a b c)) \n\t     "Compute the discriminant for a quadratic equation." \n\t     (- (\\* b b) (\\* 4 a c))) \u2192 DISCRIMINANT \n\t   (discriminant 1 2/3 -2) \u2192 76/9 \n\t   ;; This function assumes its callers have not checked the types of the \n\t   ;; arguments, and performs explicit type checks before making any assumptions. (defun careful-discriminant (a b c) \n\t   "Compute the discriminant for a quadratic equation." \n\t   (check-type a number) \n\t   (check-type b number) \n\t   (check-type c number) \n\t   (locally (declare (number a b c)) \n\t     (- (\\* b b) (\\* 4 a c)))) \u2192 CAREFUL-DISCRIMINANT \n(careful-discriminant 1 2/3 -2) \u2192 76/9 \n\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"flet"}),", ",(0,i.jsx)(n.strong,{children:"labels"}),", ",(0,i.jsx)(n.strong,{children:"block"}),", ",(0,i.jsx)(n.strong,{children:"return-from"}),", ",(0,i.jsx)(n.strong,{children:"declare"}),", ",(0,i.jsx)(n.strong,{children:"documentation"}),", Section 3.1 (Evaluation), Section 3.4.1 (Ordinary Lambda Lists), Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"return-from"})," can be used to return prematurely from a ",(0,i.jsx)(n.em,{children:"function"})," defined by ",(0,i.jsx)(n.strong,{children:"defun"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Additional side effects might take place when additional information (typically debugging information) about the function definition is recorded."})]})}function s(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}const d={},a="defun",o={id:"chap-5/f-d-dictionary/defun_macro",title:"defun",description:"Expanded Reference: defun",source:"@site/docs/chap-5/f-d-dictionary/defun_macro.md",sourceDirName:"chap-5/f-d-dictionary",slug:"/chap-5/f-d-dictionary/defun_macro",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/defun_macro",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-5/f-d-dictionary/defun_macro.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"defsetf",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/defsetf"},next:{title:"destructuring-bind",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/destructuring-bind_macro"}},l={},h=[{value:"Expanded Reference: defun",id:"expanded-reference-defun",level:2}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"defun",children:"defun"}),"\n","\n","\n",(0,i.jsx)(s,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-defun",children:"Expanded Reference: defun"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(defun )\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>s});var i=t(67294);const r={},c=i.createContext(r);function s(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);