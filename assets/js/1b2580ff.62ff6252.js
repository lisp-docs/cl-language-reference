"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[25320],{74019:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>t,metadata:()=>h,toc:()=>o});var i=s(85893),r=s(11151);const t={title:"C",sidebar_position:99},c=void 0,h={id:"chap-26/cg-b-glossary/c",title:"C",description:"C",source:"@site/docs/chap-26/cg-b-glossary/c.md",sourceDirName:"chap-26/cg-b-glossary",slug:"/chap-26/cg-b-glossary/c",permalink:"/cl-language-reference/docs/chap-26/cg-b-glossary/c",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-26/cg-b-glossary/c.md",tags:[],version:"current",sidebarPosition:99,frontMatter:{title:"C",sidebar_position:99},sidebar:"tutorialSidebar",previous:{title:"B",permalink:"/cl-language-reference/docs/chap-26/cg-b-glossary/b"},next:{title:"D",permalink:"/cl-language-reference/docs/chap-26/cg-b-glossary/d"}},l={},o=[];function d(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"C"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"cadr"})," [ ",(0,i.jsx)(n.strong,{children:"ka d"}),"* ",(0,i.jsx)(n.strong,{children:"r"})," ], ",(0,i.jsx)(n.em,{children:"n."})," (of an ",(0,i.jsx)(n.em,{children:"object"}),") the ",(0,i.jsx)(n.em,{children:"car"})," of the ",(0,i.jsx)(n.em,{children:"cdr"})," of that ",(0,i.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"call"})," ",(0,i.jsx)(n.em,{children:"v.t."}),", ",(0,i.jsx)(n.em,{children:"n."})," 1. ",(0,i.jsx)(n.em,{children:"v.t."})," (a ",(0,i.jsx)(n.em,{children:"function"})," with ",(0,i.jsx)(n.em,{children:"arguments"}),") to cause the ",(0,i.jsx)(n.em,{children:"code"})," represented by that ",(0,i.jsx)(n.em,{children:"function"})," to be ",(0,i.jsx)(n.em,{children:"executed"})," in an ",(0,i.jsx)(n.em,{children:"environment"})," where ",(0,i.jsx)(n.em,{children:"bindings"})," for the ",(0,i.jsx)(n.em,{children:"values"})," of its ",(0,i.jsx)(n.em,{children:"parameters"})," have been ",(0,i.jsx)(n.em,{children:"established"})," based on the ",(0,i.jsx)(n.em,{children:"arguments"}),". \u201cCalling the function ",(0,i.jsx)(n.strong,{children:"+"})," with the arguments 5 and 1 yields a value of 6.\u201d 2. ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"situation"})," in which a ",(0,i.jsx)(n.em,{children:"function"})," is called."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"captured initialization form"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"initialization form"})," along with the ",(0,i.jsx)(n.em,{children:"lexical"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"environment"})," in which the ",(0,i.jsx)(n.em,{children:"form"})," that defined the ",(0,i.jsx)(n.em,{children:"initialization form"})," was ",(0,i.jsx)(n.em,{children:"evaluated"}),". \u201cEach newly added shared slot is set to the result of evaluating the captured"]}),"\n",(0,i.jsxs)(n.p,{children:["initialization form for the slot that was specified in the ",(0,i.jsx)(n.strong,{children:"defclass"})," form for the new class.\u201d"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"car"})," ",(0,i.jsx)(n.em,{children:"n."})," 1. a. (of a ",(0,i.jsx)(n.em,{children:"cons"}),") the component of a ",(0,i.jsx)(n.em,{children:"cons"})," corresponding to the first ",(0,i.jsx)(n.em,{children:"argument"})," to ",(0,i.jsx)(n.strong,{children:"cons"}),"; the other component is the ",(0,i.jsx)(n.em,{children:"cdr"})," . \u201cThe function ",(0,i.jsx)(n.strong,{children:"rplaca"})," modifies the car of a cons.\u201d b. (of a ",(0,i.jsx)(n.em,{children:"list"}),") the first ",(0,i.jsx)(n.em,{children:"element"})," of the ",(0,i.jsx)(n.em,{children:"list"}),", or ",(0,i.jsx)(n.strong,{children:"nil"})," if the ",(0,i.jsx)(n.em,{children:"list"})," is the ",(0,i.jsx)(n.em,{children:"empty list"}),". 2. the ",(0,i.jsx)(n.em,{children:"object"})," that is held in the ",(0,i.jsx)(n.em,{children:"car"})," ",(0,i.jsx)("sub",{children:"1"}),". \u201cThe function ",(0,i.jsx)(n.strong,{children:"car"})," returns the car of a cons.\u201d"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"case"})," ",(0,i.jsx)(n.em,{children:"n."})," (of a ",(0,i.jsx)(n.em,{children:"character"})," ) the property of being either ",(0,i.jsx)(n.em,{children:"uppercase"})," or ",(0,i.jsx)(n.em,{children:"lowercase"}),". Not all ",(0,i.jsx)(n.em,{children:"characters"})," have ",(0,i.jsx)(n.em,{children:"case"}),". \u201cThe characters #\\A and #\\a have case, but the character #$ has no case.\u201d See Section 13.1.4.3 (Characters With Case) and the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"both-case-p"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"case sensitivity mode"})," ",(0,i.jsx)(n.em,{children:"n."})," one of the ",(0,i.jsx)(n.em,{children:"symbols"})," ",":upcase",", ",":downcase",", ",":preserve",", or"]}),"\n",(0,i.jsxs)(n.p,{children:[":invert","."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"catch"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"exit point"})," which is ",(0,i.jsx)(n.em,{children:"established"})," by a ",(0,i.jsx)(n.strong,{children:"catch"})," ",(0,i.jsx)(n.em,{children:"form"})," within the ",(0,i.jsx)(n.em,{children:"dynamic scope"})," of its body, which is named by a ",(0,i.jsx)(n.em,{children:"catch tag"}),", and to which control and ",(0,i.jsx)(n.em,{children:"values"})," may be ",(0,i.jsx)(n.em,{children:"thrown"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"catch tag"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"object"})," which names an ",(0,i.jsx)(n.em,{children:"active catch"}),". (If more than one ",(0,i.jsx)(n.em,{children:"catch"})," is active with the same ",(0,i.jsx)(n.em,{children:"catch tag"}),", it is only possible to ",(0,i.jsx)(n.em,{children:"throw"})," to the innermost such ",(0,i.jsx)(n.em,{children:"catch"})," because the outer one is ",(0,i.jsx)(n.em,{children:"shadowed"})," ",(0,i.jsx)("sub",{children:"2"}),".)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"cddr"})," [ ",(0,i.jsx)(n.strong,{children:"k_ud"}),"*  ",(0,i.jsx)(n.strong,{children:"d"}),"* ",(0,i.jsx)(n.strong,{children:"r"})," ] or [ ",(0,i.jsx)(n.strong,{children:"k"}),"*  ",(0,i.jsx)(n.strong,{children:"d_ud"}),"* ",(0,i.jsx)(n.strong,{children:"r"})," ], ",(0,i.jsx)(n.em,{children:"n."})," (of an ",(0,i.jsx)(n.em,{children:"object"}),") the ",(0,i.jsx)(n.em,{children:"cdr"})," of the ",(0,i.jsx)(n.em,{children:"cdr"})," of that ",(0,i.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"cdr"})," [ ",(0,i.jsx)(n.strong,{children:"k_u d"}),"* ",(0,i.jsx)(n.strong,{children:"r"})," ], ",(0,i.jsx)(n.em,{children:"n."})," 1. a. (of a ",(0,i.jsx)(n.em,{children:"cons"}),") the component of a ",(0,i.jsx)(n.em,{children:"cons"})," corresponding to the second ",(0,i.jsx)(n.em,{children:"argument"})," to ",(0,i.jsx)(n.strong,{children:"cons"}),"; the other component is the ",(0,i.jsx)(n.em,{children:"car"})," . \u201cThe function ",(0,i.jsx)(n.strong,{children:"rplacd"})," modifies the cdr of a cons.\u201d b. (of a ",(0,i.jsx)(n.em,{children:"list L"}),(0,i.jsx)("sub",{children:"1"}),") either the ",(0,i.jsx)(n.em,{children:"list L"}),(0,i.jsx)("sub",{children:"2"})," that contains the ",(0,i.jsx)(n.em,{children:"elements"})," of ",(0,i.jsx)(n.em,{children:"L"}),(0,i.jsx)("sub",{children:"1"})," that follow after the first, or else ",(0,i.jsx)(n.strong,{children:"nil"})," if ",(0,i.jsx)(n.em,{children:"L"}),(0,i.jsx)("sub",{children:"1"})," is the ",(0,i.jsx)(n.em,{children:"empty list"}),". 2. the ",(0,i.jsx)(n.em,{children:"object"})," that is held in the ",(0,i.jsx)(n.em,{children:"cdr"})," ",(0,i.jsx)("sub",{children:"1"}),". \u201cThe function ",(0,i.jsx)(n.strong,{children:"cdr"})," returns the cdr of a cons.\u201d"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"cell"})," ",(0,i.jsx)(n.em,{children:"n. Trad."})," (of an ",(0,i.jsx)(n.em,{children:"object"}),") a conceptual ",(0,i.jsx)(n.em,{children:"slot"})," of that ",(0,i.jsx)(n.em,{children:"object"}),". The ",(0,i.jsx)(n.em,{children:"dynamic variable"})," and global ",(0,i.jsx)(n.em,{children:"function bindings"})," of a ",(0,i.jsx)(n.em,{children:"symbol"})," are sometimes referred to as its ",(0,i.jsx)(n.em,{children:"value cell"})," and ",(0,i.jsx)(n.em,{children:"function cell"}),", respectively."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"character"})," ",(0,i.jsx)(n.em,{children:"n."}),", ",(0,i.jsx)(n.em,{children:"adj."})," 1. ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"object"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"character"}),"; that is, an ",(0,i.jsx)(n.em,{children:"object"})," that represents a unitary token in an aggregate quantity of text; see Section 13.1 (Character Concepts). 2. ",(0,i.jsx)(n.em,{children:"adj."})," a. (of a ",(0,i.jsx)(n.em,{children:"stream"}),") having an ",(0,i.jsx)(n.em,{children:"element type"})," that is a ",(0,i.jsx)(n.em,{children:"subtype"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"character"}),". The most fundamental operation on a ",(0,i.jsx)(n.em,{children:"character input stream"})," is ",(0,i.jsx)(n.strong,{children:"read-char"})," and on a ",(0,i.jsx)(n.em,{children:"character output stream"})," is ",(0,i.jsx)(n.strong,{children:"write-char"}),". See ",(0,i.jsx)(n.em,{children:"binary"}),". b. (of a ",(0,i.jsx)(n.em,{children:"file"}),") having been created by opening a ",(0,i.jsx)(n.em,{children:"character stream"}),". (It is ",(0,i.jsx)(n.em,{children:"implementation-dependent"})," whether this is an inspectable aspect of the ",(0,i.jsx)(n.em,{children:"file"}),", or whether any given ",(0,i.jsx)(n.em,{children:"binary file"})," can be treated as a ",(0,i.jsx)(n.em,{children:"character file"}),".)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"character code"})," ",(0,i.jsx)(n.em,{children:"n."})," 1. one of possibly several ",(0,i.jsx)(n.em,{children:"attributes"})," of a ",(0,i.jsx)(n.em,{children:"character"})," . 2. a"]}),"\n",(0,i.jsxs)(n.p,{children:["non-negative ",(0,i.jsx)(n.em,{children:"integer"})," less than the ",(0,i.jsx)(n.em,{children:"value"})," of ",(0,i.jsx)(n.strong,{children:"char-code-limit"})," that is suitable for use as a ",(0,i.jsx)(n.em,{children:"character code"}),(0,i.jsx)("sub",{children:"1"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"character designator"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"designator"})," for a ",(0,i.jsx)(n.em,{children:"character"})," ; that is, an ",(0,i.jsx)(n.em,{children:"object"})," that denotes a ",(0,i.jsx)(n.em,{children:"character"})," and that is one of: a ",(0,i.jsx)(n.em,{children:"designator"})," for a ",(0,i.jsx)(n.em,{children:"string"})," of ",(0,i.jsx)(n.em,{children:"length"})," one (denoting the ",(0,i.jsx)(n.em,{children:"character"})," that is its only ",(0,i.jsx)(n.em,{children:"element"}),"), or a ",(0,i.jsx)(n.em,{children:"character"})," (denoting itself)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"circular"})," ",(0,i.jsx)(n.em,{children:"adj."})," 1. (of a ",(0,i.jsx)(n.em,{children:"list"}),") a ",(0,i.jsx)(n.em,{children:"circular list"}),". 2. (of an arbitrary ",(0,i.jsx)(n.em,{children:"object"}),") having a"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"component"}),", ",(0,i.jsx)(n.em,{children:"element"}),", ",(0,i.jsx)(n.em,{children:"constituent"}),(0,i.jsx)("sub",{children:"2"}),", or ",(0,i.jsx)(n.em,{children:"subexpression"})," (as appropriate to the context) that is the ",(0,i.jsx)(n.em,{children:"object"})," itself."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"circular list"})," ",(0,i.jsx)(n.em,{children:"n."})," a chain of ",(0,i.jsx)(n.em,{children:"conses"})," that has no termination because some ",(0,i.jsx)(n.em,{children:"cons"})," in the chain is the ",(0,i.jsx)(n.em,{children:"cdr"})," of a later ",(0,i.jsx)(n.em,{children:"cons"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"class"})," ",(0,i.jsx)(n.em,{children:"n."})," 1. an ",(0,i.jsx)(n.em,{children:"object"})," that uniquely determines the structure and behavior of a set of other ",(0,i.jsx)(n.em,{children:"objects"})," called its ",(0,i.jsx)(n.em,{children:"direct instances"}),", that contributes structure and behavior to a set of other ",(0,i.jsx)(n.em,{children:"objects"})," called its ",(0,i.jsx)(n.em,{children:"indirect instances"}),", and that acts as a ",(0,i.jsx)(n.em,{children:"type specifier"})," for a set of objects called its ",(0,i.jsx)(n.em,{children:"generalized instances"}),". \u201cThe class ",(0,i.jsx)(n.strong,{children:"integer"})," is a subclass of the"]}),"\n",(0,i.jsxs)(n.p,{children:["class ",(0,i.jsx)(n.strong,{children:"number"}),".\u201d (Note that the phrase \u201cthe ",(0,i.jsx)(n.em,{children:"class"})," foo\u201d is often substituted for the more precise phrase \u201cthe ",(0,i.jsx)(n.em,{children:"class"})," named foo\u201d\u2014in both cases, a ",(0,i.jsx)(n.em,{children:"class object"})," (not a ",(0,i.jsx)(n.em,{children:"symbol"}),") is denoted.) 2. (of an ",(0,i.jsx)(n.em,{children:"object"}),") the uniquely determined ",(0,i.jsx)(n.em,{children:"class"})," of which the ",(0,i.jsx)(n.em,{children:"object"})," is a ",(0,i.jsx)(n.em,{children:"direct instance"}),". See the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"class-of"}),". \u201cThe class of the object returned by ",(0,i.jsx)(n.strong,{children:"gensym"})," is ",(0,i.jsx)(n.strong,{children:"symbol"}),".\u201d (Note that with this usage a phrase such as \u201cits ",(0,i.jsx)(n.em,{children:"class"})," is foo\u201d is often substituted for the more precise phrase \u201cits ",(0,i.jsx)(n.em,{children:"class"})," is the ",(0,i.jsx)(n.em,{children:"class"})," named foo\u201d\u2014in both cases, a ",(0,i.jsx)(n.em,{children:"class object"})," (not a ",(0,i.jsx)(n.em,{children:"symbol"}),") is denoted.)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"class designator"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"designator"})," for a ",(0,i.jsx)(n.em,{children:"class"}),"; that is, an ",(0,i.jsx)(n.em,{children:"object"})," that denotes a ",(0,i.jsx)(n.em,{children:"class"})," and that is one of: a ",(0,i.jsx)(n.em,{children:"symbol"})," (denoting the ",(0,i.jsx)(n.em,{children:"class"})," named by that ",(0,i.jsx)(n.em,{children:"symbol"}),"; see the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"find-class"}),") or a ",(0,i.jsx)(n.em,{children:"class"})," (denoting itself)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"class precedence list"})," ",(0,i.jsx)(n.em,{children:"n."})," a unique total ordering on a ",(0,i.jsx)(n.em,{children:"class"})," and its ",(0,i.jsx)(n.em,{children:"superclasses"})," that is consistent with the ",(0,i.jsx)(n.em,{children:"local precedence orders"})," for the ",(0,i.jsx)(n.em,{children:"class"})," and its ",(0,i.jsx)(n.em,{children:"superclasses"}),". For detailed information, see Section 4.3.5 (Determining the Class Precedence List)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"v.t."})," (a ",(0,i.jsx)(n.em,{children:"stream"}),") to terminate usage of the ",(0,i.jsx)(n.em,{children:"stream"})," as a source or sink of data, permitting the ",(0,i.jsx)(n.em,{children:"implementation"})," to reclaim its internal data structures, and to free any external resources which might have been locked by the ",(0,i.jsx)(n.em,{children:"stream"})," when it was opened."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"closed"})," ",(0,i.jsx)(n.em,{children:"adj."})," (of a ",(0,i.jsx)(n.em,{children:"stream"}),") having been ",(0,i.jsx)(n.em,{children:"closed"})," (see close). Some (but not all) operations that are valid on ",(0,i.jsx)(n.em,{children:"open streams"})," are not valid on ",(0,i.jsx)(n.em,{children:"closed streams"}),". See Section 21.1.1.1.2 (Open and Closed Streams)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"closure"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"lexical closure"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"coalesce"})," ",(0,i.jsx)(n.em,{children:"v.t."})," (",(0,i.jsx)(n.em,{children:"literal objects"})," that are ",(0,i.jsx)(n.em,{children:"similar"})," ) to consolidate the identity of those ",(0,i.jsx)(n.em,{children:"objects"}),", such that they become the ",(0,i.jsx)(n.em,{children:"same object"}),". See Section 3.2.1 (Compiler"]}),"\n",(0,i.jsx)(n.p,{children:"Terminology)."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"code"})," ",(0,i.jsx)(n.em,{children:"n."})," 1. ",(0,i.jsx)(n.em,{children:"Trad."})," any representation of actions to be performed, whether conceptual or as an actual ",(0,i.jsx)(n.em,{children:"object"}),", such as ",(0,i.jsx)(n.em,{children:"forms"}),", ",(0,i.jsx)(n.em,{children:"lambda expressions"}),", ",(0,i.jsx)(n.em,{children:"objects"})," of ",(0,i.jsx)(n.em,{children:"type function"}),", text in a ",(0,i.jsx)(n.em,{children:"source file"}),", or instruction sequences in a ",(0,i.jsx)(n.em,{children:"compiled file"}),". This is a generic term; the specific nature of the representation depends on its context. 2. (of a ",(0,i.jsx)(n.em,{children:"character"})," ) a ",(0,i.jsx)(n.em,{children:"character code"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"coerce"})," ",(0,i.jsx)(n.em,{children:"v.t."})," (an ",(0,i.jsx)(n.em,{children:"object"})," to a ",(0,i.jsx)(n.em,{children:"type"}),") to produce an ",(0,i.jsx)(n.em,{children:"object"})," from the given ",(0,i.jsx)(n.em,{children:"object"}),", without modifying that ",(0,i.jsx)(n.em,{children:"object"}),", by following some set of coercion rules that must be specifically stated for any context in which this term is used. The resulting ",(0,i.jsx)(n.em,{children:"object"})," is necessarily of the indicated ",(0,i.jsx)(n.em,{children:"type"}),", except when that type is a ",(0,i.jsx)(n.em,{children:"subtype"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"complex"}),"; in that case, if a ",(0,i.jsx)(n.em,{children:"complex rational"})," with an imaginary part of zero would result, the result is a ",(0,i.jsx)(n.em,{children:"rational"})]}),"\n",(0,i.jsxs)(n.p,{children:["rather than a ",(0,i.jsx)(n.em,{children:"complex"}),"\u2014see Section 12.1.5.3 (Rule of Canonical Representation for Complex Rationals)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"colon"})," ",(0,i.jsx)(n.em,{children:"n."})," the ",(0,i.jsx)(n.em,{children:"standard character"})," that is called \u201ccolon\u201d (:). See Figure 2\u20135."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"comma"})," ",(0,i.jsx)(n.em,{children:"n."})," the ",(0,i.jsx)(n.em,{children:"standard character"})," that is called \u201ccomma\u201d (,). See Figure 2\u20135."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compilation"})," ",(0,i.jsx)(n.em,{children:"n."})," the process of ",(0,i.jsx)(n.em,{children:"compiling code"})," by the ",(0,i.jsx)(n.em,{children:"compiler"})," ."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compilation environment"})," ",(0,i.jsx)(n.em,{children:"n."})," 1. An ",(0,i.jsx)(n.em,{children:"environment"})," that represents information known by the ",(0,i.jsx)(n.em,{children:"compiler"})," about a ",(0,i.jsx)(n.em,{children:"form"})," that is being ",(0,i.jsx)(n.em,{children:"compiled"}),". See Section 3.2.1 (Compiler Terminology). 2. An ",(0,i.jsx)(n.em,{children:"object"})," that represents the ",(0,i.jsx)(n.em,{children:"compilation environment"})," ",(0,i.jsx)("sub",{children:"1"})," and that is used as a second argument to a ",(0,i.jsx)(n.em,{children:"macro function"})," (which supplies a ",(0,i.jsx)(n.em,{children:"value"})," for any ",(0,i.jsx)(n.strong,{children:"&environment"})," ",(0,i.jsx)(n.em,{children:"parameter"})," in the ",(0,i.jsx)(n.em,{children:"macro function"}),"\u2019s definition)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compilation unit"})," ",(0,i.jsx)(n.em,{children:"n."})," an interval during which a single unit of compilation is occurring. See the ",(0,i.jsx)(n.em,{children:"macro"})," ",(0,i.jsx)(n.strong,{children:"with-compilation-unit"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compile"})," ",(0,i.jsx)(n.em,{children:"v.t."})," 1. (",(0,i.jsx)(n.em,{children:"code"}),") to perform semantic preprocessing of the ",(0,i.jsx)(n.em,{children:"code"}),", usually"]}),"\n",(0,i.jsxs)(n.p,{children:["optimizing one or more qualities of the code, such as run-time speed of ",(0,i.jsx)(n.em,{children:"execution"})," or run-time storage usage. The minimum semantic requirements of compilation are that it must remove all macro calls and arrange for all ",(0,i.jsx)(n.em,{children:"load time values"})," to be resolved prior to run time. 2. (a ",(0,i.jsx)(n.em,{children:"function"}),") to produce a new ",(0,i.jsx)(n.em,{children:"object"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"compiled-function"})," which represents the result of ",(0,i.jsx)(n.em,{children:"compiling"})," the ",(0,i.jsx)(n.em,{children:"code"})," represented by the ",(0,i.jsx)(n.em,{children:"function"}),". See the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"compile"}),". 3. (a ",(0,i.jsx)(n.em,{children:"source file"}),") to produce a ",(0,i.jsx)(n.em,{children:"compiled file"})," from a ",(0,i.jsx)(n.em,{children:"source file"}),". See the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"compile-file"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compile time"})," ",(0,i.jsx)(n.em,{children:"n."})," the duration of time that the ",(0,i.jsx)(n.em,{children:"compiler"})," is processing ",(0,i.jsx)(n.em,{children:"source code"}),". ",(0,i.jsx)(n.strong,{children:"compile-time definition"})," ",(0,i.jsx)(n.em,{children:"n."})," a definition in the ",(0,i.jsx)(n.em,{children:"compilation environment"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compiled code"})," ",(0,i.jsx)(n.em,{children:"n."})," 1. ",(0,i.jsx)(n.em,{children:"compiled functions"}),". 2. ",(0,i.jsx)(n.em,{children:"code"})," that represents ",(0,i.jsx)(n.em,{children:"compiled functions"}),", such as the contents of a ",(0,i.jsx)(n.em,{children:"compiled file"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compiled file"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"file"})," which represents the results of ",(0,i.jsx)(n.em,{children:"compiling"})," the ",(0,i.jsx)(n.em,{children:"forms"})," which appeared in a corresponding ",(0,i.jsx)(n.em,{children:"source file"}),", and which can be ",(0,i.jsx)(n.em,{children:"loaded"}),". See the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"compile-file"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compiled function"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"object"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"compiled-function"}),", which is a ",(0,i.jsx)(n.em,{children:"function"})," that has been ",(0,i.jsx)(n.em,{children:"compiled"}),", which contains no references to ",(0,i.jsx)(n.em,{children:"macros"})," that must be expanded at run time, and which contains no unresolved references to ",(0,i.jsx)(n.em,{children:"load time values"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compiler"})," ",(0,i.jsx)(n.em,{children:"n."})," a facility that is part of Lisp and that translates ",(0,i.jsx)(n.em,{children:"code"})," into an"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"implementation-dependent"})," form that might be represented or ",(0,i.jsx)(n.em,{children:"executed"})," efficiently. The functions ",(0,i.jsx)(n.strong,{children:"compile"})," and ",(0,i.jsx)(n.strong,{children:"compile-file"})," permit programs to invoke the ",(0,i.jsx)(n.em,{children:"compiler"})," ."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compiler macro"})," ",(0,i.jsx)(n.em,{children:"n."})," an auxiliary macro definition for a globally defined ",(0,i.jsx)(n.em,{children:"function"})," or ",(0,i.jsx)(n.em,{children:"macro"})," which might or might not be called by any given ",(0,i.jsx)(n.em,{children:"conforming implementation"})," and which must preserve the semantics of the globally defined ",(0,i.jsx)(n.em,{children:"function"})," or ",(0,i.jsx)(n.em,{children:"macro"})," but"]}),"\n",(0,i.jsxs)(n.p,{children:["which might perform some additional optimizations. (Unlike a ",(0,i.jsx)(n.em,{children:"macro"}),", a ",(0,i.jsx)(n.em,{children:"compiler macro"})," does not extend the syntax of Common Lisp; rather, it provides an alternate implementation strategy for some existing syntax or functionality.)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compiler macro expansion"})," ",(0,i.jsx)(n.em,{children:"n."})," 1. the process of translating a ",(0,i.jsx)(n.em,{children:"form"})," into another ",(0,i.jsx)(n.em,{children:"form"})," by a ",(0,i.jsx)(n.em,{children:"compiler macro"}),". 2. the ",(0,i.jsx)(n.em,{children:"form"})," resulting from this process."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compiler macro form"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"function form"})," or ",(0,i.jsx)(n.em,{children:"macro form"})," whose ",(0,i.jsx)(n.em,{children:"operator"})," has a definition as a ",(0,i.jsx)(n.em,{children:"compiler macro"}),", or a ",(0,i.jsx)(n.strong,{children:"funcall"})," ",(0,i.jsx)(n.em,{children:"form"})," whose first ",(0,i.jsx)(n.em,{children:"argument"})," is a ",(0,i.jsx)(n.strong,{children:"function"})," ",(0,i.jsx)(n.em,{children:"form"})," whose ",(0,i.jsx)(n.em,{children:"argument"})," is the ",(0,i.jsx)(n.em,{children:"name"})," of a ",(0,i.jsx)(n.em,{children:"function"})," that has a definition as a ",(0,i.jsx)(n.em,{children:"compiler macro"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compiler macro function"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"function"})," of two arguments, a ",(0,i.jsx)(n.em,{children:"form"})," and an"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"environment"}),", that implements ",(0,i.jsx)(n.em,{children:"compiler macro expansion"})," by producing either a ",(0,i.jsx)(n.em,{children:"form"})," to be used in place of the original argument ",(0,i.jsx)(n.em,{children:"form"})," or else ",(0,i.jsx)(n.strong,{children:"nil"}),", indicating that the original ",(0,i.jsx)(n.em,{children:"form"})," should not be replaced. See Section 3.2.2.1 (Compiler Macros)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"complex"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"object"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"complex"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"complex float"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"object"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"complex"})," which has a ",(0,i.jsx)(n.em,{children:"complex part type"})," that is a ",(0,i.jsx)(n.em,{children:"subtype"})," of ",(0,i.jsx)(n.strong,{children:"float"}),". A ",(0,i.jsx)(n.em,{children:"complex float"})," is a ",(0,i.jsx)(n.em,{children:"complex"})," , but it is not a ",(0,i.jsx)(n.em,{children:"float"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"complex part type"})," ",(0,i.jsx)(n.em,{children:"n."})," (of a ",(0,i.jsx)(n.em,{children:"complex"})," ) 1. the ",(0,i.jsx)(n.em,{children:"type"})," which is used to represent both the real part and the imaginary part of the ",(0,i.jsx)(n.em,{children:"complex"})," . 2. the ",(0,i.jsx)(n.em,{children:"actual complex part type"})," of the ",(0,i.jsx)(n.em,{children:"complex"})," . 3. the ",(0,i.jsx)(n.em,{children:"expressed complex part type"})," of the ",(0,i.jsx)(n.em,{children:"complex"})," ."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"complex rational"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"object"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"complex"})," which has a ",(0,i.jsx)(n.em,{children:"complex part type"})," that is a ",(0,i.jsx)(n.em,{children:"subtype"})," of ",(0,i.jsx)(n.strong,{children:"rational"}),". A ",(0,i.jsx)(n.em,{children:"complex rational"})," is a ",(0,i.jsx)(n.em,{children:"complex"})," , but it is not a ",(0,i.jsx)(n.em,{children:"rational"}),". No ",(0,i.jsx)(n.em,{children:"complex rational"})," has an imaginary part of zero because such a number is always represented by Common Lisp as an ",(0,i.jsx)(n.em,{children:"object"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"rational"}),"; see Section 12.1.5.3 (Rule of Canonical Representation for Complex Rationals)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"complex single float"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"object"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"complex"})," which has a ",(0,i.jsx)(n.em,{children:"complex part type"})," that is a ",(0,i.jsx)(n.em,{children:"subtype"})," of ",(0,i.jsx)(n.strong,{children:"single-float"}),". A ",(0,i.jsx)(n.em,{children:"complex single float"})," is a ",(0,i.jsx)(n.em,{children:"complex"})," , but it is not a ",(0,i.jsx)(n.em,{children:"single float"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"composite stream"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"stream"})," that is composed of one or more other ",(0,i.jsx)(n.em,{children:"streams"}),". \u201c",(0,i.jsx)(n.strong,{children:"make-synonym-stream"})," creates a composite stream.\u201d"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compound form"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"non-empty list"})," which is a ",(0,i.jsx)(n.em,{children:"form"}),": a ",(0,i.jsx)(n.em,{children:"special form"}),", a ",(0,i.jsx)(n.em,{children:"lambda form"}),", a ",(0,i.jsx)(n.em,{children:"macro form"}),", or a ",(0,i.jsx)(n.em,{children:"function form"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"compound type specifier"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"type specifier"})," that is a ",(0,i.jsx)(n.em,{children:"cons"}),"; ",(0,i.jsx)(n.em,{children:"i.e."}),", a ",(0,i.jsx)(n.em,{children:"type specifier"})," that is not an ",(0,i.jsx)(n.em,{children:"atomic type specifier"})," . \u201c(vector single-float) is a compound type specifier.\u201d"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"concatenated stream"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"input stream"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"concatenated-stream"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"condition"})," ",(0,i.jsx)(n.em,{children:"n."})," 1. an ",(0,i.jsx)(n.em,{children:"object"})," which represents a ",(0,i.jsx)(n.em,{children:"situation"}),"\u2014usually, but not necessarily, during ",(0,i.jsx)(n.em,{children:"signaling"}),". 2. an ",(0,i.jsx)(n.em,{children:"object"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"condition"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"condition designator"})," ",(0,i.jsx)(n.em,{children:"n."})," one or more ",(0,i.jsx)(n.em,{children:"objects"})," that, taken together, denote either an existing ",(0,i.jsx)(n.em,{children:"condition object"})," or a ",(0,i.jsx)(n.em,{children:"condition object"})," to be implicitly created. For details, see Section 9.1.2.1 (Condition Designators)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"condition handler"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"function"})," that might be invoked by the act of ",(0,i.jsx)(n.em,{children:"signaling"}),", that receives the ",(0,i.jsx)(n.em,{children:"condition"})," being signaled as its only argument, and that is permitted to ",(0,i.jsx)(n.em,{children:"handle"})," the ",(0,i.jsx)(n.em,{children:"condition"})," or to ",(0,i.jsx)(n.em,{children:"decline"}),". See Section 9.1.4.1 (Signaling)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"condition reporter"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"function"})," that describes how a ",(0,i.jsx)(n.em,{children:"condition"})," is to be printed when the ",(0,i.jsx)(n.em,{children:"Lisp printer"})," is invoked while ",(0,i.jsx)(n.strong,{children:"*print-escape*"})," is ",(0,i.jsx)(n.em,{children:"false"}),". See Section 9.1.3 (Printing Conditions)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"conditional newline"})," ",(0,i.jsx)(n.em,{children:"n."})," a point in output where a ",(0,i.jsx)(n.em,{children:"newline"})," might be inserted at the discretion of the ",(0,i.jsx)(n.em,{children:"pretty printer"})," . There are four kinds of ",(0,i.jsx)(n.em,{children:"conditional newlines"}),", called \u201clinear-style,\u201d \u201cfill-style,\u201d \u201cmiser-style,\u201d and \u201cmandatory-style.\u201d See the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"pprint-newline"})," and Section 22.2.1.1 (Dynamic Control of the Arrangement of Output)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"conformance"})," ",(0,i.jsx)(n.em,{children:"n."})," a state achieved by proper and complete adherence to the"]}),"\n",(0,i.jsx)(n.p,{children:"requirements of this specification. See Section 1.5 (Conformance)."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"conforming code"})," ",(0,i.jsx)(n.em,{children:"n. code"})," that is all of part of a ",(0,i.jsx)(n.em,{children:"conforming program"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"conforming implementation"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"implementation"}),", used to emphasize complete and correct adherance to all conformance criteria. A ",(0,i.jsx)(n.em,{children:"conforming implementation"})," is capable of accepting a ",(0,i.jsx)(n.em,{children:"conforming program"})," as input, preparing that ",(0,i.jsx)(n.em,{children:"program"})," for ",(0,i.jsx)(n.em,{children:"execution"}),", and executing the prepared ",(0,i.jsx)(n.em,{children:"program"})," in accordance with this specification. An ",(0,i.jsx)(n.em,{children:"implementation"})," which has been extended may still be a ",(0,i.jsx)(n.em,{children:"conforming implementation"})]}),"\n",(0,i.jsxs)(n.p,{children:["provided that no extension interferes with the correct function of any ",(0,i.jsx)(n.em,{children:"conforming program"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"conforming processor"})," ",(0,i.jsx)(n.em,{children:"n. ANSI"})," a ",(0,i.jsx)(n.em,{children:"conforming implementation"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"conforming program"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"program"}),", used to emphasize the fact that the ",(0,i.jsx)(n.em,{children:"program"})," depends for its correctness only upon documented aspects of Common Lisp, and can therefore be expected to run correctly in any ",(0,i.jsx)(n.em,{children:"conforming implementation"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"congruent"})," ",(0,i.jsx)(n.em,{children:"n."})," conforming to the rules of ",(0,i.jsx)(n.em,{children:"lambda list"})," congruency, as detailed in Section 7.6.4 (Congruent Lambda-lists for all Methods of a Generic Function)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"cons"})," ",(0,i.jsx)(n.em,{children:"n.v."})," 1. ",(0,i.jsx)(n.em,{children:"n."})," a compound data ",(0,i.jsx)(n.em,{children:"object"})," having two components called the ",(0,i.jsx)(n.em,{children:"car"})," and the ",(0,i.jsx)(n.em,{children:"cdr"})," . 2. ",(0,i.jsx)(n.em,{children:"v."})," to create such an ",(0,i.jsx)(n.em,{children:"object"}),". 3. ",(0,i.jsx)(n.em,{children:"v. Idiom."})," to create any ",(0,i.jsx)(n.em,{children:"object"}),", or to allocate storage."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"constant"})," ",(0,i.jsx)(n.em,{children:"n."})," 1. a ",(0,i.jsx)(n.em,{children:"constant form"}),". 2. a ",(0,i.jsx)(n.em,{children:"constant variable"}),". 3. a ",(0,i.jsx)(n.em,{children:"constant object"}),". 4. a ",(0,i.jsx)(n.em,{children:"self-evaluating object"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"constant form"})," ",(0,i.jsx)(n.em,{children:"n."})," any ",(0,i.jsx)(n.em,{children:"form"})," for which ",(0,i.jsx)(n.em,{children:"evaluation"})," always ",(0,i.jsx)(n.em,{children:"yields"})," the same ",(0,i.jsx)(n.em,{children:"value"}),", that neither affects nor is affected by the ",(0,i.jsx)(n.em,{children:"environment"})," in which it is ",(0,i.jsx)(n.em,{children:"evaluated"})," (except that it is permitted to refer to the names of ",(0,i.jsx)(n.em,{children:"constant variables"})," defined in the ",(0,i.jsx)(n.em,{children:"environment"}),"), and that neither affects nor is affected by the state of any ",(0,i.jsx)(n.em,{children:"object"})," except those ",(0,i.jsx)(n.em,{children:"objects"})," that are ",(0,i.jsx)(n.em,{children:"otherwise inaccessible parts"})," of ",(0,i.jsx)(n.em,{children:"objects"})," created by the ",(0,i.jsx)(n.em,{children:"form"})," itself. \u201cA ",(0,i.jsx)(n.strong,{children:"car"})," form in which the argument is a ",(0,i.jsx)(n.strong,{children:"quote"})," form is a constant form.\u201d"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"constant object"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"object"})," that is constrained (",(0,i.jsx)(n.em,{children:"e.g."}),", by its context in a ",(0,i.jsx)(n.em,{children:"program"})," or by the source from which it was obtained) to be ",(0,i.jsx)(n.em,{children:"immutable"}),". \u201cA literal object that has been processed by ",(0,i.jsx)(n.strong,{children:"compile-file"})," is a constant object.\u201d"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"constant variable"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"variable"}),", the ",(0,i.jsx)(n.em,{children:"value"})," of which can never change; that"]}),"\n",(0,i.jsxs)(n.p,{children:["is, a ",(0,i.jsx)(n.em,{children:"keyword"})," ",(0,i.jsx)("sub",{children:"1"})," or a ",(0,i.jsx)(n.em,{children:"named constant"}),". \u201cThe symbols ",(0,i.jsx)(n.strong,{children:"t"}),", ",(0,i.jsx)(n.strong,{children:"nil"}),", ",":direction",", and"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"most-positive-fixnum"})," are constant variables.\u201d"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"constituent"})," ",(0,i.jsx)("i",{children:"n."}),", ",(0,i.jsx)("i",{children:"adj."})," 1. a. ",(0,i.jsx)("i",{children:"n."})," the ",(0,i.jsx)("i",{children:"syntax type"})," of a ",(0,i.jsx)("i",{children:"character"})," that is part of a ",(0,i.jsx)("i",{children:"token"}),". For details, see Section 2.1.4.1 (Constituent Characters). b. ",(0,i.jsx)("i",{children:"adj."})," (of a ",(0,i.jsx)("i",{children:"character"})," ) having the ",(0,i.jsx)("i",{children:"constituent"}),(0,i.jsxs)("sub",{children:["1",(0,i.jsx)("i",{children:"a"})]})," syntax type",(0,i.jsx)("sub",{children:"2"}),". c. ",(0,i.jsx)("i",{children:"n."})," a ",(0,i.jsx)("i",{children:"constituent"}),(0,i.jsxs)("sub",{children:["1",(0,i.jsx)("i",{children:"b"})]})," character . 2. ",(0,i.jsx)("i",{children:"n."})," (of a ",(0,i.jsx)("i",{children:"composite stream"}),") one of possibly several ",(0,i.jsx)("i",{children:"objects"})," that collectively comprise the source or sink of that ",(0,i.jsx)("i",{children:"stream"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"constituent trait"})," ",(0,i.jsx)(n.em,{children:"n."})," (of a ",(0,i.jsx)(n.em,{children:"character"})," ) one of several classifications of a ",(0,i.jsx)(n.em,{children:"constituent character"})," in a ",(0,i.jsx)(n.em,{children:"readtable"}),". See Section 2.1.4.1 (Constituent Characters)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"constructed stream"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"stream"})," whose source or sink is a Lisp ",(0,i.jsx)(n.em,{children:"object"}),". Note that since a ",(0,i.jsx)(n.em,{children:"stream"})," is another Lisp ",(0,i.jsx)(n.em,{children:"object"}),", ",(0,i.jsx)(n.em,{children:"composite streams"})," are considered ",(0,i.jsx)(n.em,{children:"constructed streams"}),". \u201cA string stream is a constructed stream.\u201d"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"contagion"})," ",(0,i.jsx)(n.em,{children:"n."})," a process whereby operations on ",(0,i.jsx)(n.em,{children:"objects"})," of differing ",(0,i.jsx)(n.em,{children:"types"})," (",(0,i.jsx)(n.em,{children:"e.g."}),","]}),"\n",(0,i.jsxs)(n.p,{children:["arithmetic on mixed ",(0,i.jsx)(n.em,{children:"types"})," of ",(0,i.jsx)(n.em,{children:"numbers"}),") produce a result whose ",(0,i.jsx)(n.em,{children:"type"})," is controlled by the dominance of one ",(0,i.jsx)(n.em,{children:"argument"}),"\u2019s ",(0,i.jsx)(n.em,{children:"type"})," over the ",(0,i.jsx)(n.em,{children:"types"})," of the other ",(0,i.jsx)(n.em,{children:"arguments"}),". See Section 12.1.1.2 (Contagion in Numeric Operations)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"continuable"})," ",(0,i.jsx)(n.em,{children:"n."})," (of an ",(0,i.jsx)(n.em,{children:"error"})," ) an ",(0,i.jsx)(n.em,{children:"error"})," that is ",(0,i.jsx)(n.em,{children:"correctable"})," by the continue restart."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"control form"})," ",(0,i.jsx)(n.em,{children:"n."})," 1. a ",(0,i.jsx)(n.em,{children:"form"})," that establishes one or more places to which control can be transferred. 2. a ",(0,i.jsx)(n.em,{children:"form"})," that transfers control."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"copy"})," ",(0,i.jsx)("i",{children:"n."})," 1. (of a ",(0,i.jsx)("i",{children:"cons C"}),") a ",(0,i.jsx)("i",{children:"fresh cons"})," with the ",(0,i.jsx)("i",{children:"same car"})," and ",(0,i.jsx)("i",{children:"cdr"})," as ",(0,i.jsx)("i",{children:"C"}),". 2. (of a ",(0,i.jsx)("i",{children:"list L"}),") a ",(0,i.jsx)("i",{children:"fresh list"})," with the ",(0,i.jsx)("i",{children:"same elements"})," as ",(0,i.jsx)("i",{children:"L"}),". (Only the ",(0,i.jsx)("i",{children:"list structure"})," is ",(0,i.jsx)("i",{children:"fresh"}),"; the ",(0,i.jsx)("i",{children:"elements"})," are the ",(0,i.jsx)("i",{children:"same"}),".) See the ",(0,i.jsx)("i",{children:"function"})," ",(0,i.jsx)("b",{children:"copy-list"}),". 3. (of an ",(0,i.jsx)("i",{children:"association list A"})," with ",(0,i.jsxs)("i",{children:["elements A",(0,i.jsx)("sub",{children:"i"})]}),") a ",(0,i.jsx)("i",{children:"fresh list B"})," with ",(0,i.jsxs)("i",{children:["elements B",(0,i.jsx)("sub",{children:"i"})]}),", each of which is ",(0,i.jsx)("b",{children:"nil"})," if ",(0,i.jsxs)("i",{children:["A",(0,i.jsx)("sub",{children:"i"})]}),"is ",(0,i.jsx)("b",{children:"nil"}),", or else a ",(0,i.jsx)("i",{children:"copy"})," of the ",(0,i.jsxs)("i",{children:["cons A",(0,i.jsx)("sub",{children:"i"})]}),". See the ",(0,i.jsx)("i",{children:"function"})," ",(0,i.jsx)("b",{children:"copy-alist"}),". 4. (of a ",(0,i.jsx)("i",{children:"tree T"}),") a ",(0,i.jsx)("i",{children:"fresh tree"})," with the ",(0,i.jsx)("i",{children:"same"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"leaves"})," as ",(0,i.jsx)(n.em,{children:"T"}),". See the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"copy-tree"}),". 5. (of a ",(0,i.jsx)(n.em,{children:"random state R"}),") a ",(0,i.jsx)(n.em,{children:"fresh random state"})," that, if used as an argument to to the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"random"})," would produce the same series of \u201crandom\u201d values as ",(0,i.jsx)(n.em,{children:"R"})," would produce. 6. (of a ",(0,i.jsx)(n.em,{children:"structure S"}),") a ",(0,i.jsx)(n.em,{children:"fresh structure"})," that has the same ",(0,i.jsx)(n.em,{children:"type"})," as ",(0,i.jsx)(n.em,{children:"S"}),", and that has slot values, each of which is the ",(0,i.jsx)(n.em,{children:"same"})," as the corresponding slot value of ",(0,i.jsx)(n.em,{children:"S"}),". (Note that since the difference between a ",(0,i.jsx)(n.em,{children:"cons"}),", a ",(0,i.jsx)(n.em,{children:"list"}),", and a ",(0,i.jsx)(n.em,{children:"tree"})," is a matter of \u201cview\u201d or \u201cintention,\u201d there can be no general-purpose ",(0,i.jsx)(n.em,{children:"function"})," which, based solely on the ",(0,i.jsx)(n.em,{children:"type"})," of an ",(0,i.jsx)(n.em,{children:"object"}),", can determine which of these distinct meanings is intended. The distinction rests solely on the basis of the text description within this document. For example, phrases like \u201ca ",(0,i.jsx)(n.em,{children:"copy"})," of the given ",(0,i.jsx)(n.em,{children:"list"}),"\u201d or \u201ccopy of the ",(0,i.jsx)(n.em,{children:"list x"}),"\u201d imply the second definition.)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"correctable"})," ",(0,i.jsx)(n.em,{children:"adj."})," (of an ",(0,i.jsx)(n.em,{children:"error"})," ) 1. (by a ",(0,i.jsx)(n.em,{children:"restart"})," other than ",(0,i.jsx)(n.strong,{children:"abort"})," that has been"]}),"\n",(0,i.jsxs)(n.p,{children:["associated with the ",(0,i.jsx)(n.em,{children:"error"})," ) capable of being corrected by invoking that ",(0,i.jsx)(n.em,{children:"restart"}),". \u201cThe function ",(0,i.jsx)(n.strong,{children:"cerror"})," signals an error that is correctable by the ",(0,i.jsx)(n.strong,{children:"continue"})," ",(0,i.jsx)(n.em,{children:"restart"}),".\u201d (Note that correctability is not a property of an ",(0,i.jsx)(n.em,{children:"error object"}),", but rather a property of the ",(0,i.jsx)(n.em,{children:"dynamic environment"})," that is in effect when the ",(0,i.jsx)(n.em,{children:"error"})," is ",(0,i.jsx)(n.em,{children:"signaled"}),". Specifically, the ",(0,i.jsx)(n.em,{children:"restart"})," is \u201cassociated with\u201d the ",(0,i.jsx)(n.em,{children:"error condition object"}),". See Section 9.1.4.2.4 (Associating a Restart with a Condition).) 2. (when no specific ",(0,i.jsx)(n.em,{children:"restart"})," is mentioned) ",(0,i.jsx)(n.em,{children:"correctable"}),(0,i.jsx)("sub",{children:"1"})," by at least one ",(0,i.jsx)(n.em,{children:"restart"}),". \u201c",(0,i.jsx)(n.strong,{children:"import"})," signals a correctable error of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"package-error"})," if any of the imported symbols has the same name as some distinct symbol already accessible in the package.\u201d"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"current input base"})," ",(0,i.jsx)(n.em,{children:"n."})," (in a ",(0,i.jsx)(n.em,{children:"dynamic environment"}),") the ",(0,i.jsx)(n.em,{children:"radix"})," that is the ",(0,i.jsx)(n.em,{children:"value"})," of ",(0,i.jsx)(n.strong,{children:"*read-base*"})," in that ",(0,i.jsx)(n.em,{children:"environment"}),", and that is the default ",(0,i.jsx)(n.em,{children:"radix"})," employed by the ",(0,i.jsx)(n.em,{children:"Lisp reader"})," and its related ",(0,i.jsx)(n.em,{children:"functions"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"current logical block"})," ",(0,i.jsx)(n.em,{children:"n."})," the context of the innermost lexically enclosing use of ",(0,i.jsx)(n.strong,{children:"pprint-logical-block"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"current output base"})," ",(0,i.jsx)(n.em,{children:"n."})," (in a ",(0,i.jsx)(n.em,{children:"dynamic environment"}),") the ",(0,i.jsx)(n.em,{children:"radix"})," that is the ",(0,i.jsx)(n.em,{children:"value"})," of"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"*print-base*"})," in that ",(0,i.jsx)(n.em,{children:"environment"}),", and that is the default ",(0,i.jsx)(n.em,{children:"radix"})," employed by the ",(0,i.jsx)(n.em,{children:"Lisp printer"})," and its related ",(0,i.jsx)(n.em,{children:"functions"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"current package"})," ",(0,i.jsx)(n.em,{children:"n."})," (in a ",(0,i.jsx)(n.em,{children:"dynamic environment"}),") the ",(0,i.jsx)(n.em,{children:"package"})," that is the ",(0,i.jsx)(n.em,{children:"value"})," of ",(0,i.jsx)(n.strong,{children:"*package*"})," in that ",(0,i.jsx)(n.em,{children:"environment"}),", and that is the default ",(0,i.jsx)(n.em,{children:"package"})," employed by the ",(0,i.jsx)(n.em,{children:"Lisp reader"})," and ",(0,i.jsx)(n.em,{children:"Lisp printer"})," , and their related ",(0,i.jsx)(n.em,{children:"functions"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"current pprint dispatch table"})," ",(0,i.jsx)(n.em,{children:"n."})," (in a ",(0,i.jsx)(n.em,{children:"dynamic environment"}),") the ",(0,i.jsx)(n.em,{children:"pprint dispatch table"})," that is the ",(0,i.jsx)(n.em,{children:"value"})," of ",(0,i.jsx)(n.strong,{children:"*print-pprint-dispatch*"})," in that ",(0,i.jsx)(n.em,{children:"environment"}),", and that is the default ",(0,i.jsx)(n.em,{children:"pprint dispatch table"})," employed by the ",(0,i.jsx)(n.em,{children:"pretty printer"})," ."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"current random state"})," ",(0,i.jsx)(n.em,{children:"n."})," (in a ",(0,i.jsx)(n.em,{children:"dynamic environment"}),") the ",(0,i.jsx)(n.em,{children:"random state"})," that is the ",(0,i.jsx)(n.em,{children:"value"})," of ",(0,i.jsx)(n.strong,{children:"*random-state*"})," in that ",(0,i.jsx)(n.em,{children:"environment"}),", and that is the default ",(0,i.jsx)(n.em,{children:"random state"})," employed by ",(0,i.jsx)(n.strong,{children:"random"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"current readtable"})," ",(0,i.jsx)(n.em,{children:"n."})," (in a ",(0,i.jsx)(n.em,{children:"dynamic environment"}),") the ",(0,i.jsx)(n.em,{children:"readtable"})," that is the ",(0,i.jsx)(n.em,{children:"value"})," of ",(0,i.jsx)(n.strong,{children:"*readtable*"})," in that ",(0,i.jsx)(n.em,{children:"environment"}),", and that affects the way in which ",(0,i.jsx)(n.em,{children:"expressions"}),(0,i.jsx)("sub",{children:"2"})," are parsed into ",(0,i.jsx)(n.em,{children:"objects"})," by the ",(0,i.jsx)(n.em,{children:"Lisp reader"})," ."]})]})}function a(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>h,a:()=>c});var i=s(67294);const r={},t=i.createContext(r);function c(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function h(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);