"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[13805],{82106:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>x,frontMatter:()=>d,metadata:()=>l,toc:()=>h});var t=s(85893),r=s(11151);function i(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"define-setf-expander"})," ",(0,t.jsx)(n.em,{children:"Macro"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"define-setf-expander"})," ",(0,t.jsx)(n.em,{children:"access-fn lambda-list"})]}),"\n",(0,t.jsxs)(n.p,{children:["[[ ",(0,t.jsx)(n.em,{children:"{declaration}"}),"* ",(0,t.jsx)(n.em,{children:"| documentation"})," ]] ",(0,t.jsx)(n.em,{children:"{form}"}),"*"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"! access-fn"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"access-fn"}),"\u2014a ",(0,t.jsx)(n.em,{children:"symbol"})," that ",(0,t.jsx)(n.em,{children:"names"})," a ",(0,t.jsx)(n.em,{children:"function"})," or ",(0,t.jsx)(n.em,{children:"macro"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"lambda-list"})," \u2013 ",(0,t.jsx)(n.em,{children:"macro lambda list"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,t.jsx)(n.strong,{children:"declare"})," ",(0,t.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"documentation"}),"\u2014a ",(0,t.jsx)(n.em,{children:"string"}),"; not evaluated."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"forms"}),"\u2014an ",(0,t.jsx)(n.em,{children:"implicit progn"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"define-setf-expander"})," specifies the means by which ",(0,t.jsx)(n.strong,{children:"setf"})," updates a ",(0,t.jsx)(n.em,{children:"place"})," that is referenced by ",(0,t.jsx)(n.em,{children:"access-fn"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(n.strong,{children:"setf"})," is given a ",(0,t.jsx)(n.em,{children:"place"})," that is specified in terms of ",(0,t.jsx)(n.em,{children:"access-fn"})," and a new value for the ",(0,t.jsx)(n.em,{children:"place"}),", it is expanded into a form that performs the appropriate update."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.em,{children:"lambda-list"})," supports destructuring. See Section 3.4.4 (Macro Lambda Lists)."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Documentation"})," is attached to ",(0,t.jsx)(n.em,{children:"access-fn"})," as a ",(0,t.jsx)(n.em,{children:"documentation string"})," of kind ",(0,t.jsx)(n.strong,{children:"setf"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"define-setf-expander"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Forms"})," constitute the body of the ",(0,t.jsx)(n.em,{children:"setf expander"})," definition and must compute the ",(0,t.jsx)(n.em,{children:"setf expansion"})," for a call on ",(0,t.jsx)(n.strong,{children:"setf"})," that references the ",(0,t.jsx)(n.em,{children:"place"})," by means of the given ",(0,t.jsx)(n.em,{children:"access-fn"}),". The ",(0,t.jsx)(n.em,{children:"setf expander"})," function is defined in the same ",(0,t.jsx)(n.em,{children:"lexical environment"})," in which the ",(0,t.jsx)(n.strong,{children:"define-setf-expander"})," ",(0,t.jsx)(n.em,{children:"form"})," appears. While ",(0,t.jsx)(n.em,{children:"forms"})," are being executed, the variables in ",(0,t.jsx)(n.em,{children:"lambda-list"})," are bound to parts of the ",(0,t.jsx)(n.em,{children:"place form"}),". The"]}),"\n",(0,t.jsxs)(n.p,{children:["body ",(0,t.jsx)(n.em,{children:"forms"})," (but not the ",(0,t.jsx)(n.em,{children:"lambda-list"}),") in a ",(0,t.jsx)(n.strong,{children:"define-setf-expander"})," ",(0,t.jsx)(n.em,{children:"form"})," are implicitly enclosed in a ",(0,t.jsx)(n.em,{children:"block"})," whose name is ",(0,t.jsx)(n.em,{children:"access-fn"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The evaluation of ",(0,t.jsx)(n.em,{children:"forms"})," must result in the five values described in Section 5.1.1.2 (Setf Expansions)."]}),"\n",(0,t.jsxs)(n.p,{children:["If a ",(0,t.jsx)(n.strong,{children:"define-setf-expander"})," ",(0,t.jsx)(n.em,{children:"form"})," appears as a ",(0,t.jsx)(n.em,{children:"top level form"}),", the ",(0,t.jsx)(n.em,{children:"compiler"})," must make the ",(0,t.jsx)(n.em,{children:"setf expander"})," available so that it may be used to expand calls to ",(0,t.jsx)(n.strong,{children:"setf"})," later on in the ",(0,t.jsx)(n.em,{children:"file"}),". ",(0,t.jsx)(n.em,{children:"Programmers"})," must ensure that the ",(0,t.jsx)(n.em,{children:"forms"})," can be evaluated at compile time if the ",(0,t.jsx)(n.em,{children:"access-fn"})," is used in a ",(0,t.jsx)(n.em,{children:"place"})," later in the same ",(0,t.jsx)(n.em,{children:"file"}),". The ",(0,t.jsx)(n.em,{children:"compiler"})," must make these ",(0,t.jsx)(n.em,{children:"setf expanders"})," available to compile-time calls to ",(0,t.jsx)(n.strong,{children:"get-setf-expansion"})," when its ",(0,t.jsx)(n.em,{children:"environment"})," argument is a value received as the ",(0,t.jsx)(n.em,{children:"environment parameter"})," of a ",(0,t.jsx)(n.em,{children:"macro"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:' \n\n\n\n(defun lastguy (x) (car (last x))) *!* LASTGUY \n\n\n\n(define-setf-expander lastguy (x &amp;environment env) \n\n\n\n"Set the last element in a list to the given value." \n\n\n\n(multiple-value-bind (dummies vals newval setter getter) \n\n\n\n(get-setf-expansion x env) \n\n\n\n(let ((store (gensym))) \n\n\n\n(values dummies \n\n\n\nvals \n\n\n\n\u2018(,store) \n\n\n\n\u2018(progn (rplaca (last ,getter) ,store) ,store) \n\n\n\n\u2018(lastguy ,getter))))) *!* LASTGUY \n\n\n\n(setq a (list \u2019a \u2019b \u2019c \u2019d) \n\n\n\nb (list \u2019x) \n\n\n\nc (list 1 2 3 (list 4 5 6))) *!* (1 2 3 (4 5 6)) \n\n\n\n(setf (lastguy a) 3) *!* 3 \n\n\n\n(setf (lastguy b) 7) *!* 7 \n\n\n\n(setf (lastguy (lastguy c)) \u2019lastguy-symbol) *!* LASTGUY-SYMBOL \n\n\n\na *!* (A B C 3) \n\n\n\nb *!* (7) \n\n\n\nc *!* (1 2 3 (4 5 LASTGUY-SYMBOL)) \n\n\n\n;;; Setf expander for the form (LDB bytespec int). \n\n\n\n;;; Recall that the int form must itself be suitable for SETF. \n\n\n\n(define-setf-expander ldb (bytespec int &amp;environment env) \n\n\n\n(multiple-value-bind (temps vals stores \n\n\n\nstore-form access-form) \n\n\n\n(get-setf-expansion int env);Get setf expansion for int. \n\n\n\nData and Control \n\n\n\n \n\n\n\n \n\n\n\n(let ((btemp (gensym)) ;Temp var for byte specifier. \n\n\n\n(store (gensym)) ;Temp var for byte to store. \n\n\n\n(stemp (first stores))) ;Temp var for int to store. \n\n\n\n(if (cdr stores) (error "Can\u2019t expand this.")) \n\n\n\n;;; Return the setf expansion for LDB as five values. \n\n\n\n(values (cons btemp temps) ;Temporary variables. \n\n\n\n(cons bytespec vals) ;Value forms. \n\n\n\n(list store) ;Store variables. \n\n\n\n\u2018(let ((,stemp (dpb ,store ,btemp ,access-form))) \n\n\n\n,store-form \n\n\n\n,store) ;Storing form. \n\n\n\n\u2018(ldb ,btemp ,access-form) ;Accessing form. \n\n\n\n)))) \n\n\n\n\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"setf"}),", ",(0,t.jsx)(n.strong,{children:"defsetf"}),", ",(0,t.jsx)(n.strong,{children:"documentation"}),", ",(0,t.jsx)(n.strong,{children:"get-setf-expansion"}),", Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"define-setf-expander"})," di\u21b5ers from the long form of ",(0,t.jsx)(n.strong,{children:"defsetf"})," in that while the body is being executed the ",(0,t.jsx)(n.em,{children:"variables"})," in ",(0,t.jsx)(n.em,{children:"lambda-list"})," are bound to parts of the ",(0,t.jsx)(n.em,{children:"place form"}),", not to temporary variables that will be bound to the values of such parts. In addition, ",(0,t.jsx)(n.strong,{children:"define-setf-expander"})," does not have ",(0,t.jsx)(n.strong,{children:"defsetf"}),"\u2019s"]}),"\n",(0,t.jsxs)(n.p,{children:["restriction that ",(0,t.jsx)(n.em,{children:"access-fn"})," must be a ",(0,t.jsx)(n.em,{children:"function"})," or a function-like ",(0,t.jsx)(n.em,{children:"macro"}),"; an arbitrary ",(0,t.jsx)(n.strong,{children:"defmacro"})," destructuring pattern is permitted in ",(0,t.jsx)(n.em,{children:"lambda-list"}),"."]})]})}function a(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}const d={},c="define-setf-expander",l={id:"chap-5/f-d-dictionary/definesetfexpander",title:"define-setf-expander",description:"Expanded Reference: define-setf-expander",source:"@site/docs/chap-5/f-d-dictionary/definesetfexpander.md",sourceDirName:"chap-5/f-d-dictionary",slug:"/chap-5/f-d-dictionary/definesetfexpander",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/definesetfexpander",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-5/f-d-dictionary/definesetfexpander.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"define-modify-macro",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/definemodifymacro"},next:{title:"defparameter, defvar",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/defparameter"}},o={},h=[{value:"Expanded Reference: define-setf-expander",id:"expanded-reference-define-setf-expander",level:2}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"define-setf-expander",children:"define-setf-expander"}),"\n","\n","\n",(0,t.jsx)(a,{}),"\n",(0,t.jsx)(n.h2,{id:"expanded-reference-define-setf-expander",children:"Expanded Reference: define-setf-expander"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"(define-setf-expander )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>d,a:()=>a});var t=s(67294);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);