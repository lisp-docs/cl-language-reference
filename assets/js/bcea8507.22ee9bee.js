"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[77151],{55923:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>ye,contentTitle:()=>fe,default:()=>we,frontMatter:()=>ue,metadata:()=>be,toc:()=>ge});var i=s(85893),n=s(11151);function t(e){const r={em:"em",p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||l("DictionaryLink",!0),t||l("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})})," is a ",(0,i.jsx)(t,{term:"list",children:(0,i.jsx)("i",{children:"list"})})," that specifies a set of ",(0,i.jsx)(t,{term:"parameter",children:(0,i.jsx)("i",{children:"parameters"})})," (sometimes called ",(0,i.jsx)(t,{styled:!0,term:"lambda variable",children:(0,i.jsx)("i",{children:"lambda variables"})}),") and a protocol for receiving ",(0,i.jsx)(t,{term:"value",children:(0,i.jsx)("i",{children:"values"})})," for those ",(0,i.jsx)(t,{term:"parameter",children:(0,i.jsx)("i",{children:"parameters"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["There are several kinds of ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda lists"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["|",(0,i.jsx)(r.strong,{children:"Context Kind of Lambda List"}),"|"]}),"\n",(0,i.jsx)(r.p,{children:"| :- |"}),"\n",(0,i.jsxs)(r.p,{children:["|",(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"defun",children:(0,i.jsx)("b",{children:"defun"})})," ",(0,i.jsx)(r.em,{children:"form ordinary lambda list"})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"defmacro",children:(0,i.jsx)("b",{children:"defmacro"})})," ",(0,i.jsx)(r.em,{children:"form macro lambda list"})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(r.em,{children:"lambda expression ordinary lambda list"})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"flet",children:(0,i.jsx)("b",{children:"flet"})})," local ",(0,i.jsx)(t,{term:"function",children:(0,i.jsx)("i",{children:"function"})})," definition ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"labels",children:(0,i.jsx)("b",{children:"labels"})})," local ",(0,i.jsx)(t,{term:"function",children:(0,i.jsx)("i",{children:"function"})})," definition ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"handler-case",children:(0,i.jsx)("b",{children:"handler-case"})})," ",(0,i.jsx)(r.em,{children:"clause"})," specification ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"restart-case",children:(0,i.jsx)("b",{children:"restart-case"})})," ",(0,i.jsx)(r.em,{children:"clause"})," specification ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"macrolet",children:(0,i.jsx)("b",{children:"macrolet"})})," local ",(0,i.jsx)(t,{term:"macro",children:(0,i.jsx)("i",{children:"macro"})})," definition ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"define-method-combination",children:(0,i.jsx)("b",{children:"define-method-combination"})})," ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"define-method-combination",children:(0,i.jsx)("b",{children:"define-method-combination"})})," ",":arguments"," option *define-method-combination arguments lambda list",(0,i.jsx)(s,{term:"t",children:(0,i.jsx)("b",{children:"*defstruct"})})," ",":constructor"," option ",(0,i.jsx)(t,{styled:!0,term:"boa lambda list",children:(0,i.jsx)("i",{children:"boa lambda list"})})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"defgeneric",children:(0,i.jsx)("b",{children:"defgeneric"})})," ",(0,i.jsx)(r.em,{children:"form generic function lambda list"})," ",(0,i.jsx)(s,{term:"defgeneric",children:(0,i.jsx)("b",{children:"defgeneric"})})," ",(0,i.jsx)(t,{term:"method",children:(0,i.jsx)("i",{children:"method"})})," clause ",(0,i.jsx)(t,{styled:!0,term:"specialized lambda list",children:(0,i.jsx)("i",{children:"specialized lambda list"})})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"defmethod",children:(0,i.jsx)("b",{children:"defmethod"})})," ",(0,i.jsx)(r.em,{children:"form specialized lambda list"})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"defsetf",children:(0,i.jsx)("b",{children:"defsetf"})})," ",(0,i.jsx)(r.em,{children:"form defsetf lambda list"})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"define-setf-expander",children:(0,i.jsx)("b",{children:"define-setf-expander"})})," ",(0,i.jsx)(r.em,{children:"form macro lambda list"})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"deftype",children:(0,i.jsx)("b",{children:"deftype"})})," ",(0,i.jsx)(r.em,{children:"form deftype lambda list"})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"destructuring-bind",children:(0,i.jsx)("b",{children:"destructuring-bind"})})," ",(0,i.jsx)(r.em,{children:"form destructuring lambda list"})," ",(0,i.jsx)(s,{term:"define-compiler-macro",children:(0,i.jsx)("b",{children:"define-compiler-macro"})})," ",(0,i.jsx)(r.em,{children:"form macro lambda list"})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(s,{term:"define-modify-macro",children:(0,i.jsx)("b",{children:"define-modify-macro"})})," ",(0,i.jsx)(r.em,{children:"form define-modify-macro lambda list"})]}),"|"]}),"\n",(0,i.jsx)(r.p,{children:"*"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Figure 3\u201310. What Kind of Lambda Lists to Use"})}),"\n",(0,i.jsxs)(r.p,{children:["Figure 3\u201311 lists some ",(0,i.jsx)(t,{styled:!0,term:"defined name",children:(0,i.jsx)("i",{children:"defined names"})})," that are applicable to ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda lists"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["|",(0,i.jsx)(r.strong,{children:"lambda-list-keywords lambda-parameters-limit"}),"|"]}),"\n",(0,i.jsx)(r.p,{children:"| :- |"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Figure 3\u201311. Defined names applicable to lambda lists"})})]})}function a(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}function l(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function d(e){const r={em:"em",p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||o("DictionaryLink",!0),t||o("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["An ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})})," is used to describe how a set of ",(0,i.jsx)(t,{term:"argument",children:(0,i.jsx)("i",{children:"arguments"})})," is received by an ",(0,i.jsx)(t,{styled:!0,term:"ordinary function",children:(0,i.jsx)("i",{children:"ordinary function"})}),". The ",(0,i.jsx)(t,{styled:!0,term:"defined name",children:(0,i.jsx)("i",{children:"defined names"})})," in Figure 3\u201312 are those which use ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda lists"})}),":"]}),"\n",(0,i.jsxs)(r.p,{children:["|",(0,i.jsxs)("p",{children:[(0,i.jsx)(r.strong,{children:"define-method-combination handler-case restart-case defun labels"})," "]}),(0,i.jsx)("p",{children:(0,i.jsx)(r.strong,{children:"flet lambda"})}),"|"]}),"\n",(0,i.jsx)(r.p,{children:"| :- |"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Figure 3\u201312. Standardized Operators that use Ordinary Lambda Lists"})}),"\n",(0,i.jsxs)(r.p,{children:["An ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})})," can contain the ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})})," shown in Figure 3\u201313."]}),"\n",(0,i.jsxs)(r.p,{children:["|",(0,i.jsxs)("p",{children:[(0,i.jsx)(r.strong,{children:"&allow-other-keys &key &rest"})," "]}),(0,i.jsx)("p",{children:(0,i.jsx)(r.strong,{children:"&aux &optional"})}),"|"]}),"\n",(0,i.jsx)(r.p,{children:"| :- |"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Figure 3\u201313. Lambda List Keywords used by Ordinary Lambda Lists"})}),"\n",(0,i.jsxs)(r.p,{children:["Each ",(0,i.jsx)(t,{term:"element",children:(0,i.jsx)("i",{children:"element"})})," of a ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})})," is either a parameter specifier or a ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keyword"})}),". Implementations are free to provide additional ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})}),". For a list of all ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})})," used by the implementation, see ",(0,i.jsx)(s,{term:"lambda-list-keywords",children:(0,i.jsx)("b",{children:"lambda-list-keywords"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["The syntax for ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda lists"})})," is as follows:"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"lambda-list::"}),"=(",(0,i.jsx)(r.em,{children:"{var}"}),"*"]}),"\n",(0,i.jsxs)(r.p,{children:["[&optional ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"var"})," [",(0,i.jsx)(r.em,{children:"init-form"})," [",(0,i.jsx)(r.em,{children:"supplied-p-parameter"}),"]])",(0,i.jsx)(r.em,{children:"}"}),"*]"]}),"\n",(0,i.jsxs)(r.p,{children:["[&rest ",(0,i.jsx)(r.em,{children:"var"}),"]"]}),"\n",(0,i.jsxs)(r.p,{children:["[&key ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"keyword-name var"}),")",(0,i.jsx)(r.em,{children:"}"})," [",(0,i.jsx)(r.em,{children:"init-form"})," [",(0,i.jsx)(r.em,{children:"supplied-p-parameter"}),"]])",(0,i.jsx)(r.em,{children:"}"}),"*"]}),"\n",(0,i.jsx)(r.p,{children:"[&allow-other-keys]]"}),"\n",(0,i.jsxs)(r.p,{children:["[&aux ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"var"})," [",(0,i.jsx)(r.em,{children:"init-form"}),"])",(0,i.jsx)(r.em,{children:"}"}),"*])"]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(r.em,{children:"var"})," or ",(0,i.jsx)(r.em,{children:"supplied-p-parameter"})," must be a ",(0,i.jsx)(t,{term:"symbol",children:(0,i.jsx)("i",{children:"symbol"})})," that is not the name of a ",(0,i.jsx)(t,{styled:!0,term:"constant variable",children:(0,i.jsx)("i",{children:"constant variable"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["An ",(0,i.jsx)(r.em,{children:"init-form"})," can be any ",(0,i.jsx)(t,{term:"form",children:(0,i.jsx)("i",{children:"form"})}),". Whenever any ",(0,i.jsx)(r.em,{children:"init-form"})," is evaluated for any parameter specifier, that ",(0,i.jsx)(t,{term:"form",children:(0,i.jsx)("i",{children:"form"})})," may refer to any parameter variable to the left of the specifier in which the ",(0,i.jsx)(r.em,{children:"init-form"})," appears, including any ",(0,i.jsx)(r.em,{children:"supplied-p-parameter"})," variables, and may rely on the fact that no other parameter variable has yet been bound (including its own parameter variable)."]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(r.em,{children:"keyword-name"})," can be any ",(0,i.jsx)(t,{term:"symbol",children:(0,i.jsx)("i",{children:"symbol"})}),", but by convention is normally a ",(0,i.jsx)(t,{term:"keyword",children:(0,i.jsx)("i",{children:"keyword"})})," ",(0,i.jsx)("sub",{children:"1"}),"; all ",(0,i.jsx)(r.em,{children:"standardized functions"})," follow that convention."]}),"\n",(0,i.jsxs)(r.p,{children:["An ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})})," has five parts, any or all of which may be empty. For information about the treatment of argument mismatches, see Section 3.5 (Error Checking in Function Calls)."]})]})}function c(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function o(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function h(e){const r={em:"em",p:"p",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||x("DictionaryLink",!0),t||x("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["These are all the parameter specifiers up to the first ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keyword"})}),"; if there are no ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})}),", then all the specifiers are for required parameters. Each required parameter is specified by a parameter variable ",(0,i.jsx)(r.em,{children:"var"}),". ",(0,i.jsx)(r.em,{children:"var"})," is bound as a lexical variable unless it is declared ",(0,i.jsx)(s,{term:"special",children:(0,i.jsx)("b",{children:"special"})}),"."]}),"\n",(0,i.jsx)(r.p,{children:"If there are n required parameters (n may be zero), there must be at least n passed arguments, and the required parameters are bound to the first n passed arguments; see Section 3.5 (Error Checking in Function Calls). The other parameters are then processed using any remaining arguments."})]})}function m(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}function x(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function j(e){const r={em:"em",p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||u("DictionaryLink",!0),t||u("GlossaryTerm",!0),(0,i.jsxs)(r.p,{children:["If ",(0,i.jsx)(r.strong,{children:"&optional"})," is present, the optional parameter specifiers are those following ",(0,i.jsx)(r.strong,{children:"&optional"})," up to the next ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keyword"})})," or the end of the list. If optional parameters are specified, then each one is processed as follows. If any unprocessed arguments remain, then the parameter variable ",(0,i.jsx)(r.em,{children:"var"})," is bound to the next remaining argument, just as for a required parameter. If no arguments remain, however, then ",(0,i.jsx)(r.em,{children:"init-form"})," is evaluated, and the parameter variable is bound to the resulting value (or to ",(0,i.jsx)(s,{term:"nil",children:(0,i.jsx)("b",{children:"nil"})})," if no ",(0,i.jsx)(r.em,{children:"init-form"})," appears in the parameter specifier). If another variable name ",(0,i.jsx)(r.em,{children:"supplied-p-parameter"})," appears in the specifier, it is bound to ",(0,i.jsx)(t,{term:"true",children:(0,i.jsx)("i",{children:"true"})})," if an argument had been available, and to ",(0,i.jsx)(t,{term:"false",children:(0,i.jsx)("i",{children:"false"})})," if no argument remained (and therefore ",(0,i.jsx)(r.em,{children:"init-form"})," had to be evaluated). ",(0,i.jsx)(r.em,{children:"Supplied-p-parameter"})," is bound not to an argument but to a value indicating whether or not an argument had been supplied for the corresponding ",(0,i.jsx)(r.em,{children:"var"}),"."]})}function p(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(j,{...e})}):j(e)}function u(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function f(e){const r={p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||y("DictionaryLink",!0),t||y("GlossaryTerm",!0),(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"&rest"}),", if present, must be followed by a single ",(0,i.jsx)(t,{styled:!0,term:"rest parameter",children:(0,i.jsx)("i",{children:"rest parameter"})})," specifier, which in turn must be followed by another ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keyword"})})," or the end of the ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})}),". After all optional parameter specifiers have been processed, then there may or may not be a ",(0,i.jsx)(t,{styled:!0,term:"rest parameter",children:(0,i.jsx)("i",{children:"rest parameter"})})," . If there is a ",(0,i.jsx)(t,{styled:!0,term:"rest parameter",children:(0,i.jsx)("i",{children:"rest parameter"})})," , it is bound to a ",(0,i.jsx)(t,{term:"list",children:(0,i.jsx)("i",{children:"list"})})," of all as-yet-unprocessed arguments. If no unprocessed arguments remain, the ",(0,i.jsx)(t,{styled:!0,term:"rest parameter",children:(0,i.jsx)("i",{children:"rest parameter"})})," is bound to the ",(0,i.jsx)(t,{styled:!0,term:"empty list",children:(0,i.jsx)("i",{children:"empty list"})}),". If there is no ",(0,i.jsx)(t,{styled:!0,term:"rest parameter",children:(0,i.jsx)("i",{children:"rest parameter"})})," and there are no ",(0,i.jsx)(t,{styled:!0,term:"keyword parameter",children:(0,i.jsx)("i",{children:"keyword parameters"})}),", then an error should be signaled if any unprocessed arguments remain; see Section 3.5 (Error Checking in Function Calls). The value of a ",(0,i.jsx)(t,{styled:!0,term:"rest parameter",children:(0,i.jsx)("i",{children:"rest parameter"})})," is permitted, but not required, to share structure with the last argument to ",(0,i.jsx)(s,{term:"apply",children:(0,i.jsx)("b",{children:"apply"})}),"."]})}function b(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}function y(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function g(e){const r={em:"em",p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||w("DictionaryLink",!0),t||w("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["If ",(0,i.jsx)(r.strong,{children:"&key"})," is present, all specifiers up to the next ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keyword"})})," or the end of the ",(0,i.jsx)(t,{term:"list",children:(0,i.jsx)("i",{children:"list"})})," are keyword parameter specifiers. When keyword parameters are processed, the same arguments are processed that would be made into a ",(0,i.jsx)(t,{term:"list",children:(0,i.jsx)("i",{children:"list"})})," for a ",(0,i.jsx)(t,{styled:!0,term:"rest parameter",children:(0,i.jsx)("i",{children:"rest parameter"})})," . It is permitted to specify both ",(0,i.jsx)(r.strong,{children:"&rest"})," and ",(0,i.jsx)(r.strong,{children:"&key"}),". In this case the remaining arguments are used for both purposes; that is, all remaining arguments are made into a ",(0,i.jsx)(t,{term:"list",children:(0,i.jsx)("i",{children:"list"})})," for the ",(0,i.jsx)(t,{styled:!0,term:"rest parameter",children:(0,i.jsx)("i",{children:"rest parameter"})})," , and are also processed for the ",(0,i.jsx)(r.strong,{children:"&key"})," parameters. If ",(0,i.jsx)(r.strong,{children:"&key"})," is specified, there must remain an even number of arguments; see Section 3.5.1.6 (Odd Number of Keyword Arguments). These arguments are considered as pairs, the first argument in each pair being interpreted as a name and the second as the corresponding value. The first ",(0,i.jsx)(t,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," of each pair must be a ",(0,i.jsx)(t,{term:"symbol",children:(0,i.jsx)("i",{children:"symbol"})}),"; see Section 3.5.1.5 (Invalid Keyword"]}),"\n",(0,i.jsxs)(r.p,{children:["Arguments). The keyword parameter specifiers may optionally be followed by the ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keyword"})})," ",(0,i.jsx)(r.strong,{children:"&allow-other-keys"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["In each keyword parameter specifier must be a name ",(0,i.jsx)(r.em,{children:"var"})," for the parameter variable. If the ",(0,i.jsx)(r.em,{children:"var"})," appears alone or in a (",(0,i.jsx)(r.em,{children:"var init-form"}),") combination, the keyword name used when matching ",(0,i.jsx)(t,{term:"argument",children:(0,i.jsx)("i",{children:"arguments"})})," to ",(0,i.jsx)(t,{term:"parameter",children:(0,i.jsx)("i",{children:"parameters"})})," is a ",(0,i.jsx)(t,{term:"symbol",children:(0,i.jsx)("i",{children:"symbol"})})," in the KEYWORD ",(0,i.jsx)(t,{term:"package",children:(0,i.jsx)("i",{children:"package"})})," whose ",(0,i.jsx)(t,{term:"name",children:(0,i.jsx)("i",{children:"name"})})," is the ",(0,i.jsx)(t,{term:"same",children:(0,i.jsx)("i",{children:"same"})})," (under ",(0,i.jsx)(s,{term:"string",children:(0,i.jsx)("b",{children:"string="})}),") as ",(0,i.jsx)(r.em,{children:"var"}),"\u2019s. If the notation ((",(0,i.jsx)(r.em,{children:"keyword-name var"}),") ",(0,i.jsx)(r.em,{children:"init-form"}),") is used, then the keyword name used to match ",(0,i.jsx)(t,{term:"argument",children:(0,i.jsx)("i",{children:"arguments"})})," to ",(0,i.jsx)(t,{term:"parameter",children:(0,i.jsx)("i",{children:"parameters"})})," is ",(0,i.jsx)(r.em,{children:"keyword-name"}),", which may be a ",(0,i.jsx)(t,{term:"symbol",children:(0,i.jsx)("i",{children:"symbol"})})," in any ",(0,i.jsx)(t,{term:"package",children:(0,i.jsx)("i",{children:"package"})}),". (Of course, if it is not a ",(0,i.jsx)(t,{term:"symbol",children:(0,i.jsx)("i",{children:"symbol"})})," in the KEYWORD ",(0,i.jsx)(t,{term:"package",children:(0,i.jsx)("i",{children:"package"})}),", it does not necessarily self-evaluate, so care must be taken when calling the function to make sure that normal evaluation still yields the keyword name.) Thus"]}),"\n",(0,i.jsx)(r.p,{children:"(defun foo (&key radix (type \u2019integer)) ...)"}),"\n",(0,i.jsx)(r.p,{children:"means exactly the same as"}),"\n",(0,i.jsxs)(r.p,{children:["(defun foo (&key ((",":radix"," radix)) ((",":type"," type) \u2019integer)) ...)"]}),"\n",(0,i.jsxs)(r.p,{children:["The keyword parameter specifiers are, like all parameter specifiers, effectively processed from left to right. For each keyword parameter specifier, if there is an argument pair whose name matches that specifier\u2019s name (that is, the names are ",(0,i.jsx)(s,{term:"eq",children:(0,i.jsx)("b",{children:"eq"})}),"), then the parameter variable for that specifier is bound to the second item (the value) of that argument pair. If more than one such argument pair"]}),"\n",(0,i.jsxs)(r.p,{children:["matches, the leftmost argument pair is used. If no such argument pair exists, then the ",(0,i.jsx)(r.em,{children:"init-form"})," for that specifier is evaluated and the parameter variable is bound to that value (or to ",(0,i.jsx)(s,{term:"nil",children:(0,i.jsx)("b",{children:"nil"})})," if no ",(0,i.jsx)(r.em,{children:"init-form"})," was specified). ",(0,i.jsx)(r.em,{children:"supplied-p-parameter"})," is treated as for ",(0,i.jsx)(r.strong,{children:"&optional"})," parameters: it is bound to ",(0,i.jsx)(t,{term:"true",children:(0,i.jsx)("i",{children:"true"})})," if there was a matching argument pair, and to ",(0,i.jsx)(t,{term:"false",children:(0,i.jsx)("i",{children:"false"})})," otherwise."]}),"\n",(0,i.jsx)(r.p,{children:"Unless keyword argument checking is suppressed, an argument pair must a name matched by a parameter specifier; see Section 3.5.1.4 (Unrecognized Keyword Arguments)."}),"\n",(0,i.jsxs)(r.p,{children:["If keyword argument checking is suppressed, then it is permitted for an argument pair to match no parameter specifier, and the argument pair is ignored, but such an argument pair is accessible through the ",(0,i.jsx)(t,{styled:!0,term:"rest parameter",children:(0,i.jsx)("i",{children:"rest parameter"})})," if one was supplied. The purpose of these mechanisms is to allow sharing of argument lists among several ",(0,i.jsx)(t,{styled:!0,term:"lambda expression",children:(0,i.jsx)("i",{children:"lambda expressions"})})," and to allow either the caller or the called ",(0,i.jsx)(t,{styled:!0,term:"lambda expression",children:(0,i.jsx)("i",{children:"lambda expression"})})," to specify that such sharing may be taking place."]}),"\n",(0,i.jsxs)(r.p,{children:["Note that if ",(0,i.jsx)(r.strong,{children:"&key"})," is present, a keyword argument of ",":allow-other-keys"," is always permitted\u2014 regardless of whether the associated value is ",(0,i.jsx)(t,{term:"true",children:(0,i.jsx)("i",{children:"true"})})," or ",(0,i.jsx)(t,{term:"false",children:(0,i.jsx)("i",{children:"false"})}),". However, if the value is ",(0,i.jsx)(t,{term:"false",children:(0,i.jsx)("i",{children:"false"})}),", other non-matching keywords are not tolerated (unless ",(0,i.jsx)(r.strong,{children:"&allow-other-keys"})," was used)."]}),"\n",(0,i.jsxs)(r.p,{children:["Furthermore, if the receiving argument list specifies a regular argument which would be flagged by ",":allow-other-keys",", then ",":allow-other-keys"," has both its special-cased meaning (identifying whether additional keywords are permitted) and its normal meaning (data flow into the function in question)."]})]})}function v(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}function w(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function k(e){const r={p:"p",strong:"strong",...(0,n.a)(),...e.components},{GlossaryTerm:s}=r;return s||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["If ",(0,i.jsx)(r.strong,{children:"&allow-other-keys"})," was specified in the ",(0,i.jsx)(s,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})})," of a ",(0,i.jsx)(s,{term:"function",children:(0,i.jsx)("i",{children:"function"})}),", ",(0,i.jsx)(s,{term:"keyword",children:(0,i.jsx)("i",{children:"keyword"})})," ",(0,i.jsx)("sub",{children:"2"})," ",(0,i.jsx)(s,{term:"argument",children:(0,i.jsx)("i",{children:"argument"})})," checking is suppressed in calls to that ",(0,i.jsx)(s,{term:"function",children:(0,i.jsx)("i",{children:"function"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["If the ",":allow-other-keys"," ",(0,i.jsx)(s,{term:"argument",children:(0,i.jsx)("i",{children:"argument"})})," is ",(0,i.jsx)(s,{term:"true",children:(0,i.jsx)("i",{children:"true"})})," in a call to a ",(0,i.jsx)(s,{term:"function",children:(0,i.jsx)("i",{children:"function"})}),", ",(0,i.jsx)(s,{term:"keyword",children:(0,i.jsx)("i",{children:"keyword"})})," ",(0,i.jsx)("sub",{children:"2"})," ",(0,i.jsx)(s,{term:"argument",children:(0,i.jsx)("i",{children:"argument"})})," checking is suppressed in that call."]}),"\n",(0,i.jsxs)(r.p,{children:["The ",":allow-other-keys"," ",(0,i.jsx)(s,{term:"argument",children:(0,i.jsx)("i",{children:"argument"})})," is permissible in all situations involving ",(0,i.jsx)(s,{term:"keyword",children:(0,i.jsx)("i",{children:"keyword"})})," ",(0,i.jsx)("sub",{children:"2"})," ",(0,i.jsx)(s,{term:"argument",children:(0,i.jsx)("i",{children:"arguments"})}),", even when its associated ",(0,i.jsx)(s,{term:"value",children:(0,i.jsx)("i",{children:"value"})})," is ",(0,i.jsx)(s,{term:"false",children:(0,i.jsx)("i",{children:"false"})}),"."]})]})}function L(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(k,{...e})}):k(e)}function T(e){const r={code:"code",pre:"pre",...(0,n.a)(),...e.components};return(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lisp",children:";;; The caller can supply :ALLOW-OTHER-KEYS T to suppress checking. \n((lambda (&key x) x) :x 1 :y 2 :allow-other-keys t) \u2192 1 \n;;; The callee can use &ALLOW-OTHER-KEYS to suppress checking. \n((lambda (&key x &allow-other-keys) x) :x 1 :y 2) \u2192 1 \n;;; :ALLOW-OTHER-KEYS NIL is always permitted. \n((lambda (&key) t) :allow-other-keys nil) \u2192 T \n;;; As with other keyword arguments, only the left-most pair \n;;; named :ALLOW-OTHER-KEYS has any effect. \n((lambda (&key x) x) \n :x 1 :y 2 :allow-other-keys t :allow-other-keys nil) \n\u2192 1 \n;;; Only the left-most pair named :ALLOW-OTHER-KEYS has any effect, \n;;; so in safe code this signals a PROGRAM-ERROR (and might enter the \n;;; debugger). In unsafe code, the consequences are undefined. \n((lambda (&key x) x) ;This call is not valid \n :x 1 :y 2 :allow-other-keys nil :allow-other-keys t) \n"})})}function E(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(T,{...e})}):T(e)}function D(e){const r={em:"em",p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||F("DictionaryLink",!0),t||F("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["These are not really parameters. If the ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keyword"})})," ",(0,i.jsx)(r.strong,{children:"&aux"})," is present, all specifiers after it are auxiliary variable specifiers. After all parameter specifiers have been processed, the auxiliary variable specifiers (those following &aux) are processed from left to right. For each one, ",(0,i.jsx)(r.em,{children:"init-form"})," is"]}),"\n",(0,i.jsxs)(r.p,{children:["evaluated and ",(0,i.jsx)(r.em,{children:"var"})," is bound to that value (or to ",(0,i.jsx)(s,{term:"nil",children:(0,i.jsx)("b",{children:"nil"})})," if no ",(0,i.jsx)(r.em,{children:"init-form"})," was specified). ",(0,i.jsx)(r.strong,{children:"&aux"})," variable processing is analogous to ",(0,i.jsx)(s,{term:"let",children:(0,i.jsx)("b",{children:"let*"})})," processing."]}),"\n",(0,i.jsx)(r.p,{children:"(lambda (x y &aux (a (car x)) (b 2) c) (list x y a b c))"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"\u2261"})," (lambda (x y) (let* ((a (car x)) (b 2) c) (list x y a b c)))"]})]})}function A(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(D,{...e})}):D(e)}function F(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function I(e){const r={code:"code",pre:"pre",...(0,n.a)(),...e.components};return(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lisp",children:"Here are some examples involving *optional parameters* and *rest parameters*: \n((lambda (a b) (+ a (\\* b 3))) 4 5) \u2192 19 \n((lambda (a &optional (b 2)) (+ a (\\* b 3))) 4 5) \u2192 19 \n((lambda (a &optional (b 2)) (+ a (\\* b 3))) 4) \u2192 10 \n((lambda (&optional (a 2 b) (c 3 d) &rest x) (list a b c d x))) \n\u2192 (2 NIL 3 NIL NIL)  \n((lambda (&optional (a 2 b) (c 3 d) &rest x) (list a b c d x)) 6) \n\u2192 (6 T 3 NIL NIL) \n((lambda (&optional (a 2 b) (c 3 d) &rest x) (list a b c d x)) 6 3) \n\u2192 (6 T 3 T NIL) \n((lambda (&optional (a 2 b) (c 3 d) &rest x) (list a b c d x)) 6 3 8) \n\u2192 (6 T 3 T (8)) \n((lambda (&optional (a 2 b) (c 3 d) &rest x) (list a b c d x)) \n 6 3 8 9 10 11) \n\u2192 (6 t 3 t (8 9 10 11)) \nHere are some examples involving *keyword parameters*: \n((lambda (a b &key c d) (list a b c d)) 1 2) \u2192 (1 2 NIL NIL) \n((lambda (a b &key c d) (list a b c d)) 1 2 :c 6) \u2192 (1 2 6 NIL) \n((lambda (a b &key c d) (list a b c d)) 1 2 :d 8) \u2192 (1 2 NIL 8) \n((lambda (a b &key c d) (list a b c d)) 1 2 :c 6 :d 8) \u2192 (1 2 6 8) \n((lambda (a b &key c d) (list a b c d)) 1 2 :d 8 :c 6) \u2192 (1 2 6 8) \n((lambda (a b &key c d) (list a b c d)) :a 1 :d 8 :c 6) \u2192 (:a 1 6 8) \n((lambda (a b &key c d) (list a b c d)) :a :b :c :d) \u2192 (:a :b :d NIL) \n((lambda (a b &key ((:sea c)) d) (list a b c d)) 1 2 :sea 6) \u2192 (1 2 6 NIL) \n((lambda (a b &key ((c c)) d) (list a b c d)) 1 2 \u2019c 6) \u2192 (1 2 6 NIL) \nHere are some examples involving *optional parameters*, *rest parameters*, and *keyword parameters* together: \n((lambda (a &optional (b 3) &rest x &key c (d a)) \n   (list a b c d x)) 1) \n\u2192 (1 3 NIL 1 ()) \n((lambda (a &optional (b 3) &rest x &key c (d a)) \n   (list a b c d x)) 1 2) \n\u2192 (1 2 NIL 1 ()) \n((lambda (a &optional (b 3) &rest x &key c (d a)) \n   (list a b c d x)) :c 7) \n\u2192 (:c 7 NIL :c ()) \n((lambda (a &optional (b 3) &rest x &key c (d a)) \n   (list a b c d x)) 1 6 :c 7) \n\u2192 (1 6 7 1 (:c 7)) \n((lambda (a &optional (b 3) &rest x &key c (d a)) \n   (list a b c d x)) 1 6 :d 8) \n\u2192 (1 6 NIL 8 (:d 8)) \n((lambda (a &optional (b 3) &rest x &key c (d a)) \n   (list a b c d x)) 1 6 :d 8 :c 9 :d 10) \n\u2192 (1 6 9 8 (:d 8 :c 9 :d 10)) \nAs an example of the use of **&allow-other-keys** and :allow-other-keys, consider a *function* that takes two named arguments of its own and also accepts additional named arguments to be passed to **make-array**:  \n(defun array-of-strings (str dims &rest named-pairs \n\t\t\t &key (start 0) end &allow-other-keys) \n  (apply #\u2019make-array dims \n\t   :initial-element (subseq str start end) \n\t   :allow-other-keys t \n\t   named-pairs)) \nThis *function* takes a *string* and dimensioning information and returns an *array* of the specified dimensions, each of whose elements is the specified *string*. However, :start and :end named arguments may be used to specify that a substring of the given *string* should be used. In addition, the presence of **&allow-other-keys** in the *lambda list* indicates that the caller may supply additional named arguments; the *rest parameter* provides access to them. These additional named arguments are passed to **make-array**. The *function* **make-array** normally does not allow the named arguments :start and :end to be used, and an error should be signaled if such named arguments are supplied to **make-array**. However, the presence in the call to **make-array** of the named argument :allow-other-keys with a *true* value causes any extraneous named arguments, including :start and :end, to be acceptable and ignored. \n"})})}function S(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(I,{...e})}):I(e)}function G(e){const r={em:"em",p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||O("DictionaryLink",!0),t||O("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"generic function lambda list",children:(0,i.jsx)("i",{children:"generic function lambda list"})})," is used to describe the overall shape of the argument list to be accepted by a ",(0,i.jsx)(t,{styled:!0,term:"generic function",children:(0,i.jsx)("i",{children:"generic function"})}),". Individual ",(0,i.jsx)(r.em,{children:"method signatures"})," might contribute additional ",(0,i.jsx)(t,{styled:!0,term:"keyword parameter",children:(0,i.jsx)("i",{children:"keyword parameters"})})," to the ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})})," of the ",(0,i.jsx)(t,{styled:!0,term:"effective method",children:(0,i.jsx)("i",{children:"effective method"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"generic function lambda list",children:(0,i.jsx)("i",{children:"generic function lambda list"})})," is used by ",(0,i.jsx)(s,{term:"defgeneric",children:(0,i.jsx)("b",{children:"defgeneric"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"generic function lambda list",children:(0,i.jsx)("i",{children:"generic function lambda list"})})," has the following syntax:"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"lambda-list::"}),"=(",(0,i.jsx)(r.em,{children:"{var}"}),"*"]}),"\n",(0,i.jsxs)(r.p,{children:["[&optional ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"var"}),")",(0,i.jsx)(r.em,{children:"}"}),"*]"]}),"\n",(0,i.jsxs)(r.p,{children:["[&rest ",(0,i.jsx)(r.em,{children:"var"}),"]"]}),"\n",(0,i.jsxs)(r.p,{children:["[&key ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"keyword-name var"}),")",(0,i.jsx)(r.em,{children:"}"}),")",(0,i.jsx)(r.em,{children:"}"}),"*"]}),"\n",(0,i.jsx)(r.p,{children:"[&allow-other-keys]])"}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"generic function lambda list",children:(0,i.jsx)("i",{children:"generic function lambda list"})})," can contain the ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})})," shown in Figure 3\u201314."]}),"\n",(0,i.jsxs)(r.p,{children:["|",(0,i.jsxs)("p",{children:[(0,i.jsx)(r.strong,{children:"&allow-other-keys &optional"})," "]}),(0,i.jsx)("p",{children:(0,i.jsx)(r.strong,{children:"&key &rest"})}),"|"]}),"\n",(0,i.jsx)(r.p,{children:"| :- |"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Figure 3\u201314. Lambda List Keywords used by Generic Function Lambda Lists"})," Evaluation and"]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"generic function lambda list",children:(0,i.jsx)("i",{children:"generic function lambda list"})})," differs from an ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})})," in the following ways:"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Required arguments"})}),"\n",(0,i.jsxs)(r.p,{children:["Zero or more ",(0,i.jsx)(t,{styled:!0,term:"required parameter",children:(0,i.jsx)("i",{children:"required parameters"})})," must be specified."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Optional and keyword arguments"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(t,{styled:!0,term:"optional parameter",children:(0,i.jsx)("i",{children:"Optional parameters"})})," and ",(0,i.jsx)(t,{styled:!0,term:"keyword parameter",children:(0,i.jsx)("i",{children:"keyword parameters"})})," may not have default initial value forms nor"]}),"\n",(0,i.jsx)(r.p,{children:"use supplied-p parameters."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Use of &aux"})}),"\n",(0,i.jsxs)(r.p,{children:["The use of ",(0,i.jsx)(r.strong,{children:"&aux"})," is not allowed."]})]})}function z(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(G,{...e})}):G(e)}function O(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function q(e){const r={em:"em",p:"p",strong:"strong",...(0,n.a)(),...e.components},{GlossaryTerm:s}=r;return s||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(s,{styled:!0,term:"specialized lambda list",children:(0,i.jsx)("i",{children:"specialized lambda list"})})," is used to ",(0,i.jsx)(s,{term:"specialize",children:(0,i.jsx)("i",{children:"specialize"})})," a ",(0,i.jsx)(s,{term:"method",children:(0,i.jsx)("i",{children:"method"})})," for a particular ",(0,i.jsx)(s,{term:"signature",children:(0,i.jsx)("i",{children:"signature"})})," and to describe how ",(0,i.jsx)(s,{term:"argument",children:(0,i.jsx)("i",{children:"arguments"})})," matching that ",(0,i.jsx)(s,{term:"signature",children:(0,i.jsx)("i",{children:"signature"})})," are received by the ",(0,i.jsx)(s,{term:"method",children:(0,i.jsx)("i",{children:"method"})}),". The ",(0,i.jsx)(s,{styled:!0,term:"defined name",children:(0,i.jsx)("i",{children:"defined names"})})," in Figure 3\u201315 use ",(0,i.jsx)(s,{styled:!0,term:"specialized lambda list",children:(0,i.jsx)("i",{children:"specialized lambda lists"})})," in some way; see the dictionary entry for each for information about how."]}),"\n",(0,i.jsxs)(r.p,{children:["|",(0,i.jsx)(r.strong,{children:"defmethod defgeneric"}),"|"]}),"\n",(0,i.jsx)(r.p,{children:"| :- |"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Figure 3\u201315. Standardized Operators that use Specialized Lambda Lists"})}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(s,{styled:!0,term:"specialized lambda list",children:(0,i.jsx)("i",{children:"specialized lambda list"})})," can contain the ",(0,i.jsx)(s,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})})," shown in Figure 3\u201316."]}),"\n",(0,i.jsxs)(r.p,{children:["|",(0,i.jsxs)("p",{children:[(0,i.jsx)(r.strong,{children:"&allow-other-keys &key &rest"})," "]}),(0,i.jsx)("p",{children:(0,i.jsx)(r.strong,{children:"&aux &optional"})}),"|"]}),"\n",(0,i.jsx)(r.p,{children:"| :- |"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Figure 3\u201316. Lambda List Keywords used by Specialized Lambda Lists"})}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(s,{styled:!0,term:"specialized lambda list",children:(0,i.jsx)("i",{children:"specialized lambda list"})})," is syntactically the same as an ",(0,i.jsx)(s,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})})," except that each ",(0,i.jsx)(s,{styled:!0,term:"required parameter",children:(0,i.jsx)("i",{children:"required parameter"})})," may optionally be associated with a ",(0,i.jsx)(s,{term:"class",children:(0,i.jsx)("i",{children:"class"})})," or ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," for which that ",(0,i.jsx)(s,{term:"parameter",children:(0,i.jsx)("i",{children:"parameter"})})," is ",(0,i.jsx)(s,{term:"specialized",children:(0,i.jsx)("i",{children:"specialized"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"lambda-list::"}),"=(",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"var"})," [",(0,i.jsx)(r.em,{children:"specializer"}),"])",(0,i.jsx)(r.em,{children:"}"}),"*"]}),"\n",(0,i.jsxs)(r.p,{children:["[&optional ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"var"})," [",(0,i.jsx)(r.em,{children:"init-form"})," [",(0,i.jsx)(r.em,{children:"supplied-p-parameter"}),"]])",(0,i.jsx)(r.em,{children:"}"}),"*]"]}),"\n",(0,i.jsxs)(r.p,{children:["[&rest ",(0,i.jsx)(r.em,{children:"var"}),"]"]}),"\n",(0,i.jsxs)(r.p,{children:["[&key ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"keyword-name var"}),")",(0,i.jsx)(r.em,{children:"}"})," [",(0,i.jsx)(r.em,{children:"init-form"})," [",(0,i.jsx)(r.em,{children:"supplied-p-parameter"}),"]])",(0,i.jsx)(r.em,{children:"}"}),"* [&allow-other-keys[&aux ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"var"})," [",(0,i.jsx)(r.em,{children:"init-form"}),"])",(0,i.jsx)(r.em,{children:"}"}),"*])"]})]})}function N(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(q,{...e})}):q(e)}function K(e){const r={em:"em",p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||R("DictionaryLink",!0),t||R("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})})," is used in describing ",(0,i.jsx)(t,{term:"macro",children:(0,i.jsx)("i",{children:"macros"})})," defined by the ",(0,i.jsx)(t,{term:"operator",children:(0,i.jsx)("i",{children:"operators"})})," in Figure 3\u201317."]}),"\n",(0,i.jsxs)(r.p,{children:["|",(0,i.jsxs)("p",{children:[(0,i.jsx)(r.strong,{children:"define-compiler-macro defmacro macrolet"})," "]}),(0,i.jsx)("p",{children:(0,i.jsx)(s,{term:"define-setf-expander",children:(0,i.jsx)("b",{children:"define-setf-expander"})})}),"|"]}),"\n",(0,i.jsx)(r.p,{children:"| :- |"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Figure 3\u201317. Operators that use Macro Lambda Lists"})}),"\n",(0,i.jsxs)(r.p,{children:["With the additional restriction that an ",(0,i.jsx)(t,{styled:!0,term:"environment parameter",children:(0,i.jsx)("i",{children:"environment parameter"})})," may appear only once (at any of the positions indicated), a ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})})," has the following syntax:"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"reqvars::"}),"=",(0,i.jsx)(r.em,{children:"{var | \u2193pattern}"}),"*"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"optvars::"}),"=[&optional ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"{var | \u2193pattern}"})," [",(0,i.jsx)(r.em,{children:"init-form"})," [",(0,i.jsx)(r.em,{children:"supplied-p-parameter"}),"]])",(0,i.jsx)(r.em,{children:"}"}),"*]"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"restvar::"}),"=[",(0,i.jsx)(r.em,{children:"{"}),"&rest ",(0,i.jsx)(r.em,{children:"|"})," &body*} {var | \u2193pattern}*]"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"keyvars::"}),"=[&key ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"keyword-name {var | \u2193pattern}"}),")",(0,i.jsx)(r.em,{children:"}"})," [",(0,i.jsx)(r.em,{children:"init-form"})," [",(0,i.jsx)(r.em,{children:"supplied-p-parameter"}),"]])",(0,i.jsx)(r.em,{children:"}"}),"* [&allow-other-keys]]"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"auxvars::"}),"=[&aux ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"var"})," [",(0,i.jsx)(r.em,{children:"init-form"}),"])",(0,i.jsx)(r.em,{children:"}"}),"*]"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"envvar::"}),"=[&environment ",(0,i.jsx)(r.em,{children:"var"}),"]"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"wholevar::"}),"=[&whole ",(0,i.jsx)(r.em,{children:"var"}),"]"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"lambda-list::"}),"=(",(0,i.jsx)(r.em,{children:"\u2193wholevar \u2193envvar \u2193reqvars \u2193envvar \u2193optvars \u2193envvar"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"\u2193restvar \u2193envvar \u2193keyvars \u2193envvar \u2193auxvars \u2193envvar"}),") ",(0,i.jsx)(r.em,{children:"|"})]}),"\n",(0,i.jsxs)(r.p,{children:["(",(0,i.jsx)(r.em,{children:"\u2193wholevar \u2193envvar \u2193reqvars \u2193envvar \u2193optvars \u2193envvar"})," . ",(0,i.jsx)(r.em,{children:"var"}),")"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"pattern::"}),"=(",(0,i.jsx)(r.em,{children:"\u2193wholevar \u2193reqvars \u2193optvars \u2193restvar \u2193keyvars \u2193auxvars"}),") ",(0,i.jsx)(r.em,{children:"|"})]}),"\n",(0,i.jsxs)(r.p,{children:["(",(0,i.jsx)(r.em,{children:"\u2193wholevar \u2193reqvars \u2193optvars"})," . ",(0,i.jsx)(r.em,{children:"var"}),")"]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})})," can contain the ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})})," shown in Figure 3\u201318."]}),"\n",(0,i.jsxs)(r.p,{children:["|",(0,i.jsxs)("p",{children:[(0,i.jsx)(r.strong,{children:"&allow-other-keys &environment &rest"})," "]}),(0,i.jsxs)("p",{children:[(0,i.jsx)(r.strong,{children:"&aux &key &whole"})," "]}),(0,i.jsx)("p",{children:(0,i.jsx)(r.strong,{children:"&body &optional"})}),"|"]}),"\n",(0,i.jsx)(r.p,{children:"| :- |"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Figure 3\u201318. Lambda List Keywords used by Macro Lambda Lists"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(t,{styled:!0,term:"optional parameter",children:(0,i.jsx)("i",{children:"Optional parameters"})})," (introduced by ",(0,i.jsx)(r.strong,{children:"&optional"}),") and ",(0,i.jsx)(t,{styled:!0,term:"keyword parameter",children:(0,i.jsx)("i",{children:"keyword parameters"})})," (introduced by ",(0,i.jsx)(r.strong,{children:"&key"}),") can be supplied in a ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})}),", just as in an ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})}),". Both may contain default initialization forms and ",(0,i.jsx)(t,{styled:!0,term:"supplied-p parameter",children:(0,i.jsx)("i",{children:"supplied-p parameters"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"&body"})," is identical in function to ",(0,i.jsx)(r.strong,{children:"&rest"}),", but it can be used to inform certain output-formatting and editing functions that the remainder of the ",(0,i.jsx)(t,{term:"form",children:(0,i.jsx)("i",{children:"form"})})," is treated as a body, and should be indented accordingly. Only one of ",(0,i.jsx)(r.strong,{children:"&body"})," or ",(0,i.jsx)(r.strong,{children:"&rest"})," can be used at any particular level; see Section 3.4.4.1 (Destructuring by Lambda Lists). ",(0,i.jsx)(r.strong,{children:"&body"})," can appear at any level of a ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})}),"; for details, see Section 3.4.4.1 (Destructuring by Lambda Lists)."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"&whole"})," is followed by a single variable that is bound to the entire macro-call form; this is the value that the ",(0,i.jsx)(t,{styled:!0,term:"macro function",children:(0,i.jsx)("i",{children:"macro function"})})," receives as its first argument. If ",(0,i.jsx)(r.strong,{children:"&whole"})," and a following variable appear, they must appear first in ",(0,i.jsx)(r.em,{children:"lambda-list"}),", before any other parameter or ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keyword"})}),". ",(0,i.jsx)(r.strong,{children:"&whole"})," can appear at any level of a ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})}),". At inner levels, the ",(0,i.jsx)(r.strong,{children:"&whole"})," variable is bound to"]}),"\n",(0,i.jsxs)(r.p,{children:["the corresponding part of the argument, as with ",(0,i.jsx)(r.strong,{children:"&rest"}),", but unlike ",(0,i.jsx)(r.strong,{children:"&rest"}),", other arguments are also allowed. The use of ",(0,i.jsx)(r.strong,{children:"&whole"})," does not affect the pattern of arguments specified."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"&environment"})," is followed by a single variable that is bound to an ",(0,i.jsx)(t,{term:"environment",children:(0,i.jsx)("i",{children:"environment"})})," representing the ",(0,i.jsx)(t,{styled:!0,term:"lexical environment",children:(0,i.jsx)("i",{children:"lexical environment"})})," in which the macro call is to be interpreted. This ",(0,i.jsx)(t,{term:"environment",children:(0,i.jsx)("i",{children:"environment"})})," should be used with ",(0,i.jsx)(s,{term:"macro-function",children:(0,i.jsx)("b",{children:"macro-function"})}),", ",(0,i.jsx)(s,{term:"get-setf-expansion",children:(0,i.jsx)("b",{children:"get-setf-expansion"})}),", ",(0,i.jsx)(s,{term:"compiler-macro-function",children:(0,i.jsx)("b",{children:"compiler-macro-function"})}),", and ",(0,i.jsx)(s,{term:"macroexpand",children:(0,i.jsx)("b",{children:"macroexpand"})})," (for example) in computing the expansion of the macro, to ensure that any ",(0,i.jsx)(t,{styled:!0,term:"lexical binding",children:(0,i.jsx)("i",{children:"lexical bindings"})})," or definitions established in the ",(0,i.jsx)(t,{styled:!0,term:"compilation environment",children:(0,i.jsx)("i",{children:"compilation environment"})})," are taken into account. ",(0,i.jsx)(r.strong,{children:"&environment"})," can only appear at the top level of a ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})}),", and can only appear once, but can appear anywhere in that list; the ",(0,i.jsx)(r.strong,{children:"&environment"})," ",(0,i.jsx)(t,{term:"parameter",children:(0,i.jsx)("i",{children:"parameter"})})," is ",(0,i.jsx)(t,{term:"bound",children:(0,i.jsx)("i",{children:"bound"})})," along with ",(0,i.jsx)(r.strong,{children:"&whole"})," before any other ",(0,i.jsx)(t,{term:"variable",children:(0,i.jsx)("i",{children:"variables"})})," in the ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})}),", regardless of where ",(0,i.jsx)(r.strong,{children:"&environment"})," appears in the ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})}),". The ",(0,i.jsx)(t,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," that is bound to the ",(0,i.jsx)(t,{styled:!0,term:"environment parameter",children:(0,i.jsx)("i",{children:"environment parameter"})})," has ",(0,i.jsx)(t,{styled:!0,term:"dynamic extent",children:(0,i.jsx)("i",{children:"dynamic extent"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Destructuring allows a ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})})," to express the structure of a macro call syntax. If no ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})})," appear, then the ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})})," is a ",(0,i.jsx)(t,{term:"tree",children:(0,i.jsx)("i",{children:"tree"})})," containing parameter names at the leaves. The pattern and the ",(0,i.jsx)(t,{styled:!0,term:"macro form",children:(0,i.jsx)("i",{children:"macro form"})})," must have compatible ",(0,i.jsx)(t,{styled:!0,term:"tree structure",children:(0,i.jsx)("i",{children:"tree structure"})}),"; that is, their ",(0,i.jsx)(t,{styled:!0,term:"tree structure",children:(0,i.jsx)("i",{children:"tree structure"})})," must be equivalent, or it must differ only in that some ",(0,i.jsx)(r.em,{children:"leaves"})," of the pattern match ",(0,i.jsx)(r.em,{children:"non-atomic objects"})," of the ",(0,i.jsx)(t,{styled:!0,term:"macro form",children:(0,i.jsx)("i",{children:"macro form"})}),". For information about error detection in this ",(0,i.jsx)(t,{term:"situation",children:(0,i.jsx)("i",{children:"situation"})}),", see Section 3.5.1.7 (Destructuring Mismatch)."]}),"\n",(0,i.jsxs)(r.p,{children:["A destructuring ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})})," (whether at top level or embedded) can be dotted, ending in a parameter name. This situation is treated exactly as if the parameter name that ends the ",(0,i.jsx)(t,{term:"list",children:(0,i.jsx)("i",{children:"list"})})," had appeared preceded by ",(0,i.jsx)(r.strong,{children:"&rest"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["It is permissible for a ",(0,i.jsx)(t,{styled:!0,term:"macro form",children:(0,i.jsx)("i",{children:"macro form"})})," (or a ",(0,i.jsx)(t,{term:"subexpression",children:(0,i.jsx)("i",{children:"subexpression"})})," of a ",(0,i.jsx)(t,{styled:!0,term:"macro form",children:(0,i.jsx)("i",{children:"macro form"})}),") to be a ",(0,i.jsx)(t,{styled:!0,term:"dotted list",children:(0,i.jsx)("i",{children:"dotted list"})})," only when (... &rest var) or (... . var) is used to match it. It is the responsibility of the ",(0,i.jsx)(t,{term:"macro",children:(0,i.jsx)("i",{children:"macro"})})," to recognize and deal with such situations."]})]})}function C(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(K,{...e})}):K(e)}function R(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function W(e){const r={p:"p",...(0,n.a)(),...e.components},{GlossaryTerm:s}=r;return s||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["Anywhere in a ",(0,i.jsx)(s,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})})," where a parameter name can appear, and where ",(0,i.jsx)(s,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})})," syntax (as described in Section 3.4.1 (Ordinary Lambda Lists)) does not otherwise allow a ",(0,i.jsx)(s,{term:"list",children:(0,i.jsx)("i",{children:"list"})}),", a ",(0,i.jsx)(s,{styled:!0,term:"destructuring lambda list",children:(0,i.jsx)("i",{children:"destructuring lambda list"})})," can appear in place of the parameter name. When this is done, then"]}),"\n",(0,i.jsxs)(r.p,{children:["the argument that would match the parameter is treated as a (possibly dotted) ",(0,i.jsx)(s,{term:"list",children:(0,i.jsx)("i",{children:"list"})}),", to be used as an argument list for satisfying the parameters in the embedded ",(0,i.jsx)(s,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})}),". This is known as destructuring."]}),"\n",(0,i.jsxs)(r.p,{children:["Destructuring is the process of decomposing a compound ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," into its component parts, using an abbreviated, declarative syntax, rather than writing it out by hand using the primitive component-accessing functions. Each component part is bound to a variable."]}),"\n",(0,i.jsxs)(r.p,{children:["A destructuring operation requires an ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," to be decomposed, a pattern that specifies what components are to be extracted, and the names of the variables whose values are to be the components."]})]})}function H(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(W,{...e})}):W(e)}function M(e){const r={p:"p",...(0,n.a)(),...e.components},{GlossaryTerm:s}=r;return s||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,i.jsxs)(r.p,{children:["In data-directed destructuring, the pattern is a sample ",(0,i.jsx)(s,{term:"object",children:(0,i.jsx)("i",{children:"object"})})," of the ",(0,i.jsx)(s,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," to be decomposed. Wherever a component is to be extracted, a ",(0,i.jsx)(s,{term:"symbol",children:(0,i.jsx)("i",{children:"symbol"})})," appears in the pattern; this ",(0,i.jsx)(s,{term:"symbol",children:(0,i.jsx)("i",{children:"symbol"})})," is the name of the variable whose value will be that component."]})}function Y(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(M,{...e})}):M(e)}function B(e){const r={code:"code",pre:"pre",...(0,n.a)(),...e.components};return(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lisp",children:"An example pattern is \n(a b c) \nwhich destructures a list of three elements. The variable a is assigned to the first element, b to the second, etc. A more complex example is \n((first . rest) . more) \nThe important features of data-directed destructuring are its syntactic simplicity and the ability to extend it to lambda-list-directed destructuring. \n"})})}function U(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(B,{...e})}):B(e)}function _(e){const r={p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||Z("DictionaryLink",!0),t||Z("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["An extension of data-directed destructuring of ",(0,i.jsx)(t,{term:"tree",children:(0,i.jsx)("i",{children:"trees"})})," is lambda-list-directed destructuring. This derives from the analogy between the three-element destructuring pattern"]}),"\n",(0,i.jsx)(r.p,{children:"(first second third)"}),"\n",(0,i.jsxs)(r.p,{children:["and the three-argument ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})})]}),"\n",(0,i.jsx)(r.p,{children:"(first second third)"}),"\n",(0,i.jsxs)(r.p,{children:["Lambda-list-directed destructuring is identical to data-directed destructuring if no ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})})," appear in the pattern. Any list in the pattern (whether a sub-list or the whole pattern itself) that contains a ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keyword"})})," is interpreted specially. Elements of the list to the left of the first ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keyword"})})," are treated as destructuring patterns, as usual, but the remaining elements of the list are treated like a function\u2019s ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})})," except that where a variable would normally be required, an arbitrary destructuring pattern is allowed. Note that in case of ambiguity,"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})})," syntax is preferred over destructuring syntax. Thus, after ",(0,i.jsx)(r.strong,{children:"&optional"})," a list of elements is a list of a destructuring pattern and a default value form."]}),"\n",(0,i.jsxs)(r.p,{children:["The detailed behavior of each ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keyword"})})," in a lambda-list-directed destructuring pattern is as follows:"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"&optional"})}),"\n",(0,i.jsx)(r.p,{children:"Each following element is a variable or a list of a destructuring pattern, a default value form, and a supplied-p variable. The default value and the supplied-p variable can be omitted. If the list being destructured ends early, so that it does not have an element"}),"\n",(0,i.jsxs)(r.p,{children:["to match against this destructuring (sub)-pattern, the default form is evaluated and destructured instead. The supplied-p variable receives the value ",(0,i.jsx)(s,{term:"nil",children:(0,i.jsx)("b",{children:"nil"})})," if the default form is used, ",(0,i.jsx)(s,{term:"t",children:(0,i.jsx)("b",{children:"t"})})," otherwise."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"&rest"}),", ",(0,i.jsx)(r.strong,{children:"&body"})]}),"\n",(0,i.jsxs)(r.p,{children:["The next element is a destructuring pattern that matches the rest of the list. ",(0,i.jsx)(r.strong,{children:"&body"})," is identical to ",(0,i.jsx)(r.strong,{children:"&rest"})," but declares that what is being matched is a list of forms that constitutes the body of ",(0,i.jsx)(t,{term:"form",children:(0,i.jsx)("i",{children:"form"})}),". This next element must be the last unless a ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keyword"})})," follows it."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"&aux"})}),"\n",(0,i.jsx)(r.p,{children:"The remaining elements are not destructuring patterns at all, but are auxiliary variable bindings."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"&whole"})}),"\n",(0,i.jsxs)(r.p,{children:["The next element is a destructuring pattern that matches the entire form in a macro, or the entire ",(0,i.jsx)(t,{term:"subexpression",children:(0,i.jsx)("i",{children:"subexpression"})})," at inner levels."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"&key"})}),"\n",(0,i.jsx)(r.p,{children:"Each following element is one of"}),"\n",(0,i.jsxs)(r.p,{children:["a ",(0,i.jsx)(t,{term:"variable",children:(0,i.jsx)("i",{children:"variable"})}),","]}),"\n",(0,i.jsx)(r.p,{children:"or a list of a variable, an optional initialization form, and an optional supplied-p variable."}),"\n",(0,i.jsx)(r.p,{children:"or a list of a list of a keyword and a destructuring pattern, an optional initialization form, and an optional supplied-p variable."}),"\n",(0,i.jsx)(r.p,{children:"The rest of the list being destructured is taken to be alternating keywords and values and is taken apart appropriately."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"&allow-other-keys"})}),"\n",(0,i.jsx)(r.p,{children:"Stands by itself."})]})}function P(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(_,{...e})}):_(e)}function Z(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function J(e){const r={em:"em",p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||V("DictionaryLink",!0),t||V("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"destructuring lambda list",children:(0,i.jsx)("i",{children:"destructuring lambda list"})})," is used by ",(0,i.jsx)(s,{term:"destructuring-bind",children:(0,i.jsx)("b",{children:"destructuring-bind"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(t,{styled:!0,term:"destructuring lambda list",children:(0,i.jsx)("i",{children:"Destructuring lambda lists"})})," are closely related to ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda lists"})}),"; see Section 3.4.4 (Macro Lambda Lists). A ",(0,i.jsx)(t,{styled:!0,term:"destructuring lambda list",children:(0,i.jsx)("i",{children:"destructuring lambda list"})})," can contain all of the ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})})," listed for ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda lists"})})," except for ",(0,i.jsx)(r.strong,{children:"&environment"}),", and supports destructuring in the same way. Inner ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda lists"})})," nested within a ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})})," have the syntax of ",(0,i.jsx)(t,{styled:!0,term:"destructuring lambda list",children:(0,i.jsx)("i",{children:"destructuring lambda lists"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"destructuring lambda list",children:(0,i.jsx)("i",{children:"destructuring lambda list"})})," has the following syntax:"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"reqvars::"}),"=",(0,i.jsx)(r.em,{children:"{var | \u2193lambda-list}"}),"*"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"optvars::"}),"=[&optional ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"{var | \u2193lambda-list}"})," [",(0,i.jsx)(r.em,{children:"init-form"})," [",(0,i.jsx)(r.em,{children:"supplied-p-parameter"}),"]])",(0,i.jsx)(r.em,{children:"}"}),"*]"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"restvar::"}),"=[",(0,i.jsx)(r.em,{children:"{"}),"&rest ",(0,i.jsx)(r.em,{children:"|"})," &body*} {var | \u2193lambda-list}*]"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"keyvars::"}),"=[&key ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"keyword-name {var | \u2193lambda-list}"}),")",(0,i.jsx)(r.em,{children:"}"})," [",(0,i.jsx)(r.em,{children:"init-form"})," [",(0,i.jsx)(r.em,{children:"supplied-p-parameter"}),"]])",(0,i.jsx)(r.em,{children:"}"}),"* [&allow-other-keys]]"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"auxvars::"}),"=[&aux ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"var"})," [",(0,i.jsx)(r.em,{children:"init-form"}),"])",(0,i.jsx)(r.em,{children:"}"}),"*]"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"envvar::"}),"=[&environment ",(0,i.jsx)(r.em,{children:"var"}),"]"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"wholevar::"}),"=[&whole ",(0,i.jsx)(r.em,{children:"var"}),"]"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"lambda-list::"}),"=(",(0,i.jsx)(r.em,{children:"\u2193wholevar \u2193reqvars \u2193optvars \u2193restvar \u2193keyvars \u2193auxvars"}),") ",(0,i.jsx)(r.em,{children:"|"})]}),"\n",(0,i.jsxs)(r.p,{children:["(",(0,i.jsx)(r.em,{children:"\u2193wholevar \u2193reqvars \u2193optvars"})," . ",(0,i.jsx)(r.em,{children:"var"}),")"]})]})}function Q(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(J,{...e})}):J(e)}function V(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function X(e){const r={em:"em",p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||ee("DictionaryLink",!0),t||ee("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"boa lambda list",children:(0,i.jsx)("i",{children:"boa lambda list"})})," is a ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})})," that is syntactically like an ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})}),", but that is processed in \u201c",(0,i.jsx)(r.strong,{children:"b"}),"y ",(0,i.jsx)(r.strong,{children:"o"}),"rder of ",(0,i.jsx)(r.strong,{children:"a"}),"rgument\u201d style."]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"boa lambda list",children:(0,i.jsx)("i",{children:"boa lambda list"})})," is used only in a ",(0,i.jsx)(s,{term:"defstruct",children:(0,i.jsx)("b",{children:"defstruct"})})," ",(0,i.jsx)(t,{term:"form",children:(0,i.jsx)("i",{children:"form"})}),", when explicitly specifying the ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})})," of a constructor ",(0,i.jsx)(t,{term:"function",children:(0,i.jsx)("i",{children:"function"})})," (sometimes called a \u201cboa constructor\u201d)."]}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.strong,{children:"&optional"}),", ",(0,i.jsx)(r.strong,{children:"&rest"}),", ",(0,i.jsx)(r.strong,{children:"&aux"}),", ",(0,i.jsx)(r.strong,{children:"&key"}),", and ",(0,i.jsx)(r.strong,{children:"&allow-other-keys"})," ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})})," are recognized in a ",(0,i.jsx)(t,{styled:!0,term:"boa lambda list",children:(0,i.jsx)("i",{children:"boa lambda list"})}),". The way these ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})})," differ from their use in an ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})})," follows."]}),"\n",(0,i.jsxs)(r.p,{children:["Consider this example, which describes how ",(0,i.jsx)(r.strong,{children:"destruct"})," processes its ",":constructor"," option. Evaluation and"]}),"\n",(0,i.jsxs)(r.p,{children:["(",":constructor"," create-foo"]}),"\n",(0,i.jsx)(r.p,{children:"(a &optional b (c \u2019sea) &rest d &aux e (f \u2019eff)))"}),"\n",(0,i.jsxs)(r.p,{children:["This defines create-foo to be a constructor of one or more arguments. The first argument is used to initialize the a slot. The second argument is used to initialize the b slot. If there isn\u2019t any second argument, then the default value given in the body of the ",(0,i.jsx)(s,{term:"defstruct",children:(0,i.jsx)("b",{children:"defstruct"})})," (if given) is used instead. The third argument is used to initialize the c slot. If there isn\u2019t any third argument, then the symbol"]}),"\n",(0,i.jsxs)(r.p,{children:["sea is used instead. Any arguments following the third argument are collected into a ",(0,i.jsx)(t,{term:"list",children:(0,i.jsx)("i",{children:"list"})})," and used to initialize the d slot. If there are three or fewer arguments, then ",(0,i.jsx)(s,{term:"nil",children:(0,i.jsx)("b",{children:"nil"})})," is placed in the d slot. The e slot is not initialized; its initial value is ",(0,i.jsx)(t,{term:"implementation-defined",children:(0,i.jsx)("i",{children:"implementation-defined"})}),". Finally, the f slot is initialized to contain the symbol eff. ",(0,i.jsx)(r.strong,{children:"&key"})," and ",(0,i.jsx)(r.strong,{children:"&allow-other-keys"})," arguments default in a manner similar to that of ",(0,i.jsx)(r.strong,{children:"&optional"})," arguments: if no default is supplied in the ",(0,i.jsx)(t,{styled:!0,term:"lambda list",children:(0,i.jsx)("i",{children:"lambda list"})})," then the default value given in the body of the ",(0,i.jsx)(s,{term:"defstruct",children:(0,i.jsx)("b",{children:"defstruct"})})," (if given) is used instead. For example:"]}),"\n",(0,i.jsxs)(r.p,{children:["(defstruct (foo (",":constructor"," CREATE-FOO (a &optional b (c \u2019sea)"]}),"\n",(0,i.jsx)(r.p,{children:"&key (d 2)"}),"\n",(0,i.jsx)(r.p,{children:"&aux e (f \u2019eff))))"}),"\n",(0,i.jsx)(r.p,{children:"(a 1) (b 2) (c 3) (d 4) (e 5) (f 6))"}),"\n",(0,i.jsxs)(r.p,{children:["(create-foo 10) \u2192 #S(FOO A 10 B 2 C SEA D 2 E ",(0,i.jsx)(r.em,{children:"implemention-dependent"})," F EFF) (create-foo 10 \u2019bee \u2019see ",":d"," \u2019dee)"]}),"\n",(0,i.jsxs)(r.p,{children:["\u2192 #S(FOO A 10 B BEE C SEE D DEE E ",(0,i.jsx)(r.em,{children:"implemention-dependent"})," F EFF)"]}),"\n",(0,i.jsxs)(r.p,{children:["If keyword arguments of the form ((",(0,i.jsx)(r.em,{children:"key var"}),") [",(0,i.jsx)(r.em,{children:"default"})," [",(0,i.jsx)(r.em,{children:"svar"})," ]]) are specified, the ",(0,i.jsx)(r.em,{children:"slot name"})," is matched with ",(0,i.jsx)(r.em,{children:"var"})," (not ",(0,i.jsx)(t,{term:"key",children:(0,i.jsx)("i",{children:"key"})}),")."]}),"\n",(0,i.jsxs)(r.p,{children:["The actions taken in the b and e cases were carefully chosen to allow the user to specify all possible behaviors. The ",(0,i.jsx)(r.strong,{children:"&aux"})," variables can be used to completely override the default initializations given in the body."]}),"\n",(0,i.jsxs)(r.p,{children:["If no default value is supplied for an ",(0,i.jsx)(t,{styled:!0,term:"aux variable",children:(0,i.jsx)("i",{children:"aux variable"})})," variable, the consequences are undefined if an attempt is later made to read the corresponding ",(0,i.jsx)(t,{term:"slot",children:(0,i.jsx)("i",{children:"slot"})}),"\u2019s value before a value is explicitly assigned. If such a ",(0,i.jsx)(t,{term:"slot",children:(0,i.jsx)("i",{children:"slot"})})," has a ",":type"," option specified, this suppressed initialization does not imply a type mismatch situation; the declared type is only required to apply when the ",(0,i.jsx)(t,{term:"slot",children:(0,i.jsx)("i",{children:"slot"})})," is finally assigned."]}),"\n",(0,i.jsx)(r.p,{children:"With this definition, the following can be written:"}),"\n",(0,i.jsx)(r.p,{children:"(create-foo 1 2)"}),"\n",(0,i.jsx)(r.p,{children:"instead of"}),"\n",(0,i.jsxs)(r.p,{children:["(make-foo ",":a"," 1 ",":b"," 2)"]}),"\n",(0,i.jsx)(r.p,{children:"and create-foo provides defaulting different from that of make-foo."}),"\n",(0,i.jsx)(r.p,{children:"Additional arguments that do not correspond to slot names but are merely present to supply values used in subsequent initialization computations are allowed. For example, in the definition"}),"\n",(0,i.jsxs)(r.p,{children:["(defstruct (frob (",":constructor"," create-frob"]}),"\n",(0,i.jsx)(r.p,{children:"(a &key (b 3 have-b) (c-token \u2019c)"}),"\n",(0,i.jsx)(r.p,{children:"(c (list c-token (if have-b 7 2))))))"}),"\n",(0,i.jsx)(r.p,{children:"a b c)"}),"\n",(0,i.jsxs)(r.p,{children:["the c-token argument is used merely to supply a value used in the initialization of the c slot. The ",(0,i.jsx)(t,{styled:!0,term:"supplied-p parameter",children:(0,i.jsx)("i",{children:"supplied-p parameters"})})," associated with ",(0,i.jsx)(t,{styled:!0,term:"optional parameter",children:(0,i.jsx)("i",{children:"optional parameters"})})," and ",(0,i.jsx)(t,{styled:!0,term:"keyword parameter",children:(0,i.jsx)("i",{children:"keyword parameters"})})," might also be used this way."]})]})}function $(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(X,{...e})}):X(e)}function ee(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function re(e){const r={em:"em",p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||ie("DictionaryLink",!0),t||ie("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"defsetf lambda list",children:(0,i.jsx)("i",{children:"defsetf lambda list"})})," is used by ",(0,i.jsx)(s,{term:"defsetf",children:(0,i.jsx)("b",{children:"defsetf"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"defsetf lambda list",children:(0,i.jsx)("i",{children:"defsetf lambda list"})})," has the following syntax:"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"lambda-list::"}),"=(",(0,i.jsx)(r.em,{children:"{var}"}),"*"]}),"\n",(0,i.jsxs)(r.p,{children:["[&optional ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"var"})," [",(0,i.jsx)(r.em,{children:"init-form"})," [",(0,i.jsx)(r.em,{children:"supplied-p-parameter"}),"]])",(0,i.jsx)(r.em,{children:"}"}),"*]"]}),"\n",(0,i.jsxs)(r.p,{children:["[&rest ",(0,i.jsx)(r.em,{children:"var"}),"]"]}),"\n",(0,i.jsxs)(r.p,{children:["[&key ",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"{var |"})," (",(0,i.jsx)(r.em,{children:"keyword-name var"}),")",(0,i.jsx)(r.em,{children:"}"})," [",(0,i.jsx)(r.em,{children:"init-form"})," [",(0,i.jsx)(r.em,{children:"supplied-p-parameter"}),"]])",(0,i.jsx)(r.em,{children:"}"}),"*"]}),"\n",(0,i.jsx)(r.p,{children:"[&allow-other-keys]]"}),"\n",(0,i.jsxs)(r.p,{children:["[&environment ",(0,i.jsx)(r.em,{children:"var"}),"]"]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"defsetf lambda list",children:(0,i.jsx)("i",{children:"defsetf lambda list"})})," can contain the ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})})," shown in Figure 3\u201319."]}),"\n",(0,i.jsxs)(r.p,{children:["|",(0,i.jsxs)("p",{children:[(0,i.jsx)(r.strong,{children:"&allow-other-keys &key &rest"})," "]}),(0,i.jsx)("p",{children:(0,i.jsx)(r.strong,{children:"&environment &optional"})}),"|"]}),"\n",(0,i.jsx)(r.p,{children:"| :- |"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Figure 3\u201319. Lambda List Keywords used by Defsetf Lambda Lists"})}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"defsetf lambda list",children:(0,i.jsx)("i",{children:"defsetf lambda list"})})," differs from an ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda list"})})," only in that it does not permit the use of ",(0,i.jsx)(r.strong,{children:"&aux"}),", and that it permits use of ",(0,i.jsx)(r.strong,{children:"&environment"}),", which introduces an ",(0,i.jsx)(t,{styled:!0,term:"environment parameter",children:(0,i.jsx)("i",{children:"environment parameter"})})," ."]})]})}function se(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(re,{...e})}):re(e)}function ie(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function ne(e){const r={em:"em",p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||ae("DictionaryLink",!0),t||ae("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"deftype lambda list",children:(0,i.jsx)("i",{children:"deftype lambda list"})})," is used by ",(0,i.jsx)(s,{term:"deftype",children:(0,i.jsx)("b",{children:"deftype"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"deftype lambda list",children:(0,i.jsx)("i",{children:"deftype lambda list"})})," has the same syntax as a ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})}),", and can therefore contain the ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})})," as a ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"deftype lambda list",children:(0,i.jsx)("i",{children:"deftype lambda list"})})," differs from a ",(0,i.jsx)(t,{styled:!0,term:"macro lambda list",children:(0,i.jsx)("i",{children:"macro lambda list"})})," only in that if no ",(0,i.jsx)(r.em,{children:"init-form"})," is supplied for an ",(0,i.jsx)(t,{styled:!0,term:"optional parameter",children:(0,i.jsx)("i",{children:"optional parameter"})})," or ",(0,i.jsx)(t,{styled:!0,term:"keyword parameter",children:(0,i.jsx)("i",{children:"keyword parameter"})})," in the ",(0,i.jsx)(r.em,{children:"lambda-list"}),", the default ",(0,i.jsx)(t,{term:"value",children:(0,i.jsx)("i",{children:"value"})})," for that ",(0,i.jsx)(t,{term:"parameter",children:(0,i.jsx)("i",{children:"parameter"})})," is the ",(0,i.jsx)(t,{term:"symbol",children:(0,i.jsx)("i",{children:"symbol"})})," ",(0,i.jsx)(r.strong,{children:"*"})," (rather than ",(0,i.jsx)(s,{term:"nil",children:(0,i.jsx)("b",{children:"nil"})}),")."]})]})}function te(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(ne,{...e})}):ne(e)}function ae(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function le(e){const r={p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||ce("DictionaryLink",!0),t||ce("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"define-modify-macro lambda list",children:(0,i.jsx)("i",{children:"define-modify-macro lambda list"})})," is used by ",(0,i.jsx)(s,{term:"define-modify-macro",children:(0,i.jsx)("b",{children:"define-modify-macro"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(t,{styled:!0,term:"define-modify-macro lambda list",children:(0,i.jsx)("i",{children:"define-modify-macro lambda list"})})," can contain the ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})})," shown in Figure 3\u201320."]}),"\n",(0,i.jsxs)(r.p,{children:["|",(0,i.jsx)(r.strong,{children:"&optional &rest"}),"|"]}),"\n",(0,i.jsx)(r.p,{children:"| :- |"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Figure 3\u201320. Lambda List Keywords used by Define-modify-macro Lambda Lists"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(t,{styled:!0,term:"define-modify-macro lambda list",children:(0,i.jsx)("i",{children:"Define-modify-macro lambda lists"})})," are similar to ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda lists"})}),", but do not support keyword arguments. ",(0,i.jsx)(s,{term:"define-modify-macro",children:(0,i.jsx)("b",{children:"define-modify-macro"})})," has no need match keyword arguments, and a ",(0,i.jsx)(t,{styled:!0,term:"rest parameter",children:(0,i.jsx)("i",{children:"rest parameter"})})," is sufficient. ",(0,i.jsx)(t,{styled:!0,term:"aux variable",children:(0,i.jsx)("i",{children:"Aux variables"})})," are also not supported, since ",(0,i.jsx)(s,{term:"define-modify-macro",children:(0,i.jsx)("b",{children:"define-modify-macro"})})," has no body ",(0,i.jsx)(t,{term:"form",children:(0,i.jsx)("i",{children:"forms"})})," which could refer to such ",(0,i.jsx)(t,{term:"binding",children:(0,i.jsx)("i",{children:"bindings"})}),". See the ",(0,i.jsx)(t,{term:"macro",children:(0,i.jsx)("i",{children:"macro"})})," ",(0,i.jsx)(s,{term:"define-modify-macro",children:(0,i.jsx)("b",{children:"define-modify-macro"})}),"."]})]})}function de(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(le,{...e})}):le(e)}function ce(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function oe(e){const r={em:"em",p:"p",strong:"strong",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||me("DictionaryLink",!0),t||me("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(r.em,{children:"define-method-combination arguments lambda list"})," is used by the ",":arguments"," option to ",(0,i.jsx)(s,{term:"define-method-combination",children:(0,i.jsx)("b",{children:"define-method-combination"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(r.em,{children:"define-method-combination arguments lambda list"})," can contain the ",(0,i.jsx)(t,{styled:!0,term:"lambda list keyword",children:(0,i.jsx)("i",{children:"lambda list keywords"})})," shown in Figure 3\u201321."]}),"\n",(0,i.jsxs)(r.p,{children:["|",(0,i.jsxs)("p",{children:[(0,i.jsx)(r.strong,{children:"&allow-other-keys &key &rest"})," "]}),(0,i.jsx)("p",{children:(0,i.jsx)(r.strong,{children:"&aux &optional &whole"})}),"|"]}),"\n",(0,i.jsx)(r.p,{children:"| :- |"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Figure 3\u201321. Lambda List Keywords used by Define-method-combination arguments Lambda Lists"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"Define-method-combination arguments lambda lists"})," are similar to ",(0,i.jsx)(t,{styled:!0,term:"ordinary lambda list",children:(0,i.jsx)("i",{children:"ordinary lambda lists"})}),", but also permit the use of ",(0,i.jsx)(r.strong,{children:"&whole"}),"."]})]})}function he(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(oe,{...e})}):oe(e)}function me(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function xe(e){const r={em:"em",p:"p",...(0,n.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:t}=r;return s||pe("DictionaryLink",!0),t||pe("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["In a number of situations, a ",(0,i.jsx)(t,{styled:!0,term:"documentation string",children:(0,i.jsx)("i",{children:"documentation string"})})," can appear amidst a series of ",(0,i.jsx)(s,{term:"declare",children:(0,i.jsx)("b",{children:"declare"})})," ",(0,i.jsx)(t,{term:"expression",children:(0,i.jsx)("i",{children:"expressions"})})," prior to a series of ",(0,i.jsx)(t,{term:"form",children:(0,i.jsx)("i",{children:"forms"})}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["In that case, if a ",(0,i.jsx)(r.em,{children:"string S"})," appears where a ",(0,i.jsx)(t,{styled:!0,term:"documentation string",children:(0,i.jsx)("i",{children:"documentation string"})})," is permissible and is not followed by either a ",(0,i.jsx)(s,{term:"declare",children:(0,i.jsx)("b",{children:"declare"})})," ",(0,i.jsx)(t,{term:"expression",children:(0,i.jsx)("i",{children:"expression"})})," or a ",(0,i.jsx)(t,{term:"form",children:(0,i.jsx)("i",{children:"form"})})," then ",(0,i.jsx)(r.em,{children:"S"})," is taken to be a ",(0,i.jsx)(t,{term:"form",children:(0,i.jsx)("i",{children:"form"})}),"; otherwise, ",(0,i.jsx)(r.em,{children:"S"})," is taken as a ",(0,i.jsx)(t,{styled:!0,term:"documentation string",children:(0,i.jsx)("i",{children:"documentation string"})}),". The consequences are unspecified if more than one such ",(0,i.jsx)(t,{styled:!0,term:"documentation string",children:(0,i.jsx)("i",{children:"documentation string"})})," is present."]})]})}function je(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(xe,{...e})}):xe(e)}function pe(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const ue={title:"3.4 Lambda Lists"},fe="3.4 Lambda Lists",be={id:"chap-3/d-e-lambda-lists",title:"3.4 Lambda Lists",description:"3.4.1 Ordinary Lambda Lists",source:"@site/docs/chap-3/d-e-lambda-lists.md",sourceDirName:"chap-3",slug:"/chap-3/d-e-lambda-lists",permalink:"/cl-language-reference/chap-3/d-e-lambda-lists",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-3/d-e-lambda-lists.md",tags:[],version:"current",frontMatter:{title:"3.4 Lambda Lists"},sidebar:"tutorialSidebar",previous:{title:"3.3 Declarations",permalink:"/cl-language-reference/chap-3/d-d-declarations"},next:{title:"3.5 Error Checking in Function Calls",permalink:"/cl-language-reference/chap-3/d-f-error-checking-in-function-calls"}},ye={},ge=[{value:"3.4.1 Ordinary Lambda Lists",id:"341-ordinary-lambda-lists",level:2},{value:"3.4.1.1 Specifiers for the required parameters",id:"3411-specifiers-for-the-required-parameters",level:3},{value:"3.4.1.2 Specifiers for optional parameters",id:"3412-specifiers-for-optional-parameters",level:3},{value:"3.4.1.3 A specifier for a rest parameter",id:"3413-a-specifier-for-a-rest-parameter",level:3},{value:"3.4.1.4 Specifiers for keyword parameters",id:"3414-specifiers-for-keyword-parameters",level:3},{value:"3.4.1.4.1 Suppressing Keyword Argument Checking",id:"34141-suppressing-keyword-argument-checking",level:4},{value:"3.4.1.4.1.1 Examples of Suppressing Keyword Argument Checking",id:"341411-examples-of-suppressing-keyword-argument-checking",level:5},{value:"3.4.1.5 Specifiers for",id:"3415-specifiers-for",level:3},{value:"3.4.1.6 Examples of Ordinary Lambda Lists",id:"3416-examples-of-ordinary-lambda-lists",level:3},{value:"3.4.2 Generic Function Lambda Lists",id:"342-generic-function-lambda-lists",level:2},{value:"3.4.3 Specialized Lambda Lists",id:"343-specialized-lambda-lists",level:2},{value:"3.4.4 Macro Lambda Lists",id:"344-macro-lambda-lists",level:2},{value:"3.4.4.1 Destructuring by Lambda Lists",id:"3441-destructuring-by-lambda-lists",level:3},{value:"3.4.4.1.1 Data",id:"34411-data",level:4},{value:"3.4.4.1.1.1 Examples of Data",id:"344111-examples-of-data",level:5},{value:"3.4.4.1.2 Lambda",id:"34412-lambda",level:4},{value:"3.4.5 Destructuring Lambda Lists",id:"345-destructuring-lambda-lists",level:2},{value:"3.4.6 Boa Lambda Lists",id:"346-boa-lambda-lists",level:2},{value:"3.4.7 Defsetf Lambda Lists",id:"347-defsetf-lambda-lists",level:2},{value:"3.4.8 Deftype Lambda Lists",id:"348-deftype-lambda-lists",level:2},{value:"3.4.9 Define",id:"349-define",level:2},{value:"3.4.10 Define",id:"3410-define",level:2},{value:"3.4.11 Syntactic Interaction of Documentation Strings and Declarations",id:"3411-syntactic-interaction-of-documentation-strings-and-declarations",level:2}];function ve(e){const r={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"34-lambda-lists",children:"3.4 Lambda Lists"}),"\n","\n",(0,i.jsx)(a,{}),"\n",(0,i.jsx)(r.h2,{id:"341-ordinary-lambda-lists",children:"3.4.1 Ordinary Lambda Lists"}),"\n","\n",(0,i.jsx)(c,{}),"\n",(0,i.jsx)(r.h3,{id:"3411-specifiers-for-the-required-parameters",children:"3.4.1.1 Specifiers for the required parameters"}),"\n","\n",(0,i.jsx)(m,{}),"\n",(0,i.jsx)(r.h3,{id:"3412-specifiers-for-optional-parameters",children:"3.4.1.2 Specifiers for optional parameters"}),"\n","\n",(0,i.jsx)(p,{}),"\n",(0,i.jsx)(r.h3,{id:"3413-a-specifier-for-a-rest-parameter",children:"3.4.1.3 A specifier for a rest parameter"}),"\n","\n",(0,i.jsx)(b,{}),"\n",(0,i.jsx)(r.h3,{id:"3414-specifiers-for-keyword-parameters",children:"3.4.1.4 Specifiers for keyword parameters"}),"\n","\n",(0,i.jsx)(v,{}),"\n",(0,i.jsx)(r.h4,{id:"34141-suppressing-keyword-argument-checking",children:"3.4.1.4.1 Suppressing Keyword Argument Checking"}),"\n","\n",(0,i.jsx)(L,{}),"\n",(0,i.jsx)(r.h5,{id:"341411-examples-of-suppressing-keyword-argument-checking",children:"3.4.1.4.1.1 Examples of Suppressing Keyword Argument Checking"}),"\n","\n",(0,i.jsx)(E,{}),"\n",(0,i.jsx)(r.h3,{id:"3415-specifiers-for",children:"3.4.1.5 Specifiers for"}),"\n","\n",(0,i.jsx)(A,{}),"\n",(0,i.jsx)(r.h3,{id:"3416-examples-of-ordinary-lambda-lists",children:"3.4.1.6 Examples of Ordinary Lambda Lists"}),"\n","\n",(0,i.jsx)(S,{}),"\n",(0,i.jsx)(r.h2,{id:"342-generic-function-lambda-lists",children:"3.4.2 Generic Function Lambda Lists"}),"\n","\n",(0,i.jsx)(z,{}),"\n",(0,i.jsx)(r.h2,{id:"343-specialized-lambda-lists",children:"3.4.3 Specialized Lambda Lists"}),"\n","\n",(0,i.jsx)(N,{}),"\n",(0,i.jsx)(r.h2,{id:"344-macro-lambda-lists",children:"3.4.4 Macro Lambda Lists"}),"\n","\n",(0,i.jsx)(C,{}),"\n",(0,i.jsx)(r.h3,{id:"3441-destructuring-by-lambda-lists",children:"3.4.4.1 Destructuring by Lambda Lists"}),"\n","\n",(0,i.jsx)(H,{}),"\n",(0,i.jsx)(r.h4,{id:"34411-data",children:"3.4.4.1.1 Data"}),"\n","\n",(0,i.jsx)(Y,{}),"\n",(0,i.jsx)(r.h5,{id:"344111-examples-of-data",children:"3.4.4.1.1.1 Examples of Data"}),"\n","\n",(0,i.jsx)(U,{}),"\n",(0,i.jsx)(r.h4,{id:"34412-lambda",children:"3.4.4.1.2 Lambda"}),"\n","\n",(0,i.jsx)(P,{}),"\n",(0,i.jsx)(r.h2,{id:"345-destructuring-lambda-lists",children:"3.4.5 Destructuring Lambda Lists"}),"\n","\n",(0,i.jsx)(Q,{}),"\n",(0,i.jsx)(r.h2,{id:"346-boa-lambda-lists",children:"3.4.6 Boa Lambda Lists"}),"\n","\n",(0,i.jsx)($,{}),"\n",(0,i.jsx)(r.h2,{id:"347-defsetf-lambda-lists",children:"3.4.7 Defsetf Lambda Lists"}),"\n","\n",(0,i.jsx)(se,{}),"\n",(0,i.jsx)(r.h2,{id:"348-deftype-lambda-lists",children:"3.4.8 Deftype Lambda Lists"}),"\n","\n",(0,i.jsx)(te,{}),"\n",(0,i.jsx)(r.h2,{id:"349-define",children:"3.4.9 Define"}),"\n","\n",(0,i.jsx)(de,{}),"\n",(0,i.jsx)(r.h2,{id:"3410-define",children:"3.4.10 Define"}),"\n","\n",(0,i.jsx)(he,{}),"\n",(0,i.jsx)(r.h2,{id:"3411-syntactic-interaction-of-documentation-strings-and-declarations",children:"3.4.11 Syntactic Interaction of Documentation Strings and Declarations"}),"\n","\n","\n",(0,i.jsx)(je,{})]})}function we(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(ve,{...e})}):ve(e)}},11151:(e,r,s)=>{s.d(r,{Z:()=>l,a:()=>a});var i=s(67294);const n={},t=i.createContext(n);function a(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);