"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[11841],{4431:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>x,frontMatter:()=>c,metadata:()=>l,toc:()=>h});var s=n(85893),i=n(11151);function t(e){const r={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components},{ClLinks:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.p,{children:(0,s.jsxs)(r.em,{children:["\u2217",(0,s.jsx)(n,{term:"read-suppress",children:(0,s.jsx)("b",{children:(0,s.jsx)(r.em,{children:"read-suppress"})})}),"\u2217 Variable"]})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Value Type:"})}),"\n",(0,s.jsxs)(r.p,{children:["a ",(0,s.jsx)(r.em,{children:"generalized boolean"}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Initial Value:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(n,{term:"false",children:(0,s.jsx)("i",{children:"false"})}),"."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(r.p,{children:["This variable is intended primarily to support the operation of the read-time conditional notations #+ and #-. It is important for the ",(0,s.jsx)(r.em,{children:"reader macros"})," which implement these notations to be able to skip over the printed representation of an ",(0,s.jsx)(n,{term:"expression",children:(0,s.jsx)("i",{children:"expression"})})," despite the possibility that the syntax of the skipped ",(0,s.jsx)(n,{term:"expression",children:(0,s.jsx)("i",{children:"expression"})})," may not be entirely valid for the current implementation, since #+ and #- exist in order to allow the same program to be shared among several Lisp implementations (including dialects other than Common Lisp) despite small incompatibilities of syntax."]}),"\n",(0,s.jsxs)(r.p,{children:["If it is ",(0,s.jsx)(n,{term:"false",children:(0,s.jsx)("i",{children:"false"})}),", the ",(0,s.jsx)(r.em,{children:"Lisp reader"})," operates normally."]}),"\n",(0,s.jsxs)(r.p,{children:["If the ",(0,s.jsx)(n,{term:"value",children:(0,s.jsx)("i",{children:"value"})})," of ",(0,s.jsx)(n,{term:"read-suppress",children:(0,s.jsx)("b",{children:"*read-suppress*"})})," is ",(0,s.jsx)(n,{term:"true",children:(0,s.jsx)("i",{children:"true"})}),", ",(0,s.jsx)(n,{term:"read",children:(0,s.jsx)("b",{children:"read"})}),", ",(0,s.jsx)(n,{term:"read-preserving-whitespace",children:(0,s.jsx)("b",{children:"read-preserving-whitespace"})}),", ",(0,s.jsx)(n,{term:"read-delimited-list",children:(0,s.jsx)("b",{children:"read-delimited-list"})}),", and ",(0,s.jsx)(n,{term:"read-from-string",children:(0,s.jsx)("b",{children:"read-from-string"})})," all return a ",(0,s.jsx)(r.em,{children:"primary value"})," of ",(0,s.jsx)(n,{term:"nil",children:(0,s.jsx)("b",{children:"nil"})})," when they complete successfully; however, they continue to parse the representation of an ",(0,s.jsx)(n,{term:"object",children:(0,s.jsx)("i",{children:"object"})})," in the normal way, in order to skip over the ",(0,s.jsx)(n,{term:"object",children:(0,s.jsx)("i",{children:"object"})}),", and continue to indicate ",(0,s.jsx)(r.em,{children:"end of file"})," in the normal way. Except as noted below, any ",(0,s.jsx)(r.em,{children:"standardized reader macro"}),(0,s.jsx)("sub",{children:"2"})," that is defined to ",(0,s.jsx)(n,{term:"read",children:(0,s.jsx)("i",{children:"read"})})," ",(0,s.jsx)("sub",{children:"2"})," a following ",(0,s.jsx)(n,{term:"object",children:(0,s.jsx)("i",{children:"object"})})," or ",(0,s.jsx)(n,{term:"token",children:(0,s.jsx)("i",{children:"token"})})," will do so, but not signal an error if the ",(0,s.jsx)(n,{term:"object",children:(0,s.jsx)("i",{children:"object"})})," read is not of an appropriate type or syntax. The ",(0,s.jsx)(r.em,{children:"standard syntax"})," and its associated ",(0,s.jsx)(r.em,{children:"reader macros"})," will not construct any new ",(0,s.jsx)(n,{term:"object",children:(0,s.jsx)("i",{children:"objects"})})," (",(0,s.jsx)(r.em,{children:"e.g."}),", when reading the representation of a ",(0,s.jsx)(n,{term:"symbol",children:(0,s.jsx)("i",{children:"symbol"})}),", no ",(0,s.jsx)(n,{term:"symbol",children:(0,s.jsx)("i",{children:"symbol"})})," will be constructed or interned)."]}),"\n",(0,s.jsx)(r.p,{children:"Extended tokens"}),"\n",(0,s.jsxs)(r.p,{children:["All extended tokens are completely uninterpreted. Errors such as those that might otherwise be signaled due to detection of invalid ",(0,s.jsx)(r.em,{children:"potential numbers"}),", invalid patterns of ",(0,s.jsx)(r.em,{children:"package markers"}),", and invalid uses of the ",(0,s.jsx)(n,{term:"dot",children:(0,s.jsx)("i",{children:"dot"})})," character are suppressed."]}),"\n",(0,s.jsxs)(r.p,{children:["Dispatching macro characters (including ",(0,s.jsx)(n,{term:"sharpsign",children:(0,s.jsx)("i",{children:"sharpsign"})}),")"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"Dispatching macro characters"})," continue to parse an infix numerical argument, and invoke the dispatch function. The ",(0,s.jsx)(r.em,{children:"standardized sharpsign reader macros"})," do not enforce any constraints on either the presence of or the value of the numerical argument."]}),"\n",(0,s.jsx)(r.p,{children:"#="}),"\n",(0,s.jsxs)(r.p,{children:["The #= notation is totally ignored. It does not read a following ",(0,s.jsx)(n,{term:"object",children:(0,s.jsx)("i",{children:"object"})}),". It produces no ",(0,s.jsx)(n,{term:"object",children:(0,s.jsx)("i",{children:"object"})}),", but is treated as ",(0,s.jsx)(n,{term:"whitespace",children:(0,s.jsx)("i",{children:"whitespace"})}),(0,s.jsx)("sub",{children:"2"}),"."]}),"\n",(0,s.jsx)(r.p,{children:"##"}),"\n",(0,s.jsxs)(r.p,{children:["The ## notation always produces ",(0,s.jsx)(n,{term:"nil",children:(0,s.jsx)("b",{children:"nil"})}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["No matter what the ",(0,s.jsx)(n,{term:"value",children:(0,s.jsx)("i",{children:"value"})})," of ",(0,s.jsx)(n,{term:"read-suppress",children:(0,s.jsx)("b",{children:"*read-suppress*"})}),", parentheses still continue to delimit and construct ",(0,s.jsx)(n,{term:"list",children:(0,s.jsx)("i",{children:"lists"})}),"; the #( notation continues to delimit ",(0,s.jsx)(n,{term:"vector",children:(0,s.jsx)("i",{children:"vectors"})}),"; and comments, ",(0,s.jsx)(n,{term:"string",children:(0,s.jsx)("i",{children:"strings"})}),", and the ",(0,s.jsx)(n,{term:"single-quote",children:(0,s.jsx)("i",{children:"single-quote"})})," and ",(0,s.jsx)(n,{term:"backquote",children:(0,s.jsx)("i",{children:"backquote"})})," notations continue to be interpreted properly. Such situations as \u2019), #<, #), and #",(0,s.jsx)(n,{term:"space",children:(0,s.jsx)("i",{children:"\u27e8Space\u27e9"})})," continue to signal errors."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lisp",children:'(let ((\\*read-suppress\\* t)) \n  (mapcar #\u2019read-from-string \n\t    \u2019("#(foo bar baz)" "#P(:type :lisp)" "#c1.2" \n\t\t\t       "#.(PRINT \u2019FOO)" "#3AHELLO" "#S(INTEGER)" \n\t\t\t       "#\\*ABC" "#\\GARBAGE" "#RALPHA" "#3R444"))) \n\u2192 (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) \n'})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(n,{term:"read",children:(0,s.jsx)("b",{children:"read"})}),", Chapter 2 (Syntax)"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(n,{term:"programmer",children:(0,s.jsx)("i",{children:"Programmers"})})," and ",(0,s.jsx)(n,{term:"implementation",children:(0,s.jsx)("i",{children:"implementations"})})," that define additional ",(0,s.jsx)(r.em,{children:"macro characters"})," are strongly encouraged to make them respect ",(0,s.jsx)(n,{term:"read-suppress",children:(0,s.jsx)("b",{children:"*read-suppress*"})})," just as ",(0,s.jsx)(r.em,{children:"standardized macro characters"})," do. That is, when the ",(0,s.jsx)(n,{term:"value",children:(0,s.jsx)("i",{children:"value"})})," of ",(0,s.jsx)(n,{term:"read-suppress",children:(0,s.jsx)("b",{children:"*read-suppress*"})})," is ",(0,s.jsx)(n,{term:"true",children:(0,s.jsx)("i",{children:"true"})}),", they should ignore type errors when reading a following ",(0,s.jsx)(n,{term:"object",children:(0,s.jsx)("i",{children:"object"})})," and the ",(0,s.jsx)(n,{term:"function",children:(0,s.jsx)("i",{children:"functions"})})," that implement ",(0,s.jsx)(r.em,{children:"dispatching macro characters"})," should tolerate ",(0,s.jsx)(n,{term:"nil",children:(0,s.jsx)("b",{children:"nil"})})," as their infix ",(0,s.jsx)(n,{term:"parameter",children:(0,s.jsx)("i",{children:"parameter"})})," value even if a numeric value would ordinarily be required."]})]})}function d(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}const c={title:"read-suppress"},a="*read-suppress*",l={id:"chap-23/cd-c-dictionary/read-suppress_variable",title:"read-suppress",description:"Expanded Reference: \\read-suppress\\",source:"@site/docs/chap-23/cd-c-dictionary/read-suppress_variable.md",sourceDirName:"chap-23/cd-c-dictionary",slug:"/chap-23/cd-c-dictionary/read-suppress_variable",permalink:"/cl-language-reference/chap-23/cd-c-dictionary/read-suppress_variable",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-23/cd-c-dictionary/read-suppress_variable.md",tags:[],version:"current",frontMatter:{title:"read-suppress"},sidebar:"tutorialSidebar",previous:{title:"read-from-string",permalink:"/cl-language-reference/chap-23/cd-c-dictionary/read-from-string_function"},next:{title:"read, read-preserving-whitespace",permalink:"/cl-language-reference/chap-23/cd-c-dictionary/read_read-preserving-whitespace_function"}},o={},h=[{value:"Expanded Reference: *read-suppress*",id:"expanded-reference-read-suppress",level:2}];function p(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"read-suppress",children:"*read-suppress*"}),"\n","\n","\n",(0,s.jsx)(d,{}),"\n",(0,s.jsx)(r.h2,{id:"expanded-reference-read-suppress",children:"Expanded Reference: *read-suppress*"}),"\n",(0,s.jsx)(r.admonition,{type:"tip",children:(0,s.jsx)(r.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lisp",children:"*read-suppress*\n"})})]})}function x(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},11151:(e,r,n)=>{n.d(r,{Z:()=>c,a:()=>d});var s=n(67294);const i={},t=s.createContext(i);function d(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);