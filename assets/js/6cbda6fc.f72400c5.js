"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[37651],{67206:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>h});var r=t(85893),s=t(11151);function i(n){const e={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"compute-restarts"})," ",(0,r.jsx)(e.em,{children:"Function"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"compute-restarts"})," &optional ",(0,r.jsx)(e.em,{children:"condition \u2192 restarts"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.em,{children:"condition"}),"\u2014a ",(0,r.jsx)(e.em,{children:"condition object"}),", or ",(0,r.jsx)(e.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.em,{children:"restarts"}),"\u2014a ",(0,r.jsx)(e.em,{children:"list"})," of ",(0,r.jsx)(e.em,{children:"restarts"}),"."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"compute-restarts"})," uses the dynamic state of the program to compute a ",(0,r.jsx)(e.em,{children:"list"})," of the ",(0,r.jsx)(e.em,{children:"restarts"})," which are currently active."]}),"\n",(0,r.jsxs)(e.p,{children:["The resulting ",(0,r.jsx)(e.em,{children:"list"})," is ordered so that the innermost (more-recently established) restarts are nearer the head of the ",(0,r.jsx)(e.em,{children:"list"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["When ",(0,r.jsx)(e.em,{children:"condition"})," is ",(0,r.jsx)(e.em,{children:"non-nil"}),", only those ",(0,r.jsx)(e.em,{children:"restarts"})," are considered that are either explicitly associated with that ",(0,r.jsx)(e.em,{children:"condition"}),", or not associated with any ",(0,r.jsx)(e.em,{children:"condition"}),"; that is, the excluded ",(0,r.jsx)(e.em,{children:"restarts"})," are those that are associated with a non-empty set of ",(0,r.jsx)(e.em,{children:"conditions"})," of which the given ",(0,r.jsx)(e.em,{children:"condition"})," is not an ",(0,r.jsx)(e.em,{children:"element"}),". If ",(0,r.jsx)(e.em,{children:"condition"})," is ",(0,r.jsx)(e.strong,{children:"nil"}),", all ",(0,r.jsx)(e.em,{children:"restarts"})," are considered."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"compute-restarts"})," returns all ",(0,r.jsx)(e.em,{children:"applicable restarts"}),", including anonymous ones, even if some of them have the same name as others and would therefore not be found by ",(0,r.jsx)(e.strong,{children:"find-restart"})," when given a ",(0,r.jsx)(e.em,{children:"symbol"})," argument."]}),"\n",(0,r.jsxs)(e.p,{children:["Implementations are permitted, but not required, to return ",(0,r.jsx)(e.em,{children:"distinct lists"})," from repeated calls to ",(0,r.jsx)(e.strong,{children:"compute-restarts"})," while in the same dynamic environment. The consequences are undefined if the ",(0,r.jsx)(e.em,{children:"list"})," returned by ",(0,r.jsx)(e.strong,{children:"compute-restarts"})," is every modified."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lisp",children:' \n\n\n\n;; One possible way in which an interactive debugger might present \n\n\n\n;; restarts to the user. \n\n\n\n(defun invoke-a-restart () \n\n\n\n(let ((restarts (compute-restarts))) \n\n\n\n(do ((i 0 (+ i 1)) (r restarts (cdr r))) ((null r)) \n\n\n\n(format t "~&~D: ~A~%" i (car r))) \n\n\n\n(let ((n nil) (k (length restarts))) \n\n\n\n(loop (when (and (typep n \u2019integer) (>= n 0) (< n k)) \n\n\n\n(return t)) \n\n\n\n(format t "~&Option: ") \n\n\n\n(setq n (read)) \n\n\n\n(fresh-line)) \n\n\n\n(invoke-restart-interactively (nth n restarts))))) \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n(restart-case (invoke-a-restart) \n\n\n\n(one () 1) \n\n\n\n(two () 2) \n\n\n\n(nil () :report "Who knows?" \u2019anonymous) \n\n\n\n(one () \u2019I) \n\n\n\n(two () \u2019II)) \n\n\n\n\u25b7 0: ONE \n\n\n\n\u25b7 1: TWO \n\n\n\n\u25b7 2: Who knows? \n\n\n\n\u25b7 3: ONE \n\n\n\n\u25b7 4: TWO \n\n\n\n\u25b7 5: Return to Lisp Toplevel. \n\n\n\n\u25b7 Option: 4 \n\n\n\n*\u2192* II \n\n\n\n;; Note that in addition to user-defined restart points, COMPUTE-RESTARTS \n\n\n\n;; also returns information about any system-supplied restarts, such as \n\n\n\n;; the "Return to Lisp Toplevel" restart offered above. \n\n\n\n\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Affected By:"})}),"\n",(0,r.jsx)(e.p,{children:"Existing restarts."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"find-restart"}),", ",(0,r.jsx)(e.strong,{children:"invoke-restart"}),", ",(0,r.jsx)(e.strong,{children:"restart-bind"})]})]})}function c(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(i,{...n})}):i(n)}const o={},a="compute-restarts",d={id:"chap-9/j-c-dictionary/computerestarts",title:"compute-restarts",description:"Expanded Reference: compute-restarts",source:"@site/docs/chap-9/j-c-dictionary/computerestarts.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/computerestarts",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/computerestarts",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/computerestarts.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"check-type",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/checktype"},next:{title:"condition",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/condition"}},l={},h=[{value:"Expanded Reference: compute-restarts",id:"expanded-reference-compute-restarts",level:2}];function p(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"compute-restarts",children:"compute-restarts"}),"\n","\n","\n",(0,r.jsx)(c,{}),"\n",(0,r.jsx)(e.h2,{id:"expanded-reference-compute-restarts",children:"Expanded Reference: compute-restarts"}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsx)(e.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lisp",children:"(compute-restarts )\n"})})]})}function m(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}},11151:(n,e,t)=>{t.d(e,{Z:()=>o,a:()=>c});var r=t(67294);const s={},i=r.createContext(s);function c(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:c(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);