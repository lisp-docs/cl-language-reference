"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[7828],{43349:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>x,toc:()=>a});var s=r(85893),i=r(11151);function t(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"exp, expt"})," ",(0,s.jsx)(n.em,{children:"Function"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"exp"})," ",(0,s.jsx)(n.em,{children:"number \u2192 result"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"expt"})," ",(0,s.jsx)(n.em,{children:"base-number power-number \u2192 result"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"number"}),"\u2014a ",(0,s.jsx)(n.em,{children:"number"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"base-number"}),"\u2014a ",(0,s.jsx)(n.em,{children:"number"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"power-number"}),"\u2014a ",(0,s.jsx)(n.em,{children:"number"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"result"}),"\u2014a ",(0,s.jsx)(n.em,{children:"number"})," ."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"exp"})," and ",(0,s.jsx)(n.strong,{children:"expt"})," perform exponentiation."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"exp"})," returns ",(0,s.jsx)(n.em,{children:"e"})," raised to the power ",(0,s.jsx)(n.em,{children:"number"}),", where ",(0,s.jsx)(n.em,{children:"e"})," is the base of the natural logarithms. ",(0,s.jsx)(n.strong,{children:"exp"})," has no branch cut."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"expt"})," returns ",(0,s.jsx)(n.em,{children:"base-number"})," raised to the power ",(0,s.jsx)(n.em,{children:"power-number"}),". If the ",(0,s.jsx)(n.em,{children:"base-number"})," is a ",(0,s.jsx)(n.em,{children:"rational"})," and ",(0,s.jsx)(n.em,{children:"power-number"})," is an ",(0,s.jsx)(n.em,{children:"integer"})," , the calculation is exact and the result will be of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"rational"}),"; otherwise a floating-point approximation might result. For ",(0,s.jsx)(n.strong,{children:"expt"})," of a ",(0,s.jsx)(n.em,{children:"complex rational"})," to an ",(0,s.jsx)(n.em,{children:"integer"})," power, the calculation must be exact and the result is of type (or rational (complex rational))."]}),"\n",(0,s.jsxs)(n.p,{children:["The result of ",(0,s.jsx)(n.strong,{children:"expt"})," can be a ",(0,s.jsx)(n.em,{children:"complex"})," , even when neither argument is a ",(0,s.jsx)(n.em,{children:"complex"})," , if ",(0,s.jsx)(n.em,{children:"base-number"})," is negative and ",(0,s.jsx)(n.em,{children:"power-number"})," is not an ",(0,s.jsx)(n.em,{children:"integer"})," . The result is always the ",(0,s.jsx)(n.em,{children:"principal complex value"}),". For example, (expt -8 1/3) is not permitted to return -2, even though -2 is one of the cube roots of -8. The ",(0,s.jsx)(n.em,{children:"principal"})," cube root is a ",(0,s.jsx)(n.em,{children:"complex"})," approximately equal to #C(1.0 1.73205), not -2."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"expt"})," is defined as ",(0,s.jsxs)("i",{children:["b",(0,s.jsx)("sup",{children:"x"})," = e",(0,s.jsx)("sup",{children:"xlogb"})]}),". This defines the ",(0,s.jsx)("i",{children:"principal values"})," precisely. The range of ",(0,s.jsx)(n.strong,{children:"expt"})," is the entire complex plane. Regarded as a function of ",(0,s.jsx)("i",{children:"x"}),", with ",(0,s.jsx)("i",{children:"b"})," fixed, there is no branch cut. Regarded as a function of ",(0,s.jsx)("i",{children:"b"}),", with ",(0,s.jsx)("i",{children:"x"})," fixed, there is in general a branch cut along the negative real axis, continuous with quadrant II. The domain excludes the origin. By definition, 0",(0,s.jsx)("sup",{children:"0"}),"=1. If ",(0,s.jsx)("i",{children:"b"}),"=0 and the real part of ",(0,s.jsx)("i",{children:"x"})," is strictly positive, then ",(0,s.jsxs)("i",{children:["b",(0,s.jsx)("sup",{children:"x"})]}),"=0. For all other values of ",(0,s.jsx)("i",{children:"x"}),", 0",(0,s.jsx)("i",{children:(0,s.jsx)("sup",{children:"x"})}),"is an error."]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.em,{children:"power-number"})," is an ",(0,s.jsx)(n.em,{children:"integer"})," 0, then the result is always the value one in the ",(0,s.jsx)(n.em,{children:"type"})," of ",(0,s.jsx)(n.em,{children:"base-number"}),", even if the ",(0,s.jsx)(n.em,{children:"base-number"})," is zero (of any ",(0,s.jsx)(n.em,{children:"type"}),"). That is:"]}),"\n",(0,s.jsxs)(n.p,{children:["(expt x 0) ",(0,s.jsx)(n.em,{children:"\u2261"})," (coerce 1 (type-of x))"]}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.em,{children:"power-number"})," is a zero of any other ",(0,s.jsx)(n.em,{children:"type"}),", then the result is also the value one, in the ",(0,s.jsx)(n.em,{children:"type"})," of the arguments after the application of the contagion rules in Section 12.1.1.2 (Contagion in Numeric Operations), with one exception: the consequences are undefined if ",(0,s.jsx)(n.em,{children:"base-number"})," is zero when ",(0,s.jsx)(n.em,{children:"power-number"})," is zero and not of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"integer"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:" \n\n(exp 0) \u2192 1.0 \n\n(exp 1) \u2192 2.718282 \n\n(exp (log 5)) \u2192 5.0 \n\n(expt 2 8) \u2192 256 \n\n(expt 4 .5) \u2192 2.0 \n\n(expt #c(0 1) 2) \u2192 -1 \n\n(expt #c(2 2) 3) \u2192 #C(-16 16) \n\n(expt #c(2 2) 4) \u2192 -64 \n\n\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"log"}),", Section 12.1.3.3 (Rule of Float Substitutability)"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:["Implementations of ",(0,s.jsx)(n.strong,{children:"expt"})," are permitted to use different algorithms for the cases of a ",(0,s.jsx)(n.em,{children:"power-number"})," of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"rational"})," and a ",(0,s.jsx)(n.em,{children:"power-number"})," of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"float"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that by the following logic, (sqrt (expt ",(0,s.jsx)(n.em,{children:"x"})," 3)) is not equivalent to (expt ",(0,s.jsx)(n.em,{children:"x"})," 3/2)."]}),"\n",(0,s.jsx)(n.p,{children:"(setq x (exp (/ (* 2 pi #c(0 1)) 3))) ;exp(2.pi.i/3)"}),"\n",(0,s.jsx)(n.p,{children:"(expt x 3) \u2192 1 ;except for round-off error"}),"\n",(0,s.jsx)(n.p,{children:"(sqrt (expt x 3)) \u2192 1 ;except for round-off error"}),"\n",(0,s.jsx)(n.p,{children:"(expt x 3/2) \u2192 -1 ;except for round-off error"})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}const o={},l="exp, expt",x={id:"chap-12/bc-c-dictionary/exp",title:"exp, expt",description:"Expanded Reference: exp, expt",source:"@site/docs/chap-12/bc-c-dictionary/exp.md",sourceDirName:"chap-12/bc-c-dictionary",slug:"/chap-12/bc-c-dictionary/exp",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/exp",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-12/bc-c-dictionary/exp.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"evenp, oddp",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/evenp"},next:{title:"fixnum",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/fixnum"}},d={},a=[{value:"Expanded Reference: exp, expt",id:"expanded-reference-exp-expt",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"exp-expt",children:"exp, expt"}),"\n","\n","\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-exp-expt",children:"Expanded Reference: exp, expt"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(exp, expt )\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>c});var s=r(67294);const i={},t=s.createContext(i);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);