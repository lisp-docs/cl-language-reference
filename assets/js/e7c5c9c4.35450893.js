"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[51438],{79757:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>o});var a=t(85893),d=t(11151);const s={},l="add-dependent-funcallable-standard-class",c={id:"meta-object-protocol/add-dependent-funcallable-standard-class",title:"add-dependent-funcallable-standard-class",description:"Method ADD-DEPENDENT",source:"@site/docs/meta-object-protocol/add-dependent-funcallable-standard-class.md",sourceDirName:"meta-object-protocol",slug:"/meta-object-protocol/add-dependent-funcallable-standard-class",permalink:"/cl-language-reference/meta-object-protocol/add-dependent-funcallable-standard-class",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/add-dependent-funcallable-standard-class.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"accessor-method-slot-definition",permalink:"/cl-language-reference/meta-object-protocol/accessor-method-slot-definition"},next:{title:"add-dependent-standard-class",permalink:"/cl-language-reference/meta-object-protocol/add-dependent-standard-class"}},r={},o=[{value:"<strong>remove-dependent</strong> (<em>metaobject</em> funcallable-standard-class) <em>dependent</em>\n<strong>map-dependents</strong> (<em>metaobject</em> funcallable-standard-class) <em>function</em>",id:"remove-dependent-metaobject-funcallable-standard-class-dependentmap-dependents-metaobject-funcallable-standard-class-function",level:2}];function i(e){const n={a:"a",em:"em",h1:"h1",h2:"h2",hr:"hr",p:"p",strong:"strong",...(0,d.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"add-dependent-funcallable-standard-class",children:"add-dependent-funcallable-standard-class"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Method"})," ",(0,a.jsx)(n.strong,{children:"ADD-DEPENDENT"})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"add-dependent"})," ",(0,a.jsx)(n.em,{children:"(class"})," funcallable-standard-class) ",(0,a.jsx)(n.em,{children:"dependent"})," => ",(0,a.jsx)(n.em,{children:"unspecified"})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsxs)(n.p,{children:["This is a method on the generic function",(0,a.jsx)(n.a,{href:"/meta-object-protocol/add-dependent",children:"add-dependent"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"No behavior is specified for this method beyond that which is specified for the generic function."}),"\n",(0,a.jsx)(n.p,{children:"This method cannot be overridden unless the following methods are overridden as well:"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"remove-dependent-metaobject-funcallable-standard-class-dependentmap-dependents-metaobject-funcallable-standard-class-function",children:[(0,a.jsxs)(n.a,{href:"/meta-object-protocol/remove-dependent-funcallable-standard-class",children:[(0,a.jsx)(n.strong,{children:"remove-dependent"})," (",(0,a.jsx)(n.em,{children:"metaobject"})," funcallable-standard-class) ",(0,a.jsx)(n.em,{children:"dependent"})]}),"\n",(0,a.jsxs)(n.a,{href:"/meta-object-protocol/map-dependents-funcallable-standard-class",children:[(0,a.jsx)(n.strong,{children:"map-dependents"})," (",(0,a.jsx)(n.em,{children:"metaobject"})," funcallable-standard-class) ",(0,a.jsx)(n.em,{children:"function"})]})]})]})}function p(e={}){const{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>l});var a=t(67294);const d={},s=a.createContext(d);function l(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);