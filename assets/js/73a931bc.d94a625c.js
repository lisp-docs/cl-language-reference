"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[28775],{18001:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>c,metadata:()=>d,toc:()=>h});var i=t(85893),o=t(11151);function r(e){const n={em:"em",p:"p",strong:"strong",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"storage-condition"})," ",(0,i.jsx)(n.em,{children:"Condition Type"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Class Precedence List:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"storage-condition"}),", ",(0,i.jsx)(n.strong,{children:"serious-condition"}),", ",(0,i.jsx)(n.strong,{children:"condition"}),", ",(0,i.jsx)(n.strong,{children:"t"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"storage-condition"})," consists of serious conditions that relate to problems with memory management that are potentially due to ",(0,i.jsx)(n.em,{children:"implementation-dependent"})," limits rather than semantic errors in ",(0,i.jsx)(n.em,{children:"conforming programs"}),", and that typically warrant entry to the debugger if not handled."]}),"\n",(0,i.jsxs)(n.p,{children:["Depending on the details of the ",(0,i.jsx)(n.em,{children:"implementation"}),", these might include such problems as stack overflow, memory region overflow, and storage exhausted."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(n.p,{children:["While some Common Lisp operations might signal ",(0,i.jsx)(n.em,{children:"storage-condition"})," because they are defined to create ",(0,i.jsx)(n.em,{children:"objects"}),", it is unspecified whether operations that are not defined to create ",(0,i.jsx)(n.em,{children:"objects"})," create them anyway and so might also signal ",(0,i.jsx)(n.strong,{children:"storage-condition"}),". Likewise, the evaluator itself might create ",(0,i.jsx)(n.em,{children:"objects"})," and so might signal ",(0,i.jsx)(n.strong,{children:"storage-condition"}),". (The natural assumption might be that such ",(0,i.jsx)(n.em,{children:"object"})," creation is naturally inefficient, but even that is ",(0,i.jsx)(n.em,{children:"implementation-dependent"}),".) In general, the entire question of how storage allocation is done is ",(0,i.jsx)(n.em,{children:"implementation-dependent"}),", and so any operation might signal ",(0,i.jsx)(n.strong,{children:"storage-condition"})," at any time. Because such a ",(0,i.jsx)(n.em,{children:"condition"})," is indicative of a limitation of the ",(0,i.jsx)(n.em,{children:"implementation"})," or of the ",(0,i.jsx)(n.em,{children:"image"})," rather than an error in a ",(0,i.jsx)(n.em,{children:"program"}),", ",(0,i.jsx)(n.em,{children:"objects"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"storage-condition"})," are not of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"error"}),"."]})]})}function s(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}const c={},a="storage-condition",d={id:"chap-9/j-c-dictionary/storagecondition",title:"storage-condition",description:"Expanded Reference: storage-condition",source:"@site/docs/chap-9/j-c-dictionary/storagecondition.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/storagecondition",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/storagecondition",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/storagecondition.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"simple-warning",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/simplewarning"},next:{title:"store-value",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/storevalue"}},l={},h=[{value:"Expanded Reference: storage-condition",id:"expanded-reference-storage-condition",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"storage-condition",children:"storage-condition"}),"\n","\n","\n",(0,i.jsx)(s,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-storage-condition",children:"Expanded Reference: storage-condition"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(storage-condition )\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>s});var i=t(67294);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);