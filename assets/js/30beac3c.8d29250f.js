"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[77217],{83587:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>l,toc:()=>h});var i=r(85893),s=r(11151);function o(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"ignore-errors"})," ",(0,i.jsx)(n.em,{children:"Macro"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"ignore-errors"})," ",(0,i.jsx)(n.em,{children:"{form}"}),"* \u2192 {result}*"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"forms"}),"\u2014an ",(0,i.jsx)(n.em,{children:"implicit progn"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"results"}),"\u2014In the normal situation, the ",(0,i.jsx)(n.em,{children:"values"})," of the ",(0,i.jsx)(n.em,{children:"forms"})," are returned; in the exceptional situation, two values are returned: ",(0,i.jsx)(n.strong,{children:"nil"})," and the ",(0,i.jsx)(n.em,{children:"condition"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"ignore-errors"})," is used to prevent ",(0,i.jsx)(n.em,{children:"conditions"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"error"})," from causing entry into the debugger."]}),"\n",(0,i.jsxs)(n.p,{children:["Specifically, ",(0,i.jsx)(n.strong,{children:"ignore-errors"})," ",(0,i.jsx)(n.em,{children:"executes forms"})," in a ",(0,i.jsx)(n.em,{children:"dynamic environment"})," where a ",(0,i.jsx)(n.em,{children:"handler"})," for ",(0,i.jsx)(n.em,{children:"conditions"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"error"})," has been established; if invoked, it ",(0,i.jsx)(n.em,{children:"handles"})," such ",(0,i.jsx)(n.em,{children:"conditions"})," by returning two ",(0,i.jsx)(n.em,{children:"values"}),", ",(0,i.jsx)(n.strong,{children:"nil"})," and the ",(0,i.jsx)(n.em,{children:"condition"})," that was ",(0,i.jsx)(n.em,{children:"signaled"}),", from the ",(0,i.jsx)(n.strong,{children:"ignore-errors"})," ",(0,i.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If a ",(0,i.jsx)(n.em,{children:"normal return"})," from the ",(0,i.jsx)(n.em,{children:"forms"})," occurs, any ",(0,i.jsx)(n.em,{children:"values"})," returned are returned by ",(0,i.jsx)(n.strong,{children:"ignore-errors"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:'\n(defun load-init-file (program) \n  (let ((win nil)) \n    (ignore-errors ;if this fails, don\u2019t enter debugger \n      (load (merge-pathnames (make-pathname :name program :type :lisp) \n\t\t\t     (user-homedir-pathname))) \n      (setq win t)) \n    (unless win (format t "~&Init file failed to load.~%")) \n    win)) \n\n\n\n(load-init-file "no-such-program") \n\u25b7 Init file failed to load. \nNIL \n\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"handler-case"}),", Section 9.1 (Condition System Concepts)"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(n.p,{children:["(ignore-errors . ",(0,i.jsx)(n.em,{children:"forms"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"is equivalent to:"}),"\n",(0,i.jsxs)(n.p,{children:["(handler-case (progn . ",(0,i.jsx)(n.em,{children:"forms"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"(error (condition) (values nil condition)))"}),"\n",(0,i.jsxs)(n.p,{children:["Because the second return value is a ",(0,i.jsx)(n.em,{children:"condition"})," in the exceptional case, it is common (but not required) to arrange for the second return value in the normal case to be missing or ",(0,i.jsx)(n.strong,{children:"nil"})," so that the two situations can be distinguished."]})]})}function t(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}const c={title:"ignore-errors"},d="ignore-errors",l={id:"chap-9/j-c-dictionary/ignore-errors_macro",title:"ignore-errors",description:"Expanded Reference: ignore-errors",source:"@site/docs/chap-9/j-c-dictionary/ignore-errors_macro.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/ignore-errors_macro",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/ignore-errors_macro",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/ignore-errors_macro.md",tags:[],version:"current",frontMatter:{title:"ignore-errors"},sidebar:"tutorialSidebar",previous:{title:"handler-case",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/handler-case_macro"},next:{title:"invalid-method-error",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/invalid-method-error_function"}},a={},h=[{value:"Expanded Reference: ignore-errors",id:"expanded-reference-ignore-errors",level:2}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"ignore-errors",children:"ignore-errors"}),"\n","\n","\n",(0,i.jsx)(t,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-ignore-errors",children:"Expanded Reference: ignore-errors"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(ignore-errors )\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>c,a:()=>t});var i=r(67294);const s={},o=i.createContext(s);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);