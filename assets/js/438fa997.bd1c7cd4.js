"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[60488],{68164:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>j,frontMatter:()=>c,metadata:()=>h,toc:()=>p});var i=t(85893),s=t(11151);function r(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components},{DictionaryLink:t,GlossaryTerm:r}=n;return t||l("DictionaryLink",!0),r||l("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"endp"})," ",(0,i.jsx)(r,{styled:!0,term:"function",children:(0,i.jsx)("i",{children:"Function"})})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(t,{styled:!0,term:"endp",children:(0,i.jsx)("b",{children:"endp"})})," ",(0,i.jsx)(n.em,{children:"list \u2192 generalized-boolean"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{styled:!0,term:"list",children:(0,i.jsx)("i",{children:"list"})}),"\u2014a ",(0,i.jsx)(r,{styled:!0,term:"list",children:(0,i.jsx)("i",{children:"list"})}),", which might be a ",(0,i.jsx)(r,{styled:!0,term:"dotted list",children:(0,i.jsx)("i",{children:"dotted list"})})," or a ",(0,i.jsx)(r,{styled:!0,term:"circular list",children:(0,i.jsx)("i",{children:"circular list"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"generalized-boolean"}),"\u2014a ",(0,i.jsx)(r,{styled:!0,term:"generalized boolean",children:(0,i.jsx)("i",{children:"generalized boolean"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns ",(0,i.jsx)(r,{styled:!0,term:"true",children:(0,i.jsx)("i",{children:"true"})})," if ",(0,i.jsx)(r,{styled:!0,term:"list",children:(0,i.jsx)("i",{children:"list"})})," is the ",(0,i.jsx)(r,{styled:!0,term:"empty list",children:(0,i.jsx)("i",{children:"empty list"})}),". Returns ",(0,i.jsx)(r,{styled:!0,term:"false",children:(0,i.jsx)("i",{children:"false"})})," if ",(0,i.jsx)(r,{styled:!0,term:"list",children:(0,i.jsx)("i",{children:"list"})})," is a ",(0,i.jsx)(r,{styled:!0,term:"cons",children:(0,i.jsx)("i",{children:"cons"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(endp nil) \u2192 true \n(endp \u2019(1 2)) \u2192 false \n(endp (cddr \u2019(1 2))) \u2192 true \n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,i.jsxs)(n.p,{children:["Should signal an error of ",(0,i.jsx)(r,{styled:!0,term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(t,{styled:!0,term:"type-error",children:(0,i.jsx)("b",{children:"type-error"})})," if ",(0,i.jsx)(r,{styled:!0,term:"list",children:(0,i.jsx)("i",{children:"list"})})," is not a ",(0,i.jsx)(r,{styled:!0,term:"list",children:(0,i.jsx)("i",{children:"list"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(n.p,{children:["The purpose of ",(0,i.jsx)(t,{styled:!0,term:"endp",children:(0,i.jsx)("b",{children:"endp"})})," is to test for the end of ",(0,i.jsx)(r,{styled:!0,term:"proper list",children:(0,i.jsx)("i",{children:"proper list"})}),". Since ",(0,i.jsx)(t,{styled:!0,term:"endp",children:(0,i.jsx)("b",{children:"endp"})})," does not descend into a ",(0,i.jsx)(r,{styled:!0,term:"cons",children:(0,i.jsx)("i",{children:"cons"})}),", it is well-defined to pass it a ",(0,i.jsx)(r,{styled:!0,term:"dotted list",children:(0,i.jsx)("i",{children:"dotted list"})}),". However, if shorter \u201clists\u201d are iteratively produced by calling ",(0,i.jsx)(t,{styled:!0,term:"cdr",children:(0,i.jsx)("b",{children:"cdr"})})," on such a ",(0,i.jsx)(r,{styled:!0,term:"dotted list",children:(0,i.jsx)("i",{children:"dotted list"})})," and those \u201clists\u201d are tested with ",(0,i.jsx)(t,{styled:!0,term:"endp",children:(0,i.jsx)("b",{children:"endp"})}),", a situation that has undefined consequences will eventually result when the ",(0,i.jsx)(n.em,{children:"non-nil atom"})," (which is not in fact a ",(0,i.jsx)(r,{styled:!0,term:"list",children:(0,i.jsx)("i",{children:"list"})}),") finally becomes the argument to ",(0,i.jsx)(t,{styled:!0,term:"endp",children:(0,i.jsx)("b",{children:"endp"})}),". Since this is the usual way in which ",(0,i.jsx)(t,{styled:!0,term:"endp",children:(0,i.jsx)("b",{children:"endp"})})," is used, it is conservative programming style and consistent with the intent of ",(0,i.jsx)(t,{styled:!0,term:"endp",children:(0,i.jsx)("b",{children:"endp"})})," to treat ",(0,i.jsx)(t,{styled:!0,term:"endp",children:(0,i.jsx)("b",{children:"endp"})})," as simply a function on ",(0,i.jsx)(r,{styled:!0,term:"proper list",children:(0,i.jsx)("i",{children:"proper lists"})})," which happens not to enforce an argument type of ",(0,i.jsx)(r,{styled:!0,term:"proper list",children:(0,i.jsx)("i",{children:"proper list"})})," except when the argument is ",(0,i.jsx)(r,{styled:!0,term:"atomic",children:(0,i.jsx)("i",{children:"atomic"})}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}function l(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const c={title:"endp"},o="endp",h={id:"chap-14/be-c-dictionary/endp_function",title:"endp",description:"Expanded Reference: endp",source:"@site/docs/chap-14/be-c-dictionary/endp_function.md",sourceDirName:"chap-14/be-c-dictionary",slug:"/chap-14/be-c-dictionary/endp_function",permalink:"/cl-language-reference/chap-14/be-c-dictionary/endp_function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/chap-14/be-c-dictionary/endp_function.md",tags:[],version:"current",lastUpdatedBy:"daninus14",frontMatter:{title:"endp"},sidebar:"tutorialSidebar",previous:{title:"copy-tree",permalink:"/cl-language-reference/chap-14/be-c-dictionary/copy-tree_function"},next:{title:"first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth",permalink:"/cl-language-reference/chap-14/be-c-dictionary/first_second_third_fourth_fifth_sixth_seventh_eighth_ninth_tenth_accessor"}},a={},p=[{value:"Expanded Reference: endp",id:"expanded-reference-endp",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"endp",children:"endp"}),"\n","\n","\n",(0,i.jsx)(d,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-endp",children:"Expanded Reference: endp"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(endp )\n"})})]})}function j(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>d});var i=t(67294);const s={},r=i.createContext(s);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);