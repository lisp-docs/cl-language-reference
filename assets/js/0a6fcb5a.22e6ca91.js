"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[56763],{19514:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>x,frontMatter:()=>l,metadata:()=>a,toc:()=>m});var r=s(85893),i=s(11151);function o(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"define-symbol-macro"})," ",(0,r.jsx)(n.em,{children:"Macro"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"define-symbol-macro"})," ",(0,r.jsx)(n.em,{children:"symbol expansion"})]}),"\n",(0,r.jsx)(n.p,{children:"\u2192 symbol"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"symbol"}),"\u2014a ",(0,r.jsx)(n.em,{children:"symbol"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"expansion"}),"\u2014a ",(0,r.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Provides a mechanism for globally affecting the ",(0,r.jsx)(n.em,{children:"macro expansion"})," of the indicated ",(0,r.jsx)(n.em,{children:"symbol"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Globally establishes an expansion function for the ",(0,r.jsx)(n.em,{children:"symbol macro"})," named by ",(0,r.jsx)(n.em,{children:"symbol"}),". The only guaranteed property of an expansion ",(0,r.jsx)(n.em,{children:"function"})," for a ",(0,r.jsx)(n.em,{children:"symbol macro"})," is that when it is applied to the ",(0,r.jsx)(n.em,{children:"form"})," and the ",(0,r.jsx)(n.em,{children:"environment"})," it returns the correct expansion. (In particular, it is ",(0,r.jsx)(n.em,{children:"implementation dependent"})," whether the expansion is conceptually stored in the expansion function, the ",(0,r.jsx)(n.em,{children:"environment"}),", or both.)"]}),"\n",(0,r.jsxs)(n.p,{children:["Each global reference to ",(0,r.jsx)(n.em,{children:"symbol"})," (",(0,r.jsx)(n.em,{children:"i.e."}),", not ",(0,r.jsx)(n.em,{children:"shadowed"})," ",(0,r.jsx)("sub",{children:"2"})," by a ",(0,r.jsx)(n.em,{children:"binding"})," for a ",(0,r.jsx)(n.em,{children:"variable"})," or ",(0,r.jsx)(n.em,{children:"symbol macro"})," named by the same ",(0,r.jsx)(n.em,{children:"symbol"}),") is expanded by the normal macro expansion process; see Section 3.1.2.1.1 (Symbols as Forms). The expansion of a ",(0,r.jsx)(n.em,{children:"symbol macro"})," is subject to further ",(0,r.jsx)(n.em,{children:"macro expansion"})," in the same ",(0,r.jsx)(n.em,{children:"lexical environment"})," as the ",(0,r.jsx)(n.em,{children:"symbol macro"})," reference, exactly analogous to normal ",(0,r.jsx)(n.em,{children:"macros"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The consequences are unspecified if a ",(0,r.jsx)(n.strong,{children:"special"})," declaration is made for ",(0,r.jsx)(n.em,{children:"symbol"})," while in the scope of this definition (",(0,r.jsx)(n.em,{children:"i.e."}),", when it is not ",(0,r.jsx)(n.em,{children:"shadowed"})," ",(0,r.jsx)("sub",{children:"2"})," by a ",(0,r.jsx)(n.em,{children:"binding"})," for a ",(0,r.jsx)(n.em,{children:"variable"})," or ",(0,r.jsx)(n.em,{children:"symbol macro"})," named by the same ",(0,r.jsx)(n.em,{children:"symbol"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["Any use of ",(0,r.jsx)(n.strong,{children:"setq"})," to set the value of the ",(0,r.jsx)(n.em,{children:"symbol"})," while in the scope of this definition is treated as if it were a ",(0,r.jsx)(n.strong,{children:"setf"}),". ",(0,r.jsx)(n.strong,{children:"psetq"})," of ",(0,r.jsx)(n.em,{children:"symbol"})," is treated as if it were a ",(0,r.jsx)(n.strong,{children:"psetf"}),", and ",(0,r.jsx)(n.strong,{children:"multiple-value-setq"})," is treated as if it were a ",(0,r.jsx)(n.strong,{children:"setf"})," of ",(0,r.jsx)(n.strong,{children:"values"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.em,{children:"binding"})," for a ",(0,r.jsx)(n.em,{children:"symbol macro"})," can be ",(0,r.jsx)(n.em,{children:"shadowed"})," ",(0,r.jsx)("sub",{children:"2"})," by ",(0,r.jsx)(n.strong,{children:"let"})," or ",(0,r.jsx)(n.strong,{children:"symbol-macrolet"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(defvar \\*things\\* (list \u2019alpha \u2019beta \u2019gamma)) \u2192 \\*THINGS\\* \n(define-symbol-macro thing1 (first \\*things\\*)) \u2192 THING1 \n(define-symbol-macro thing2 (second \\*things\\*)) \u2192 THING2 \n(define-symbol-macro thing3 (third \\*things\\*)) \u2192 THING3 \nthing1 \u2192 ALPHA \n(setq thing1 \u2019ONE) \u2192 ONE \n\\*things\\* \u2192 (ONE BETA GAMMA) \n(multiple-value-setq (thing2 thing3) (values \u2019two \u2019three)) \u2192 TWO \nthing3 \u2192 THREE \n\\*things\\* \u2192 (ONE TWO THREE) \n(list thing2 (let ((thing2 2)) thing2)) \u2192 (TWO 2) \n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"symbol"})," is already defined as a ",(0,r.jsx)(n.em,{children:"global variable"}),", an error of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"program-error"})," is signaled."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"symbol-macrolet"}),", ",(0,r.jsx)(n.strong,{children:"macroexpand"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"symbol-macrolet"})})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}const l={},t="define-symbol-macro",a={id:"chap-3/d-i-dictionary/definesymbolmacro",title:"define-symbol-macro",description:"Expanded Reference: define-symbol-macro",source:"@site/docs/chap-3/d-i-dictionary/definesymbolmacro.md",sourceDirName:"chap-3/d-i-dictionary",slug:"/chap-3/d-i-dictionary/definesymbolmacro",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/definesymbolmacro",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-3/d-i-dictionary/definesymbolmacro.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"define-compiler-macro",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/definecompilermacro"},next:{title:"defmacro",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/defmacro"}},d={},m=[{value:"Expanded Reference: define-symbol-macro",id:"expanded-reference-define-symbol-macro",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"define-symbol-macro",children:"define-symbol-macro"}),"\n","\n","\n",(0,r.jsx)(c,{}),"\n",(0,r.jsx)(n.h2,{id:"expanded-reference-define-symbol-macro",children:"Expanded Reference: define-symbol-macro"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(define-symbol-macro )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>c});var r=s(67294);const i={},o=r.createContext(i);function c(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);