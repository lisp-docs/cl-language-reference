"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[68819],{40052:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>o});var s=r(85893),t=r(11151);const i={title:"K",sidebar_position:107},c=void 0,a={id:"chap-26/k",title:"K",description:"K",source:"@site/docs/chap-26/k.md",sourceDirName:"chap-26",slug:"/chap-26/k",permalink:"/cl-language-reference/docs/chap-26/k",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-26/k.md",tags:[],version:"current",sidebarPosition:107,frontMatter:{title:"K",sidebar_position:107},sidebar:"tutorialSidebar",previous:{title:"I",permalink:"/cl-language-reference/docs/chap-26/i"},next:{title:"L",permalink:"/cl-language-reference/docs/chap-26/l"}},l={},o=[];function d(e){const n={em:"em",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"K"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"key"})," ",(0,s.jsx)(n.em,{children:"n."})," an ",(0,s.jsx)(n.em,{children:"object"})," used for selection during retrieval. See ",(0,s.jsx)(n.em,{children:"association list"}),", ",(0,s.jsx)(n.em,{children:"property list"}),", and ",(0,s.jsx)(n.em,{children:"hash table"}),". Also, see Section 17.1 (Sequence Concepts)."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"keyword"})," ",(0,s.jsx)(n.em,{children:"n."})," 1. a ",(0,s.jsx)(n.em,{children:"symbol"})," the ",(0,s.jsx)(n.em,{children:"home package"})," of which is the KEYWORD ",(0,s.jsx)(n.em,{children:"package"}),". 2. any ",(0,s.jsx)(n.em,{children:"symbol"}),", usually but not necessarily in the KEYWORD ",(0,s.jsx)(n.em,{children:"package"}),", that is used as an identifying marker in keyword-style argument passing. See ",(0,s.jsx)(n.strong,{children:"lambda"}),". 3. ",(0,s.jsx)(n.em,{children:"Idiom."})," a ",(0,s.jsx)(n.em,{children:"lambda list keyword"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"keyword parameter"})," ",(0,s.jsx)(n.em,{children:"n."})," A ",(0,s.jsx)(n.em,{children:"parameter"})," for which a corresponding keyword ",(0,s.jsx)(n.em,{children:"argument"})," is optional. (There is no such thing as a required keyword ",(0,s.jsx)(n.em,{children:"argument"}),".) If the ",(0,s.jsx)(n.em,{children:"argument"})," is not supplied, a default value is used. See also ",(0,s.jsx)(n.em,{children:"supplied-p parameter"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"keyword/value pair"})," ",(0,s.jsx)(n.em,{children:"n."})," two successive ",(0,s.jsx)(n.em,{children:"elements"})," (a ",(0,s.jsx)(n.em,{children:"keyword"})," and a ",(0,s.jsx)(n.em,{children:"value"}),", respectively) of a ",(0,s.jsx)(n.em,{children:"property list"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>c});var s=r(67294);const t={},i=s.createContext(t);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);