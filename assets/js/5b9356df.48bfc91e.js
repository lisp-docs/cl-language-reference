"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[25077],{96909:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>d,metadata:()=>l,toc:()=>h});var t=n(85893),i=n(11151);function s(e){const r={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"read-delimited-list"})," ",(0,t.jsx)(r.em,{children:"Function"})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"read-delimited-list"})," ",(0,t.jsx)(r.em,{children:"char"})," &optional ",(0,t.jsx)(r.em,{children:"input-stream recursive-p \u2192 list"})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Arguments and Values:"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.em,{children:"char"}),"\u2014a ",(0,t.jsx)(r.em,{children:"character"})," ."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.em,{children:"input-stream"}),"\u2014an ",(0,t.jsx)(r.em,{children:"input stream designator"})," . The default is ",(0,t.jsx)(r.em,{children:"standard input"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.em,{children:"recursive-p"}),"\u2014a ",(0,t.jsx)(r.em,{children:"generalized boolean"}),". The default is ",(0,t.jsx)(r.em,{children:"false"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.em,{children:"list"}),"\u2014a ",(0,t.jsx)(r.em,{children:"list"})," of the ",(0,t.jsx)(r.em,{children:"objects"})," read."]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"read-delimited-list"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"read-delimited-list"})," reads ",(0,t.jsx)(r.em,{children:"objects"})," from ",(0,t.jsx)(r.em,{children:"input-stream"})," until the next character after an ",(0,t.jsx)(r.em,{children:"object"}),"\u2019s representation (ignoring ",(0,t.jsx)(r.em,{children:"whitespace"}),(0,t.jsx)("sub",{children:"2"})," characters and comments) is ",(0,t.jsx)(r.em,{children:"char"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"read-delimited-list"})," looks ahead at each step for the next non-",(0,t.jsx)(r.em,{children:"whitespace"}),(0,t.jsx)("sub",{children:"2"})," ",(0,t.jsx)(r.em,{children:"character"})," and peeks at it as if with ",(0,t.jsx)(r.strong,{children:"peek-char"}),". If it is ",(0,t.jsx)(r.em,{children:"char"}),", then the ",(0,t.jsx)(r.em,{children:"character"})," is consumed and the ",(0,t.jsx)(r.em,{children:"list"})," of ",(0,t.jsx)(r.em,{children:"objects"})," is returned. If it is a ",(0,t.jsx)(r.em,{children:"constituent"})," or ",(0,t.jsx)(r.em,{children:"escape character"})," , then ",(0,t.jsx)(r.strong,{children:"read"})," is used to read an ",(0,t.jsx)(r.em,{children:"object"}),", which is added to the end of the ",(0,t.jsx)(r.em,{children:"list"}),". If it is a ",(0,t.jsx)(r.em,{children:"macro character"})," , its ",(0,t.jsx)(r.em,{children:"reader macro function"})," is called; if the function returns a ",(0,t.jsx)(r.em,{children:"value"}),", that ",(0,t.jsx)(r.em,{children:"value"})," is added to the ",(0,t.jsx)(r.em,{children:"list"}),". The peek-ahead process is then repeated."]}),"\n",(0,t.jsxs)(r.p,{children:["If ",(0,t.jsx)(r.em,{children:"recursive-p"})," is ",(0,t.jsx)(r.em,{children:"true"}),", this call is expected to be embedded in a higher-level call to ",(0,t.jsx)(r.strong,{children:"read"})," or a similar function."]}),"\n",(0,t.jsxs)(r.p,{children:["It is an error to reach end-of-file during the operation of ",(0,t.jsx)(r.strong,{children:"read-delimited-list"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["The consequences are undefined if ",(0,t.jsx)(r.em,{children:"char"})," has a ",(0,t.jsx)(r.em,{children:"syntax type"})," of ",(0,t.jsx)(r.em,{children:"whitespace"}),(0,t.jsx)("sub",{children:"2"})," in the ",(0,t.jsx)(r.em,{children:"current readtable"}),". ",(0,t.jsx)(r.strong,{children:"Examples:"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lisp",children:"(read-delimited-list #\\]) 1 2 3 4 5 6 ] \n\u2192 (1 2 3 4 5 6) \nSuppose you wanted #\\{*a b c . . . z*\\} to read as a list of all pairs of the elements *a*, *b*, *c*, *. . .*, *z*, for example. \n#\\{p q z a\\} reads as ((p q) (p z) (p a) (q z) (q a) (z a)) \nThis can be done by specifying a macro-character definition for #\\{ that does two things: reads in all the items up to the \\}, and constructs the pairs. **read-delimited-list** performs the first task. \n(defun |#\\{-reader| (stream char arg) \n  (declare (ignore char arg)) \n  (mapcon #\u2019(lambda (x) \n\t      (mapcar #\u2019(lambda (y) (list (car x) y)) (cdr x))) \n\t    (read-delimited-list #\\\\} stream t))) \u2192 |#\\{-reader| \n(set-dispatch-macro-character #\\# #\\\\{ #\u2019|#\\{-reader|) \u2192 T \n(set-macro-character #\\\\} (get-macro-character #\\) **nil**)) \nNote that *true* is supplied for the *recursive-p* argument. \nIt is necessary here to give a definition to the character \\} as well to prevent it from being a constituent. If the line \n(set-macro-character #\\\\} (get-macro-character #\\) **nil**)) \nshown above were not included, then the \\} in \n#\\{ p q z a\\} \n\nwould be considered a constituent character, part of the symbol named a\\}. This could be corrected by putting a space before the \\}, but it is better to call **set-macro-character**. \nGiving \\} the same definition as the standard definition of the character ) has the twin benefit of making it terminate tokens for use with **read-delimited-list** and also making it invalid for use in any other context. Attempting to read a stray \\} will signal an error. \n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Affected By:"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"*standard-input*"}),", ",(0,t.jsx)(r.strong,{children:"*readtable*"}),", ",(0,t.jsx)(r.strong,{children:"*terminal-io*"}),"."]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"See Also:"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"read"}),", ",(0,t.jsx)(r.strong,{children:"peek-char"}),", ",(0,t.jsx)(r.strong,{children:"read-char"}),", ",(0,t.jsx)(r.strong,{children:"unread-char"}),"."]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"read-delimited-list"})," is intended for use in implementing ",(0,t.jsx)(r.em,{children:"reader macros"}),". Usually it is desirable for ",(0,t.jsx)(r.em,{children:"char"})," to be a ",(0,t.jsx)(r.em,{children:"terminating macro character"})," so that it can be used to delimit tokens; however, ",(0,t.jsx)(r.strong,{children:"read-delimited-list"})," makes no attempt to alter the syntax specified for ",(0,t.jsx)(r.em,{children:"char"})," by the current readtable. The caller must make any necessary changes to the readtable syntax explicitly."]})]})}function a(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}const d={},c="read-delimited-list",l={id:"chap-23/cd-c-dictionary/readdelimitedlist",title:"read-delimited-list",description:"Expanded Reference: read-delimited-list",source:"@site/docs/chap-23/cd-c-dictionary/readdelimitedlist.md",sourceDirName:"chap-23/cd-c-dictionary",slug:"/chap-23/cd-c-dictionary/readdelimitedlist",permalink:"/cl-language-reference/docs/chap-23/cd-c-dictionary/readdelimitedlist",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-23/cd-c-dictionary/readdelimitedlist.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"read, read-preserving-whitespace",permalink:"/cl-language-reference/docs/chap-23/cd-c-dictionary/read"},next:{title:"reader-error",permalink:"/cl-language-reference/docs/chap-23/cd-c-dictionary/readererror"}},o={},h=[{value:"Expanded Reference: read-delimited-list",id:"expanded-reference-read-delimited-list",level:2}];function m(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"read-delimited-list",children:"read-delimited-list"}),"\n","\n","\n",(0,t.jsx)(a,{}),"\n",(0,t.jsx)(r.h2,{id:"expanded-reference-read-delimited-list",children:"Expanded Reference: read-delimited-list"}),"\n",(0,t.jsx)(r.admonition,{type:"tip",children:(0,t.jsx)(r.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lisp",children:"(read-delimited-list )\n"})})]})}function p(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},11151:(e,r,n)=>{n.d(r,{Z:()=>d,a:()=>a});var t=n(67294);const i={},s=t.createContext(i);function a(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);