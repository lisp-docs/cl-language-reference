"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[33360],{58090:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>x,frontMatter:()=>s,metadata:()=>d,toc:()=>h});var r=i(85893),l=i(11151);function t(n){const e={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,l.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"inline, notinline"})," ",(0,r.jsx)(e.em,{children:"Declaration"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(e.p,{children:["(inline ",(0,r.jsx)(e.em,{children:"{function-name}"}),"*)"]}),"\n",(0,r.jsxs)(e.p,{children:["(notinline ",(0,r.jsx)(e.em,{children:"{function-name}"}),"*)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Arguments:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.em,{children:"function-name"}),"\u2014a ",(0,r.jsx)(e.em,{children:"function name"}),"."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Valid Context:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.em,{children:"declaration"})," or ",(0,r.jsx)(e.em,{children:"proclamation"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Binding Types Aected:"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.em,{children:"function"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"inline"})," specifies that it is desirable for the compiler to produce inline calls to the ",(0,r.jsx)(e.em,{children:"functions"})," named by ",(0,r.jsx)(e.em,{children:"function-names"}),"; that is, the code for a specified ",(0,r.jsx)(e.em,{children:"function-name"})," should be integrated into the calling routine, appearing \u201cin line\u201d in place of a procedure call. A compiler is free to ignore this declaration. ",(0,r.jsx)(e.strong,{children:"inline"})," declarations never apply to variable ",(0,r.jsx)(e.em,{children:"bindings"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["If one of the ",(0,r.jsx)(e.em,{children:"functions"})," mentioned has a lexically apparent local definition (as made by ",(0,r.jsx)(e.strong,{children:"flet"})," or ",(0,r.jsx)(e.strong,{children:"labels"}),"), then the declaration applies to that local definition and not to the global function definition."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"inline, notinline"})}),"\n",(0,r.jsxs)(e.p,{children:["While no ",(0,r.jsx)(e.em,{children:"conforming implementation"})," is required to perform inline expansion of user-defined functions, those ",(0,r.jsx)(e.em,{children:"implementations"})," that do attempt to recognize the following paradigm:"]}),"\n",(0,r.jsxs)(e.p,{children:["To define a ",(0,r.jsx)(e.em,{children:"function"})," f that is not ",(0,r.jsx)(e.strong,{children:"inline"})," by default but for which (declare (inline f)) will make ",(0,r.jsx)(e.em,{children:"f"})," be locally inlined, the proper definition sequence is:"]}),"\n",(0,r.jsx)(e.p,{children:"(declaim (inline f))"}),"\n",(0,r.jsx)(e.p,{children:"(defun f ...)"}),"\n",(0,r.jsx)(e.p,{children:"(declaim (notinline f))"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.strong,{children:"inline"})," proclamation preceding the ",(0,r.jsx)(e.strong,{children:"defun"})," ",(0,r.jsx)(e.em,{children:"form"})," ensures that the ",(0,r.jsx)(e.em,{children:"compiler"})," has the opportunity save the information necessary for inline expansion, and the ",(0,r.jsx)(e.strong,{children:"notinline"})," proclamation following the ",(0,r.jsx)(e.strong,{children:"defun"})," ",(0,r.jsx)(e.em,{children:"form"})," prevents f from being expanded inline everywhere."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"notinline"})," specifies that it is undesirable to compile the ",(0,r.jsx)(e.em,{children:"functions"})," named by ",(0,r.jsx)(e.em,{children:"function-names"})," in-line. A compiler is not free to ignore this declaration; calls to the specified functions must be implemented as out-of-line subroutine calls."]}),"\n",(0,r.jsxs)(e.p,{children:["If one of the ",(0,r.jsx)(e.em,{children:"functions"})," mentioned has a lexically apparent local definition (as made by ",(0,r.jsx)(e.strong,{children:"flet"})," or ",(0,r.jsx)(e.strong,{children:"labels"}),"), then the declaration applies to that local definition and not to the global function definition."]}),"\n",(0,r.jsxs)(e.p,{children:["In the presence of a ",(0,r.jsx)(e.em,{children:"compiler macro"})," definition for ",(0,r.jsx)(e.em,{children:"function-name"}),", a ",(0,r.jsx)(e.strong,{children:"notinline"})," declaration prevents that ",(0,r.jsx)(e.em,{children:"compiler macro"})," from being used. An ",(0,r.jsx)(e.strong,{children:"inline"})," declaration may be used to encourage use of ",(0,r.jsx)(e.em,{children:"compiler macro"})," definitions. ",(0,r.jsx)(e.strong,{children:"inline"})," and ",(0,r.jsx)(e.strong,{children:"notinline"})," declarations otherwise have no e\u21b5ect when the lexically visible definition of ",(0,r.jsx)(e.em,{children:"function-name"})," is a ",(0,r.jsx)(e.em,{children:"macro"})," definition."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"inline"})," and ",(0,r.jsx)(e.strong,{children:"notinline"})," declarations can be ",(0,r.jsx)(e.em,{children:"free declarations"})," or ",(0,r.jsx)(e.em,{children:"bound declarations"}),". ",(0,r.jsx)(e.strong,{children:"inline"})," and ",(0,r.jsx)(e.strong,{children:"notinline"})," declarations of functions that appear before the body of a ",(0,r.jsx)(e.strong,{children:"flet"})," or ",(0,r.jsx)(e.strong,{children:"labels"})," ",(0,r.jsx)(e.em,{children:"form"})," that defines that function are ",(0,r.jsx)(e.em,{children:"bound declarations"}),". Such declarations in other contexts are ",(0,r.jsx)(e.em,{children:"free declarations"}),"."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lisp",children:" \n\n;; The globally defined function DISPATCH should be open-coded, \n\n;; if the implementation supports inlining, unless a NOTINLINE \n\n;; declaration overrides this effect. \n\n(declaim (inline dispatch)) \n\n(defun dispatch (x) (funcall (get (car x) \u2019dispatch) x)) \n\n;; Here is an example where inlining would be encouraged. \n\n(defun top-level-1 () (dispatch (read-command))) \n\n;; Here is an example where inlining would be prohibited. \n\n(defun top-level-2 () \n\n(declare (notinline dispatch)) \n\n(dispatch (read-command))) \n\n;; Here is an example where inlining would be prohibited. \n\n(declaim (notinline dispatch)) \n\n(defun top-level-3 () (dispatch (read-command))) \n\n;; Here is an example where inlining would be encouraged. \n\nEvaluation and \n\n \n\n \n\n(defun top-level-4 () \n\n(declare (inline dispatch)) \n\n(dispatch (read-command))) \n\n\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"declare"}),", ",(0,r.jsx)(e.strong,{children:"declaim"}),", ",(0,r.jsx)(e.strong,{children:"proclaim"})]})]})}function o(n={}){const{wrapper:e}={...(0,l.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(t,{...n})}):t(n)}const s={},c="inline, notinline",d={id:"chap-3/d-i-dictionary/inline",title:"inline, notinline",description:"Expanded Reference: inline, notinline",source:"@site/docs/chap-3/d-i-dictionary/inline.md",sourceDirName:"chap-3/d-i-dictionary",slug:"/chap-3/d-i-dictionary/inline",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/inline",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-3/d-i-dictionary/inline.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ignore, ignorable",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/ignore"},next:{title:"lambda",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/lambda"}},a={},h=[{value:"Expanded Reference: inline, notinline",id:"expanded-reference-inline-notinline",level:2}];function p(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,l.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"inline-notinline",children:"inline, notinline"}),"\n","\n","\n",(0,r.jsx)(o,{}),"\n",(0,r.jsx)(e.h2,{id:"expanded-reference-inline-notinline",children:"Expanded Reference: inline, notinline"}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsx)(e.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lisp",children:"(inline, notinline )\n"})})]})}function x(n={}){const{wrapper:e}={...(0,l.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}},11151:(n,e,i)=>{i.d(e,{Z:()=>s,a:()=>o});var r=i(67294);const l={},t=r.createContext(l);function o(n){const e=r.useContext(t);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:o(n.components),r.createElement(t.Provider,{value:e},n.children)}}}]);