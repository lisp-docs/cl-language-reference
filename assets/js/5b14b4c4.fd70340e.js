"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[99460],{74104:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>m,frontMatter:()=>c,metadata:()=>h,toc:()=>x});var i=r(85893),l=r(11151);function s(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,l.a)(),...e.components},{DictionaryLink:r,GlossaryTerm:s}=n;return r||d("DictionaryLink",!0),s||d("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"let, let"}),(0,i.jsx)(n.em,{children:"\u2217 Special Operator"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let"})})," (",(0,i.jsx)(n.em,{children:"{var |"})," (",(0,i.jsx)(n.em,{children:"var"})," [",(0,i.jsx)(n.em,{children:"init-form"}),"])",(0,i.jsx)(n.em,{children:"}"}),"*) ",(0,i.jsx)(s,{term:"declaration",children:(0,i.jsx)("i",{children:"{declaration}"})}),"* ",(0,i.jsx)(s,{term:"form",children:(0,i.jsx)("i",{children:"{form}"})}),"* \u2192 {result}*"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let*"})})," (",(0,i.jsx)(n.em,{children:"{var |"})," (",(0,i.jsx)(n.em,{children:"var"})," [",(0,i.jsx)(n.em,{children:"init-form"}),"])",(0,i.jsx)(n.em,{children:"}"}),"*) ",(0,i.jsx)(s,{term:"declaration",children:(0,i.jsx)("i",{children:"{declaration}"})}),"* ",(0,i.jsx)(s,{term:"form",children:(0,i.jsx)("i",{children:"{form}"})}),"* \u2192 {result}*"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"var"}),"\u2014a ",(0,i.jsx)(s,{term:"symbol",children:(0,i.jsx)("i",{children:"symbol"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"init-form"}),"\u2014a ",(0,i.jsx)(s,{term:"form",children:(0,i.jsx)("i",{children:"form"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(s,{term:"declaration",children:(0,i.jsx)("i",{children:"declaration"})}),"\u2014a ",(0,i.jsx)(r,{term:"declare",children:(0,i.jsx)("b",{children:"declare"})})," ",(0,i.jsx)(s,{term:"expression",children:(0,i.jsx)("i",{children:"expression"})}),"; not evaluated."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(s,{term:"form",children:(0,i.jsx)("i",{children:"form"})}),"\u2014a ",(0,i.jsx)(s,{term:"form",children:(0,i.jsx)("i",{children:"form"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"results"}),"\u2014the ",(0,i.jsx)(s,{term:"value",children:(0,i.jsx)("i",{children:"values"})})," returned by the ",(0,i.jsx)(s,{term:"form",children:(0,i.jsx)("i",{children:"forms"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let"})})," and ",(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let*"})})," create new variable ",(0,i.jsx)(s,{term:"binding",children:(0,i.jsx)("i",{children:"bindings"})})," and execute a series of ",(0,i.jsx)(s,{term:"form",children:(0,i.jsx)("i",{children:"forms"})})," that use these ",(0,i.jsx)(s,{term:"binding",children:(0,i.jsx)("i",{children:"bindings"})}),". ",(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let"})})," performs the ",(0,i.jsx)(s,{term:"binding",children:(0,i.jsx)("i",{children:"bindings"})})," in parallel and ",(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let*"})})," does them sequentially."]}),"\n",(0,i.jsx)(n.p,{children:"The form"}),"\n",(0,i.jsxs)(n.p,{children:["(let ((",(0,i.jsx)(n.em,{children:"var1 init-form-1"})," )"]}),"\n",(0,i.jsxs)(n.p,{children:["(",(0,i.jsx)(n.em,{children:"var2 init-form-2"})," )"]}),"\n",(0,i.jsx)(n.p,{children:"..."}),"\n",(0,i.jsxs)(n.p,{children:["(",(0,i.jsx)(n.em,{children:"varm init-form-m"}),"))"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"declaration1"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"declaration2"})}),"\n",(0,i.jsx)(n.p,{children:"..."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"declarationp"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"form1"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"form2"})}),"\n",(0,i.jsx)(n.p,{children:"..."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"formn"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"let, let"}),(0,i.jsx)(n.em,{children:"\u2217"})]}),"\n",(0,i.jsxs)(n.p,{children:["first evaluates the expressions ",(0,i.jsx)(n.em,{children:"init-form-1"}),", ",(0,i.jsx)(n.em,{children:"init-form-2"}),", and so on, in that order, saving the resulting values. Then all of the variables ",(0,i.jsx)(n.em,{children:"varj"})," are bound to the corresponding values; each ",(0,i.jsx)(s,{term:"binding",children:(0,i.jsx)("i",{children:"binding"})})," is lexical unless there is a ",(0,i.jsx)(r,{term:"special",children:(0,i.jsx)("b",{children:"special"})})," declaration to the contrary. The expressions ",(0,i.jsx)(n.em,{children:"formk"})," are then evaluated in order; the values of all but the last are discarded (that is, the body of a ",(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let"})})," is an ",(0,i.jsx)(s,{styled:!0,term:"implicit progn",children:(0,i.jsx)("i",{children:"implicit progn"})}),")."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let*"})})," is similar to ",(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let"})}),", but the ",(0,i.jsx)(s,{term:"binding",children:(0,i.jsx)("i",{children:"bindings"})})," of variables are performed sequentially rather than in parallel. The expression for the ",(0,i.jsx)(n.em,{children:"init-form"})," of a ",(0,i.jsx)(n.em,{children:"var"})," can refer to ",(0,i.jsx)(n.em,{children:"vars"})," previously bound in the ",(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let*"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The form"}),"\n",(0,i.jsxs)(n.p,{children:["(let* ((",(0,i.jsx)(n.em,{children:"var1 init-form-1"})," )"]}),"\n",(0,i.jsxs)(n.p,{children:["(",(0,i.jsx)(n.em,{children:"var2 init-form-2"})," )"]}),"\n",(0,i.jsx)(n.p,{children:"..."}),"\n",(0,i.jsxs)(n.p,{children:["(",(0,i.jsx)(n.em,{children:"varm init-form-m"}),"))"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"declaration1"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"declaration2"})}),"\n",(0,i.jsx)(n.p,{children:"..."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"declarationp"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"form1"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"form2"})}),"\n",(0,i.jsx)(n.p,{children:"..."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"formn"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["first evaluates the expression ",(0,i.jsx)(n.em,{children:"init-form-1"}),", then binds the variable ",(0,i.jsx)(n.em,{children:"var1"})," to that value; then it evaluates ",(0,i.jsx)(n.em,{children:"init-form-2"})," and binds ",(0,i.jsx)(n.em,{children:"var2"}),", and so on. The expressions ",(0,i.jsx)(n.em,{children:"formj"})," are then evaluated in order; the values of all but the last are discarded (that is, the body of ",(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let*"})})," is an implicit ",(0,i.jsx)(r,{term:"progn",children:(0,i.jsx)("b",{children:"progn"})}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["For both ",(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let"})})," and ",(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let*"})}),", if there is not an ",(0,i.jsx)(n.em,{children:"init-form"})," associated with a ",(0,i.jsx)(n.em,{children:"var"}),", ",(0,i.jsx)(n.em,{children:"var"})," is initialized to ",(0,i.jsx)(r,{term:"nil",children:(0,i.jsx)("b",{children:"nil"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The special form ",(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let"})})," has the property that the ",(0,i.jsx)(s,{term:"scope",children:(0,i.jsx)("i",{children:"scope"})})," of the name binding does not include any initial value form. For ",(0,i.jsx)(r,{term:"let",children:(0,i.jsx)("b",{children:"let*"})}),", a variable\u2019s ",(0,i.jsx)(s,{term:"scope",children:(0,i.jsx)("i",{children:"scope"})})," also includes the remaining initial value forms for subsequent variable bindings."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:'(setq a \u2019top) \u2192 TOP \n(defun dummy-function () a) \u2192 DUMMY-FUNCTION \n(let ((a \u2019inside) (b a)) \n  (format nil "~S ~S ~S" a b (dummy-function))) \u2192 "INSIDE TOP TOP" \n(let\\* ((a \u2019inside) (b a)) \n       (format nil "~S ~S ~S" a b (dummy-function))) \u2192 "INSIDE INSIDE TOP" \n(let ((a \u2019inside) (b a)) \n  (declare (special a)) \n  (format nil "~S ~S ~S" a b (dummy-function))) \u2192 "INSIDE TOP INSIDE" \nThe code \n(let (x) \n  Data and Control \n\n  (declare (integer x)) \n  (setq x (gcd y z)) \n  ...) \nis incorrect; although x is indeed set before it is used, and is set to a value of the declared type *integer* , nevertheless x initially takes on the value **nil** in violation of the type declaration. \n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,i.jsx)(r,{term:"progv",children:(0,i.jsx)("b",{children:"progv"})})]})}function t(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}function d(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const c={title:"let, let"},a="let, let",h={id:"chap-5/f-d-dictionary/let_let_special-operator",title:"let, let",description:"Expanded Reference: let, let",source:"@site/docs/chap-5/f-d-dictionary/let_let_special-operator.md",sourceDirName:"chap-5/f-d-dictionary",slug:"/chap-5/f-d-dictionary/let_let_special-operator",permalink:"/cl-language-reference/chap-5/f-d-dictionary/let_let_special-operator",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-5/f-d-dictionary/let_let_special-operator.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{title:"let, let"},sidebar:"tutorialSidebar",previous:{title:"lambda-parameters-limit",permalink:"/cl-language-reference/chap-5/f-d-dictionary/lambda-parameters-limit_constant-variable"},next:{title:"multiple-value-bind",permalink:"/cl-language-reference/chap-5/f-d-dictionary/multiple-value-bind_macro"}},o={},x=[{value:"Expanded Reference: let, let",id:"expanded-reference-let-let",level:2}];function j(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"let-let",children:"let, let"}),"\n","\n","\n",(0,i.jsx)(t,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-let-let",children:"Expanded Reference: let, let"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(let, let )\n"})})]})}function m(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(j,{...e})}):j(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>t});var i=r(67294);const l={},s=i.createContext(l);function t(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);