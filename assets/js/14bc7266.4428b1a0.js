"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[85562],{74178:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var i=t(85893),c=t(11151);const o={},r="compute-discriminating-function-standard-generic-function",a={id:"meta-object-protocol/dictionary/compute-discriminating-function-standard-generic-function",title:"compute-discriminating-function-standard-generic-function",description:"Method COMPUTE-DISCRIMINATING-FUNCTION",source:"@site/docs/meta-object-protocol/dictionary/compute-discriminating-function-standard-generic-function.md",sourceDirName:"meta-object-protocol/dictionary",slug:"/meta-object-protocol/dictionary/compute-discriminating-function-standard-generic-function",permalink:"/cl-language-reference/meta-object-protocol/dictionary/compute-discriminating-function-standard-generic-function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/dictionary/compute-discriminating-function-standard-generic-function.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"compute-default-initargs",permalink:"/cl-language-reference/meta-object-protocol/dictionary/compute-default-initargs"},next:{title:"compute-discriminating-function",permalink:"/cl-language-reference/meta-object-protocol/dictionary/compute-discriminating-function"}},s={},d=[];function u(n){const e={a:"a",em:"em",h1:"h1",p:"p",strong:"strong",...(0,c.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"compute-discriminating-function-standard-generic-function",children:"compute-discriminating-function-standard-generic-function"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.em,{children:"Method"})," ",(0,i.jsx)(e.strong,{children:"COMPUTE-DISCRIMINATING-FUNCTION"})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Syntax:"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"compute-discriminating-function"})," ",(0,i.jsx)(e.em,{children:"(generic-function"})," standard-generic-function) => ",(0,i.jsx)(e.em,{children:"function"})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(e.p,{children:["This is a method on the generic function",(0,i.jsx)(e.a,{href:"/meta-object-protocol/compute-discriminating-function",children:"compute-discriminating-function"}),"."]}),"\n",(0,i.jsx)(e.p,{children:"No behavior is specified for this method beyond that specified for the generic function."}),"\n",(0,i.jsx)(e.p,{children:"This method can be overridden."})]})}function m(n={}){const{wrapper:e}={...(0,c.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},11151:(n,e,t)=>{t.d(e,{Z:()=>a,a:()=>r});var i=t(67294);const c={},o=i.createContext(c);function r(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(c):n.components||c:r(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);