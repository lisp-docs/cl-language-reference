"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[48982],{64943:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>x,default:()=>y,frontMatter:()=>m,metadata:()=>j,toc:()=>p});var t=s(85893),i=s(11151);function c(e){const n={em:"em",p:"p",...(0,i.a)(),...e.components},{ClLinks:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(s,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})})," ",(0,t.jsx)(s,{styled:!0,term:"change-class",children:(0,t.jsx)("b",{children:"change-class"})})," can be used to change the ",(0,t.jsx)(s,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})})," of an ",(0,t.jsx)(s,{styled:!0,term:"instance",children:(0,t.jsx)("i",{children:"instance"})})," from its current class, ",(0,t.jsx)(n.em,{children:"C"}),(0,t.jsx)("sub",{children:"from"}),", to a different class, ",(0,t.jsx)(n.em,{children:"C"}),(0,t.jsx)("sub",{children:"to"}),"; it changes the structure of the ",(0,t.jsx)(s,{styled:!0,term:"instance",children:(0,t.jsx)("i",{children:"instance"})})," to conform to the definition of the class ",(0,t.jsx)(n.em,{children:"C"}),(0,t.jsx)("sub",{children:"to"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Note that changing the ",(0,t.jsx)(s,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})})," of an ",(0,t.jsx)(s,{styled:!0,term:"instance",children:(0,t.jsx)("i",{children:"instance"})})," may cause ",(0,t.jsx)(s,{styled:!0,term:"slot",children:(0,t.jsx)("i",{children:"slots"})})," to be added or deleted. Changing the ",(0,t.jsx)(s,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})})," of an ",(0,t.jsx)(s,{styled:!0,term:"instance",children:(0,t.jsx)("i",{children:"instance"})})," does not change its identity as defined by the ",(0,t.jsx)(s,{styled:!0,term:"eq",children:(0,t.jsx)("b",{children:"eq"})})," function."]}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(s,{styled:!0,term:"change-class",children:(0,t.jsx)("b",{children:"change-class"})})," is invoked on an ",(0,t.jsx)(s,{styled:!0,term:"instance",children:(0,t.jsx)("i",{children:"instance"})}),", a two-step updating process takes place. The first step modifies the structure of the ",(0,t.jsx)(s,{styled:!0,term:"instance",children:(0,t.jsx)("i",{children:"instance"})})," by adding new ",(0,t.jsx)(n.em,{children:"local slots"})," and discarding ",(0,t.jsx)(n.em,{children:"local slots"})," that are not specified in the new version of the ",(0,t.jsx)(s,{styled:!0,term:"instance",children:(0,t.jsx)("i",{children:"instance"})}),". The second step initializes the newly added ",(0,t.jsx)(n.em,{children:"local slots"})," and performs any other user-defined actions. These two steps are further described in the two following sections."]})]})}function r(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}function a(e){const n={em:"em",p:"p",...(0,i.a)(),...e.components},{ClLinks:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["In order to make the ",(0,t.jsx)(s,{styled:!0,term:"instance",children:(0,t.jsx)("i",{children:"instance"})})," conform to the class ",(0,t.jsx)(n.em,{children:"C"}),(0,t.jsx)("sub",{children:"to"}),", ",(0,t.jsx)(n.em,{children:"local slots"})," specified by the class ",(0,t.jsx)(n.em,{children:"C"}),(0,t.jsx)("sub",{children:"to"})," that are not specified by the class ",(0,t.jsx)(n.em,{children:"C"}),(0,t.jsx)("sub",{children:"from"})," are added, and ",(0,t.jsx)(n.em,{children:"local slots"})," not specified by the class ",(0,t.jsx)(n.em,{children:"C"}),(0,t.jsx)("sub",{children:"to"})," that are specified by the class ",(0,t.jsx)(n.em,{children:"C"}),(0,t.jsx)("sub",{children:"from"})," are discarded."]}),"\n",(0,t.jsxs)(n.p,{children:["The values of ",(0,t.jsx)(n.em,{children:"local slots"})," specified by both the class ",(0,t.jsx)(n.em,{children:"C"}),(0,t.jsx)("sub",{children:"to"})," and the class ",(0,t.jsx)(n.em,{children:"C"}),(0,t.jsx)("sub",{children:"from"})," are retained. If such a ",(0,t.jsx)(n.em,{children:"local slot"})," was unbound, it remains unbound."]}),"\n",(0,t.jsxs)(n.p,{children:["The values of ",(0,t.jsx)(s,{styled:!0,term:"slot",children:(0,t.jsx)("i",{children:"slots"})})," specified as shared in the class ",(0,t.jsx)(n.em,{children:"C"}),(0,t.jsx)("sub",{children:"from"})," and as local in the class ",(0,t.jsx)(n.em,{children:"C"}),(0,t.jsx)("sub",{children:"to"})," are retained. This first step of the update does not affect the values of any ",(0,t.jsx)(n.em,{children:"shared slots"}),"."]})]})}function l(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}function d(e){const n={em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components},{ClLinks:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The second step of the update initializes the newly added ",(0,t.jsx)(s,{styled:!0,term:"slot",children:(0,t.jsx)("i",{children:"slots"})})," and performs any other user-defined actions. This step is implemented by the generic function ",(0,t.jsx)(n.strong,{children:"update-instance-for-different-class"}),". The generic function ",(0,t.jsx)(n.strong,{children:"update-instance-for-different-class"})," is invoked by ",(0,t.jsx)(s,{styled:!0,term:"change-class",children:(0,t.jsx)("b",{children:"change-class"})})," after the first step of the update has been completed."]}),"\n",(0,t.jsxs)(n.p,{children:["The generic function ",(0,t.jsx)(n.strong,{children:"update-instance-for-different-class"})," is invoked on arguments computed by ",(0,t.jsx)(s,{styled:!0,term:"change-class",children:(0,t.jsx)("b",{children:"change-class"})}),". The first argument passed is a copy of the ",(0,t.jsx)(s,{styled:!0,term:"instance",children:(0,t.jsx)("i",{children:"instance"})})," being updated and is an ",(0,t.jsx)(s,{styled:!0,term:"instance",children:(0,t.jsx)("i",{children:"instance"})})," of the class ",(0,t.jsx)(n.em,{children:"C"}),(0,t.jsx)("sub",{children:"from"}),"; this copy has ",(0,t.jsx)(n.em,{children:"dynamic extent"})," within the generic function ",(0,t.jsx)(s,{styled:!0,term:"change-class",children:(0,t.jsx)("b",{children:"change-class"})}),". The second argument is the ",(0,t.jsx)(s,{styled:!0,term:"instance",children:(0,t.jsx)("i",{children:"instance"})})," as updated so far by ",(0,t.jsx)(s,{styled:!0,term:"change-class",children:(0,t.jsx)("b",{children:"change-class"})})," and is an ",(0,t.jsx)(s,{styled:!0,term:"instance",children:(0,t.jsx)("i",{children:"instance"})})," of the class ",(0,t.jsx)(n.em,{children:"C"}),(0,t.jsx)("sub",{children:"to"}),". The remaining arguments are an ",(0,t.jsx)(n.em,{children:"initialization argument list"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["There is a system-supplied primary ",(0,t.jsx)(s,{styled:!0,term:"method",children:(0,t.jsx)("i",{children:"method"})})," for ",(0,t.jsx)(n.strong,{children:"update-instance-for-different-class"})," that has two parameter specializers, each of which is the ",(0,t.jsx)(s,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})})," ",(0,t.jsx)(s,{styled:!0,term:"standard-object",children:(0,t.jsx)("b",{children:"standard-object"})}),". First this ",(0,t.jsx)(s,{styled:!0,term:"method",children:(0,t.jsx)("i",{children:"method"})})," checks the validity of initialization arguments and signals an error if an initialization argument is supplied that is not declared as valid. (For more information, see Section 7.1.2 (Declaring the Validity of"]}),"\n",(0,t.jsxs)(n.p,{children:["Initialization Arguments).) Then it calls the generic function ",(0,t.jsx)(s,{styled:!0,term:"shared-initialize",children:(0,t.jsx)("b",{children:"shared-initialize"})})," with the following arguments: the new ",(0,t.jsx)(s,{styled:!0,term:"instance",children:(0,t.jsx)("i",{children:"instance"})}),", a list of ",(0,t.jsx)(s,{styled:!0,term:"name",children:(0,t.jsx)("i",{children:"names"})})," of the newly added ",(0,t.jsx)(s,{styled:!0,term:"slot",children:(0,t.jsx)("i",{children:"slots"})}),", and the initialization arguments it received."]})]})}function o(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function h(e){const n={em:"em",p:"p",strong:"strong",...(0,i.a)(),...e.components},{ClLinks:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(s,{styled:!0,term:"method",children:(0,t.jsx)("i",{children:"Methods"})})," for ",(0,t.jsx)(n.strong,{children:"update-instance-for-different-class"})," may be defined to specify actions to be taken when an ",(0,t.jsx)(s,{styled:!0,term:"instance",children:(0,t.jsx)("i",{children:"instance"})})," is updated. If only ",(0,t.jsx)(n.em,{children:"after methods"})," for ",(0,t.jsx)(n.strong,{children:"update-instance-for-different-class"})," are defined, they will be run after the system-supplied primary ",(0,t.jsx)(s,{styled:!0,term:"method",children:(0,t.jsx)("i",{children:"method"})})," for initialization and will not interfere with the default behavior of ",(0,t.jsx)(n.strong,{children:"update-instance-for-different-class"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(s,{styled:!0,term:"method",children:(0,t.jsx)("i",{children:"Methods"})})," for ",(0,t.jsx)(s,{styled:!0,term:"shared-initialize",children:(0,t.jsx)("b",{children:"shared-initialize"})})," may be defined to customize ",(0,t.jsx)(s,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})})," redefinition. For more information, see Section 7.1.5 (Shared-Initialize)."]})]})}function f(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}const m={title:"7.2 Changing the Class of an Instance"},x="7.2 Changing the Class of an Instance",j={id:"chap-7/h-c-changing-the-class-of-an-instance",title:"7.2 Changing the Class of an Instance",description:"7.2.1 Modifying the Structure of the Instance",source:"@site/docs/chap-7/h-c-changing-the-class-of-an-instance.md",sourceDirName:"chap-7",slug:"/chap-7/h-c-changing-the-class-of-an-instance",permalink:"/cl-language-reference/chap-7/h-c-changing-the-class-of-an-instance",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-7/h-c-changing-the-class-of-an-instance.md",tags:[],version:"current",frontMatter:{title:"7.2 Changing the Class of an Instance"},sidebar:"tutorialSidebar",previous:{title:"7.1 Object Creation and Initialization",permalink:"/cl-language-reference/chap-7/h-b-object-creation-and-initialization"},next:{title:"7.3 Reinitializing an Instance",permalink:"/cl-language-reference/chap-7/h-d-reinitializing-an-instance"}},u={},p=[{value:"7.2.1 Modifying the Structure of the Instance",id:"721-modifying-the-structure-of-the-instance",level:2},{value:"7.2.2 Initializing Newly Added Local Slots",id:"722-initializing-newly-added-local-slots",level:2},{value:"7.2.3 Customizing the Change of Class of an Instance",id:"723-customizing-the-change-of-class-of-an-instance",level:2}];function g(e){const n={h1:"h1",h2:"h2",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"72-changing-the-class-of-an-instance",children:"7.2 Changing the Class of an Instance"}),"\n","\n",(0,t.jsx)(r,{}),"\n",(0,t.jsx)(n.h2,{id:"721-modifying-the-structure-of-the-instance",children:"7.2.1 Modifying the Structure of the Instance"}),"\n","\n",(0,t.jsx)(l,{}),"\n",(0,t.jsx)(n.h2,{id:"722-initializing-newly-added-local-slots",children:"7.2.2 Initializing Newly Added Local Slots"}),"\n","\n",(0,t.jsx)(o,{}),"\n",(0,t.jsx)(n.h2,{id:"723-customizing-the-change-of-class-of-an-instance",children:"7.2.3 Customizing the Change of Class of an Instance"}),"\n","\n","\n",(0,t.jsx)(f,{})]})}function y(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>r});var t=s(67294);const i={},c=t.createContext(i);function r(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);