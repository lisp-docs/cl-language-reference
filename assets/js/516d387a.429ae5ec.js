"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[79217],{34505:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>p});var s=t(85893),r=t(11151);function a(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"apply"})," ",(0,s.jsx)(n.em,{children:"Function"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"apply"})," ",(0,s.jsx)(n.em,{children:"function"})," &rest ",(0,s.jsx)(n.em,{children:"args"}),(0,s.jsx)("sup",{children:"+"})," \u2192 {result}*"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"function"}),"\u2014a ",(0,s.jsx)(n.em,{children:"function designator"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"args"}),"\u2014a ",(0,s.jsx)(n.em,{children:"spreadable argument list designator"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"results"}),"\u2014the ",(0,s.jsx)(n.em,{children:"values"})," returned by ",(0,s.jsx)(n.em,{children:"function"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Applies"})," the ",(0,s.jsx)(n.em,{children:"function"})," to the ",(0,s.jsx)(n.em,{children:"args"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When the ",(0,s.jsx)(n.em,{children:"function"})," receives its arguments via ",(0,s.jsx)(n.strong,{children:"&rest"}),", it is permissible (but not required) for the ",(0,s.jsx)(n.em,{children:"implementation"})," to ",(0,s.jsx)(n.em,{children:"bind"})," the ",(0,s.jsx)(n.em,{children:"rest parameter"})," to an ",(0,s.jsx)(n.em,{children:"object"})," that shares structure with the last argument to ",(0,s.jsx)(n.strong,{children:"apply"}),". Because a ",(0,s.jsx)(n.em,{children:"function"})," can neither detect whether it was called via ",(0,s.jsx)(n.strong,{children:"apply"})," nor whether (if so) the last argument to ",(0,s.jsx)(n.strong,{children:"apply"})," was a ",(0,s.jsx)(n.em,{children:"constant"}),", ",(0,s.jsx)(n.em,{children:"conforming programs"})," must neither rely on the ",(0,s.jsx)(n.em,{children:"list"})," structure of a ",(0,s.jsx)(n.em,{children:"rest list"})," to be freshly consed, nor modify that ",(0,s.jsx)(n.em,{children:"list"})," structure."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"setf"})," can be used with ",(0,s.jsx)(n.strong,{children:"apply"})," in certain circumstances; see Section 5.1.2.5 (APPLY Forms as Places). ",(0,s.jsx)(n.strong,{children:"Examples:"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"\n(setq f \u2019+) \u2192 + \n(apply f \u2019(1 2)) \u2192 3 \n(setq f #\u2019-) \u2192 #<FUNCTION -> \n(apply f \u2019(1 2)) \u2192 -1 \n(apply #\u2019max 3 5 \u2019(2 7 3)) \u2192 7 \n(apply \u2019cons \u2019((+ 2 3) 4)) \u2192 ((+ 2 3) . 4) \n(apply #\u2019+ \u2019()) \u2192 0 \n(defparameter \\*some-list\\* \u2019(a b c)) \n(defun strange-test (&amp;rest x) (eq x \\*some-list\\*)) \n\t\t     (apply #\u2019strange-test \\*some-list\\*) \u2192 implementation-dependent \n\t\t     (defun bad-boy (&amp;rest x) (rplacd x \u2019y)) \n\t\t\t\t     (bad-boy \u2019a \u2019b \u2019c) has undefined consequences. \n\t\t\t\t     (apply #\u2019bad-boy \\*some-list\\*) has undefined consequences. \n\t\t\t\t     (defun foo (size &amp;rest keys &amp;key double &amp;allow-other-keys) \n\t\t\t\t\t\t (let ((v (apply #\u2019make-array size :allow-other-keys t keys))) \n\t\t\t\t\t\t   (if double (concatenate (type-of v) v v) v))) \n\t\t\t\t       (foo 4 :initial-contents \u2019(a b c d) :double t) \n\n\n\n\t\t\t\t       \u2192 #(A B C D A B C D) \n\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})})]})}function c(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}const i={},l="apply",d={id:"chap-5/f-d-dictionary/apply",title:"apply",description:"Expanded Reference: apply",source:"@site/docs/chap-5/f-d-dictionary/apply.md",sourceDirName:"chap-5/f-d-dictionary",slug:"/chap-5/f-d-dictionary/apply",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/apply",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-5/f-d-dictionary/apply.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"and",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/and"},next:{title:"block",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/block"}},o={},p=[{value:"Expanded Reference: apply",id:"expanded-reference-apply",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"apply",children:"apply"}),"\n","\n","\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-apply",children:"Expanded Reference: apply"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(apply )\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>c});var s=t(67294);const r={},a=s.createContext(r);function c(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);