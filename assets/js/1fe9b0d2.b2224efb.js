"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[22847],{30827:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>h});var r=t(85893),c=t(11151);function s(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,c.a)(),...e.components},{ClLinks:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"unwind-protect"})," ",(0,r.jsx)(n.em,{children:"Special Operator"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(t,{styled:!0,term:"unwind-protect",children:(0,r.jsx)("b",{children:"unwind-protect"})})," ",(0,r.jsx)(n.em,{children:"protected-form {cleanup-form}"}),"* \u2192 {result}*"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"protected-form"}),"\u2014a ",(0,r.jsx)(t,{styled:!0,term:"form",children:(0,r.jsx)("i",{children:"form"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"cleanup-form"}),"\u2014a ",(0,r.jsx)(t,{styled:!0,term:"form",children:(0,r.jsx)("i",{children:"form"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"results"}),"\u2014the ",(0,r.jsx)(t,{styled:!0,term:"value",children:(0,r.jsx)("i",{children:"values"})})," of the ",(0,r.jsx)(n.em,{children:"protected-form"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(t,{styled:!0,term:"unwind-protect",children:(0,r.jsx)("b",{children:"unwind-protect"})})," evaluates ",(0,r.jsx)(n.em,{children:"protected-form"})," and guarantees that ",(0,r.jsx)(n.em,{children:"cleanup-forms"})," are executed before ",(0,r.jsx)(t,{styled:!0,term:"unwind-protect",children:(0,r.jsx)("b",{children:"unwind-protect"})})," exits, whether it terminates normally or is aborted by a control transfer of some kind. ",(0,r.jsx)(t,{styled:!0,term:"unwind-protect",children:(0,r.jsx)("b",{children:"unwind-protect"})})," is intended to be used to make sure that certain side effects take place after the evaluation of ",(0,r.jsx)(n.em,{children:"protected-form"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If a ",(0,r.jsx)(n.em,{children:"non-local exit"})," occurs during execution of ",(0,r.jsx)(n.em,{children:"cleanup-forms"}),", no special action is taken. The ",(0,r.jsx)(n.em,{children:"cleanup-forms"})," of ",(0,r.jsx)(t,{styled:!0,term:"unwind-protect",children:(0,r.jsx)("b",{children:"unwind-protect"})})," are not protected by that ",(0,r.jsx)(t,{styled:!0,term:"unwind-protect",children:(0,r.jsx)("b",{children:"unwind-protect"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(t,{styled:!0,term:"unwind-protect",children:(0,r.jsx)("b",{children:"unwind-protect"})})," protects against all attempts to exit from ",(0,r.jsx)(n.em,{children:"protected-form"}),", including ",(0,r.jsx)(t,{styled:!0,term:"go",children:(0,r.jsx)("b",{children:"go"})}),", ",(0,r.jsx)(t,{styled:!0,term:"handler-case",children:(0,r.jsx)("b",{children:"handler-case"})}),", ",(0,r.jsx)(t,{styled:!0,term:"ignore-errors",children:(0,r.jsx)("b",{children:"ignore-errors"})}),", ",(0,r.jsx)(t,{styled:!0,term:"restart-case",children:(0,r.jsx)("b",{children:"restart-case"})}),", ",(0,r.jsx)(t,{styled:!0,term:"return-from",children:(0,r.jsx)("b",{children:"return-from"})}),", ",(0,r.jsx)(t,{styled:!0,term:"throw",children:(0,r.jsx)("b",{children:"throw"})}),", and ",(0,r.jsx)(t,{styled:!0,term:"with-simple-restart",children:(0,r.jsx)("b",{children:"with-simple-restart"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Undoing of ",(0,r.jsx)(t,{styled:!0,term:"handler",children:(0,r.jsx)("i",{children:"handler"})})," and ",(0,r.jsx)(n.em,{children:"restart bindings"})," during an exit happens in parallel with the undoing of the bindings of ",(0,r.jsx)(n.em,{children:"dynamic variables"})," and ",(0,r.jsx)(t,{styled:!0,term:"catch",children:(0,r.jsx)("b",{children:"catch"})})," tags, in the reverse order in which they were established. The effect of this is that ",(0,r.jsx)(n.em,{children:"cleanup-form"})," sees the same ",(0,r.jsx)(t,{styled:!0,term:"handler",children:(0,r.jsx)("i",{children:"handler"})})," and ",(0,r.jsx)(n.em,{children:"restart bindings"}),", as well as ",(0,r.jsx)(n.em,{children:"dynamic variable bindings"})," and ",(0,r.jsx)(t,{styled:!0,term:"catch",children:(0,r.jsx)("b",{children:"catch"})})," tags, as were visible when the ",(0,r.jsx)(t,{styled:!0,term:"unwind-protect",children:(0,r.jsx)("b",{children:"unwind-protect"})})," was entered."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:'\n(tagbody \n   (let ((x 3)) \n     Data and Control \n\n\n     **unwind-protect** \n     (unwind-protect \n\t  (if (numberp x) (go out)) \n       (print x))) \n out \n ...) \nWhen **go** is executed, the call to **print** is executed first, and then the transfer of control to the tag out is completed. \n(defun dummy-function (x) \n  (setq state \u2019running) \n  (unless (numberp x) (throw \u2019abort \u2019not-a-number)) \n  (setq state (1+ x))) \u2192 DUMMY-FUNCTION \n(catch \u2019abort (dummy-function 1)) \u2192 2 \nstate \u2192 2 \n(catch \u2019abort (dummy-function \u2019trash)) \u2192 NOT-A-NUMBER \nstate \u2192 RUNNING \n(catch \u2019abort (unwind-protect (dummy-function \u2019trash) \n\t\t(setq state \u2019aborted))) \u2192 NOT-A-NUMBER \nstate \u2192 ABORTED \nThe following code is not correct: \n(unwind-protect \n     (progn (incf \\*access-count\\*) \n\t    (perform-access)) \n  (decf \\*access-count\\*)) \nIf an exit occurs before completion of **incf**, the **decf** *form* is executed anyway, resulting in an incorrect value for \\*access-count\\*. The correct way to code this is as follows: \n(let ((old-count \\*access-count\\*)) \n  (unwind-protect \n       (progn (incf \\*access-count\\*) \n\t      (perform-access)) \n    (setq \\*access-count\\* old-count))) \n;;; The following returns 2. \n(block nil \n  (unwind-protect (return 1) \n    (return 2))) \n;;; The following has undefined consequences. \n(block a \n  (block b \n    (unwind-protect (return-from a 1) \n\n\n\n      **unwind-protect** \n      (return-from b 2)))) \n;;; The following returns 2. \n(catch nil \n  (unwind-protect (throw nil 1) \n    (throw nil 2))) \n;;; The following has undefined consequences because the catch of B is \n;;; passed over by the first THROW, hence portable programs must assume \n;;; its dynamic extent is terminated. The binding of the catch tag is not \n;;; yet disestablished and therefore it is the target of the second throw. \n(catch \u2019a \n  (catch \u2019b \n    (unwind-protect (throw \u2019a 1) \n      (throw \u2019b 2)))) \n;;; The following prints "The inner catch returns :SECOND-THROW" \n;;; and then returns :OUTER-CATCH. \n(catch \u2019foo \n  (format t "The inner catch returns ~s.~%" \n\t  (catch \u2019foo \n\t    (unwind-protect (throw \u2019foo :first-throw) \n\t      (throw \u2019foo :second-throw)))) \n  :outer-catch) \n;;; The following returns 10. The inner CATCH of A is passed over, but \n;;; because that CATCH is disestablished before the THROW to A is executed, \n;;; it isn\u2019t seen. \n(catch \u2019a \n  (catch \u2019b \n    (unwind-protect (1+ (catch \u2019a (throw \u2019b 1))) \n      (throw \u2019a 10)))) \n;;; The following has undefined consequences because the extent of \n;;; the (CATCH \u2019BAR ...) exit ends when the (THROW \u2019FOO ...) \n;;; commences. \n(catch \u2019foo \n  (catch \u2019bar \n    (unwind-protect (throw \u2019foo 3) \n      (throw \u2019bar 4) \n      (print \u2019xxx)))) \nData and Control \n\n\n;;; The following returns 4; XXX is not printed. \n;;; The (THROW \u2019FOO ...) has no effect on the scope of the BAR \n;;; catch tag or the extent of the (CATCH \u2019BAR ...) exit. \n(catch \u2019bar \n  (catch \u2019foo \n    (unwind-protect (throw \u2019foo 3) \n      (throw \u2019bar 4) \n      (print \u2019xxx)))) \n;;; The following prints 5. \n(block nil \n  (let ((x 5)) \n    (declare (special x)) \n    (unwind-protect (return) \n      (print x)))) \n\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(t,{styled:!0,term:"catch",children:(0,r.jsx)("b",{children:"catch"})}),", ",(0,r.jsx)(t,{styled:!0,term:"go",children:(0,r.jsx)("b",{children:"go"})}),", ",(0,r.jsx)(t,{styled:!0,term:"handler-case",children:(0,r.jsx)("b",{children:"handler-case"})}),", ",(0,r.jsx)(t,{styled:!0,term:"restart-case",children:(0,r.jsx)("b",{children:"restart-case"})}),", ",(0,r.jsx)(t,{styled:!0,term:"return",children:(0,r.jsx)("b",{children:"return"})}),", ",(0,r.jsx)(t,{styled:!0,term:"return-from",children:(0,r.jsx)("b",{children:"return-from"})}),", ",(0,r.jsx)(t,{styled:!0,term:"throw",children:(0,r.jsx)("b",{children:"throw"})}),", Section 3.1 (Evaluation)"]})]})}function i(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}const o={title:"unwind-protect"},d="unwind-protect",a={id:"chap-5/f-d-dictionary/unwind-protect_special-operator",title:"unwind-protect",description:"Expanded Reference: unwind-protect",source:"@site/docs/chap-5/f-d-dictionary/unwind-protect_special-operator.md",sourceDirName:"chap-5/f-d-dictionary",slug:"/chap-5/f-d-dictionary/unwind-protect_special-operator",permalink:"/cl-language-reference/chap-5/f-d-dictionary/unwind-protect_special-operator",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-5/f-d-dictionary/unwind-protect_special-operator.md",tags:[],version:"current",frontMatter:{title:"unwind-protect"},sidebar:"tutorialSidebar",previous:{title:"undefined-function",permalink:"/cl-language-reference/chap-5/f-d-dictionary/undefined-function_condition-type"},next:{title:"values-list",permalink:"/cl-language-reference/chap-5/f-d-dictionary/values-list_function"}},l={},h=[{value:"Expanded Reference: unwind-protect",id:"expanded-reference-unwind-protect",level:2}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,c.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"unwind-protect",children:"unwind-protect"}),"\n","\n","\n",(0,r.jsx)(i,{}),"\n",(0,r.jsx)(n.h2,{id:"expanded-reference-unwind-protect",children:"Expanded Reference: unwind-protect"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(unwind-protect )\n"})})]})}function p(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>i});var r=t(67294);const c={},s=r.createContext(c);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);