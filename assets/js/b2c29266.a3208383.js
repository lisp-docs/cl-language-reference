"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[62628],{90423:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>x,frontMatter:()=>c,metadata:()=>o,toc:()=>h});var r=s(85893),t=s(11151);function i(e){const n={em:"em",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"type-error"})," if ",(0,r.jsx)(n.em,{children:"sequence"})," is not a ",(0,r.jsx)(n.em,{children:"proper sequence"}),". ",(0,r.jsx)(n.strong,{children:"sort, stable-sort"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"sort"})," ",(0,r.jsx)(n.em,{children:"sequence predicate"})," &key ",(0,r.jsx)(n.em,{children:"key \u2192 sorted-sequence"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"stable-sort"})," ",(0,r.jsx)(n.em,{children:"sequence predicate"})," &key ",(0,r.jsx)(n.em,{children:"key \u2192 sorted-sequence"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"sequence"}),"\u2014a ",(0,r.jsx)(n.em,{children:"proper sequence"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"predicate"}),"\u2014a ",(0,r.jsx)(n.em,{children:"designator"})," for a ",(0,r.jsx)(n.em,{children:"function"})," of two arguments that returns a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),". ",(0,r.jsx)(n.em,{children:"key"}),"\u2014a ",(0,r.jsx)(n.em,{children:"designator"})," for a ",(0,r.jsx)(n.em,{children:"function"})," of one argument, or ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"sorted-sequence"}),"\u2014a ",(0,r.jsx)(n.em,{children:"sequence"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"sort"})," and ",(0,r.jsx)(n.strong,{children:"stable-sort"})," destructively sort ",(0,r.jsx)(n.em,{children:"sequences"})," according to the order determined by the ",(0,r.jsx)(n.em,{children:"predicate"})," function."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"sequence"})," is a ",(0,r.jsx)(n.em,{children:"vector"})," , the result is a ",(0,r.jsx)(n.em,{children:"vector"})," that has the same ",(0,r.jsx)(n.em,{children:"actual array element type"})," as ",(0,r.jsx)(n.em,{children:"sequence"}),". If ",(0,r.jsx)(n.em,{children:"sequence"})," is a ",(0,r.jsx)(n.em,{children:"list"}),", the result is a ",(0,r.jsx)(n.em,{children:"list"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"sort"})," determines the relationship between two elements by giving keys extracted from the elements to the ",(0,r.jsx)(n.em,{children:"predicate"}),". The first argument to the ",(0,r.jsx)(n.em,{children:"predicate"})," function is the part of one element of ",(0,r.jsx)(n.em,{children:"sequence"})," extracted by the ",(0,r.jsx)(n.em,{children:"key"})," function (if supplied); the second argument is the part of another element of ",(0,r.jsx)(n.em,{children:"sequence"})," extracted by the ",(0,r.jsx)(n.em,{children:"key"})," function (if supplied). ",(0,r.jsx)(n.em,{children:"Predicate"})," should return ",(0,r.jsx)(n.em,{children:"true"})," if and only if the first argument is strictly less than the second (in some appropriate sense). If the first argument is"]}),"\n",(0,r.jsxs)(n.p,{children:["greater than or equal to the second (in the appropriate sense), then the ",(0,r.jsx)(n.em,{children:"predicate"})," should return ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The argument to the ",(0,r.jsx)(n.em,{children:"key"})," function is the ",(0,r.jsx)(n.em,{children:"sequence"})," element. The return value of the ",(0,r.jsx)(n.em,{children:"key"})," function becomes an argument to ",(0,r.jsx)(n.em,{children:"predicate"}),". If ",(0,r.jsx)(n.em,{children:"key"})," is not supplied or ",(0,r.jsx)(n.strong,{children:"nil"}),", the ",(0,r.jsx)(n.em,{children:"sequence"})," element itself is used. There is no guarantee on the number of times the ",(0,r.jsx)(n.em,{children:"key"})," will be called."]}),"\n",(0,r.jsxs)(n.p,{children:["If the ",(0,r.jsx)(n.em,{children:"key"})," and ",(0,r.jsx)(n.em,{children:"predicate"})," always return, then the sorting operation will always terminate, producing a ",(0,r.jsx)(n.em,{children:"sequence"})," containing the same ",(0,r.jsx)(n.em,{children:"elements"})," as ",(0,r.jsx)(n.em,{children:"sequence"})," (that is, the result is a permutation of ",(0,r.jsx)(n.em,{children:"sequence"}),"). This is guaranteed even if the ",(0,r.jsx)(n.em,{children:"predicate"})," does not really consistently represent a total order (in which case the ",(0,r.jsx)(n.em,{children:"elements"})," will be scrambled in some unpredictable way, but no ",(0,r.jsx)(n.em,{children:"element"})," will be lost). If the ",(0,r.jsx)(n.em,{children:"key"})," consistently returns meaningful keys, and the ",(0,r.jsx)(n.em,{children:"predicate"})," does reflect some total ordering criterion on those keys, then the ",(0,r.jsx)(n.em,{children:"elements"})," of the ",(0,r.jsx)(n.em,{children:"sorted-sequence"})," will be properly sorted according to that ordering."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"sort, stable-sort"})}),"\n",(0,r.jsxs)(n.p,{children:["The sorting operation performed by ",(0,r.jsx)(n.strong,{children:"sort"})," is not guaranteed stable. Elements considered equal by the ",(0,r.jsx)(n.em,{children:"predicate"})," might or might not stay in their original order. The ",(0,r.jsx)(n.em,{children:"predicate"})," is assumed to consider two elements x and y to be equal if (funcall ",(0,r.jsx)(n.em,{children:"predicate x y"}),") and (funcall ",(0,r.jsx)(n.em,{children:"predicate y x"}),") are both ",(0,r.jsx)(n.em,{children:"false"}),". ",(0,r.jsx)(n.strong,{children:"stable-sort"})," guarantees stability."]}),"\n",(0,r.jsxs)(n.p,{children:["The sorting operation can be destructive in all cases. In the case of a ",(0,r.jsx)(n.em,{children:"vector"})," argument, this is accomplished by permuting the elements in place. In the case of a ",(0,r.jsx)(n.em,{children:"list"}),", the ",(0,r.jsx)(n.em,{children:"list"})," is destructively reordered in the same manner as for ",(0,r.jsx)(n.strong,{children:"nreverse"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.p,{children:['(setq tester (copy-seq "lkjashd")) ',(0,r.jsx)(n.em,{children:"\u2192"}),' "lkjashd"']}),"\n",(0,r.jsxs)(n.p,{children:["(sort tester #\u2019char-lessp) ",(0,r.jsx)(n.em,{children:"\u2192"}),' "adhjkls"']}),"\n",(0,r.jsxs)(n.p,{children:["(setq tester (list \u2019(1 2 3) \u2019(4 5 6) \u2019(7 8 9))) ",(0,r.jsx)(n.em,{children:"\u2192"})," ((1 2 3) (4 5 6) (7 8 9))"]}),"\n",(0,r.jsxs)(n.p,{children:["(sort tester #\u2019> ",":key"," #\u2019car) ",(0,r.jsx)(n.em,{children:"\u2192"})," ((7 8 9) (4 5 6) (1 2 3))"]}),"\n",(0,r.jsxs)(n.p,{children:["(setq tester (list 1 2 3 4 5 6 7 8 9 0)) ",(0,r.jsx)(n.em,{children:"\u2192"})," (1 2 3 4 5 6 7 8 9 0)"]}),"\n",(0,r.jsx)(n.p,{children:"(stable-sort tester #\u2019(lambda (x y) (and (oddp x) (evenp y))))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"})," (1 3 5 7 9 2 4 6 8 0)"]}),"\n",(0,r.jsx)(n.p,{children:"(sort (setq committee-data"}),"\n",(0,r.jsx)(n.p,{children:'(vector (list (list "JonL" "White") "Iteration")'}),"\n",(0,r.jsx)(n.p,{children:'(list (list "Dick" "Waters") "Iteration")'}),"\n",(0,r.jsx)(n.p,{children:'(list (list "Dick" "Gabriel") "Objects")'}),"\n",(0,r.jsx)(n.p,{children:'(list (list "Kent" "Pitman") "Conditions")'}),"\n",(0,r.jsx)(n.p,{children:'(list (list "Gregor" "Kiczales") "Objects")'}),"\n",(0,r.jsx)(n.p,{children:'(list (list "David" "Moon") "Objects")'}),"\n",(0,r.jsx)(n.p,{children:'(list (list "Kathy" "Chapman") "Editorial")'}),"\n",(0,r.jsx)(n.p,{children:'(list (list "Larry" "Masinter") "Cleanup")'}),"\n",(0,r.jsx)(n.p,{children:'(list (list "Sandra" "Loosemore") "Compiler")))'}),"\n",(0,r.jsxs)(n.p,{children:["#\u2019string-lessp ",":key"," #\u2019cadar)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' #((("Kathy" "Chapman") "Editorial")']}),"\n",(0,r.jsx)(n.p,{children:'(("Dick" "Gabriel") "Objects")'}),"\n",(0,r.jsx)(n.p,{children:'(("Gregor" "Kiczales") "Objects")'}),"\n",(0,r.jsx)(n.p,{children:'(("Sandra" "Loosemore") "Compiler")'}),"\n",(0,r.jsx)(n.p,{children:'(("Larry" "Masinter") "Cleanup")'}),"\n",(0,r.jsx)(n.p,{children:'(("David" "Moon") "Objects")'}),"\n",(0,r.jsx)(n.p,{children:'(("Kent" "Pitman") "Conditions")'}),"\n",(0,r.jsx)(n.p,{children:'(("Dick" "Waters") "Iteration")'}),"\n",(0,r.jsx)(n.p,{children:'(("JonL" "White") "Iteration"))'}),"\n",(0,r.jsx)(n.p,{children:";; Note that individual alphabetical order within \u2018committees\u2019"}),"\n",(0,r.jsx)(n.p,{children:";; is preserved."}),"\n",(0,r.jsx)(n.p,{children:"(setq committee-data"}),"\n",(0,r.jsxs)(n.p,{children:["(stable-sort committee-data #\u2019string-lessp ",":key"," #\u2019cadr))"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2192"}),' #((("Larry" "Masinter") "Cleanup")']}),"\n",(0,r.jsx)(n.p,{children:'(("Sandra" "Loosemore") "Compiler")'}),"\n",(0,r.jsx)(n.p,{children:'(("Kent" "Pitman") "Conditions")'}),"\n",(0,r.jsx)(n.p,{children:'(("Kathy" "Chapman") "Editorial")'}),"\n",(0,r.jsx)(n.p,{children:'(("Dick" "Waters") "Iteration")'}),"\n",(0,r.jsx)(n.p,{children:'(("JonL" "White") "Iteration")'}),"\n",(0,r.jsx)(n.p,{children:'(("Dick" "Gabriel") "Objects")'}),"\n",(0,r.jsx)(n.p,{children:'(("Gregor" "Kiczales") "Objects")'}),"\n",(0,r.jsx)(n.p,{children:'(("David" "Moon") "Objects"))'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["Should be prepared to signal an error of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"type-error"})," if ",(0,r.jsx)(n.em,{children:"sequence"})," is not a ",(0,r.jsx)(n.em,{children:"proper sequence"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"merge"}),", Section 3.2.1 (Compiler Terminology), Section 3.6 (Traversal Rules and Side Effects), Section 3.7 (Destructive Operations)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"sequence"})," is a ",(0,r.jsx)(n.em,{children:"vector"})," , the result might or might not be simple, and might or might not be ",(0,r.jsx)(n.em,{children:"identical"})," to ",(0,r.jsx)(n.em,{children:"sequence"}),"."]})]})}function a(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}const c={},l="type-error** if sequence is not a proper sequence. **sort, stable-sort",o={id:"chap-17/bh-d-dictionary/typeerroraaaifaasequenceaaisanotaaaaproperasequenceaaaaasortaastablesort",title:"type-error** if *sequence* is not a *proper sequence*. **sort, stable-sort",description:"Expanded Reference: type-error if *sequence* is not a *proper sequence*. sort, stable-sort",source:"@site/docs/chap-17/bh-d-dictionary/typeerroraaaifaasequenceaaisanotaaaaproperasequenceaaaaasortaastablesort.md",sourceDirName:"chap-17/bh-d-dictionary",slug:"/chap-17/bh-d-dictionary/typeerroraaaifaasequenceaaisanotaaaaproperasequenceaaaaasortaastablesort",permalink:"/cl-language-reference/docs/chap-17/bh-d-dictionary/typeerroraaaifaasequenceaaisanotaaaaproperasequenceaaaaasortaastablesort",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-17/bh-d-dictionary/typeerroraaaifaasequenceaaisanotaaaaproperasequenceaaaaasortaastablesort.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"subseq",permalink:"/cl-language-reference/docs/chap-17/bh-d-dictionary/subseq"},next:{title:"18. Hash Tables",permalink:"/cl-language-reference/docs/category/18-hash-tables"}},d={},h=[{value:"Expanded Reference: type-error** if <em>sequence</em> is not a <em>proper sequence</em>. **sort, stable-sort",id:"expanded-reference-type-error-if-sequence-is-not-a-proper-sequence-sort-stable-sort",level:2}];function p(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"type-error-if-sequence-is-not-a-proper-sequence-sort-stable-sort",children:["type-error** if ",(0,r.jsx)(n.em,{children:"sequence"})," is not a ",(0,r.jsx)(n.em,{children:"proper sequence"}),". **sort, stable-sort"]}),"\n","\n","\n",(0,r.jsx)(a,{}),"\n",(0,r.jsxs)(n.h2,{id:"expanded-reference-type-error-if-sequence-is-not-a-proper-sequence-sort-stable-sort",children:["Expanded Reference: type-error** if ",(0,r.jsx)(n.em,{children:"sequence"})," is not a ",(0,r.jsx)(n.em,{children:"proper sequence"}),". **sort, stable-sort"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(type-error** if *sequence* is not a *proper sequence*. **sort, stable-sort )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>a});var r=s(67294);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);