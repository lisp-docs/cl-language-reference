"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[99141],{31773:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>f,frontMatter:()=>c,metadata:()=>l,toc:()=>h});var r=i(85893),t=i(11151);function s(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"function"})," ",(0,r.jsx)(n.em,{children:"Special Operator"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"function"})," ",(0,r.jsx)(n.em,{children:"name \u2192 function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"name"}),"\u2014a ",(0,r.jsx)(n.em,{children:"function name"})," or ",(0,r.jsx)(n.em,{children:"lambda expression"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"function"}),"\u2014a ",(0,r.jsx)(n.em,{children:"function object"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"function"})," is the ",(0,r.jsx)(n.em,{children:"functional value"})," of ",(0,r.jsx)(n.em,{children:"name"})," in the current ",(0,r.jsx)(n.em,{children:"lexical environment"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"name"})," is a ",(0,r.jsx)(n.em,{children:"function name"}),", the functional definition of that name is that established by the innermost lexically enclosing ",(0,r.jsx)(n.strong,{children:"flet"}),", ",(0,r.jsx)(n.strong,{children:"labels"}),", or ",(0,r.jsx)(n.strong,{children:"macrolet"})," ",(0,r.jsx)(n.em,{children:"form"}),", if there is one. Otherwise the global functional definition of the ",(0,r.jsx)(n.em,{children:"function name"})," is returned."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"name"})," is a ",(0,r.jsx)(n.em,{children:"lambda expression"}),", then a ",(0,r.jsx)(n.em,{children:"lexical closure"})," is returned. In situations where a ",(0,r.jsx)(n.em,{children:"closure"})," over the same set of ",(0,r.jsx)(n.em,{children:"bindings"})," might be produced more than once, the various resulting ",(0,r.jsx)(n.em,{children:"closures"})," might or might not be ",(0,r.jsx)(n.strong,{children:"eq"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["It is an error to use ",(0,r.jsx)(n.strong,{children:"function"})," on a ",(0,r.jsx)(n.em,{children:"function name"})," that does not denote a ",(0,r.jsx)(n.em,{children:"function"})," in the lexical environment in which the ",(0,r.jsx)(n.strong,{children:"function"})," form appears. Specifically, it is an error to use ",(0,r.jsx)(n.strong,{children:"function"})," on a ",(0,r.jsx)(n.em,{children:"symbol"})," that denotes a ",(0,r.jsx)(n.em,{children:"macro"})," or ",(0,r.jsx)(n.em,{children:"special form"}),". An implementation may choose not to signal this"]}),"\n",(0,r.jsx)(n.p,{children:"error for performance reasons, but implementations are forbidden from defining the failure to signal an error as a useful behavior."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"\n(defun adder (x) (function (lambda (y) (+ x y)))) \nThe result of (adder 3) is a function that adds 3 to its argument: \n(setq add3 (adder 3)) \n(funcall add3 5) \u2192 8 \nThis works because **function** creates a *closure* of the *lambda expression* that is able to refer to the *value* 3 of the variable x even after control has returned from the function adder. \n\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"defun"}),", ",(0,r.jsx)(n.strong,{children:"fdefinition"}),", ",(0,r.jsx)(n.strong,{children:"flet"}),", ",(0,r.jsx)(n.strong,{children:"labels"}),", ",(0,r.jsx)(n.strong,{children:"symbol-function"}),", Section 3.1.2.1.1 (Symbols as Forms), Section 2.4.8.2 (Sharpsign Single-Quote), Section 22.1.3.13 (Printing Other Objects)"]}),"\n",(0,r.jsx)(n.p,{children:"Data and Control"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["The notation #\u2019",(0,r.jsx)(n.em,{children:"name"})," may be used as an abbreviation for (function ",(0,r.jsx)(n.em,{children:"name"}),")."]})]})}function o(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}const c={},a="function",l={id:"chap-5/f-d-dictionary/function",title:"function",description:"Expanded Reference: function",source:"@site/docs/chap-5/f-d-dictionary/function.md",sourceDirName:"chap-5/f-d-dictionary",slug:"/chap-5/f-d-dictionary/function",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-5/f-d-dictionary/function.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"funcall**, **fdefinition**, **function**, Section 3.1 (Evaluation), Section 5.1.2.5 (APPLY Forms as Places) **defun",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/funcallaa"},next:{title:"function-lambda-expression",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/functionlambdaexpression"}},d={},h=[{value:"Expanded Reference: function",id:"expanded-reference-function",level:2}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"function",children:"function"}),"\n","\n","\n",(0,r.jsx)(o,{}),"\n",(0,r.jsx)(n.h2,{id:"expanded-reference-function",children:"Expanded Reference: function"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(function )\n"})})]})}function f(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>o});var r=i(67294);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);