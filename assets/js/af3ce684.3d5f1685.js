"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[30200],{92998:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var r=t(85893),a=t(11151);function s(e){const n={em:"em",p:"p",strong:"strong",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"random-state"})," ",(0,r.jsx)(n.em,{children:"System Class"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Class Precedence List:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"random-state"}),", ",(0,r.jsx)(n.strong,{children:"t"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.em,{children:"random state object"})," contains state information used by the pseudo-random number generator. The nature of a ",(0,r.jsx)(n.em,{children:"random state object"})," is ",(0,r.jsx)(n.em,{children:"implementation-dependent"}),". It can be printed out and successfully read back in by the same ",(0,r.jsx)(n.em,{children:"implementation"}),", but might not function correctly as a ",(0,r.jsx)(n.em,{children:"random state"})," in another ",(0,r.jsx)(n.em,{children:"implementation"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Implementations"})," are required to provide a read syntax for ",(0,r.jsx)(n.em,{children:"objects"})," of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"random-state"}),", but the specific nature of that syntax is ",(0,r.jsx)(n.em,{children:"implementation-dependent"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*random-state*"}),", ",(0,r.jsx)(n.strong,{children:"random"}),", Section 22.1.3.10 (Printing Random States)"]})]})}function c(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}const o={},d="random-state",i={id:"chap-12/bc-c-dictionary/randomstate",title:"random-state",description:"Expanded Reference: random-state",source:"@site/docs/chap-12/bc-c-dictionary/randomstate.md",sourceDirName:"chap-12/bc-c-dictionary",slug:"/chap-12/bc-c-dictionary/randomstate",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/randomstate",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-12/bc-c-dictionary/randomstate.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"random",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/random"},next:{title:"random-state-p",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/randomstatep"}},l={},m=[{value:"Expanded Reference: random-state",id:"expanded-reference-random-state",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"random-state",children:"random-state"}),"\n","\n","\n",(0,r.jsx)(c,{}),"\n",(0,r.jsx)(n.h2,{id:"expanded-reference-random-state",children:"Expanded Reference: random-state"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(random-state )\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>c});var r=t(67294);const a={},s=r.createContext(a);function c(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);