"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[7645],{75534:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>h});var i=t(85893),s=t(11151);function r(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"\u2217"}),(0,i.jsx)(n.strong,{children:"features"}),(0,i.jsx)(n.em,{children:"\u2217 Variable"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Value Type:"})}),"\n",(0,i.jsxs)(n.p,{children:["a ",(0,i.jsx)(n.em,{children:"proper list"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Initial Value:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"implementation-dependent"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"value"})," of ",(0,i.jsx)(n.strong,{children:"*features*"})," is called the ",(0,i.jsx)(n.em,{children:"features list"}),". It is a ",(0,i.jsx)(n.em,{children:"list"})," of ",(0,i.jsx)(n.em,{children:"symbols"}),", called ",(0,i.jsx)(n.em,{children:"features"}),", that correspond to some aspect of the ",(0,i.jsx)(n.em,{children:"implementation"})," or ",(0,i.jsx)(n.em,{children:"environment"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Most ",(0,i.jsx)(n.em,{children:"features"})," have ",(0,i.jsx)(n.em,{children:"implementation-dependent"})," meanings; The following meanings have been assigned to feature names:"]}),"\n",(0,i.jsx)(n.p,{children:":cltl1"}),"\n",(0,i.jsxs)(n.p,{children:["If present, indicates that the LISP ",(0,i.jsx)(n.em,{children:"package purports to conform"})," to the 1984 specification ",(0,i.jsx)(n.em,{children:"Common Lisp: The Language"}),". It is possible, but not required, for a ",(0,i.jsx)(n.em,{children:"conforming implementation"})," to have this feature because this specification specifies that its ",(0,i.jsx)(n.em,{children:"symbols"})," are to be in the COMMON-LISP ",(0,i.jsx)(n.em,{children:"package"}),", not the LISP package."]}),"\n",(0,i.jsx)(n.p,{children:":cltl2"}),"\n",(0,i.jsxs)(n.p,{children:["If present, indicates that the implementation ",(0,i.jsx)(n.em,{children:"purports to conform"})," to ",(0,i.jsx)(n.em,{children:"Common Lisp: The Language, Second Edition"}),". This feature must not be present in any ",(0,i.jsx)(n.em,{children:"conforming implementation"}),", since conformance to that document is not compatible with conformance to this specification. The name, however, is reserved by this specification in order to help programs distinguish implementations which conform to that document from implementations which conform to this specification."]}),"\n",(0,i.jsx)(n.p,{children:":ieee-floating-point"}),"\n",(0,i.jsxs)(n.p,{children:["If present, indicates that the implementation ",(0,i.jsx)(n.em,{children:"purports to conform"})," to the requirements of ",(0,i.jsx)(n.em,{children:"IEEE Standard for Binary Floating-Point Arithmetic"}),"."]}),"\n",(0,i.jsx)(n.p,{children:":x3j13"}),"\n",(0,i.jsxs)(n.p,{children:["If present, indicates that the implementation conforms to some particular working draft of this specification, or to some subset of features that approximates a belief about what this specification might turn out to contain. A ",(0,i.jsx)(n.em,{children:"conforming implementation"})," might or might not contain such a feature. (This feature is intended primarily as a stopgap in order to provide implementors something to use prior to the availability of a draft standard, in order to"]}),"\n",(0,i.jsxs)(n.p,{children:["discourage them from introducing the ",":draft-ansi-cl"," and ",":ansi-cl"," ",(0,i.jsx)(n.em,{children:"features"})," prematurely.) ",":draft-ansi-cl"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"\u2217"}),(0,i.jsx)(n.strong,{children:"features"}),(0,i.jsx)(n.em,{children:"\u2217"})]}),"\n",(0,i.jsxs)(n.p,{children:["If present, indicates that the ",(0,i.jsx)(n.em,{children:"implementation purports to conform"})," to the first full draft of this specification, which went to public review in 1992. A ",(0,i.jsx)(n.em,{children:"conforming implementation"})," which has the ",":draft-ansi-cl-2"," or ",":ansi-cl"," ",(0,i.jsx)(n.em,{children:"feature"})," is not permitted to retain the ",":draft-ansi-cl"," ",(0,i.jsx)(n.em,{children:"feature"})," since incompatible changes were made subsequent to the first draft."]}),"\n",(0,i.jsx)(n.p,{children:":draft-ansi-cl-2"}),"\n",(0,i.jsxs)(n.p,{children:["If present, indicates that a second full draft of this specification has gone to public review, and that the ",(0,i.jsx)(n.em,{children:"implementation purports to conform"})," to that specification. (If additional public review drafts are produced, this keyword will continue to refer to the second draft, and additional keywords will be added to identify conformance with such later drafts. As such, the meaning of this keyword can be relied upon not to change over time.) A ",(0,i.jsx)(n.em,{children:"conforming implementation"})," which has the ",":ansi-cl"," ",(0,i.jsx)(n.em,{children:"feature"})," is only permitted to retain the ",":draft-ansi-cl"," ",(0,i.jsx)(n.em,{children:"feature"})," if the finally approved standard is not incompatible with the draft standard."]}),"\n",(0,i.jsx)(n.p,{children:":ansi-cl"}),"\n",(0,i.jsxs)(n.p,{children:["If present, indicates that this specification has been adopted by ANSI as an official standard, and that the ",(0,i.jsx)(n.em,{children:"implementation purports to conform"}),"."]}),"\n",(0,i.jsx)(n.p,{children:":common-lisp"}),"\n",(0,i.jsxs)(n.p,{children:["This feature must appear in ",(0,i.jsx)(n.strong,{children:"*features*"})," for any implementation that has one or more of the features ",":x3j13",", ",":draft-ansi-cl",", or ",":ansi-cl",". It is intended that it should also appear in implementations which have the features ",":cltl1"," or ",":cltl2",", but this specification cannot force such behavior. The intent is that this feature should identify the language family named \u201cCommon Lisp,\u201d rather than some specific dialect within that family."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,i.jsx)(n.p,{children:"Section 1.5.2.1.1 (Use of Read-Time Conditionals), Section 2.4 (Standard Macro Characters)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"value"})," of ",(0,i.jsx)(n.strong,{children:"*features*"})," is used by the #+ and #- reader syntax."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Symbols"})," in the ",(0,i.jsx)(n.em,{children:"features list"})," may be in any ",(0,i.jsx)(n.em,{children:"package"}),", but in practice they are generally in the KEYWORD ",(0,i.jsx)(n.em,{children:"package"}),". This is because KEYWORD is the ",(0,i.jsx)(n.em,{children:"package"})," used by default when ",(0,i.jsx)(n.em,{children:"reading"}),(0,i.jsx)("sub",{children:"2"})," ",(0,i.jsx)(n.em,{children:"feature expressions"})," in the #+ and #- ",(0,i.jsx)(n.em,{children:"reader macros"}),". ",(0,i.jsx)(n.em,{children:"Code"})," that needs to name a ",(0,i.jsx)(n.em,{children:"feature"}),(0,i.jsx)("sub",{children:"2"})," in a ",(0,i.jsx)(n.em,{children:"package P"})," (other than KEYWORD) can do so by making explicit use of a ",(0,i.jsx)(n.em,{children:"package prefix"})," for ",(0,i.jsx)(n.em,{children:"P"}),", but note that such ",(0,i.jsx)(n.em,{children:"code"})," must also assure that the ",(0,i.jsx)(n.em,{children:"package P"})," exists in order for the ",(0,i.jsx)(n.em,{children:"feature expression"})," to be ",(0,i.jsx)(n.em,{children:"read"})," ",(0,i.jsx)("sub",{children:"2"}),"\u2014even in cases where the ",(0,i.jsx)(n.em,{children:"feature expression"})," is expected to fail."]}),"\n",(0,i.jsxs)(n.p,{children:["It is generally considered wise for an ",(0,i.jsx)(n.em,{children:"implementation"})," to include one or more ",(0,i.jsx)(n.em,{children:"features"})," identifying the specific ",(0,i.jsx)(n.em,{children:"implementation"}),", so that conditional expressions can be written which distinguish idiosyncrasies of one ",(0,i.jsx)(n.em,{children:"implementation"})," from those of another. Since features are normally ",(0,i.jsx)(n.em,{children:"symbols"})," in the KEYWORD ",(0,i.jsx)(n.em,{children:"package"})," where name collisions might easily result, and since no uniquely defined"]}),"\n",(0,i.jsx)(n.p,{children:"System"}),"\n",(0,i.jsxs)(n.p,{children:["mechanism is designated for deciding who has the right to use which ",(0,i.jsx)(n.em,{children:"symbol"})," for what reason, a conservative strategy is to prefer names derived from one\u2019s own company or product name, since those names are often trademarked and are hence less likely to be used unwittingly by another ",(0,i.jsx)(n.em,{children:"implementation"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"\u2217"}),(0,i.jsx)(n.strong,{children:"compile-file-pathname"}),(0,i.jsx)(n.em,{children:"\u2217"}),"**,**"]})]})}function a(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}const o={title:"features"},c="*features*",d={id:"chap-24/ce-c-dictionary/features_variable",title:"features",description:"Expanded Reference: \\features\\",source:"@site/docs/chap-24/ce-c-dictionary/features_variable.md",sourceDirName:"chap-24/ce-c-dictionary",slug:"/chap-24/ce-c-dictionary/features_variable",permalink:"/cl-language-reference/docs/chap-24/ce-c-dictionary/features_variable",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-24/ce-c-dictionary/features_variable.md",tags:[],version:"current",frontMatter:{title:"features"},sidebar:"tutorialSidebar",previous:{title:"compile-verbose",permalink:"/cl-language-reference/docs/chap-24/ce-c-dictionary/compile-verbose_variable"},next:{title:"load-truename",permalink:"/cl-language-reference/docs/chap-24/ce-c-dictionary/load-truename_variable"}},l={},h=[{value:"Expanded Reference: *features*",id:"expanded-reference-features",level:2}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"features",children:"*features*"}),"\n","\n","\n",(0,i.jsx)(a,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-features",children:"Expanded Reference: *features*"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"*features*\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>a});var i=t(67294);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);