"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[45181],{1460:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>t,default:()=>x,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=i(85893),r=i(11151);function c(n){const e={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"special"})," ",(0,a.jsx)(e.em,{children:"Declaration"})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Syntax:"})}),"\n",(0,a.jsxs)(e.p,{children:["(special ",(0,a.jsx)(e.em,{children:"{var}"}),"*)"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Arguments:"})}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.em,{children:"var"}),"\u2014a ",(0,a.jsx)(e.em,{children:"symbol"}),"."]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Valid Context:"})}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.em,{children:"declaration"})," or ",(0,a.jsx)(e.em,{children:"proclamation"})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Binding Types Aected:"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.em,{children:"variable"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Description:"})}),"\n",(0,a.jsxs)(e.p,{children:["Specifies that all of the ",(0,a.jsx)(e.em,{children:"vars"})," named are dynamic. This specifier a\u21b5ects variable ",(0,a.jsx)(e.em,{children:"bindings"})," and a\u21b5ects references. All variable ",(0,a.jsx)(e.em,{children:"bindings"})," a\u21b5ected are made to be dynamic ",(0,a.jsx)(e.em,{children:"bindings"}),", and a\u21b5ected variable references refer to the current dynamic ",(0,a.jsx)(e.em,{children:"binding"}),". For example:"]}),"\n",(0,a.jsx)(e.p,{children:"(defun hack (thing *mod*) ;The binding of the parameter"}),"\n",(0,a.jsx)(e.p,{children:"(declare (special *mod*)) ; *mod* is visible to hack1,"}),"\n",(0,a.jsx)(e.p,{children:"(hack1 (car thing))) ; but not that of thing."}),"\n",(0,a.jsx)(e.p,{children:"(defun hack1 (arg)"}),"\n",(0,a.jsx)(e.p,{children:"(declare (special *mod*)) ;Declare references to *mod*"}),"\n",(0,a.jsx)(e.p,{children:";within hack1 to be special."}),"\n",(0,a.jsx)(e.p,{children:"(if (atom arg) *mod*"}),"\n",(0,a.jsx)(e.p,{children:"(cons (hack1 (car arg)) (hack1 (cdr arg)))))"}),"\n",(0,a.jsxs)(e.p,{children:["A ",(0,a.jsx)(e.strong,{children:"special"})," declaration does not a\u21b5ect inner ",(0,a.jsx)(e.em,{children:"bindings"})," of a ",(0,a.jsx)(e.em,{children:"var"}),"; the inner ",(0,a.jsx)(e.em,{children:"bindings"})," implicitly shadow a ",(0,a.jsx)(e.strong,{children:"special"})," declaration and must be explicitly re-declared to be ",(0,a.jsx)(e.strong,{children:"special"}),". ",(0,a.jsx)(e.strong,{children:"special"})," declarations never apply to function ",(0,a.jsx)(e.em,{children:"bindings"}),"."]}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"special"})," declarations can be either ",(0,a.jsx)(e.em,{children:"bound declarations"}),", a\u21b5ecting both a binding and references, or ",(0,a.jsx)(e.em,{children:"free declarations"}),", a\u21b5ecting only references, depending on whether the declaration is attached to a variable binding."]}),"\n",(0,a.jsxs)(e.p,{children:["When used in a ",(0,a.jsx)(e.em,{children:"proclamation"}),", a ",(0,a.jsx)(e.strong,{children:"special"})," ",(0,a.jsx)(e.em,{children:"declaration specifier"})," applies to all ",(0,a.jsx)(e.em,{children:"bindings"})," as well as to all references of the mentioned variables. For example, after"]}),"\n",(0,a.jsx)(e.p,{children:"(declaim (special x))"}),"\n",(0,a.jsx)(e.p,{children:"Evaluation and"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"special"})}),"\n",(0,a.jsx)(e.p,{children:"then in a function definition such as"}),"\n",(0,a.jsx)(e.p,{children:"(defun example (x) ...)"}),"\n",(0,a.jsx)(e.p,{children:"the parameter x is bound as a dynamic variable rather than as a lexical variable."}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Examples:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lisp",children:" \n\n\n\n(defun declare-eg (y) ;this y is special \n\n\n\n(declare (special y)) \n\n\n\n(let ((y t)) ;this y is lexical \n\n\n\n(list y \n\n\n\n(locally (declare (special y)) y)))) ;this y refers to the \n\n\n\n;special binding of y \n\n\n\n*!* DECLARE-EG \n\n\n\n(declare-eg nil) *!* (T NIL) \n\n\n\n(setf (symbol-value \u2019x) 6) \n\n\n\n(defun foo (x) ;a lexical binding of x \n\n\n\n(print x) \n\n\n\n(let ((x (1+ x))) ;a special binding of x \n\n\n\n(declare (special x)) ;and a lexical reference \n\n\n\n(bar)) \n\n\n\n(1+ x)) \n\n\n\n(defun bar () \n\n\n\n(print (locally (declare (special x)) \n\n\n\nx))) \n\n\n\n(foo 10) \n\n\n\n\u25b7 10 \n\n\n\n\u25b7 11 \n\n\n\n*!* 11 \n\n\n\n(setf (symbol-value \u2019x) 6) \n\n\n\n(defun bar (x y) ;[1] 1st occurrence of x \n\n\n\n(let ((old-x x) ;[2] 2nd occurrence of x \u2013 same as 1st occurrence \n\n\n\n(x y)) ;[3] 3rd occurrence of x \n\n\n\n(declare (special x)) \n\n\n\n(list old-x x))) \n\n\n\n(bar \u2019first \u2019second) *!* (FIRST SECOND) \n\n\n\n(defun few (x &amp;optional (y \\*foo\\*)) \n\n\n\n(declare (special \\*foo\\*)) \n\n\n\n...) \n\n\n\nThe reference to \\*foo\\* in the first line of this example is not **special** even though there is a **special** declaration in the second line. \n\n\n\n(declaim (special prosp)) *! implementation-dependent* \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n(setq prosp 1 reg 1) *!* 1 \n\n\n\n(let ((prosp 2) (reg 2)) ;the binding of prosp is special \n\n\n\n(set \u2019prosp 3) (set \u2019reg 3) ;due to the preceding proclamation, \n\n\n\n(list prosp reg)) ;whereas the variable reg is lexical \n\n\n\n*!* (3 2) \n\n\n\n(list prosp reg) *!* (1 3) \n\n\n\n(declaim (special x)) ;x is always special. \n\n\n\n(defun example (x y) \n\n\n\n(declare (special y)) \n\n\n\n(let ((y 3) (x (\\* x 2))) \n\n\n\n(print (+ y (locally (declare (special y)) y))) \n\n\n\n(let ((y 4)) (declare (special y)) (foo x)))) *!* EXAMPLE \n\n\n\nIn the contorted code above, the outermost and innermost *bindings* of y are dynamic, but the middle binding is lexical. The two arguments to + are di\u21b5erent, one being the value, which is 3, of the lexical variable y, and the other being the value of the dynamic variable named y (a *binding* of which happens, coincidentally, to lexically surround it at an outer level). All the *bindings* of x and references to x are dynamic, however, because of the proclamation that x is always **special**. \n\n\n\n\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"See Also:"})}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"defparameter"}),", ",(0,a.jsx)(e.strong,{children:"defvar"})]})]})}function s(n={}){const{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}const l={},t="special",d={id:"chap-3/d-i-dictionary/special",title:"special",description:"Expanded Reference: special",source:"@site/docs/chap-3/d-i-dictionary/special.md",sourceDirName:"chap-3/d-i-dictionary",slug:"/chap-3/d-i-dictionary/special",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/special",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-3/d-i-dictionary/special.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"quote",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/quote"},next:{title:"special-operator-p",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/specialoperatorp"}},o={},p=[{value:"Expanded Reference: special",id:"expanded-reference-special",level:2}];function h(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"special",children:"special"}),"\n","\n","\n",(0,a.jsx)(s,{}),"\n",(0,a.jsx)(e.h2,{id:"expanded-reference-special",children:"Expanded Reference: special"}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsx)(e.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lisp",children:"(special )\n"})})]})}function x(n={}){const{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(h,{...n})}):h(n)}},11151:(n,e,i)=>{i.d(e,{Z:()=>l,a:()=>s});var a=i(67294);const r={},c=a.createContext(r);function s(n){const e=a.useContext(c);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),a.createElement(c.Provider,{value:e},n.children)}}}]);