"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[31444],{47090:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>x,frontMatter:()=>l,metadata:()=>a,toc:()=>h});var o=r(85893),s=r(11151);function t(n){const e={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"break"})," ",(0,o.jsx)(e.em,{children:"Function"})]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Syntax:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"break"})," &optional ",(0,o.jsx)(e.em,{children:"format-control"})," &rest ",(0,o.jsx)(e.em,{children:"format-arguments \u2192"})," ",(0,o.jsx)(e.strong,{children:"nil"})]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Arguments and Values:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.em,{children:"format-control"}),"\u2014a ",(0,o.jsx)(e.em,{children:"format control"}),". The default is ",(0,o.jsx)(e.em,{children:"implementation-dependent"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.em,{children:"format-arguments"}),"\u2014",(0,o.jsx)(e.em,{children:"format arguments"})," for the ",(0,o.jsx)(e.em,{children:"format-control"}),"."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Description:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"break"})," ",(0,o.jsx)(e.em,{children:"formats format-control"})," and ",(0,o.jsx)(e.em,{children:"format-arguments"})," and then goes directly into the debugger without allowing any possibility of interception by programmed error-handling facilities."]}),"\n",(0,o.jsxs)(e.p,{children:["If the ",(0,o.jsx)(e.strong,{children:"continue"})," ",(0,o.jsx)(e.em,{children:"restart"})," is used while in the debugger, ",(0,o.jsx)(e.strong,{children:"break"})," immediately returns ",(0,o.jsx)(e.strong,{children:"nil"})," without taking any unusual recovery action."]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"break"})," binds ",(0,o.jsx)(e.strong,{children:"*debugger-hook*"})," to ",(0,o.jsx)(e.strong,{children:"nil"})," before attempting to enter the debugger."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Examples:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lisp",children:' \n\n\n\n(break "You got here with arguments: ~:S." \u2019(FOO 37 A)) \n\n\n\n\u25b7 BREAK: You got here with these arguments: FOO, 37, A. \n\n\n\n\u25b7 To continue, type :CONTINUE followed by an option number: \n\n\n\n\u25b7 1: Return from BREAK. \n\n\n\n\u25b7 2: Top level. \n\n\n\n\u25b7 Debug> :CONTINUE 1 \n\n\n\n\u25b7 Return from BREAK. \n\n\n\n*\u2192* NIL \n\n\n\n\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Side Effects:"})}),"\n",(0,o.jsx)(e.p,{children:"The debugger is entered."}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Affected By:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"*debug-io*"}),"."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"See Also:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"error"}),", ",(0,o.jsx)(e.strong,{children:"invoke-debugger"}),"."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Notes:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"break"})," is used as a way of inserting temporary debugging \u201cbreakpoints\u201d in a program, not as a way of signaling errors. For this reason, ",(0,o.jsx)(e.strong,{children:"break"})," does not take the ",(0,o.jsx)(e.em,{children:"continue-format-control argument"})," that ",(0,o.jsx)(e.strong,{children:"cerror"})," takes. This and the lack of any possibility of interception by ",(0,o.jsx)(e.em,{children:"condition handling"})," are the only program-visible differences between ",(0,o.jsx)(e.strong,{children:"break"})," and ",(0,o.jsx)(e.strong,{children:"cerror"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:["The user interface aspects of ",(0,o.jsx)(e.strong,{children:"break"})," and ",(0,o.jsx)(e.strong,{children:"cerror"})," are permitted to vary more widely, in order to accomodate the interface needs of the ",(0,o.jsx)(e.em,{children:"implementation"}),". For example, it is permissible for a ",(0,o.jsx)(e.em,{children:"Lisp read-eval-print loop"})," to be entered by ",(0,o.jsx)(e.strong,{children:"break"})," rather than the conventional debugger."]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"break"})," could be defined by:"]}),"\n",(0,o.jsx)(e.p,{children:'(defun break (&optional (format-control "Break") &rest format-arguments)'}),"\n",(0,o.jsx)(e.p,{children:'(with-simple-restart (continue "Return from BREAK.")'}),"\n",(0,o.jsx)(e.p,{children:"(let ((*debugger-hook* nil))"}),"\n",(0,o.jsx)(e.p,{children:"(invoke-debugger"}),"\n",(0,o.jsx)(e.p,{children:"(make-condition \u2019simple-condition"}),"\n",(0,o.jsxs)(e.p,{children:[":format-control"," format-control"]}),"\n",(0,o.jsxs)(e.p,{children:[":format-arguments"," format-arguments))))"]}),"\n",(0,o.jsx)(e.p,{children:"nil)"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.em,{children:"\u2217"}),(0,o.jsx)(e.strong,{children:"debugger-hook"}),(0,o.jsx)(e.em,{children:"\u2217 Variable"})]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Value Type:"})}),"\n",(0,o.jsxs)(e.p,{children:["a ",(0,o.jsx)(e.em,{children:"designator"})," for a ",(0,o.jsx)(e.em,{children:"function"})," of two ",(0,o.jsx)(e.em,{children:"arguments"})," (a ",(0,o.jsx)(e.em,{children:"condition"})," and the ",(0,o.jsx)(e.em,{children:"value"})," of ",(0,o.jsx)(e.strong,{children:"*debugger-hook*"})," at the time the debugger was entered), or ",(0,o.jsx)(e.strong,{children:"nil"}),"."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Initial Value:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"nil"}),"."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Description:"})}),"\n",(0,o.jsxs)(e.p,{children:["When the ",(0,o.jsx)(e.em,{children:"value"})," of ",(0,o.jsx)(e.strong,{children:"*debugger-hook*"})," is ",(0,o.jsx)(e.em,{children:"non-nil"}),", it is called prior to normal entry into the debugger, either due to a call to ",(0,o.jsx)(e.strong,{children:"invoke-debugger"})," or due to automatic entry into the debugger from a call to ",(0,o.jsx)(e.strong,{children:"error"})," or ",(0,o.jsx)(e.strong,{children:"cerror"})," with a condition that is not handled. The ",(0,o.jsx)(e.em,{children:"function"})," may either handle the ",(0,o.jsx)(e.em,{children:"condition"})," (transfer control) or return normally (allowing the standard debugger to run). To minimize recursive errors while debugging, ",(0,o.jsx)(e.strong,{children:"*debugger-hook*"})," is bound to ",(0,o.jsx)(e.strong,{children:"nil"})," by ",(0,o.jsx)(e.strong,{children:"invoke-debugger"})," prior to calling the ",(0,o.jsx)(e.em,{children:"function"}),"."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Examples:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lisp",children:' \n\n\n\n(defun one-of (choices &optional (prompt "Choice")) \n\n\n\n(let ((n (length choices)) (i)) \n\n\n\n(do ((c choices (cdr c)) (i 1 (+ i 1))) \n\n\n\n((null c)) \n\n\n\n(format t "~&[~D] ~A~%" i (car c))) \n\n\n\n(do () ((typep i \u2018(integer 1 ,n))) \n\n\n\n(format t "~&~A: " prompt) \n\n\n\n(setq i (read)) \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n(fresh-line)) \n\n\n\n(nth (- i 1) choices))) \n\n\n\n(defun my-debugger (condition me-or-my-encapsulation) \n\n\n\n(format t "~&Fooey: ~A" condition) \n\n\n\n(let ((restart (one-of (compute-restarts)))) \n\n\n\n(if (not restart) (error "My debugger got an error.")) \n\n\n\n(let ((\\*debugger-hook\\* me-or-my-encapsulation)) \n\n\n\n(invoke-restart-interactively restart)))) \n\n\n\n(let ((\\*debugger-hook\\* #\u2019my-debugger)) \n\n\n\n(+ 3 \u2019a)) \n\n\n\n\u25b7 Fooey: The argument to +, A, is not a number. \n\n\n\n\u25b7 [1] Supply a replacement for A. \n\n\n\n\u25b7 [2] Return to Cloe Toplevel. \n\n\n\n\u25b7 Choice: 1 \n\n\n\n\u25b7 Form to evaluate and use: (+ 5 \u2019b) \n\n\n\n\u25b7 Fooey: The argument to +, B, is not a number. \n\n\n\n\u25b7 [1] Supply a replacement for B. \n\n\n\n\u25b7 [2] Supply a replacement for A. \n\n\n\n\u25b7 [3] Return to Cloe Toplevel. \n\n\n\n\u25b7 Choice: 1 \n\n\n\n\u25b7 Form to evaluate and use: 1 \n\n\n\n*\u2192* 9 \n\n\n\n\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Affected By:"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"invoke-debugger"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Notes:"})}),"\n",(0,o.jsxs)(e.p,{children:["When evaluating code typed in by the user interactively, it is sometimes useful to have the hook function bind ",(0,o.jsx)(e.strong,{children:"*debugger-hook*"})," to the ",(0,o.jsx)(e.em,{children:"function"})," that was its second argument so that recursive errors can be handled using the same interactive facility."]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.em,{children:"\u2217"}),(0,o.jsx)(e.strong,{children:"break-on-signals"}),(0,o.jsx)(e.em,{children:"\u2217 Variable"})]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Value Type:"})}),"\n",(0,o.jsxs)(e.p,{children:["a ",(0,o.jsx)(e.em,{children:"type specifier"})," ."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Initial Value:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"nil"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.em,{children:"\u2217"}),(0,o.jsx)(e.strong,{children:"break-on-signals"}),(0,o.jsx)(e.em,{children:"\u2217"})]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Description:"})}),"\n",(0,o.jsxs)(e.p,{children:["When (typep ",(0,o.jsx)(e.em,{children:"condition"})," *break-on-signals*) returns ",(0,o.jsx)(e.em,{children:"true"}),", calls to ",(0,o.jsx)(e.strong,{children:"signal"}),", and to other ",(0,o.jsx)(e.em,{children:"operators"})," such as ",(0,o.jsx)(e.strong,{children:"error"})," that implicitly call ",(0,o.jsx)(e.strong,{children:"signal"}),", enter the debugger prior to ",(0,o.jsx)(e.em,{children:"signaling"})," the ",(0,o.jsx)(e.em,{children:"condition"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.strong,{children:"continue"})," ",(0,o.jsx)(e.em,{children:"restart"})," can be used to continue with the normal ",(0,o.jsx)(e.em,{children:"signaling"})," process when a break occurs process due to ",(0,o.jsx)(e.strong,{children:"*break-on-signals*"}),"."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Examples:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lisp",children:' \n\n\n\n\\*break-on-signals\\* *\u2192* NIL \n\n\n\n(ignore-errors (error \u2019simple-error :format-control "Fooey!")) \n\n\n\n*\u2192* NIL, #<SIMPLE-ERROR 32207172> \n\n\n\n(let ((\\*break-on-signals\\* \u2019error)) \n\n\n\n(ignore-errors (error \u2019simple-error :format-control "Fooey!"))) \n\n\n\n\u25b7 Break: Fooey! \n\n\n\n\u25b7 BREAK entered because of \\*BREAK-ON-SIGNALS\\*. \n\n\n\n\u25b7 To continue, type :CONTINUE followed by an option number: \n\n\n\n\u25b7 1: Continue to signal. \n\n\n\n\u25b7 2: Top level. \n\n\n\n\u25b7 Debug> :CONTINUE 1 \n\n\n\n\u25b7 Continue to signal. \n\n\n\n*\u2192* NIL, #<SIMPLE-ERROR 32212257> \n\n\n\n(let ((\\*break-on-signals\\* \u2019error)) \n\n\n\n(error \u2019simple-error :format-control "Fooey!")) \n\n\n\n\u25b7 Break: Fooey! \n\n\n\n\u25b7 BREAK entered because of \\*BREAK-ON-SIGNALS\\*. \n\n\n\n\u25b7 To continue, type :CONTINUE followed by an option number: \n\n\n\n\u25b7 1: Continue to signal. \n\n\n\n\u25b7 2: Top level. \n\n\n\n\u25b7 Debug> :CONTINUE 1 \n\n\n\n\u25b7 Continue to signal. \n\n\n\n\u25b7 Error: Fooey! \n\n\n\n\u25b7 To continue, type :CONTINUE followed by an option number: \n\n\n\n\u25b7 1: Top level. \n\n\n\n\u25b7 Debug> :CONTINUE 1 \n\n\n\n\u25b7 Top level. \n\n\n\n\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"See Also:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"break"}),", ",(0,o.jsx)(e.strong,{children:"signal"}),", ",(0,o.jsx)(e.strong,{children:"warn"}),", ",(0,o.jsx)(e.strong,{children:"error"}),", ",(0,o.jsx)(e.strong,{children:"typep"}),", Section 9.1 (Condition System Concepts)"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Notes:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"*break-on-signals*"})," is intended primarily for use in debugging code that does signaling. When setting ",(0,o.jsx)(e.strong,{children:"*break-on-signals*"}),", the user is encouraged to choose the most restrictive specification"]}),"\n",(0,o.jsxs)(e.p,{children:["that suffices. Setting ",(0,o.jsx)(e.strong,{children:"*break-on-signals*"})," effectively violates the modular handling of ",(0,o.jsx)(e.em,{children:"condition"})," signaling. In practice, the complete effect of setting ",(0,o.jsx)(e.strong,{children:"*break-on-signals*"})," might be unpredictable in some cases since the user might not be aware of the variety or number of calls to ",(0,o.jsx)(e.strong,{children:"signal"})," that are used in code called only incidentally."]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"*break-on-signals*"})," enables an early entry to the debugger but such an entry does not preclude an additional entry to the debugger in the case of operations such as ",(0,o.jsx)(e.strong,{children:"error"})," and ",(0,o.jsx)(e.strong,{children:"cerror"}),"."]})]})}function i(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(t,{...n})}):t(n)}const l={},c="break",a={id:"chap-9/j-c-dictionary/break",title:"break",description:"Expanded Reference: break",source:"@site/docs/chap-9/j-c-dictionary/break.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/break",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/break",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/break.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"assert",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/assert"},next:{title:"cell-error",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/cellerror"}},d={},h=[{value:"Expanded Reference: break",id:"expanded-reference-break",level:2}];function g(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"break",children:"break"}),"\n","\n","\n",(0,o.jsx)(i,{}),"\n",(0,o.jsx)(e.h2,{id:"expanded-reference-break",children:"Expanded Reference: break"}),"\n",(0,o.jsx)(e.admonition,{type:"tip",children:(0,o.jsx)(e.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lisp",children:"(break )\n"})})]})}function x(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(g,{...n})}):g(n)}},11151:(n,e,r)=>{r.d(e,{Z:()=>l,a:()=>i});var o=r(67294);const s={},t=o.createContext(s);function i(n){const e=o.useContext(t);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),o.createElement(t.Provider,{value:e},n.children)}}}]);