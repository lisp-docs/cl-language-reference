"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[41594],{15546:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>x,frontMatter:()=>d,metadata:()=>l,toc:()=>p});var i=s(85893),r=s(11151);function t(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"unsigned-byte"})," ",(0,i.jsx)(n.em,{children:"Type"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Supertypes:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"unsigned-byte"}),", ",(0,i.jsx)(n.strong,{children:"signed-byte"}),", ",(0,i.jsx)(n.strong,{children:"integer"}),", ",(0,i.jsx)(n.strong,{children:"rational"}),", ",(0,i.jsx)(n.strong,{children:"real"}),", ",(0,i.jsx)(n.strong,{children:"number"}),", ",(0,i.jsx)(n.strong,{children:"t"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["The atomic ",(0,i.jsx)(n.em,{children:"type specifier"})," ",(0,i.jsx)(n.strong,{children:"unsigned-byte"})," denotes the same type as is denoted by the ",(0,i.jsx)(n.em,{children:"type specifier"})," (integer 0 *)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,i.jsx)(n.p,{children:"Abbreviating."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:["(unsigned-byte [",(0,i.jsx)(n.em,{children:"s |"})," ",(0,i.jsx)(n.strong,{children:"*"}),"])"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"s"}),"\u2014a positive ",(0,i.jsx)(n.em,{children:"integer"})," ."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["This denotes the set of non-negative ",(0,i.jsx)("i",{children:"integers"})," that can be represented in a byte of size ",(0,i.jsx)("i",{children:"s"})," (bits). This is equivalent to (mod ",(0,i.jsx)("i",{children:"m"}),") for ",(0,i.jsx)("i",{children:"m"})," = 2",(0,i.jsx)("i",{children:(0,i.jsx)("sup",{children:"s"})}),", or to (integer 0 ",(0,i.jsx)("i",{children:"n"}),") for ",(0,i.jsx)("i",{children:"n"})," = 2",(0,i.jsxs)("i",{children:[(0,i.jsx)("sup",{children:"s"})," \u2212"]}),"1. The ",(0,i.jsx)("i",{children:"type"})," ",(0,i.jsx)("b",{children:"unsigned-byte"})," or the type (unsigned-byte *) is the same as the type (integer 0 *), the set of non-negative ",(0,i.jsx)("i",{children:"integers"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"type"})," (unsigned-byte 1) is also called ",(0,i.jsx)(n.strong,{children:"bit"}),"."]})]})}function c(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}const d={},o="unsigned-byte",l={id:"chap-12/bc-c-dictionary/unsignedbyte",title:"unsigned-byte",description:"Expanded Reference: unsigned-byte",source:"@site/docs/chap-12/bc-c-dictionary/unsignedbyte.md",sourceDirName:"chap-12/bc-c-dictionary",slug:"/chap-12/bc-c-dictionary/unsignedbyte",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/unsignedbyte",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-12/bc-c-dictionary/unsignedbyte.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"sqrt, isqrt",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/sqrt"},next:{title:"upgraded-complex-part-type",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/upgradedcomplexparttype"}},a={},p=[{value:"Expanded Reference: unsigned-byte",id:"expanded-reference-unsigned-byte",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"unsigned-byte",children:"unsigned-byte"}),"\n","\n","\n",(0,i.jsx)(c,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-unsigned-byte",children:"Expanded Reference: unsigned-byte"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(unsigned-byte )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>d,a:()=>c});var i=s(67294);const r={},t=i.createContext(r);function c(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);