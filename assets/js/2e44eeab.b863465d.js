"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[16123],{24511:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>r});var a=n(85893),o=n(11151);const s={},d="method-lambda-list",i={id:"meta-object-protocol/method-lambda-list",title:"method-lambda-list",description:"Generic Function METHOD-LAMBDA-LIST",source:"@site/docs/meta-object-protocol/method-lambda-list.md",sourceDirName:"meta-object-protocol",slug:"/meta-object-protocol/method-lambda-list",permalink:"/cl-language-reference/meta-object-protocol/method-lambda-list",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/method-lambda-list.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"method-lambda-list-standard-method",permalink:"/cl-language-reference/meta-object-protocol/method-lambda-list-standard-method"},next:{title:"method-qualifiers-standard-method",permalink:"/cl-language-reference/meta-object-protocol/method-qualifiers-standard-method"}},l={},r=[{value:"<strong>method-lambda-list</strong> (<em>method</em> standard-method)",id:"method-lambda-list-method-standard-method",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",p:"p",strong:"strong",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"method-lambda-list",children:"method-lambda-list"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"Generic Function"})," ",(0,a.jsx)(t.strong,{children:"METHOD-LAMBDA-LIST"})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Syntax:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"method-lambda-list"})," ",(0,a.jsx)(t.em,{children:"method"})," => ",(0,a.jsx)(t.em,{children:"lambda-list"})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Arguments and values:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"method"})," -- A method metaobject."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"lambda-list"})," -- An unspecialized lambda list."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Description:"})}),"\n",(0,a.jsxs)(t.p,{children:["This generic function returns the (unspecialized) lambda list of ",(0,a.jsx)(t.em,{children:"method"}),". This value is a Common Lisp lambda list. This is the defaulted value of the ",(0,a.jsx)(t.code,{children:":lambda-list"})," initialization argument that was associated with the method during initialization."]}),"\n",(0,a.jsx)(t.p,{children:"This generic function can be called by the user or the implementation."}),"\n",(0,a.jsxs)(t.p,{children:["An error is signaled if the argument ",(0,a.jsx)(t.em,{children:"method"})," is not a method metaobject. An error is also signaled if the method metaobject has not been initialized."]}),"\n",(0,a.jsx)(t.p,{children:"The list returned by this function will not be mutated by the implementation. The results are undefined if a portable program allows this list to be mutated."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Methods:"})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h2,{id:"method-lambda-list-method-standard-method",children:(0,a.jsxs)(t.a,{href:"/meta-object-protocol/method-lambda-list-standard-method",children:[(0,a.jsx)(t.strong,{children:"method-lambda-list"})," (",(0,a.jsx)(t.em,{children:"method"})," standard-method)"]})})]})}function m(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>d});var a=n(67294);const o={},s=a.createContext(o);function d(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);