"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[87545],{12859:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>h,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>x});var i=s(85893),t=s(11151);function r(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components},{DictionaryLink:s,GlossaryTerm:r}=n;return s||d("DictionaryLink",!0),r||d("GlossaryTerm",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"replace"})," ",(0,i.jsx)(r,{term:"function",children:(0,i.jsx)("i",{children:"Function"})})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(s,{term:"replace",children:(0,i.jsx)("b",{children:"replace"})})," ",(0,i.jsx)(n.em,{children:"sequence-1 sequence-2"})," &key ",(0,i.jsx)(n.em,{children:"start1 end1 start2 end2 \u2192 sequence-1"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"sequence-1"}),"\u2014a ",(0,i.jsx)(n.em,{children:"sequence"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"sequence-2"}),"\u2014a ",(0,i.jsx)(n.em,{children:"sequence"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"start1"}),", ",(0,i.jsx)(n.em,{children:"end1"}),"\u2014",(0,i.jsx)(r,{styled:!0,term:"bounding index designator",children:(0,i.jsx)("i",{children:"bounding index designators"})})," of ",(0,i.jsx)(n.em,{children:"sequence-1"}),". The defaults for ",(0,i.jsx)(n.em,{children:"start1"})," and ",(0,i.jsx)(n.em,{children:"end1"})," are 0 and ",(0,i.jsx)(s,{term:"nil",children:(0,i.jsx)("b",{children:"nil"})}),", respectively."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"start2"}),", ",(0,i.jsx)(n.em,{children:"end2"}),"\u2014",(0,i.jsx)(r,{styled:!0,term:"bounding index designator",children:(0,i.jsx)("i",{children:"bounding index designators"})})," of ",(0,i.jsx)(n.em,{children:"sequence-2"}),". The defaults for ",(0,i.jsx)(n.em,{children:"start2"})," and ",(0,i.jsx)(n.em,{children:"end2"})," are 0 and ",(0,i.jsx)(s,{term:"nil",children:(0,i.jsx)("b",{children:"nil"})}),", respectively."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["Destructively modifies ",(0,i.jsx)(n.em,{children:"sequence-1"})," by replacing the ",(0,i.jsx)(r,{term:"element",children:(0,i.jsx)("i",{children:"elements"})})," of ",(0,i.jsx)(n.em,{children:"subsequence-1 bounded"})," by ",(0,i.jsx)(n.em,{children:"start1"})," and ",(0,i.jsx)(n.em,{children:"end1"})," with the ",(0,i.jsx)(r,{term:"element",children:(0,i.jsx)("i",{children:"elements"})})," of ",(0,i.jsx)(n.em,{children:"subsequence-2 bounded"})," by ",(0,i.jsx)(n.em,{children:"start2"})," and ",(0,i.jsx)(n.em,{children:"end2"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Sequence-1"})," is destructively modified by copying successive ",(0,i.jsx)(r,{term:"element",children:(0,i.jsx)("i",{children:"elements"})})," into it from ",(0,i.jsx)(n.em,{children:"sequence-2"}),". ",(0,i.jsx)(r,{term:"element",children:(0,i.jsx)("i",{children:"Elements"})})," of the subsequence of ",(0,i.jsx)(n.em,{children:"sequence-2 bounded"})," by ",(0,i.jsx)(n.em,{children:"start2"})," and ",(0,i.jsx)(n.em,{children:"end2"})," are copied into the subsequence of ",(0,i.jsx)(n.em,{children:"sequence-1 bounded"})," by ",(0,i.jsx)(n.em,{children:"start1"})," and ",(0,i.jsx)(n.em,{children:"end1"}),". If these subsequences are not of the same length, then the shorter length determines how many ",(0,i.jsx)(r,{term:"element",children:(0,i.jsx)("i",{children:"elements"})})," are copied; the extra ",(0,i.jsx)(r,{term:"element",children:(0,i.jsx)("i",{children:"elements"})})," near the end of the longer subsequence are not involved in the operation. The number of elements copied can be expressed as:"]}),"\n",(0,i.jsxs)(n.p,{children:["(min (- ",(0,i.jsx)(n.em,{children:"end1 start1"}),") (- ",(0,i.jsx)(n.em,{children:"end2 start2"}),"))"]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.em,{children:"sequence-1"})," and ",(0,i.jsx)(n.em,{children:"sequence-2"})," are the ",(0,i.jsx)(n.em,{children:"same object"})," and the region being modified overlaps the region being copied from, then it is as if the entire source region were copied to another place and only then copied back into the target region. However, if ",(0,i.jsx)(n.em,{children:"sequence-1"})," and ",(0,i.jsx)(n.em,{children:"sequence-2"})," are not the same, but the region being modified overlaps the region being copied from (perhaps because of shared list structure or displaced ",(0,i.jsx)(r,{term:"array",children:(0,i.jsx)("i",{children:"arrays"})}),"), then after the ",(0,i.jsx)(s,{term:"replace",children:(0,i.jsx)("b",{children:"replace"})})," operation the subsequence of ",(0,i.jsx)(n.em,{children:"sequence-1"})," being modified will have unpredictable contents. It is an error if the elements of ",(0,i.jsx)(n.em,{children:"sequence-2"})," are not of a ",(0,i.jsx)(r,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," that can be stored into ",(0,i.jsx)(n.em,{children:"sequence-1"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:' \n(replace "abcdefghij" "0123456789" :start1 4 :end1 7 :start2 4) \n\u2192 "abcd456hij" \n(setq lst "012345678") \u2192 "012345678" \n(replace lst lst :start1 2 :start2 0) \u2192 "010123456" \nlst \u2192 "010123456" \n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"sequence-1"})," is modified."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,i.jsx)(s,{term:"fill",children:(0,i.jsx)("b",{children:"fill"})}),"\n",(0,i.jsxs)("b",{children:[(0,i.jsx)("sup",{children:"substitute, substitute-if, substitute-if-not, nsubsti"})," tute, nsubstitute-if, nsubstitute-if-not"]}),"\n",(0,i.jsx)("i",{children:"Function"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"substitute"})," ",(0,i.jsx)(n.em,{children:"newitem olditem sequence"})," &key ",(0,i.jsx)(n.em,{children:"from-end test"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"test-not start"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"end count key"})}),"\n",(0,i.jsx)(n.p,{children:"\u2192 result-sequence"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"substitute-if"})," ",(0,i.jsx)(n.em,{children:"newitem predicate sequence"})," &key ",(0,i.jsx)(n.em,{children:"from-end start end count key"})]}),"\n",(0,i.jsx)(n.p,{children:"\u2192 result-sequence"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"substitute-if-not"})," ",(0,i.jsx)(n.em,{children:"newitem predicate sequence"})," &key ",(0,i.jsx)(n.em,{children:"from-end start end count key"})]}),"\n",(0,i.jsx)(n.p,{children:"\u2192 result-sequence"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"nsubstitute"})," ",(0,i.jsx)(n.em,{children:"newitem olditem sequence"})," &key ",(0,i.jsx)(n.em,{children:"from-end test test-not start end count key \u2192 sequence"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"substitute, substitute-if, substitute-if-not,"})," ",(0,i.jsx)(n.em,{children:". . ."})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"nsubstitute-if"})," ",(0,i.jsx)(n.em,{children:"newitem predicate sequence"})," &key ",(0,i.jsx)(n.em,{children:"from-end start end count key"})]}),"\n",(0,i.jsx)(n.p,{children:"\u2192 sequence"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"nsubstitute-if-not"})," ",(0,i.jsx)(n.em,{children:"newitem predicate sequence"})," &key ",(0,i.jsx)(n.em,{children:"from-end start end count key"})]}),"\n",(0,i.jsx)(n.p,{children:"\u2192 sequence"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"newitem"}),"\u2014an ",(0,i.jsx)(r,{term:"object",children:(0,i.jsx)("i",{children:"object"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"olditem"}),"\u2014an ",(0,i.jsx)(r,{term:"object",children:(0,i.jsx)("i",{children:"object"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"sequence"}),"\u2014a ",(0,i.jsx)(r,{styled:!0,term:"proper sequence",children:(0,i.jsx)("i",{children:"proper sequence"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{term:"predicate",children:(0,i.jsx)("i",{children:"predicate"})}),"\u2014a ",(0,i.jsx)(r,{term:"designator",children:(0,i.jsx)("i",{children:"designator"})})," for a ",(0,i.jsx)(r,{term:"function",children:(0,i.jsx)("i",{children:"function"})})," of one ",(0,i.jsx)(r,{term:"argument",children:(0,i.jsx)("i",{children:"argument"})})," that returns a ",(0,i.jsx)(r,{styled:!0,term:"generalized boolean",children:(0,i.jsx)("i",{children:"generalized boolean"})}),". ",(0,i.jsx)(n.em,{children:"from-end"}),"\u2014a ",(0,i.jsx)(r,{styled:!0,term:"generalized boolean",children:(0,i.jsx)("i",{children:"generalized boolean"})}),". The default is ",(0,i.jsx)(r,{term:"false",children:(0,i.jsx)("i",{children:"false"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"test"}),"\u2014a ",(0,i.jsx)(r,{term:"designator",children:(0,i.jsx)("i",{children:"designator"})})," for a ",(0,i.jsx)(r,{term:"function",children:(0,i.jsx)("i",{children:"function"})})," of two ",(0,i.jsx)(r,{term:"argument",children:(0,i.jsx)("i",{children:"arguments"})})," that returns a ",(0,i.jsx)(r,{styled:!0,term:"generalized boolean",children:(0,i.jsx)("i",{children:"generalized boolean"})}),". ",(0,i.jsxs)(n.em,{children:["test-not",(0,i.jsx)(r,{term:"t",children:(0,i.jsx)("i",{children:"\u2014a "})}),"designator"]})," for a ",(0,i.jsx)(r,{term:"function",children:(0,i.jsx)("i",{children:"function"})})," of two ",(0,i.jsx)(r,{term:"argument",children:(0,i.jsx)("i",{children:"arguments"})})," that returns a ",(0,i.jsx)(r,{styled:!0,term:"generalized boolean",children:(0,i.jsx)("i",{children:"generalized boolean"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"start"}),", ",(0,i.jsx)(n.em,{children:"end"}),"\u2014",(0,i.jsx)(r,{styled:!0,term:"bounding index designator",children:(0,i.jsx)("i",{children:"bounding index designators"})})," of ",(0,i.jsx)(n.em,{children:"sequence"}),". The defaults for ",(0,i.jsx)(n.em,{children:"start"})," and ",(0,i.jsx)(n.em,{children:"end"})," are 0 and ",(0,i.jsx)(s,{term:"nil",children:(0,i.jsx)("b",{children:"nil"})}),", respectively."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"count"}),"\u2014an ",(0,i.jsx)(n.em,{children:"integer"})," or ",(0,i.jsx)(s,{term:"nil",children:(0,i.jsx)("b",{children:"nil"})}),". The default is ",(0,i.jsx)(s,{term:"nil",children:(0,i.jsx)("b",{children:"nil"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{term:"key",children:(0,i.jsx)("i",{children:"key"})}),"\u2014a ",(0,i.jsx)(r,{term:"designator",children:(0,i.jsx)("i",{children:"designator"})})," for a ",(0,i.jsx)(r,{term:"function",children:(0,i.jsx)("i",{children:"function"})})," of one argument, or ",(0,i.jsx)(s,{term:"nil",children:(0,i.jsx)("b",{children:"nil"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"result-sequence"}),"\u2014a ",(0,i.jsx)(n.em,{children:"sequence"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"substitute"}),", ",(0,i.jsx)(n.strong,{children:"substitute-if"}),", and ",(0,i.jsx)(n.strong,{children:"substitute-if-not"})," return a copy of ",(0,i.jsx)(n.em,{children:"sequence"})," in which each ",(0,i.jsx)(r,{term:"element",children:(0,i.jsx)("i",{children:"element"})})," that ",(0,i.jsx)(n.em,{children:"satisfies the test"})," has been replaced with ",(0,i.jsx)(n.em,{children:"newitem"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"nsubstitute"}),", ",(0,i.jsx)(n.strong,{children:"nsubstitute-if"}),", and ",(0,i.jsx)(n.strong,{children:"nsubstitute-if-not"})," are like ",(0,i.jsx)(n.strong,{children:"substitute"}),", ",(0,i.jsx)(n.strong,{children:"substitute-if"}),", and ",(0,i.jsx)(n.strong,{children:"substitute-if-not"})," respectively, but they may modify ",(0,i.jsx)(n.em,{children:"sequence"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.em,{children:"sequence"})," is a ",(0,i.jsx)(r,{term:"vector",children:(0,i.jsx)("i",{children:"vector"})})," , the result is a ",(0,i.jsx)(r,{term:"vector",children:(0,i.jsx)("i",{children:"vector"})})," that has the same ",(0,i.jsx)(r,{styled:!0,term:"actual array element type",children:(0,i.jsx)("i",{children:"actual array element type"})})," as ",(0,i.jsx)(n.em,{children:"sequence"}),". If ",(0,i.jsx)(n.em,{children:"sequence"})," is a ",(0,i.jsx)(r,{term:"list",children:(0,i.jsx)("i",{children:"list"})}),", the result is a ",(0,i.jsx)(r,{term:"list",children:(0,i.jsx)("i",{children:"list"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Count"}),", if supplied, limits the number of elements altered; if more than ",(0,i.jsx)(n.em,{children:"count elements satisfy the test"}),", then of these ",(0,i.jsx)(r,{term:"element",children:(0,i.jsx)("i",{children:"elements"})})," only the leftmost or rightmost, depending on ",(0,i.jsx)(n.em,{children:"from-end"}),", are replaced, as many as specified by ",(0,i.jsx)(n.em,{children:"count"}),". If ",(0,i.jsx)(n.em,{children:"count"})," is supplied and negative, the behavior is as if zero had been supplied instead. If ",(0,i.jsx)(n.em,{children:"count"})," is ",(0,i.jsx)(s,{term:"nil",children:(0,i.jsx)("b",{children:"nil"})}),", all matching items are affected."]}),"\n",(0,i.jsxs)(n.p,{children:["Supplying a ",(0,i.jsx)(n.em,{children:"from-end"})," of ",(0,i.jsx)(r,{term:"true",children:(0,i.jsx)("i",{children:"true"})})," matters only when the ",(0,i.jsx)(n.em,{children:"count"})," is provided (and ",(0,i.jsx)(r,{term:"non-nil",children:(0,i.jsx)("i",{children:"non-nil"})}),"); in that case, only the rightmost ",(0,i.jsx)(n.em,{children:"count elements satisfying the test"})," are removed (instead of the leftmost)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(r,{term:"predicate",children:(0,i.jsx)("i",{children:"predicate"})}),", ",(0,i.jsx)(n.em,{children:"test"}),", and ",(0,i.jsx)(n.em,{children:"test-not"})," might be called more than once for each ",(0,i.jsx)(n.em,{children:"sequence element"}),", and their side effects can happen in any order."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"substitute, substitute-if, substitute-if-not,"})," ",(0,i.jsx)(n.em,{children:". . ."})]}),"\n",(0,i.jsxs)(n.p,{children:["The result of all these functions is a ",(0,i.jsx)(n.em,{children:"sequence"})," of the same ",(0,i.jsx)(r,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," as ",(0,i.jsx)(n.em,{children:"sequence"})," that has the same elements except that those in the subsequence ",(0,i.jsx)(r,{term:"bounded",children:(0,i.jsx)("i",{children:"bounded"})})," by ",(0,i.jsx)(n.em,{children:"start"})," and ",(0,i.jsx)(n.em,{children:"end"})," and ",(0,i.jsx)(n.em,{children:"satisfying the test"})," have been replaced by ",(0,i.jsx)(n.em,{children:"newitem"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"substitute"}),", ",(0,i.jsx)(n.strong,{children:"substitute-if"}),", and ",(0,i.jsx)(n.strong,{children:"substitute-if-not"})," return a ",(0,i.jsx)(n.em,{children:"sequence"})," which can share with ",(0,i.jsx)(n.em,{children:"sequence"})," or may be ",(0,i.jsx)(r,{term:"identical",children:(0,i.jsx)("i",{children:"identical"})})," to the input ",(0,i.jsx)(n.em,{children:"sequence"})," if no elements need to be changed."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"nsubstitute"})," and ",(0,i.jsx)(n.strong,{children:"nsubstitute-if"})," are required to ",(0,i.jsx)(s,{term:"setf",children:(0,i.jsx)("b",{children:"setf"})})," any ",(0,i.jsx)(s,{term:"car",children:(0,i.jsx)("b",{children:"car"})})," (if ",(0,i.jsx)(n.em,{children:"sequence"})," is a ",(0,i.jsx)(r,{term:"list",children:(0,i.jsx)("i",{children:"list"})}),") or ",(0,i.jsx)(s,{term:"aref",children:(0,i.jsx)("b",{children:"aref"})})," (if ",(0,i.jsx)(n.em,{children:"sequence"})," is a ",(0,i.jsx)(r,{term:"vector",children:(0,i.jsx)("i",{children:"vector"})})," ) of ",(0,i.jsx)(n.em,{children:"sequence"})," that is required to be replaced with ",(0,i.jsx)(n.em,{children:"newitem"}),". If ",(0,i.jsx)(n.em,{children:"sequence"})," is a ",(0,i.jsx)(r,{term:"list",children:(0,i.jsx)("i",{children:"list"})}),", none of the ",(0,i.jsx)(r,{term:"cdr",children:(0,i.jsx)("i",{children:"cdrs"})})," of the top-level ",(0,i.jsx)(r,{term:"list",children:(0,i.jsx)("i",{children:"list"})})," can be modified."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:'(substitute #\\. #\\SPACE "0 2 4 6") \u2192 "0.2.4.6" \n(substitute 9 4 \u2019(1 2 4 1 3 4 5)) \u2192 (1 2 9 1 3 9 5) \n(substitute 9 4 \u2019(1 2 4 1 3 4 5) :count 1) \u2192 (1 2 9 1 3 4 5) \n(substitute 9 4 \u2019(1 2 4 1 3 4 5) :count 1 :from-end t) \n\u2192 (1 2 4 1 3 9 5) \n(substitute 9 3 \u2019(1 2 4 1 3 4 5) :test #\u2019>) \u2192 (9 9 4 9 3 4 5) \n(substitute-if 0 #\u2019evenp \u2019((1) (2) (3) (4)) :start 2 :key #\u2019car) \n\u2192 ((1) (2) (3) 0) \n(substitute-if 9 #\u2019oddp \u2019(1 2 4 1 3 4 5)) \u2192 (9 2 4 9 9 4 9) \n(substitute-if 9 #\u2019evenp \u2019(1 2 4 1 3 4 5) :count 1 :from-end t) \n\u2192 (1 2 4 1 3 9 5) \n(setq some-things (list \u2019a \u2019car \u2019b \u2019cdr \u2019c)) \u2192 (A CAR B CDR C) \n(nsubstitute-if "function was here" #\u2019fboundp some-things \n\t\t:count 1 :from-end t) \u2192 (A CAR B "function was here" C) \nsome-things \u2192 (A CAR B "function was here" C) \n(setq alpha-tester (copy-seq "ab ")) \u2192 "ab " \n(nsubstitute-if-not #\\z #\u2019alpha-char-p alpha-tester) \u2192 "abz" \nalpha-tester \u2192 "abz" \n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"nsubstitute"}),", ",(0,i.jsx)(n.strong,{children:"nsubstitute-if"}),", and ",(0,i.jsx)(n.strong,{children:"nsubstitute-if-not"})," modify ",(0,i.jsx)(n.em,{children:"sequence"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,i.jsxs)(n.p,{children:["Should be prepared to signal an error of ",(0,i.jsx)(r,{term:"type",children:(0,i.jsx)("i",{children:"type"})})," ",(0,i.jsx)(s,{term:"type-error",children:(0,i.jsx)("b",{children:"type-error"})})," if ",(0,i.jsx)(n.em,{children:"sequence"})," is not a ",(0,i.jsx)(r,{styled:!0,term:"proper sequence",children:(0,i.jsx)("i",{children:"proper sequence"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(s,{term:"subst",children:(0,i.jsx)("b",{children:"subst"})}),", ",(0,i.jsx)(s,{term:"nsubst",children:(0,i.jsx)("b",{children:"nsubst"})}),", Section 3.2.1 (Compiler Terminology), Section 3.6 (Traversal Rules and Side Effects)"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.em,{children:"sequence"})," is a ",(0,i.jsx)(r,{term:"vector",children:(0,i.jsx)("i",{children:"vector"})})," , the result might or might not be simple, and might or might not be ",(0,i.jsx)(r,{term:"identical",children:(0,i.jsx)("i",{children:"identical"})})]}),"\n",(0,i.jsxs)(n.p,{children:["to ",(0,i.jsx)(n.em,{children:"sequence"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",":test-not"," ",(0,i.jsx)(r,{term:"argument",children:(0,i.jsx)("i",{children:"argument"})})," is deprecated."]}),"\n",(0,i.jsxs)(n.p,{children:["The functions ",(0,i.jsx)(n.strong,{children:"substitute-if-not"})," and ",(0,i.jsx)(n.strong,{children:"nsubstitute-if-not"})," are deprecated."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"nsubstitute"})," and ",(0,i.jsx)(n.strong,{children:"nsubstitute-if"})," can be used in for-effect-only positions in code."]}),"\n",(0,i.jsxs)(n.p,{children:["Because the side-effecting variants (",(0,i.jsx)(n.em,{children:"e.g."}),", ",(0,i.jsx)(n.strong,{children:"nsubstitute"}),") potentially change the path that is being traversed, their effects in the presence of shared or circular structure may vary in surprising ways when compared to their non-side-effecting alternatives. To see this, consider the following side-effect behavior, which might be exhibited by some implementations:"]}),"\n",(0,i.jsx)(n.p,{children:"(defun test-it (fn)"}),"\n",(0,i.jsx)(n.p,{children:"(let ((x (cons \u2019b nil)))"}),"\n",(0,i.jsx)(n.p,{children:"(rplacd x x)"}),"\n",(0,i.jsxs)(n.p,{children:["(funcall fn \u2019a \u2019b x ",":count"," 1)))"]}),"\n",(0,i.jsx)(n.p,{children:"(test-it #\u2019substitute) \u2192 (A . #1=(B . #1#))"}),"\n",(0,i.jsx)(n.p,{children:"(test-it #\u2019nsubstitute) \u2192 (A . #1#)"})]})}function c(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}function d(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const l={title:"replace"},h="replace",o={id:"chap-17/bh-d-dictionary/replace_function",title:"replace",description:"Expanded Reference: replace",source:"@site/docs/chap-17/bh-d-dictionary/replace_function.md",sourceDirName:"chap-17/bh-d-dictionary",slug:"/chap-17/bh-d-dictionary/replace_function",permalink:"/cl-language-reference/chap-17/bh-d-dictionary/replace_function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/chap-17/bh-d-dictionary/replace_function.md",tags:[],version:"current",lastUpdatedBy:"daninus14",frontMatter:{title:"replace"},sidebar:"tutorialSidebar",previous:{title:"remove, remove-if, remove-if-not, delete, delete-if, delete-if-not",permalink:"/cl-language-reference/chap-17/bh-d-dictionary/remove_remove-if_remove-if-not_delete_delete-if_delete-if-not_function"},next:{title:"reverse, nreverse",permalink:"/cl-language-reference/chap-17/bh-d-dictionary/reverse_nreverse_function"}},a={},x=[{value:"Expanded Reference: replace",id:"expanded-reference-replace",level:2}];function j(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"replace",children:"replace"}),"\n","\n","\n",(0,i.jsx)(c,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-replace",children:"Expanded Reference: replace"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(replace )\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(j,{...e})}):j(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>d,a:()=>c});var i=s(67294);const t={},r=i.createContext(t);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);