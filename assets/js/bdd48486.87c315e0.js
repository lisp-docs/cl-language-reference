"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[36122],{31108:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var s=i(85893),r=i(11151);function t(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"open"})," ",(0,s.jsx)(n.em,{children:"Function"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"open"})," ",(0,s.jsx)(n.em,{children:"filespec"})," &key ",(0,s.jsx)(n.em,{children:"direction element-type"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"if-exists if-does-not-exist external-format"})}),"\n",(0,s.jsx)(n.p,{children:"\u2192 stream"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"filespec"}),"\u2014a ",(0,s.jsx)(n.em,{children:"pathname designator"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"direction"}),"\u2014one of ",":input",", ",":output",", ",":io",", or ",":probe",". The default is ",":input","."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"element-type"}),"\u2014a ",(0,s.jsx)(n.em,{children:"type specifier"})," for ",(0,s.jsx)(n.em,{children:"recognizable subtype"})," of ",(0,s.jsx)(n.strong,{children:"character"}),"; or a ",(0,s.jsx)(n.em,{children:"type specifier"})," for a ",(0,s.jsx)(n.em,{children:"finite recognizable subtype"})," of ",(0,s.jsx)(n.em,{children:"integer"})," ; or one of the ",(0,s.jsx)(n.em,{children:"symbols"})," ",(0,s.jsx)(n.strong,{children:"signed-byte"}),", ",(0,s.jsx)(n.strong,{children:"unsigned-byte"}),", or ",":default",". The default is ",(0,s.jsx)(n.strong,{children:"character"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"if-exists"}),"\u2014one of ",":error",", ",":new-version",", ",":rename",", ",":rename-and-delete",", ",":overwrite",", ",":append",", ",":supersede",", or ",(0,s.jsx)(n.strong,{children:"nil"}),". The default is ",":new-version"," if the version component of ",(0,s.jsx)(n.em,{children:"filespec"})," is ",":newest",", or ",":error"," otherwise."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"if-does-not-exist"}),"\u2014one of ",":error",", ",":create",", or ",(0,s.jsx)(n.strong,{children:"nil"}),". The default is ",":error"," if ",(0,s.jsx)(n.em,{children:"direction"})," is ",":input"," or ",(0,s.jsx)(n.em,{children:"if-exists"})," is ",":overwrite"," or ",":append","; ",":create"," if ",(0,s.jsx)(n.em,{children:"direction"})," is ",":output"," or ",":io",", and ",(0,s.jsx)(n.em,{children:"if-exists"})," is neither ",":overwrite"," nor ",":append","; or ",(0,s.jsx)(n.strong,{children:"nil"})," when ",(0,s.jsx)(n.em,{children:"direction"})," is ",":probe","."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"external-format"}),"\u2014an ",(0,s.jsx)(n.em,{children:"external file format designator"})," . The default is ",":default","."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"stream"}),"\u2014a ",(0,s.jsx)(n.em,{children:"file stream"})," or ",(0,s.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"open"})," creates, opens, and returns a ",(0,s.jsx)(n.em,{children:"file stream"})," that is connected to the file specified by ",(0,s.jsx)(n.em,{children:"filespec"}),". ",(0,s.jsx)(n.em,{children:"Filespec"})," is the name of the file to be opened. If the ",(0,s.jsx)(n.em,{children:"filespec designator"})," is a ",(0,s.jsx)(n.em,{children:"stream"}),", that ",(0,s.jsx)(n.em,{children:"stream"})," is not closed first or otherwise affected."]}),"\n",(0,s.jsxs)(n.p,{children:["The keyword arguments to ",(0,s.jsx)(n.strong,{children:"open"})," specify the characteristics of the ",(0,s.jsx)(n.em,{children:"file stream"})," that is returned, and how to handle errors."]}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.em,{children:"direction"})," is ",":input"," or ",":probe",", or if ",(0,s.jsx)(n.em,{children:"if-exists"})," is not ",":new-version"," and the version component of the ",(0,s.jsx)(n.em,{children:"filespec"})," is ",":newest",", then the file opened is that file already existing in the file system that has a version greater than that of any other file in the file system whose other pathname components are the same as those of ",(0,s.jsx)(n.em,{children:"filespec"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["An implementation is required to recognize all of the ",(0,s.jsx)(n.strong,{children:"open"})," keyword options and to do something reasonable in the context of the host operating system. For example, if a file system does not support distinct file versions and does not distinguish the notions of deletion and expunging, ",":new-version"," might be treated the same as ",":rename"," or ",":supersede",", and ",":rename-and-delete"," might be treated the same as ",":supersede","."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"open"})}),"\n",(0,s.jsx)(n.p,{children:":direction"}),"\n",(0,s.jsxs)(n.p,{children:["These are the possible values for ",(0,s.jsx)(n.em,{children:"direction"}),", and how they affect the nature of the ",(0,s.jsx)(n.em,{children:"stream"})," that is created:"]}),"\n",(0,s.jsx)(n.p,{children:":input"}),"\n",(0,s.jsxs)(n.p,{children:["Causes the creation of an ",(0,s.jsx)(n.em,{children:"input file stream"}),"."]}),"\n",(0,s.jsx)(n.p,{children:":output"}),"\n",(0,s.jsxs)(n.p,{children:["Causes the creation of an ",(0,s.jsx)(n.em,{children:"output file stream"}),"."]}),"\n",(0,s.jsx)(n.p,{children:":io"}),"\n",(0,s.jsxs)(n.p,{children:["Causes the creation of a ",(0,s.jsx)(n.em,{children:"bidirectional file stream"}),"."]}),"\n",(0,s.jsx)(n.p,{children:":probe"}),"\n",(0,s.jsxs)(n.p,{children:["Causes the creation of a \u201cno-directional\u201d ",(0,s.jsx)(n.em,{children:"file stream"}),"; in effect, the ",(0,s.jsx)(n.em,{children:"file stream"})," is"]}),"\n",(0,s.jsxs)(n.p,{children:["created and then closed prior to being returned by ",(0,s.jsx)(n.strong,{children:"open"}),"."]}),"\n",(0,s.jsx)(n.p,{children:":element-type"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"element-type"})," specifies the unit of transaction for the ",(0,s.jsx)(n.em,{children:"file stream"}),". If it is ",":default",", the unit is determined by ",(0,s.jsx)(n.em,{children:"file system"}),", possibly based on the ",(0,s.jsx)(n.em,{children:"file"}),"."]}),"\n",(0,s.jsx)(n.p,{children:":if-exists"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"if-exists"})," specifies the action to be taken if ",(0,s.jsx)(n.em,{children:"direction"})," is ",":output"," or ",":io"," and a file of the name ",(0,s.jsx)(n.em,{children:"filespec"})," already exists. If ",(0,s.jsx)(n.em,{children:"direction"})," is ",":input",", not supplied, or ",":probe",", ",(0,s.jsx)(n.em,{children:"if-exists"})," is ignored. These are the results of ",(0,s.jsx)(n.strong,{children:"open"})," as modified by ",(0,s.jsx)(n.em,{children:"if-exists"}),":"]}),"\n",(0,s.jsx)(n.p,{children:":error"}),"\n",(0,s.jsxs)(n.p,{children:["An error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"file-error"})," is signaled."]}),"\n",(0,s.jsx)(n.p,{children:":new-version"}),"\n",(0,s.jsx)(n.p,{children:"A new file is created with a larger version number."}),"\n",(0,s.jsx)(n.p,{children:":rename"}),"\n",(0,s.jsx)(n.p,{children:"The existing file is renamed to some other name and then a new file is created."}),"\n",(0,s.jsx)(n.p,{children:":rename-and-delete"}),"\n",(0,s.jsx)(n.p,{children:"The existing file is renamed to some other name, then it is deleted but not"}),"\n",(0,s.jsx)(n.p,{children:"expunged, and then a new file is created."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"open"})}),"\n",(0,s.jsx)(n.p,{children:":overwrite"}),"\n",(0,s.jsxs)(n.p,{children:["Output operations on the ",(0,s.jsx)(n.em,{children:"stream"})," destructively modify the existing file. If ",(0,s.jsx)(n.em,{children:"direction"})]}),"\n",(0,s.jsxs)(n.p,{children:["is ",":io"," the file is opened in a bidirectional mode that allows both reading and"]}),"\n",(0,s.jsx)(n.p,{children:"writing. The file pointer is initially positioned at the beginning of the file; however,"}),"\n",(0,s.jsx)(n.p,{children:"the file is not truncated back to length zero when it is opened."}),"\n",(0,s.jsx)(n.p,{children:":append"}),"\n",(0,s.jsxs)(n.p,{children:["Output operations on the ",(0,s.jsx)(n.em,{children:"stream"})," destructively modify the existing file. The file"]}),"\n",(0,s.jsx)(n.p,{children:"pointer is initially positioned at the end of the file."}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.em,{children:"direction"})," is ",":io",", the file is opened in a bidirectional mode that allows both"]}),"\n",(0,s.jsx)(n.p,{children:"reading and writing."}),"\n",(0,s.jsx)(n.p,{children:":supersede"}),"\n",(0,s.jsx)(n.p,{children:"The existing file is superseded; that is, a new file with the same name as the old"}),"\n",(0,s.jsx)(n.p,{children:"one is created. If possible, the implementation should not destroy the old file until"}),"\n",(0,s.jsxs)(n.p,{children:["the new ",(0,s.jsx)(n.em,{children:"stream"})," is closed."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"nil"})}),"\n",(0,s.jsxs)(n.p,{children:["No file or ",(0,s.jsx)(n.em,{children:"stream"})," is created; instead, ",(0,s.jsx)(n.strong,{children:"nil"})," is returned to indicate failure."]}),"\n",(0,s.jsx)(n.p,{children:":if-does-not-exist"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"if-does-not-exist"})," specifies the action to be taken if a file of name ",(0,s.jsx)(n.em,{children:"filespec"})," does not already exist. These are the results of ",(0,s.jsx)(n.strong,{children:"open"})," as modified by ",(0,s.jsx)(n.em,{children:"if-does-not-exist"}),":"]}),"\n",(0,s.jsx)(n.p,{children:":error"}),"\n",(0,s.jsxs)(n.p,{children:["An error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"file-error"})," is signaled."]}),"\n",(0,s.jsx)(n.p,{children:":create"}),"\n",(0,s.jsx)(n.p,{children:"An empty file is created. Processing continues as if the file had already existed but"}),"\n",(0,s.jsxs)(n.p,{children:["no processing as directed by ",(0,s.jsx)(n.em,{children:"if-exists"})," is performed."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"nil"})}),"\n",(0,s.jsxs)(n.p,{children:["No file or ",(0,s.jsx)(n.em,{children:"stream"})," is created; instead, ",(0,s.jsx)(n.strong,{children:"nil"})," is returned to indicate failure."]}),"\n",(0,s.jsx)(n.p,{children:":external-format"}),"\n",(0,s.jsxs)(n.p,{children:["This option selects an ",(0,s.jsx)(n.em,{children:"external file format"})," for the ",(0,s.jsx)(n.em,{children:"file"}),": The only ",(0,s.jsx)(n.em,{children:"standardized"})," value for this option is ",":default",", although ",(0,s.jsx)(n.em,{children:"implementations"})," are permitted to define additional ",(0,s.jsx)(n.em,{children:"external file formats"})," and ",(0,s.jsx)(n.em,{children:"implementation-dependent"})," values returned by ",(0,s.jsx)(n.strong,{children:"stream-external-format"})," can also be used by ",(0,s.jsx)(n.em,{children:"conforming programs"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"open"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"external-format"})," is meaningful for any kind of ",(0,s.jsx)(n.em,{children:"file stream"})," whose ",(0,s.jsx)(n.em,{children:"element type"})," is a ",(0,s.jsx)(n.em,{children:"subtype"})," of ",(0,s.jsx)(n.em,{children:"character"})," . This option is ignored for ",(0,s.jsx)(n.em,{children:"streams"})," for which it is not meaningful; however, ",(0,s.jsx)(n.em,{children:"implementations"})," may define other ",(0,s.jsx)(n.em,{children:"element types"})," for which it is meaningful. The consequences are unspecified if a ",(0,s.jsx)(n.em,{children:"character"})," is written that cannot be represented by the given ",(0,s.jsx)(n.em,{children:"external file format"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When a file is opened, a ",(0,s.jsx)(n.em,{children:"file stream"})," is constructed to serve as the file system\u2019s ambassador to the Lisp environment; operations on the ",(0,s.jsx)(n.em,{children:"file stream"})," are reflected by operations on the file in the file system."]}),"\n",(0,s.jsxs)(n.p,{children:["A file can be deleted, renamed, or destructively modified by ",(0,s.jsx)(n.strong,{children:"open"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For information about opening relative pathnames, see Section 19.2.3 (Merging Pathnames). ",(0,s.jsx)(n.strong,{children:"Examples:"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:' \n\n(open *filespec* :direction :probe) \u2192 #\\<Closed Probe File Stream...\\> \n\n(setq q (merge-pathnames (user-homedir-pathname) "test")) \n\n\u2192 #<PATHNAME :HOST NIL :DEVICE *device-name* :DIRECTORY *directory-name* \n\n:NAME "test" :TYPE NIL :VERSION :NEWEST> \n\n(open *filespec* :if-does-not-exist :create) \u2192 #<Input File Stream...> \n\n(setq s (open *filespec* :direction :probe)) \u2192 #\\<Closed Probe File Stream...\\> \n\n(truename s) \u2192 #<PATHNAME :HOST NIL :DEVICE *device-name* :DIRECTORY \n\n*directory-name* :NAME *filespec* :TYPE *extension* :VERSION 1> \n\n(open s :direction :output :if-exists nil) \u2192 NIL \n\n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,s.jsxs)(n.p,{children:["The nature and state of the host computer\u2019s ",(0,s.jsx)(n.em,{children:"file system"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.em,{children:"if-exists"})," is ",":error",", (subject to the constraints on the meaning of ",(0,s.jsx)(n.em,{children:"if-exists"})," listed above), an error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"file-error"})," is signaled."]}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.em,{children:"if-does-not-exist"})," is ",":error"," (subject to the constraints on the meaning of ",(0,s.jsx)(n.em,{children:"if-does-not-exist"})," listed above), an error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"file-error"})," is signaled."]}),"\n",(0,s.jsxs)(n.p,{children:["If it is impossible for an implementation to handle some option in a manner close to what is specified here, an error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"error"})," might be signaled."]}),"\n",(0,s.jsxs)(n.p,{children:["An error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"file-error"})," is signaled if (wild-pathname-p ",(0,s.jsx)(n.em,{children:"filespec"}),") returns true."]}),"\n",(0,s.jsxs)(n.p,{children:["An error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"error"})," is signaled if the ",(0,s.jsx)(n.em,{children:"external-format"})," is not understood by the ",(0,s.jsx)(n.em,{children:"implementation"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The various ",(0,s.jsx)(n.em,{children:"file systems"})," in existence today have widely differing capabilities, and some aspects of the ",(0,s.jsx)(n.em,{children:"file system"})," are beyond the scope of this specification to define. A given ",(0,s.jsx)(n.em,{children:"implementation"})," might not be able to support all of these options in exactly the manner stated. An ",(0,s.jsx)(n.em,{children:"implementation"})," is required to recognize all of these option keywords and to try to do something \u201creasonable\u201d in the context of the host ",(0,s.jsx)(n.em,{children:"file system"}),". Where necessary to accomodate the ",(0,s.jsx)(n.em,{children:"file system"}),", an ",(0,s.jsx)(n.em,{children:"implementation"})]}),"\n",(0,s.jsxs)(n.p,{children:["deviate slightly from the semantics specified here without being disqualified for consideration as a ",(0,s.jsx)(n.em,{children:"conforming implementation"}),". If it is utterly impossible for an ",(0,s.jsx)(n.em,{children:"implementation"})," to handle some option in a manner similar to what is specified here, it may simply signal an error."]}),"\n",(0,s.jsxs)(n.p,{children:["With regard to the ",":element-type"," option, if a ",(0,s.jsx)(n.em,{children:"type"})," is requested that is not supported by the ",(0,s.jsx)(n.em,{children:"file system"}),", a substitution of types such as that which goes on in ",(0,s.jsx)(n.em,{children:"upgrading"})," is permissible. As a minimum requirement, it should be the case that opening an ",(0,s.jsx)(n.em,{children:"output stream"})," to a ",(0,s.jsx)(n.em,{children:"file"})," in a given ",(0,s.jsx)(n.em,{children:"element type"})," and later opening an ",(0,s.jsx)(n.em,{children:"input stream"})," to the same ",(0,s.jsx)(n.em,{children:"file"})," in the same ",(0,s.jsx)(n.em,{children:"element type"})," should work compatibly."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"with-open-file"}),", ",(0,s.jsx)(n.strong,{children:"close"}),", ",(0,s.jsx)(n.strong,{children:"pathname"}),", ",(0,s.jsx)(n.strong,{children:"logical-pathname"}),", Section 19.2.3 (Merging Pathnames), Section 19.1.2 (Pathnames as Filenames)"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"open"})," does not automatically close the file when an abnormal exit occurs."]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.em,{children:"element-type"})," is a ",(0,s.jsx)(n.em,{children:"subtype"})," of ",(0,s.jsx)(n.strong,{children:"character"}),", ",(0,s.jsx)(n.strong,{children:"read-char"})," and/or ",(0,s.jsx)(n.strong,{children:"write-char"})," can be used on the resulting ",(0,s.jsx)(n.em,{children:"file stream"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.em,{children:"element-type"})," is a ",(0,s.jsx)(n.em,{children:"subtype"})," of ",(0,s.jsx)(n.em,{children:"integer"})," , ",(0,s.jsx)(n.strong,{children:"read-byte"})," and/or ",(0,s.jsx)(n.strong,{children:"write-byte"})," can be used on the resulting ",(0,s.jsx)(n.em,{children:"file stream"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.em,{children:"element-type"})," is ",":default",", the ",(0,s.jsx)(n.em,{children:"type"})," can be determined by using"]})]})}function o(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}const l={},d="open",c={id:"chap-21/cb-c-dictionary/open",title:"open",description:"Expanded Reference: open",source:"@site/docs/chap-21/cb-c-dictionary/open.md",sourceDirName:"chap-21/cb-c-dictionary",slug:"/chap-21/cb-c-dictionary/open",permalink:"/cl-language-reference/docs/chap-21/cb-c-dictionary/open",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-21/cb-c-dictionary/open.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"make-two-way-stream**, **two-way-stream-input-stream**, **two-way-stream-output-stream input-stream-p, output-stream-p",permalink:"/cl-language-reference/docs/chap-21/cb-c-dictionary/maketwowaystreamaa"},next:{title:"open**, **close**, **pathname**, **logical-pathname**, Section 19.1.2 (Pathnames as Filenames) **close",permalink:"/cl-language-reference/docs/chap-21/cb-c-dictionary/openaa"}},a={},h=[{value:"Expanded Reference: open",id:"expanded-reference-open",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"open",children:"open"}),"\n","\n","\n",(0,s.jsx)(o,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-open",children:"Expanded Reference: open"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(open )\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>o});var s=i(67294);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);