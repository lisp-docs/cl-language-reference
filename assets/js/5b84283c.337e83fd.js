"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[69101],{27913:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>g,contentTitle:()=>j,default:()=>b,frontMatter:()=>u,metadata:()=>f,toc:()=>y});var i=s(85893),t=s(11151);function r(e){return(0,i.jsx)(i.Fragment,{})}function c(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r()}function o(e){const n={em:"em",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["To ",(0,i.jsx)(n.strong,{children:"load"})," a ",(0,i.jsx)(n.em,{children:"file"})," is to treat its contents as ",(0,i.jsx)(n.em,{children:"code"})," and ",(0,i.jsx)(n.em,{children:"execute"})," that ",(0,i.jsx)(n.em,{children:"code"}),". The ",(0,i.jsx)(n.em,{children:"file"})," may contain ",(0,i.jsx)(n.em,{children:"source code"})," or ",(0,i.jsx)(n.em,{children:"compiled code"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.em,{children:"file"})," containing ",(0,i.jsx)(n.em,{children:"source code"})," is called a ",(0,i.jsx)(n.em,{children:"source file"}),". ",(0,i.jsx)(n.em,{children:"Loading"})," a ",(0,i.jsx)(n.em,{children:"source file"})," is accomplished essentially by sequentially ",(0,i.jsx)(n.em,{children:"reading"}),(0,i.jsx)("sub",{children:"2"})," the ",(0,i.jsx)(n.em,{children:"forms"})," in the file, ",(0,i.jsx)(n.em,{children:"evaluating"})," each immediately after it is ",(0,i.jsx)(n.em,{children:"read"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.em,{children:"file"})," containing ",(0,i.jsx)(n.em,{children:"compiled code"})," is called a ",(0,i.jsx)(n.em,{children:"compiled file"}),". ",(0,i.jsx)(n.em,{children:"Loading"})," a ",(0,i.jsx)(n.em,{children:"compiled file"})," is similar to ",(0,i.jsx)(n.em,{children:"loading"})," a ",(0,i.jsx)(n.em,{children:"source file"}),", except that the ",(0,i.jsx)(n.em,{children:"file"})," does not contain text but rather an ",(0,i.jsx)(n.em,{children:"implementation dependent"})," representation of pre-digested ",(0,i.jsx)(n.em,{children:"expressions"})," created by the ",(0,i.jsx)(n.em,{children:"compiler"})," . Often, a ",(0,i.jsx)(n.em,{children:"compiled file"})," can be ",(0,i.jsx)(n.em,{children:"loaded"})," more quickly than a ",(0,i.jsx)(n.em,{children:"source file"}),". See Section 3.2 (Compilation)."]}),"\n",(0,i.jsxs)(n.p,{children:["The way in which a ",(0,i.jsx)(n.em,{children:"source file"})," is distinguished from a ",(0,i.jsx)(n.em,{children:"compiled file"})," is ",(0,i.jsx)(n.em,{children:"implementation-dependent"}),"."]})]})}function l(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}function a(e){const n={em:"em",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.em,{children:"feature"})," is an aspect or attribute of Common Lisp, of the ",(0,i.jsx)(n.em,{children:"implementation"}),", or of the ",(0,i.jsx)(n.em,{children:"environment"}),". A ",(0,i.jsx)(n.em,{children:"feature"})," is identified by a ",(0,i.jsx)(n.em,{children:"symbol"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.em,{children:"feature"})," is said to be ",(0,i.jsx)(n.em,{children:"present"})," in a ",(0,i.jsx)(n.em,{children:"Lisp image"})," if and only if the ",(0,i.jsx)(n.em,{children:"symbol"})," naming it is an ",(0,i.jsx)(n.em,{children:"element"})," of the ",(0,i.jsx)(n.em,{children:"list"})," held by the ",(0,i.jsx)(n.em,{children:"variable"})," ",(0,i.jsx)(n.strong,{children:"*features*"}),", which is called the ",(0,i.jsx)(n.em,{children:"features list"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}function m(e){const n={em:"em",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Boolean combinations of ",(0,i.jsx)(n.em,{children:"features"}),", called ",(0,i.jsx)(n.em,{children:"feature expressions"}),", are used by the #+ and #- ",(0,i.jsx)(n.em,{children:"reader macros"})," in order to direct conditional ",(0,i.jsx)(n.em,{children:"reading"})," of ",(0,i.jsx)(n.em,{children:"expressions"})," by the ",(0,i.jsx)(n.em,{children:"Lisp reader"})," ."]}),"\n",(0,i.jsxs)(n.p,{children:["The rules for interpreting a ",(0,i.jsx)(n.em,{children:"feature expression"})," are as follows:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"feature"})}),"\n",(0,i.jsxs)(n.p,{children:["If a ",(0,i.jsx)(n.em,{children:"symbol"})," naming a ",(0,i.jsx)(n.em,{children:"feature"})," is used as a ",(0,i.jsx)(n.em,{children:"feature expression"}),", the ",(0,i.jsx)(n.em,{children:"feature expression"})," succeeds if that ",(0,i.jsx)(n.em,{children:"feature"})," is ",(0,i.jsx)(n.em,{children:"present"}),"; otherwise it fails."]}),"\n",(0,i.jsxs)(n.p,{children:["(not ",(0,i.jsx)(n.em,{children:"feature-conditional"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"not"})," ",(0,i.jsx)(n.em,{children:"feature expression"})," succeeds if its argument ",(0,i.jsx)(n.em,{children:"feature-conditional"})," fails; otherwise, it succeeds."]}),"\n",(0,i.jsxs)(n.p,{children:["(and ",(0,i.jsx)(n.em,{children:"{feature-conditional}"}),"*)"]}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.strong,{children:"and"})," ",(0,i.jsx)(n.em,{children:"feature expression"})," succeeds if all of its argument ",(0,i.jsx)(n.em,{children:"feature-conditionals"})," succeed; otherwise, it fails."]}),"\n",(0,i.jsx)(n.p,{children:"System"}),"\n",(0,i.jsxs)(n.p,{children:["(or ",(0,i.jsx)(n.em,{children:"{feature-conditional}"}),"*)"]}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.strong,{children:"or"})," ",(0,i.jsx)(n.em,{children:"feature expression"})," succeeds if any of its argument ",(0,i.jsx)(n.em,{children:"feature-conditionals"})," succeed; otherwise, it fails."]})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}function h(e){const n={code:"code",em:"em",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["For example, suppose that in ",(0,i.jsx)(n.em,{children:"implementation"})," A, the ",(0,i.jsx)(n.em,{children:"features"})," spice and perq are ",(0,i.jsx)(n.em,{children:"present"}),", but the ",(0,i.jsx)(n.em,{children:"feature"})," lispm is not ",(0,i.jsx)(n.em,{children:"present"}),"; in ",(0,i.jsx)(n.em,{children:"implementation"})," B, the feature lispm is ",(0,i.jsx)(n.em,{children:"present"}),", but the ",(0,i.jsx)(n.em,{children:"features"})," spice and perq are not ",(0,i.jsx)(n.em,{children:"present"}),"; and in ",(0,i.jsx)(n.em,{children:"implementation"})," C, none of the features spice, ",(0,i.jsx)(n.em,{children:"lispm"}),", or perq are ",(0,i.jsx)(n.em,{children:"present"}),". Figure 24\u20131 shows some sample ",(0,i.jsx)(n.em,{children:"expressions"}),", and how they would be ",(0,i.jsx)(n.em,{children:"read"})," ",(0,i.jsx)("sub",{children:"2"})," in these ",(0,i.jsx)(n.em,{children:"implementations"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",metastring:'title="Figure 24\u20131. Features examples"',children:'<p>(cons #+spice "Spice" #-spice "Lispm" x) </p><p>in *implementation* A *. . .* (CONS "Spice" X) </p><p>in *implementation* B *. . .* (CONS "Lispm" X) </p><p>in *implementation* C *. . .* (CONS "Lispm" X) </p><p>(cons #+spice "Spice" #+LispM "Lispm" x) </p><p>in *implementation* A *. . .* (CONS "Spice" X) </p><p>in *implementation* B *. . .* (CONS "Lispm" X) </p><p>in *implementation* C *. . .* (CONS X) </p><p>(setq a \u2019(1 2 #+perq 43 #+(not perq) 27)) </p><p>in *implementation* A *. . .* (SETQ A \u2019(1 2 43)) </p><p>in *implementation* B *. . .* (SETQ A \u2019(1 2 27)) </p><p>in *implementation* C *. . .* (SETQ A \u2019(1 2 27)) </p><p>(let ((a 3) #+(or spice lispm) (b 3)) (foo a)) </p><p>in *implementation* A *. . .* (LET ((A 3) (B 3)) (FOO A)) </p><p>in *implementation* B *. . .* (LET ((A 3) (B 3)) (FOO A)) </p><p>in *implementation* C *. . .* (LET ((A 3)) (FOO A)) </p><p>(cons #+Lispm "#+Spice" #+Spice "foo" #-(or Lispm Spice) 7 x) </p><p>in *implementation* A *. . .* (CONS "foo" X) </p><p>in *implementation* B *. . .* (CONS "#+Spice" X) </p><p>in *implementation* C *. . .* (CONS 7 X)</p>\n'})})]})}function x(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}const u={title:"24.1 System Construction Concepts"},j="24.1 System Construction Concepts",f={id:"chap-24/ce-b-system-construction-concepts",title:"24.1 System Construction Concepts",description:"24.1.1 Loading",source:"@site/docs/chap-24/ce-b-system-construction-concepts.md",sourceDirName:"chap-24",slug:"/chap-24/ce-b-system-construction-concepts",permalink:"/cl-language-reference/docs/chap-24/ce-b-system-construction-concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-24/ce-b-system-construction-concepts.md",tags:[],version:"current",frontMatter:{title:"24.1 System Construction Concepts"},sidebar:"tutorialSidebar",previous:{title:"24. System Construction",permalink:"/cl-language-reference/docs/category/24-system-construction"},next:{title:"24.2 System Construction Dictionary",permalink:"/cl-language-reference/docs/category/242-system-construction-dictionary"}},g={},y=[{value:"24.1.1 Loading",id:"2411-loading",level:2},{value:"24.1.2 Features",id:"2412-features",level:2},{value:"24.1.2.1 Feature Expressions",id:"24121-feature-expressions",level:3},{value:"24.1.2.1.1 Examples of Feature Expressions",id:"241211-examples-of-feature-expressions",level:4}];function C(e){const n={h1:"h1",h2:"h2",h3:"h3",h4:"h4",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"241-system-construction-concepts",children:"24.1 System Construction Concepts"}),"\n","\n",(0,i.jsx)(c,{}),"\n",(0,i.jsx)(n.h2,{id:"2411-loading",children:"24.1.1 Loading"}),"\n","\n",(0,i.jsx)(l,{}),"\n",(0,i.jsx)(n.h2,{id:"2412-features",children:"24.1.2 Features"}),"\n","\n",(0,i.jsx)(d,{}),"\n",(0,i.jsx)(n.h3,{id:"24121-feature-expressions",children:"24.1.2.1 Feature Expressions"}),"\n","\n",(0,i.jsx)(p,{}),"\n",(0,i.jsx)(n.h4,{id:"241211-examples-of-feature-expressions",children:"24.1.2.1.1 Examples of Feature Expressions"}),"\n","\n","\n",(0,i.jsx)(x,{})]})}function b(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(C,{...e})}):C(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>c});var i=s(67294);const t={},r=i.createContext(t);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);