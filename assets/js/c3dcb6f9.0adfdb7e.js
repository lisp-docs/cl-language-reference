"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[2290],{7458:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>h,toc:()=>l});var c=r(85893),a=r(11151);function t(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"unread-char"})," ",(0,c.jsx)(n.em,{children:"Function"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"unread-char"})," ",(0,c.jsx)(n.em,{children:"character"})," &optional ",(0,c.jsx)(n.em,{children:"input-stream \u2192"})," ",(0,c.jsx)(n.strong,{children:"nil"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.em,{children:"character"}),"\u2014a ",(0,c.jsx)(n.em,{children:"character"})," ; must be the last ",(0,c.jsx)(n.em,{children:"character"})," that was read from ",(0,c.jsx)(n.em,{children:"input-stream"}),". ",(0,c.jsx)(n.em,{children:"input-stream"}),"\u2014an ",(0,c.jsx)(n.em,{children:"input stream designator"})," . The default is ",(0,c.jsx)(n.em,{children:"standard input"}),"."]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Description:"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"unread-char"})," places ",(0,c.jsx)(n.em,{children:"character"})," back onto the front of ",(0,c.jsx)(n.em,{children:"input-stream"})," so that it will again be the next character in ",(0,c.jsx)(n.em,{children:"input-stream"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["When ",(0,c.jsx)(n.em,{children:"input-stream"})," is an ",(0,c.jsx)(n.em,{children:"echo stream"}),", no attempt is made to undo any echoing of the character that might already have been done on ",(0,c.jsx)(n.em,{children:"input-stream"}),". However, characters placed on ",(0,c.jsx)(n.em,{children:"input-stream"})," by ",(0,c.jsx)(n.strong,{children:"unread-char"})," are marked in such a way as to inhibit later re-echo by ",(0,c.jsx)(n.strong,{children:"read-char"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["It is an error to invoke ",(0,c.jsx)(n.strong,{children:"unread-char"})," twice consecutively on the same ",(0,c.jsx)(n.em,{children:"stream"})," without an intervening call to ",(0,c.jsx)(n.strong,{children:"read-char"})," (or some other input operation which implicitly reads characters) on that ",(0,c.jsx)(n.em,{children:"stream"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["Invoking ",(0,c.jsx)(n.strong,{children:"peek-char"})," or ",(0,c.jsx)(n.strong,{children:"read-char"})," commits all previous characters. The consequences of invoking ",(0,c.jsx)(n.strong,{children:"unread-char"})," on any character preceding that which is returned by ",(0,c.jsx)(n.strong,{children:"peek-char"})," (including those passed over by ",(0,c.jsx)(n.strong,{children:"peek-char"})," that has a ",(0,c.jsx)(n.em,{children:"non-nil peek-type"}),") are unspecified. In particular, the consequences of invoking ",(0,c.jsx)(n.strong,{children:"unread-char"})," after ",(0,c.jsx)(n.strong,{children:"peek-char"})," are unspecified."]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-lisp",children:'\n(with-input-from-string (is "0123") \n  (dotimes (i 6) \n    (let ((c (read-char is))) \n      (if (evenp i) (format t "&#126;&amp;&#126;S &#126;S&#126;%" i c) (unread-char c is))))) \n\u25b7 0 #\\0 \n\u25b7 2 #\\1 \n\u25b7 4 #\\2 \n\u2192 NIL \n\n\n\n\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"*standard-input*"}),", ",(0,c.jsx)(n.strong,{children:"*terminal-io*"}),"."]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"peek-char"}),", ",(0,c.jsx)(n.strong,{children:"read-char"}),", Section 21.1 (Stream Concepts)"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"unread-char"})," is intended to be an efficient mechanism for allowing the ",(0,c.jsx)(n.em,{children:"Lisp reader"})," and other parsers to perform one-character lookahead in ",(0,c.jsx)(n.em,{children:"input-stream"}),"."]})]})}function s(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(t,{...e})}):t(e)}const i={},d="unread-char",h={id:"chap-21/cb-c-dictionary/unreadchar",title:"unread-char",description:"Expanded Reference: unread-char",source:"@site/docs/chap-21/cb-c-dictionary/unreadchar.md",sourceDirName:"chap-21/cb-c-dictionary",slug:"/chap-21/cb-c-dictionary/unreadchar",permalink:"/cl-language-reference/docs/chap-21/cb-c-dictionary/unreadchar",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-21/cb-c-dictionary/unreadchar.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"two-way-stream",permalink:"/cl-language-reference/docs/chap-21/cb-c-dictionary/twowaystream"},next:{title:"with-input-from-string",permalink:"/cl-language-reference/docs/chap-21/cb-c-dictionary/withinputfromstring"}},o={},l=[{value:"Expanded Reference: unread-char",id:"expanded-reference-unread-char",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h1,{id:"unread-char",children:"unread-char"}),"\n","\n","\n",(0,c.jsx)(s,{}),"\n",(0,c.jsx)(n.h2,{id:"expanded-reference-unread-char",children:"Expanded Reference: unread-char"}),"\n",(0,c.jsx)(n.admonition,{type:"tip",children:(0,c.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-lisp",children:"(unread-char )\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(p,{...e})}):p(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>i,a:()=>s});var c=r(67294);const a={},t=c.createContext(a);function s(e){const n=c.useContext(t);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),c.createElement(t.Provider,{value:n},e.children)}}}]);