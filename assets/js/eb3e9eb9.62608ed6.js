"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[96337],{45028:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>c,toc:()=>h});var i=s(85893),r=s(11151);const t={title:"L",sidebar_position:108},l=void 0,c={id:"chap-26/l",title:"L",description:"L",source:"@site/docs/chap-26/l.md",sourceDirName:"chap-26",slug:"/chap-26/l",permalink:"/cl-language-reference/docs/chap-26/l",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-26/l.md",tags:[],version:"current",sidebarPosition:108,frontMatter:{title:"L",sidebar_position:108},sidebar:"tutorialSidebar",previous:{title:"K",permalink:"/cl-language-reference/docs/chap-26/k"},next:{title:"M",permalink:"/cl-language-reference/docs/chap-26/m"}},a={},h=[];function o(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"L"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"lambda combination"})," ",(0,i.jsx)(n.em,{children:"n. Trad."})," a ",(0,i.jsx)(n.em,{children:"lambda form"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"lambda expression"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"list"})," which can be used in place of a ",(0,i.jsx)(n.em,{children:"function name"})," in certain contexts to denote a ",(0,i.jsx)(n.em,{children:"function"})," by directly describing its behavior rather than indirectly by referring to the name of an ",(0,i.jsx)(n.em,{children:"established function"}),"; its name derives from the fact that its first element is the ",(0,i.jsx)(n.em,{children:"symbol"})," lambda. See ",(0,i.jsx)(n.strong,{children:"lambda"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"lambda form"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"form"})," that is a ",(0,i.jsx)(n.em,{children:"list"})," and that has a first element which is a ",(0,i.jsx)(n.em,{children:"lambda expression"})," representing a ",(0,i.jsx)(n.em,{children:"function"})," to be called on ",(0,i.jsx)(n.em,{children:"arguments"})," which are the result of ",(0,i.jsx)(n.em,{children:"evaluating"})," subsequent elements of the ",(0,i.jsx)(n.em,{children:"lambda form"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"lambda list"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"list"})," that specifies a set of ",(0,i.jsx)(n.em,{children:"parameters"})," (sometimes called ",(0,i.jsx)(n.em,{children:"lambda variables"}),") and a protocol for receiving ",(0,i.jsx)(n.em,{children:"values"})," for those ",(0,i.jsx)(n.em,{children:"parameters"}),"; that is, an ",(0,i.jsx)(n.em,{children:"ordinary lambda list"}),", an ",(0,i.jsx)(n.em,{children:"extended lambda list"}),", or a ",(0,i.jsx)(n.em,{children:"modified lambda list"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"lambda list keyword"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"symbol"})," whose ",(0,i.jsx)(n.em,{children:"name"})," begins with ",(0,i.jsx)(n.em,{children:"ampersand"})," and that is specially recognized in a ",(0,i.jsx)(n.em,{children:"lambda list"}),". Note that no ",(0,i.jsx)(n.em,{children:"standardized lambda list keyword"})," is in the KEYWORD ",(0,i.jsx)(n.em,{children:"package"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"lambda variable"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"formal parameter"})," , used to emphasize the ",(0,i.jsx)(n.em,{children:"variable"}),"\u2019s relation to the ",(0,i.jsx)(n.em,{children:"lambda list"})," that ",(0,i.jsx)(n.em,{children:"established"})," it."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"leaf"})," ",(0,i.jsx)(n.em,{children:"n."})," 1. an ",(0,i.jsx)(n.em,{children:"atom"})," in a ",(0,i.jsx)(n.em,{children:"tree"}),(0,i.jsx)("sub",{children:"1"}),". 2. a terminal node of a ",(0,i.jsx)(n.em,{children:"tree"}),(0,i.jsx)("sub",{children:"2"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"leap seconds"})," ",(0,i.jsx)(n.em,{children:"n."}),' additional one-second intervals of time that are occasionally inserted into the true calendar by official timekeepers as a correction similar to "leap years." All Common Lisp ',(0,i.jsx)(n.em,{children:"time"})," representations ignore ",(0,i.jsx)(n.em,{children:"leap seconds"}),"; every day is assumed to be exactly 86400 seconds long."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"left-parenthesis"})," ",(0,i.jsx)(n.em,{children:"n."})," the ",(0,i.jsx)(n.em,{children:"standard character"}),' "(", that is variously called "left parenthesis" or "open parenthesis" See Figure 2\u20135.']}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"length"})," ",(0,i.jsx)(n.em,{children:"n."})," (of a ",(0,i.jsx)(n.em,{children:"sequence"}),") the number of ",(0,i.jsx)(n.em,{children:"elements"})," in the ",(0,i.jsx)(n.em,{children:"sequence"}),". (Note that if the ",(0,i.jsx)(n.em,{children:"sequence"})," is a ",(0,i.jsx)(n.em,{children:"vector"})," with a ",(0,i.jsx)(n.em,{children:"fill pointer"})," , its ",(0,i.jsx)(n.em,{children:"length"})," is the same as the ",(0,i.jsx)(n.em,{children:"fill pointer"})," even though the total allocated size of the ",(0,i.jsx)(n.em,{children:"vector"})," might be larger.)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"lexical binding"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"binding"})," in a ",(0,i.jsx)(n.em,{children:"lexical environment"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"lexical closure"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"function"})," that, when invoked on ",(0,i.jsx)(n.em,{children:"arguments"}),", executes the body of a ",(0,i.jsx)(n.em,{children:"lambda expression"})," in the ",(0,i.jsx)(n.em,{children:"lexical environment"})," that was captured at the time of the creation of the ",(0,i.jsx)(n.em,{children:"lexical closure"}),", augmented by ",(0,i.jsx)(n.em,{children:"bindings"})," of the ",(0,i.jsx)(n.em,{children:"function"}),"\u2019s ",(0,i.jsx)(n.em,{children:"parameters"})," to the corresponding ",(0,i.jsx)(n.em,{children:"arguments"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"lexical environment"})," ",(0,i.jsx)(n.em,{children:"n."})," that part of the ",(0,i.jsx)(n.em,{children:"environment"})," that contains ",(0,i.jsx)(n.em,{children:"bindings"})," whose names have ",(0,i.jsx)(n.em,{children:"lexical scope"}),". A ",(0,i.jsx)(n.em,{children:"lexical environment"})," contains, among other things:  ordinary ",(0,i.jsx)(n.em,{children:"bindings"})," of ",(0,i.jsx)(n.em,{children:"variable names"})," to ",(0,i.jsx)(n.em,{children:"values"}),", lexically ",(0,i.jsx)(n.em,{children:"established bindings"})," of ",(0,i.jsx)(n.em,{children:"function names"})," to ",(0,i.jsx)(n.em,{children:"functions"}),", ",(0,i.jsx)(n.em,{children:"macros"}),", ",(0,i.jsx)(n.em,{children:"symbol macros"}),", ",(0,i.jsx)(n.em,{children:"blocks"}),", ",(0,i.jsx)(n.em,{children:"tags"}),", and ",(0,i.jsx)(n.em,{children:"local declarations"})," (see ",(0,i.jsx)(n.strong,{children:"declare"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"lexical scope"})," ",(0,i.jsx)(n.em,{children:"n. scope"})," that is limited to a spatial or textual region within the establishing ",(0,i.jsx)(n.em,{children:"form"}),'. "The names of parameters to a function normally are lexically scoped."']}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"lexical variable"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"variable"})," the ",(0,i.jsx)(n.em,{children:"binding"})," for which is in the ",(0,i.jsx)(n.em,{children:"lexical environment"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Lisp image"})," ",(0,i.jsx)(n.em,{children:"n."})," a running instantiation of a Common Lisp ",(0,i.jsx)(n.em,{children:"implementation"}),". A ",(0,i.jsx)(n.em,{children:"Lisp image"})," is characterized by a single address space in which any ",(0,i.jsx)(n.em,{children:"object"})," can directly refer to any another in conformance with this specification, and by a single, common, ",(0,i.jsx)(n.em,{children:"global environment"}),'. (External operating systems sometimes call this a "core image," "fork," "incarnation," "job," or "process." Note however, that the issue of a "process" in such an operating system is technically orthogonal to the issue of a ',(0,i.jsx)(n.em,{children:"Lisp image"}),' being defined here. Depending on the operating system, a single "process" might have multiple ',(0,i.jsx)(n.em,{children:"Lisp images"}),', and multiple "processes" might reside in a single ',(0,i.jsx)(n.em,{children:"Lisp image"}),". Hence, it is the idea of a fully shared address space for direct reference among all ",(0,i.jsx)(n.em,{children:"objects"}),' which is the defining characteristic. Note, too, that two "processes" which have a communication area that permits the sharing of some but not all ',(0,i.jsx)(n.em,{children:"objects"})," are considered to be distinct ",(0,i.jsx)(n.em,{children:"Lisp images"}),".)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Lisp printer"})," ",(0,i.jsx)(n.em,{children:"n. Trad."})," the procedure that prints the character representation of an ",(0,i.jsx)(n.em,{children:"object"})," onto a ",(0,i.jsx)(n.em,{children:"stream"}),". (This procedure is implemented by the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"write"}),".)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Lisp read-eval-print loop"})," ",(0,i.jsx)(n.em,{children:"n. Trad."})," an endless loop that ",(0,i.jsx)(n.em,{children:"reads"}),(0,i.jsx)("sub",{children:"2"})," a ",(0,i.jsx)(n.em,{children:"form"}),", ",(0,i.jsx)(n.em,{children:"evaluates"})," it, and prints (",(0,i.jsx)(n.em,{children:"i.e."}),", ",(0,i.jsx)(n.em,{children:"writes"}),(0,i.jsx)("sub",{children:"2"}),") the results. In many ",(0,i.jsx)(n.em,{children:"implementations"}),", the default mode of interaction with Common Lisp during program development is through such a loop."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Lisp reader"})," ",(0,i.jsx)(n.em,{children:"n. Trad."})," the procedure that parses character representations of ",(0,i.jsx)(n.em,{children:"objects"})," from a ",(0,i.jsx)(n.em,{children:"stream"}),", producing ",(0,i.jsx)(n.em,{children:"objects"}),". (This procedure is implemented by the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"read"}),".)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"list"})," ",(0,i.jsx)(n.em,{children:"n."})," 1. a chain of ",(0,i.jsx)(n.em,{children:"conses"})," in which the ",(0,i.jsx)(n.em,{children:"car"})," of each ",(0,i.jsx)(n.em,{children:"cons"})," is an ",(0,i.jsx)(n.em,{children:"element"})," of the ",(0,i.jsx)(n.em,{children:"list"}),", and the ",(0,i.jsx)(n.em,{children:"cdr"})," of each ",(0,i.jsx)(n.em,{children:"cons"})," is either the next link in the chain or a terminating ",(0,i.jsx)(n.em,{children:"atom"}),". See also ",(0,i.jsx)(n.em,{children:"proper list"}),", ",(0,i.jsx)(n.em,{children:"dotted list"}),", or ",(0,i.jsx)(n.em,{children:"circular list"}),". 2. the ",(0,i.jsx)(n.em,{children:"type"})," that is the union of ",(0,i.jsx)(n.strong,{children:"null"})," and ",(0,i.jsx)(n.strong,{children:"cons"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"list designator"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"designator"})," for a ",(0,i.jsx)(n.em,{children:"list"})," of ",(0,i.jsx)(n.em,{children:"objects"}),"; that is, an ",(0,i.jsx)(n.em,{children:"object"})," that denotes a ",(0,i.jsx)(n.em,{children:"list"})," and that is one of: a ",(0,i.jsx)(n.em,{children:"non-nil atom"})," (denoting a ",(0,i.jsx)(n.em,{children:"singleton list"})," whose ",(0,i.jsx)(n.em,{children:"element"})," is that ",(0,i.jsx)(n.em,{children:"non-nil atom"}),") or a ",(0,i.jsx)(n.em,{children:"proper list"})," (denoting itself)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"list structure"})," ",(0,i.jsx)("i",{children:"n."})," (of a ",(0,i.jsx)("i",{children:"list"}),") the set of ",(0,i.jsx)("i",{children:"conses"})," that make up the ",(0,i.jsx)("i",{children:"list"}),". Note that while the ",(0,i.jsx)("i",{children:"car"})," ",(0,i.jsxs)("sub",{children:["1",(0,i.jsx)("i",{children:"b"})]})," component of each such ",(0,i.jsx)("i",{children:"cons"})," is part of the ",(0,i.jsx)("i",{children:"list structure"}),", the ",(0,i.jsx)("i",{children:"objects"})," that are ",(0,i.jsx)("i",{children:"elements"})," of the ",(0,i.jsx)("i",{children:"list"})," (",(0,i.jsx)("i",{children:"i.e."}),", the ",(0,i.jsx)("i",{children:"objects"})," that are the ",(0,i.jsx)("i",{children:"cars"}),(0,i.jsx)("sub",{children:"2"})," of each ",(0,i.jsx)("i",{children:"cons"})," in the ",(0,i.jsx)("i",{children:"list"}),") are not themselves part of its ",(0,i.jsx)("i",{children:"list structure"}),", even if they are ",(0,i.jsx)("i",{children:"conses"}),", except in the (",(0,i.jsx)("i",{children:"circular"})," ",(0,i.jsx)("sub",{children:"2"}),") case where the ",(0,i.jsx)("i",{children:"list"})," actually contains one of its ",(0,i.jsx)("i",{children:"tails"})," as an ",(0,i.jsx)("i",{children:"element"}),". (The ",(0,i.jsx)("i",{children:"list structure"})," of a ",(0,i.jsx)("i",{children:"list"}),' is sometimes redundantly referred to as its "top-level list structure" in order to emphasize that any ',(0,i.jsx)("i",{children:"conses"})," that are ",(0,i.jsx)("i",{children:"elements"})," of the ",(0,i.jsx)("i",{children:"list"})," are not involved.)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"literal"})," ",(0,i.jsx)(n.em,{children:"adj."})," (of an ",(0,i.jsx)(n.em,{children:"object"}),") referenced directly in a program rather than being computed by the program; that is, appearing as data in a ",(0,i.jsx)(n.strong,{children:"quote"})," ",(0,i.jsx)(n.em,{children:"form"}),", or, if the ",(0,i.jsx)(n.em,{children:"object"})," is a ",(0,i.jsx)(n.em,{children:"self evaluating object"}),', appearing as unquoted data. "In the form (cons "one" \u2019("two")), the expressions "one", ("two"), and "two" are literal objects."']}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"load"})," ",(0,i.jsx)(n.em,{children:"v.t."})," (a ",(0,i.jsx)(n.em,{children:"file"}),") to cause the ",(0,i.jsx)(n.em,{children:"code"})," contained in the ",(0,i.jsx)(n.em,{children:"file"})," to be ",(0,i.jsx)(n.em,{children:"executed"}),". See the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"load"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"load time"})," ",(0,i.jsx)(n.em,{children:"n."})," the duration of time that the loader is ",(0,i.jsx)(n.em,{children:"loading compiled code"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"load time value"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"object"})," referred to in ",(0,i.jsx)(n.em,{children:"code"})," by a ",(0,i.jsx)(n.strong,{children:"load-time-value"})," ",(0,i.jsx)(n.em,{children:"form"}),". The ",(0,i.jsx)(n.em,{children:"value"})," of such a ",(0,i.jsx)(n.em,{children:"form"})," is some specific ",(0,i.jsx)(n.em,{children:"object"})," which can only be computed in the run-time ",(0,i.jsx)(n.em,{children:"environment"}),". In the case of ",(0,i.jsx)(n.em,{children:"file compilation"}),", the ",(0,i.jsx)(n.em,{children:"value"})," is computed once as part of the process of ",(0,i.jsx)(n.em,{children:"loading"})," the ",(0,i.jsx)(n.em,{children:"compiled file"}),", and not again. See the ",(0,i.jsx)(n.em,{children:"special operator"})," ",(0,i.jsx)(n.strong,{children:"load-time-value"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"loader"})," ",(0,i.jsx)(n.em,{children:"n."})," a facility that is part of Lisp and that ",(0,i.jsx)(n.em,{children:"loads"})," a ",(0,i.jsx)(n.em,{children:"file"}),". See the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"load"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"local declaration"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"expression"})," which may appear only in specially designated positions of certain ",(0,i.jsx)(n.em,{children:"forms"}),", and which provides information about the code contained within the containing ",(0,i.jsx)(n.em,{children:"form"}),"; that is, a ",(0,i.jsx)(n.strong,{children:"declare"})," ",(0,i.jsx)(n.em,{children:"expression"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"local precedence order"})," ",(0,i.jsx)(n.em,{children:"n."})," (of a ",(0,i.jsx)(n.em,{children:"class"}),") a ",(0,i.jsx)(n.em,{children:"list"})," consisting of the ",(0,i.jsx)(n.em,{children:"class"})," followed by its ",(0,i.jsx)(n.em,{children:"direct superclasses"})," in the order mentioned in the defining ",(0,i.jsx)(n.em,{children:"form"})," for the ",(0,i.jsx)(n.em,{children:"class"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"local slot"})," ",(0,i.jsx)(n.em,{children:"n."})," (of a ",(0,i.jsx)(n.em,{children:"class"}),") a ",(0,i.jsx)(n.em,{children:"slot accessible"})," in only one ",(0,i.jsx)(n.em,{children:"instance"}),", namely the ",(0,i.jsx)(n.em,{children:"instance"})," in which the ",(0,i.jsx)(n.em,{children:"slot"})," is allocated."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"logical block"})," ",(0,i.jsx)(n.em,{children:"n."})," a conceptual grouping of related output used by the ",(0,i.jsx)(n.em,{children:"pretty printer"})," . See the ",(0,i.jsx)(n.em,{children:"macro"})," ",(0,i.jsx)(n.strong,{children:"pprint-logical-block"})," and Section 22.2.1.1 (Dynamic Control of the Arrangement of Output)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"logical host"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"object"})," of ",(0,i.jsx)(n.em,{children:"implementation-dependent"}),' nature that is used as the representation of a "host" in a ',(0,i.jsx)(n.em,{children:"logical pathname"}),", and that has an associated set of translation rules for converting ",(0,i.jsx)(n.em,{children:"logical pathnames"})," belonging to that host into ",(0,i.jsx)(n.em,{children:"physical pathnames"}),". See Section 19.3 (Logical Pathnames)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"logical host designator"})," ",(0,i.jsx)(n.em,{children:"n."})," a ",(0,i.jsx)(n.em,{children:"designator"})," for a ",(0,i.jsx)(n.em,{children:"logical host"}),"; that is, an ",(0,i.jsx)(n.em,{children:"object"})," that denotes a ",(0,i.jsx)(n.em,{children:"logical host"})," and that is one of: a ",(0,i.jsx)(n.em,{children:"string"})," (denoting the ",(0,i.jsx)(n.em,{children:"logical host"})," that it names), or a ",(0,i.jsx)(n.em,{children:"logical host"})," (denoting itself). (Note that because the representation of a ",(0,i.jsx)(n.em,{children:"logical host"})," is ",(0,i.jsx)(n.em,{children:"implementation-dependent"}),", it is possible that an ",(0,i.jsx)(n.em,{children:"implementation"})," might represent a ",(0,i.jsx)(n.em,{children:"logical host"})," as the ",(0,i.jsx)(n.em,{children:"string"})," that names it.)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"logical pathname"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"object"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"logical-pathname"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"long float"})," ",(0,i.jsx)(n.em,{children:"n."})," an ",(0,i.jsx)(n.em,{children:"object"})," of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"long-float"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"loop keyword"})," ",(0,i.jsx)(n.em,{children:"n. Trad."})," a symbol that is a specially recognized part of the syntax of an extended ",(0,i.jsx)(n.strong,{children:"loop"})," ",(0,i.jsx)(n.em,{children:"form"}),". Such symbols are recognized by their ",(0,i.jsx)(n.em,{children:"name"})," (using ",(0,i.jsx)(n.strong,{children:"string="}),"), not by their identity; as such, they may be in any package. A ",(0,i.jsx)(n.em,{children:"loop keyword"})," is not a ",(0,i.jsx)(n.em,{children:"keyword"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"lowercase"})," ",(0,i.jsx)(n.em,{children:"adj."})," (of a ",(0,i.jsx)(n.em,{children:"character"})," ) being among ",(0,i.jsx)(n.em,{children:"standard characters"})," corresponding to the small letters a through z, or being some other ",(0,i.jsx)(n.em,{children:"implementation-defined character"})," that is defined by the ",(0,i.jsx)(n.em,{children:"implementation"})," to be ",(0,i.jsx)(n.em,{children:"lowercase"}),". See Section 13.1.4.3 (Characters With Case)."]})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>l});var i=s(67294);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);