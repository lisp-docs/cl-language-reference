"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[4979],{4276:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>x,frontMatter:()=>d,metadata:()=>a,toc:()=>u});var t=i(85893),o=i(11151);function r(e){const n={em:"em",p:"p",strong:"strong",...(0,o.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:r}=n;return i||c("DictionaryLink",!0),r||c("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"serious-condition"})," ",(0,t.jsx)(n.em,{children:"Condition Type"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Class Precedence List:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(i,{styled:!0,term:"serious-condition",children:(0,t.jsx)("b",{children:"serious-condition"})}),", ",(0,t.jsx)(i,{styled:!0,term:"condition",children:(0,t.jsx)("b",{children:"condition"})}),", ",(0,t.jsx)(i,{styled:!0,term:"t",children:(0,t.jsx)("b",{children:"t"})})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(n.p,{children:["All ",(0,t.jsx)(r,{styled:!0,term:"condition",children:(0,t.jsx)("i",{children:"conditions"})})," serious enough to require interactive intervention if not handled should inherit from the ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," ",(0,t.jsx)(i,{styled:!0,term:"serious-condition",children:(0,t.jsx)("b",{children:"serious-condition"})}),". This condition type is provided primarily so that it may be included as a ",(0,t.jsx)(r,{styled:!0,term:"superclass",children:(0,t.jsx)("i",{children:"superclass"})})," of other ",(0,t.jsx)(n.em,{children:"condition types"}),"; it is not intended to be signaled directly."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,t.jsxs)(n.p,{children:["Signaling a ",(0,t.jsx)(r,{styled:!0,term:"serious condition",children:(0,t.jsx)("i",{children:"serious condition"})})," does not itself force entry into the debugger. However, except in the unusual situation where the programmer can assure that no harm will come from failing to ",(0,t.jsx)(r,{styled:!0,term:"handle",children:(0,t.jsx)("i",{children:"handle"})})]}),"\n",(0,t.jsxs)(n.p,{children:["a ",(0,t.jsx)(r,{styled:!0,term:"serious condition",children:(0,t.jsx)("i",{children:"serious condition"})}),", such a ",(0,t.jsx)(r,{styled:!0,term:"condition",children:(0,t.jsx)("i",{children:"condition"})})," is usually signaled with ",(0,t.jsx)(i,{styled:!0,term:"error",children:(0,t.jsx)("b",{children:"error"})})," rather than ",(0,t.jsx)(i,{styled:!0,term:"signal",children:(0,t.jsx)("b",{children:"signal"})})," in order to assure that the program does not continue without ",(0,t.jsx)(n.em,{children:"handling"})," the ",(0,t.jsx)(r,{styled:!0,term:"condition",children:(0,t.jsx)("i",{children:"condition"})}),". (And conversely, it is conventional to use ",(0,t.jsx)(i,{styled:!0,term:"signal",children:(0,t.jsx)("b",{children:"signal"})})," rather than ",(0,t.jsx)(i,{styled:!0,term:"error",children:(0,t.jsx)("b",{children:"error"})})," to signal conditions which are not ",(0,t.jsx)(r,{styled:!0,term:"serious condition",children:(0,t.jsx)("i",{children:"serious conditions"})}),", since normally the failure to handle a non-serious condition is not reason enough for the debugger to be entered.)"]})]})}function s(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}function c(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const d={title:"serious-condition"},l="serious-condition",a={id:"chap-9/j-c-dictionary/serious-condition_condition-type",title:"serious-condition",description:"Expanded Reference: serious-condition",source:"@site/docs/chap-9/j-c-dictionary/serious-condition_condition-type.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/serious-condition_condition-type",permalink:"/cl-language-reference/chap-9/j-c-dictionary/serious-condition_condition-type",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/serious-condition_condition-type.md",tags:[],version:"current",frontMatter:{title:"serious-condition"},sidebar:"tutorialSidebar",previous:{title:"restart",permalink:"/cl-language-reference/chap-9/j-c-dictionary/restart_system-class"},next:{title:"signal",permalink:"/cl-language-reference/chap-9/j-c-dictionary/signal_function"}},h={},u=[{value:"Expanded Reference: serious-condition",id:"expanded-reference-serious-condition",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"serious-condition",children:"serious-condition"}),"\n","\n","\n",(0,t.jsx)(s,{}),"\n",(0,t.jsx)(n.h2,{id:"expanded-reference-serious-condition",children:"Expanded Reference: serious-condition"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"(serious-condition )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>s});var t=i(67294);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);