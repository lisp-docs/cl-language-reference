"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[33398],{99472:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var s=r(85893),t=r(11151);function i(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"with-simple-restart"})," ",(0,s.jsx)(n.em,{children:"Macro"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"with-simple-restart"})," (",(0,s.jsx)(n.em,{children:"name format-control {format-argument}"}),"*) ",(0,s.jsx)(n.em,{children:"{form}"}),"*"]}),"\n",(0,s.jsx)(n.p,{children:"\u2192 {result}*"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"name"}),"\u2014a ",(0,s.jsx)(n.em,{children:"symbol"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"format-control"}),"\u2014a ",(0,s.jsx)(n.em,{children:"format control"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"format-argument"}),"\u2014an ",(0,s.jsx)(n.em,{children:"object"})," (",(0,s.jsx)(n.em,{children:"i.e."}),", a ",(0,s.jsx)(n.em,{children:"format argument"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"forms"}),"\u2014an ",(0,s.jsx)(n.em,{children:"implicit progn"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"results"}),"\u2014in the normal situation, the ",(0,s.jsx)(n.em,{children:"values"})," returned by the ",(0,s.jsx)(n.em,{children:"forms"}),"; in the exceptional situation where the ",(0,s.jsx)(n.em,{children:"restart"})," named ",(0,s.jsx)(n.em,{children:"name"})," is invoked, two values\u2014",(0,s.jsx)(n.strong,{children:"nil"})," and ",(0,s.jsx)(n.strong,{children:"t"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"with-simple-restart"})," establishes a restart."]}),"\n",(0,s.jsxs)(n.p,{children:["If the restart designated by ",(0,s.jsx)(n.em,{children:"name"})," is not invoked while executing ",(0,s.jsx)(n.em,{children:"forms"}),", all values returned by the last of ",(0,s.jsx)(n.em,{children:"forms"})," are returned. If the restart designated by ",(0,s.jsx)(n.em,{children:"name"})," is invoked, control is transferred to ",(0,s.jsx)(n.strong,{children:"with-simple-restart"}),", which returns two values, ",(0,s.jsx)(n.strong,{children:"nil"})," and ",(0,s.jsx)(n.strong,{children:"t"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.em,{children:"name"})," is ",(0,s.jsx)(n.strong,{children:"nil"}),", an anonymous restart is established."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"format-control"})," and ",(0,s.jsx)(n.em,{children:"format-arguments"})," are used report the ",(0,s.jsx)(n.em,{children:"restart"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"with-simple-restart"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:' \n(defun read-eval-print-loop (level) \n(with-simple-restart (abort "Exit command level ~D." level) \n(loop \n(with-simple-restart (abort "Return to command level ~D." level) \n(let ((form (prog2 (fresh-line) (read) (fresh-line)))) \n(prin1 (eval form))))))) \n\u2192 READ-EVAL-PRINT-LOOP \n(read-eval-print-loop 1) \n(+ \u2019a 3) \n\u25b7 Error: The argument, A, to the function + was of the wrong type. \u25b7 The function expected a number. \n\u25b7 To continue, type :CONTINUE followed by an option number: \n\u25b7 1: Specify a value to use this time. \n\u25b7 2: Return to command level 1. \n\u25b7 3: Exit command level 1. \n\u25b7 4: Return to Lisp Toplevel. \n(defun compute-fixnum-power-of-2 (x) \n(with-simple-restart (nil "Give up on computing 2<i><sup>\u2227</sup></i>~D." x) \n(let ((result 1)) \n(dotimes (i x result) \n(setq result (\\* 2 result)) \n(unless (fixnump result) \n(error "Power of 2 is too large.")))))) \nCOMPUTE-FIXNUM-POWER-OF-2 \n(defun compute-power-of-2 (x) \n(or (compute-fixnum-power-of-2 x) \u2019something big)) \nCOMPUTE-POWER-OF-2 \n(compute-power-of-2 10) \n1024 \n(compute-power-of-2 10000) \n\u25b7 Error: Power of 2 is too large. \n\u25b7 To continue, type :CONTINUE followed by an option number. \n<i>.</i> 1: Give up on computing 2<i><sup>\u2227</sup></i>10000. \n\u25b7 2: Return to Lisp Toplevel \n\u25b7 Debug> :continue 1 \n\u2192 SOMETHING-BIG \n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"restart-case"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"with-simple-restart"})," is shorthand for one of the most common uses of ",(0,s.jsx)(n.strong,{children:"restart-case"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"with-simple-restart"})," could be defined by:"]}),"\n",(0,s.jsx)(n.p,{children:"(defmacro with-simple-restart ((restart-name format-control"}),"\n",(0,s.jsx)(n.p,{children:"&rest format-arguments)"}),"\n",(0,s.jsx)(n.p,{children:"&body forms)"}),"\n",(0,s.jsx)(n.p,{children:"\u2018(restart-case (progn ,@forms)"}),"\n",(0,s.jsx)(n.p,{children:"(,restart-name ()"}),"\n",(0,s.jsxs)(n.p,{children:[":report"," (lambda (stream)"]}),"\n",(0,s.jsx)(n.p,{children:"(format stream ,format-control ,@format-arguments))"}),"\n",(0,s.jsx)(n.p,{children:"(values nil t))))"}),"\n",(0,s.jsxs)(n.p,{children:["Because the second return value is ",(0,s.jsx)(n.strong,{children:"t"})," in the exceptional case, it is common (but not required) to arrange for the second return value in the normal case to be missing or ",(0,s.jsx)(n.strong,{children:"nil"})," so that the two situations can be distinguished."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"abort"})," ",(0,s.jsx)(n.em,{children:"Restart"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Data Arguments Required:"})}),"\n",(0,s.jsx)(n.p,{children:"None."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["The intent of the ",(0,s.jsx)(n.strong,{children:"abort"})," restart is to allow return to the innermost \u201ccommand level.\u201d Implementors are encouraged to make sure that there is always a restart named ",(0,s.jsx)(n.strong,{children:"abort"})," around any user code so that user code can call ",(0,s.jsx)(n.strong,{children:"abort"})," at any time and expect something reasonable to happen; exactly what the reasonable thing is may vary somewhat. Typically, in an interactive listener, the invocation of"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"abort"})," returns to the ",(0,s.jsx)(n.em,{children:"Lisp reader"})," phase of the ",(0,s.jsx)(n.em,{children:"Lisp read-eval-print loop"}),", though in some batch or multi-processing situations there may be situations in which having it kill the running process is more appropriate."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:["Section 9.1.4.2 (Restarts), Section 9.1.4.2.2 (Interfaces to Restarts), ",(0,s.jsx)(n.strong,{children:"invoke-restart"}),", ",(0,s.jsx)(n.strong,{children:"abort"})," (",(0,s.jsx)(n.em,{children:"function"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"continue"})," ",(0,s.jsx)(n.em,{children:"Restart"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Data Arguments Required:"})}),"\n",(0,s.jsx)(n.p,{children:"None."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"continue"})," ",(0,s.jsx)(n.em,{children:"restart"})," is generally part of protocols where there is a single \u201cobvious\u201d way to continue, such as in ",(0,s.jsx)(n.strong,{children:"break"})," and ",(0,s.jsx)(n.strong,{children:"cerror"}),". Some user-defined protocols may also wish to incorporate it for similar reasons. In general, however, it is more reliable to design a special purpose restart with a name that more directly suits the particular application."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:' \n(let ((x 3)) \n(handler-bind ((error #\u2019(lambda (c) \n(let ((r (find-restart \u2019continue c))) \n(when r (invoke-restart r)))))) \n(cond ((not (floatp x)) \n(cerror "Try floating it." "~D is not a float." x) \n(float x)) \n(t x)))) \u2192 3.0 \n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:["Section 9.1.4.2 (Restarts), Section 9.1.4.2.2 (Interfaces to Restarts), ",(0,s.jsx)(n.strong,{children:"invoke-restart"}),", ",(0,s.jsx)(n.strong,{children:"continue"})," (",(0,s.jsx)(n.em,{children:"function"}),"), ",(0,s.jsx)(n.strong,{children:"assert"}),", ",(0,s.jsx)(n.strong,{children:"cerror"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"muffle-warning"})," ",(0,s.jsx)(n.em,{children:"Restart"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Data Arguments Required:"})}),"\n",(0,s.jsx)(n.p,{children:"None."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["This ",(0,s.jsx)(n.em,{children:"restart"})," is established by ",(0,s.jsx)(n.strong,{children:"warn"})," so that ",(0,s.jsx)(n.em,{children:"handlers"})," of ",(0,s.jsx)(n.strong,{children:"warning"})," ",(0,s.jsx)(n.em,{children:"conditions"})," have a way to tell ",(0,s.jsx)(n.strong,{children:"warn"})," that a warning has already been dealt with and that no further action is warranted."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:' \n(defvar \\*all-quiet\\* nil) \u2192 \\*ALL-QUIET\\* \n(defvar \\*saved-warnings\\* \u2019()) \u2192 \\*SAVED-WARNINGS\\* \n(defun quiet-warning-handler (c) \n(when \\*all-quiet\\* \n(let ((r (find-restart \u2019muffle-warning c))) \n\n \n \n(when r \n(push c \\*saved-warnings\\*) \n(invoke-restart r))))) \n\u2192 CUSTOM-WARNING-HANDLER \n(defmacro with-quiet-warnings (&body forms) \n\u2018(let ((\\*all-quiet\\* t) \n(\\*saved-warnings\\* \u2019())) \n(handler-bind ((warning #\u2019quiet-warning-handler)) \n,@forms \n\\*saved-warnings\\*))) \n\u2192 WITH-QUIET-WARNINGS \n(setq saved \n(with-quiet-warnings \n(warn "Situation #1.") \n(let ((\\*all-quiet\\* nil)) \n(warn "Situation #2.")) \n(warn "Situation #3."))) \n\u25b7 Warning: Situation #2. \n\u2192 (#<SIMPLE-WARNING 42744421> #<SIMPLE-WARNING 42744365>) \n(dolist (s saved) (format t "~&~A~%" s)) \n\u25b7 Situation #3. \n\u25b7 Situation #1. \n\u2192 NIL \n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:["Section 9.1.4.2 (Restarts), Section 9.1.4.2.2 (Interfaces to Restarts), ",(0,s.jsx)(n.strong,{children:"invoke-restart"}),", ",(0,s.jsx)(n.strong,{children:"muffle-warning"})," (",(0,s.jsx)(n.em,{children:"function"}),"), ",(0,s.jsx)(n.strong,{children:"warn"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"store-value"})," ",(0,s.jsx)(n.em,{children:"Restart"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Data Arguments Required:"})}),"\n",(0,s.jsx)(n.p,{children:"a value to use instead (on an ongoing basis)."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"store-value"})," ",(0,s.jsx)(n.em,{children:"restart"})," is generally used by ",(0,s.jsx)(n.em,{children:"handlers"})," trying to recover from errors of ",(0,s.jsx)(n.em,{children:"types"})," such as ",(0,s.jsx)(n.strong,{children:"cell-error"})," or ",(0,s.jsx)(n.strong,{children:"type-error"}),", which may wish to supply a replacement datum to be stored permanently."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:" \n(defun type-error-auto-coerce (c) \n(when (typep c \u2019type-error) \n(let ((r (find-restart \u2019store-value c))) \n(handler-case (let ((v (coerce (type-error-datum c) \n\n \n \n(type-error-expected-type c)))) \n(invoke-restart r v)) \n(error ()))))) \u2192 TYPE-ERROR-AUTO-COERCE \n(let ((x 3)) \n(handler-bind ((type-error #\u2019type-error-auto-coerce)) \n(check-type x float) \nx)) \u2192 3.0 \n\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:["Section 9.1.4.2 (Restarts), Section 9.1.4.2.2 (Interfaces to Restarts), ",(0,s.jsx)(n.strong,{children:"invoke-restart"}),", ",(0,s.jsx)(n.strong,{children:"store-value"})," (",(0,s.jsx)(n.em,{children:"function"}),"), ",(0,s.jsx)(n.strong,{children:"ccase"}),", ",(0,s.jsx)(n.strong,{children:"check-type"}),", ",(0,s.jsx)(n.strong,{children:"ctypecase"}),", ",(0,s.jsx)(n.strong,{children:"use-value"})," (",(0,s.jsx)(n.em,{children:"function"})," and ",(0,s.jsx)(n.em,{children:"restart"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"use-value"})," ",(0,s.jsx)(n.em,{children:"Restart"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Data Arguments Required:"})}),"\n",(0,s.jsx)(n.p,{children:"a value to use instead (once)."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"use-value"})," ",(0,s.jsx)(n.em,{children:"restart"})," is generally used by ",(0,s.jsx)(n.em,{children:"handlers"})," trying to recover from errors of ",(0,s.jsx)(n.em,{children:"types"})," such as ",(0,s.jsx)(n.strong,{children:"cell-error"}),", where the handler may wish to supply a replacement datum for one-time use."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:["Section 9.1.4.2 (Restarts), Section 9.1.4.2.2 (Interfaces to Restarts), ",(0,s.jsx)(n.strong,{children:"invoke-restart"}),", ",(0,s.jsx)(n.strong,{children:"use-value"})," (",(0,s.jsx)(n.em,{children:"function"}),"), ",(0,s.jsx)(n.strong,{children:"store-value"})," (",(0,s.jsx)(n.em,{children:"function"})," and ",(0,s.jsx)(n.em,{children:"restart"}),")"]}),"\n",(0,s.jsxs)("b",{children:[(0,s.jsx)("sup",{children:"abort, continue, muffle-warning, store-value, use"})," value"]}),"\n",(0,s.jsx)("i",{children:"Function"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"abort"})," &optional ",(0,s.jsx)(n.em,{children:"condition \u2192"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"continue"})," &optional ",(0,s.jsx)(n.em,{children:"condition \u2192"})," ",(0,s.jsx)(n.strong,{children:"nil"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"muffle-warning"})," &optional ",(0,s.jsx)(n.em,{children:"condition \u2192"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"store-value"})," ",(0,s.jsx)(n.em,{children:"value"})," &optional ",(0,s.jsx)(n.em,{children:"condition \u2192"})," ",(0,s.jsx)(n.strong,{children:"nil"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"use-value"})," ",(0,s.jsx)(n.em,{children:"value"})," &optional ",(0,s.jsx)(n.em,{children:"condition \u2192"})," ",(0,s.jsx)(n.strong,{children:"nil"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"abort, continue, muffle-warning, store-value, use-value"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"value"}),"\u2014an ",(0,s.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"condition"}),"\u2014a ",(0,s.jsx)(n.em,{children:"condition object"}),", or ",(0,s.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["Transfers control to the most recently established ",(0,s.jsx)(n.em,{children:"applicable restart"})," having the same name as the function. That is, the ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"abort"})," searches for an ",(0,s.jsx)(n.em,{children:"applicable"})," ",(0,s.jsx)(n.strong,{children:"abort"})," ",(0,s.jsx)(n.em,{children:"restart"}),", the ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"continue"})," searches for an ",(0,s.jsx)(n.em,{children:"applicable"})," ",(0,s.jsx)(n.strong,{children:"continue"})," ",(0,s.jsx)(n.em,{children:"restart"}),", and so on."]}),"\n",(0,s.jsxs)(n.p,{children:["If no such ",(0,s.jsx)(n.em,{children:"restart"})," exists, the functions ",(0,s.jsx)(n.strong,{children:"continue"}),", ",(0,s.jsx)(n.strong,{children:"store-value"}),", and ",(0,s.jsx)(n.strong,{children:"use-value"})," return ",(0,s.jsx)(n.strong,{children:"nil"}),", and the functions ",(0,s.jsx)(n.strong,{children:"abort"})," and ",(0,s.jsx)(n.strong,{children:"muffle-warning"})," signal an error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"control-error"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.em,{children:"condition"})," is ",(0,s.jsx)(n.em,{children:"non-nil"}),", only those ",(0,s.jsx)(n.em,{children:"restarts"})," are considered that are either explicitly associated with that ",(0,s.jsx)(n.em,{children:"condition"}),", or not associated with any ",(0,s.jsx)(n.em,{children:"condition"}),"; that is, the excluded ",(0,s.jsx)(n.em,{children:"restarts"})," are those that are associated with a non-empty set of ",(0,s.jsx)(n.em,{children:"conditions"})," of which the given ",(0,s.jsx)(n.em,{children:"condition"})," is not an ",(0,s.jsx)(n.em,{children:"element"}),". If ",(0,s.jsx)(n.em,{children:"condition"})," is ",(0,s.jsx)(n.strong,{children:"nil"}),", all ",(0,s.jsx)(n.em,{children:"restarts"})," are considered."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:'\n;;; Example of the ABORT retart \n(defmacro abort-on-error (&body forms) \n  \u2018(handler-bind ((error #\u2019abort)) \n     ,@forms)) \u2192 ABORT-ON-ERROR \n(abort-on-error (+ 3 5)) \u2192 8 \n(abort-on-error (error "You lose.")) \n\u25b7 Returned to Lisp Top Level. \n;;; Example of the CONTINUE restart \n(defun real-sqrt (n) \n  (when (minusp n) \n    (setq n (- n)) \n    (cerror "Return sqrt(~D) instead." "Tried to take sqrt(-~D)." n)) \n  (sqrt n)) \n(real-sqrt 4) \u2192 2 \n(real-sqrt -9) \n\u25b7 Error: Tried to take sqrt(-9). \n\u25b7 To continue, type :CONTINUE followed by an option number: \n\u25b7 1: Return sqrt(9) instead. \n\u25b7 2: Return to Lisp Toplevel. \n\u25b7 Debug> (continue) \n\u25b7 Return sqrt(9) instead. \n\u2192 3 \n\n\n\n**abort, continue, muffle-warning, store-value, use-value** \n(handler-bind ((error #\u2019(lambda (c) (continue)))) \n  (real-sqrt -9)) \u2192 3 \n;;; Example of the MUFFLE-WARNING restart \n(defun count-down (x) \n  (do ((counter x (1- counter))) \n      ((= counter 0) \u2019done) \n    (when (= counter 1) \n      (warn "Almost done")) \n    (format t "~&~D~%" counter))) \n\u2192 COUNT-DOWN \n(count-down 3) \n\u25b7 3 \n\u25b7 2 \n\u25b7 Warning: Almost done \n\u25b7 1 \n\u2192 DONE \n(defun ignore-warnings-while-counting (x) \n  (handler-bind ((warning #\u2019ignore-warning)) \n    (count-down x))) \n\u2192 IGNORE-WARNINGS-WHILE-COUNTING \n(defun ignore-warning (condition) \n  (declare (ignore condition)) \n  (muffle-warning)) \n\u2192 IGNORE-WARNING \n(ignore-warnings-while-counting 3) \n\u25b7 3 \n\u25b7 2 \n\u25b7 1 \n\u2192 DONE \n;;; Example of the STORE-VALUE and USE-VALUE restarts \n(defun careful-symbol-value (symbol) \n  (check-type symbol symbol) \n  (restart-case (if (boundp symbol) \n\t\t    (return-from careful-symbol-value \n\t\t      (symbol-value symbol)) \n\t\t    (error \u2019unbound-variable \n\t\t\t    :name symbol)) \n    (use-value (value) \n      :report "Specify a value to use this time." \n      value) \n\n    \n    \n    **abort, continue, muffle-warning, store-value, use-value** \n    (store-value (value) \n      :report "Specify a value to store and use in the future." \n      (setf (symbol-value symbol) value)))) \n(setq a 1234) \u2192 1234 \n(careful-symbol-value \u2019a) \u2192 1234 \n(makunbound \u2019a) \u2192 A \n(careful-symbol-value \u2019a) \n\u25b7 Error: A is not bound. \n\u25b7 To continue, type :CONTINUE followed by an option number. \n\u25b7 1: Specify a value to use this time. \n\u25b7 2: Specify a value to store and use in the future. \n\u25b7 3: Return to Lisp Toplevel. \n\u25b7 Debug> (use-value 12) \n\u2192 12 \n(careful-symbol-value \u2019a) \n\u25b7 Error: A is not bound. \n\u25b7 To continue, type :CONTINUE followed by an option number. \n\u25b7 1: Specify a value to use this time. \n\u25b7 2: Specify a value to store and use in the future. \n\u25b7 3: Return to Lisp Toplevel. \n\u25b7 Debug> (store-value 24) \n\u2192 24 \n(careful-symbol-value \u2019a) \n\u2192 24 \n;;; Example of the USE-VALUE restart \n(defun add-symbols-with-default (default &rest symbols) \n  (handler-bind ((sys:unbound-symbol \n\t\t  #\u2019(lambda (c) \n\t\t      (declare (ignore c)) \n\t\t      (use-value default)))) \n    (apply #\u2019+ (mapcar #\u2019careful-symbol-value symbols)))) \n\u2192 ADD-SYMBOLS-WITH-DEFAULT \n(setq x 1 y 2) \u2192 2 \n(add-symbols-with-default 3 \u2019x \u2019y \u2019z) \u2192 6 \n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,s.jsxs)(n.p,{children:["A transfer of control may occur if an appropriate ",(0,s.jsx)(n.em,{children:"restart"})," is available, or (in the case of the ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"abort"})," or the ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"muffle-warning"}),") execution may be stopped."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,s.jsxs)(n.p,{children:["Each of these functions can be affected by the presence of a ",(0,s.jsx)(n.em,{children:"restart"})," having the same name."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"abort, continue, muffle-warning, store-value, use-value"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(n.p,{children:["If an appropriate ",(0,s.jsx)(n.strong,{children:"abort"})," ",(0,s.jsx)(n.em,{children:"restart"})," is not available for the ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"abort"}),", or an appropriate ",(0,s.jsx)(n.strong,{children:"muffle-warning"})," ",(0,s.jsx)(n.em,{children:"restart"})," is not available for the ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"muffle-warning"}),", an error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"control-error"})," is signaled."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"invoke-restart"}),", Section 9.1.4.2 (Restarts), Section 9.1.4.2.2 (Interfaces to Restarts), ",(0,s.jsx)(n.strong,{children:"assert"}),", ",(0,s.jsx)(n.strong,{children:"ccase"}),", ",(0,s.jsx)(n.strong,{children:"cerror"}),", ",(0,s.jsx)(n.strong,{children:"check-type"}),", ",(0,s.jsx)(n.strong,{children:"ctypecase"}),", ",(0,s.jsx)(n.strong,{children:"use-value"}),", ",(0,s.jsx)(n.strong,{children:"warn"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:["(abort condition) ",(0,s.jsx)(n.em,{children:"\u2261"})," (invoke-restart \u2019abort)"]}),"\n",(0,s.jsxs)(n.p,{children:["(muffle-warning) ",(0,s.jsx)(n.em,{children:"\u2261"})," (invoke-restart \u2019muffle-warning)"]}),"\n",(0,s.jsxs)(n.p,{children:["(continue) ",(0,s.jsx)(n.em,{children:"\u2261"})," (let ((r (find-restart \u2019continue))) (if r (invoke-restart r))) (use-value ",(0,s.jsx)(n.em,{children:"x"}),") ",(0,s.jsx)(n.em,{children:"\u2261"})," (let ((r (find-restart \u2019use-value))) (if r (invoke-restart r ",(0,s.jsx)(n.em,{children:"x"}),"))) (store-value x) ",(0,s.jsx)(n.em,{children:"\u2261"})," (let ((r (find-restart \u2019store-value))) (if r (invoke-restart r ",(0,s.jsx)(n.em,{children:"x"}),")))"]}),"\n",(0,s.jsxs)(n.p,{children:["No functions defined in this specification are required to provide a ",(0,s.jsx)(n.strong,{children:"use-value"})," ",(0,s.jsx)(n.em,{children:"restart"}),"."]})]})}function o(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}const l={title:"with-simple-restart"},a="with-simple-restart",c={id:"chap-9/j-c-dictionary/with-simple-restart_macro",title:"with-simple-restart",description:"Expanded Reference: with-simple-restart",source:"@site/docs/chap-9/j-c-dictionary/with-simple-restart_macro.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/with-simple-restart_macro",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/with-simple-restart_macro",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/with-simple-restart_macro.md",tags:[],version:"current",frontMatter:{title:"with-simple-restart"},sidebar:"tutorialSidebar",previous:{title:"with-condition-restarts",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/with-condition-restarts_macro"},next:{title:"10. Symbols",permalink:"/cl-language-reference/docs/category/10-symbols"}},d={},h=[{value:"Expanded Reference: with-simple-restart",id:"expanded-reference-with-simple-restart",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"with-simple-restart",children:"with-simple-restart"}),"\n","\n","\n",(0,s.jsx)(o,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-with-simple-restart",children:"Expanded Reference: with-simple-restart"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(with-simple-restart )\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>o});var s=r(67294);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);