"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[8093],{29627:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>x,frontMatter:()=>l,metadata:()=>m,toc:()=>o});var a=t(85893),i=t(11151);function r(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components},{ClLinks:t,GlossaryTerm:r}=n;return t||h("ClLinks",!0),r||h("GlossaryTerm",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"merge-pathnames"})," ",(0,a.jsx)(t,{term:"function",children:(0,a.jsx)("i",{children:"Function"})})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(t,{term:"merge-pathnames",children:(0,a.jsx)("b",{children:"merge-pathnames"})})," ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})})," &optional ",(0,a.jsx)(n.em,{children:"default-pathname default-version"})]}),"\n",(0,a.jsx)(n.p,{children:"\u2192 merged-pathname"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})}),"\u2014a ",(0,a.jsx)(r,{styled:!0,term:"pathname designator",children:(0,a.jsx)("i",{children:"pathname designator"})})," ."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"default-pathname"}),"\u2014a ",(0,a.jsx)(r,{styled:!0,term:"pathname designator",children:(0,a.jsx)("i",{children:"pathname designator"})})," . The default is the ",(0,a.jsx)(t,{term:"value",children:(0,a.jsx)("i",{children:"value"})})," of"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(t,{term:"default-pathname-defaults",children:(0,a.jsx)("b",{children:"*default-pathname-defaults*"})}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"default-version"}),"\u2014a ",(0,a.jsx)(r,{styled:!0,term:"valid pathname version",children:(0,a.jsx)("i",{children:"valid pathname version"})}),". The default is ",":newest","."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"merged-pathname"}),"\u2014a ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})}),"."]}),"\n",(0,a.jsx)(t,{term:"merge-pathnames",children:(0,a.jsx)("b",{children:"merge-pathnames"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsxs)(n.p,{children:["Constructs a ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})})," from ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})})," by filling in any unsupplied components with the corresponding values from ",(0,a.jsx)(n.em,{children:"default-pathname"})," and ",(0,a.jsx)(n.em,{children:"default-version"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Defaulting of pathname components is done by filling in components taken from another ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})}),". This is especially useful for cases such as a program that has an input file and an output file. Unspecified components of the output pathname will come from the input pathname, except that the type should not default to the type of the input pathname but rather to the appropriate default type for output from the program; for example, see the ",(0,a.jsx)(t,{term:"function",children:(0,a.jsx)("i",{children:"function"})})," ",(0,a.jsx)(t,{term:"compile-file-pathname",children:(0,a.jsx)("b",{children:"compile-file-pathname"})}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["If no version is supplied, ",(0,a.jsx)(n.em,{children:"default-version"})," is used. If ",(0,a.jsx)(n.em,{children:"default-version"})," is ",(0,a.jsx)(t,{term:"nil",children:(0,a.jsx)("b",{children:"nil"})}),", the version component will remain unchanged."]}),"\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})})," explicitly specifies a host and not a device, and if the host component of ",(0,a.jsx)(n.em,{children:"default-pathname"})," matches the host component of ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})}),", then the device is taken from the ",(0,a.jsx)(n.em,{children:"default-pathname"}),"; otherwise the device will be the default file device for that host. If ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})})," does not specify a host, device, directory, name, or type, each such component is copied from ",(0,a.jsx)(n.em,{children:"default-pathname"}),". If ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})})," does not specify a name, then the version, if not provided, will come from ",(0,a.jsx)(n.em,{children:"default-pathname"}),", just like the other components. If ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})})," does specify a name, then the version is not affected by ",(0,a.jsx)(n.em,{children:"default-pathname"}),". If this process leaves the version missing, the ",(0,a.jsx)(n.em,{children:"default-version"})," is used. If the host\u2019s file name syntax provides a way to input a version without a name or type, the user can let the name and type default but supply a version different from the one in ",(0,a.jsx)(n.em,{children:"default-pathname"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})})," is a ",(0,a.jsx)(t,{term:"stream",children:(0,a.jsx)("i",{children:"stream"})}),", ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})})," effectively becomes (pathname ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})}),"). ",(0,a.jsx)(t,{term:"merge-pathnames",children:(0,a.jsx)("b",{children:"merge-pathnames"})})," can be used on either an open or a closed ",(0,a.jsx)(t,{term:"stream",children:(0,a.jsx)("i",{children:"stream"})}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})})," is a ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})})," it represents the name used to open the file. This may be, but is not required to be, the actual name of the file."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(t,{term:"merge-pathnames",children:(0,a.jsx)("b",{children:"merge-pathnames"})})," recognizes a ",(0,a.jsx)(n.em,{children:"logical pathname namestring"})," when ",(0,a.jsx)(n.em,{children:"default-pathname"})," is a ",(0,a.jsx)(r,{styled:!0,term:"logical pathname",children:(0,a.jsx)("i",{children:"logical pathname"})}),", or when the ",(0,a.jsx)(t,{term:"namestring",children:(0,a.jsx)("i",{children:"namestring"})})," begins with the name of a defined ",(0,a.jsx)(r,{styled:!0,term:"logical host",children:(0,a.jsx)("i",{children:"logical host"})})," followed by a ",(0,a.jsx)(t,{term:"colon",children:(0,a.jsx)("i",{children:"colon"})}),". In the first of these two cases, the host portion of the ",(0,a.jsx)(n.em,{children:"logical pathname namestring"})," and its following ",(0,a.jsx)(t,{term:"colon",children:(0,a.jsx)("i",{children:"colon"})})," are optional."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(t,{term:"merge-pathnames",children:(0,a.jsx)("b",{children:"merge-pathnames"})})," returns a ",(0,a.jsx)(r,{styled:!0,term:"logical pathname",children:(0,a.jsx)("i",{children:"logical pathname"})})," if and only if its first argument is a ",(0,a.jsx)(r,{styled:!0,term:"logical pathname",children:(0,a.jsx)("i",{children:"logical pathname"})}),", or its first argument is a ",(0,a.jsx)(n.em,{children:"logical pathname namestring"})," with an explicit host, or its first argument does not specify a host and the ",(0,a.jsx)(n.em,{children:"default-pathname"})," is a ",(0,a.jsx)(r,{styled:!0,term:"logical pathname",children:(0,a.jsx)("i",{children:"logical pathname"})}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"Pathname"})})," merging treats a relative directory specially. If (pathname-directory ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})}),") is a ",(0,a.jsx)(t,{term:"list",children:(0,a.jsx)("i",{children:"list"})})," whose ",(0,a.jsx)(t,{term:"car",children:(0,a.jsx)("i",{children:"car"})})," is ",":relative",", and (pathname-directory ",(0,a.jsx)(n.em,{children:"default-pathname"}),") is a ",(0,a.jsx)(t,{term:"list",children:(0,a.jsx)("i",{children:"list"})}),", then the merged directory is the value of"]}),"\n",(0,a.jsxs)(n.p,{children:["(append (pathname-directory ",(0,a.jsx)(n.em,{children:"default-pathname"}),")"]}),"\n",(0,a.jsxs)(n.p,{children:["(cdr ;remove ",":relative"," from the front"]}),"\n",(0,a.jsxs)(n.p,{children:["(pathname-directory ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})}),")))"]}),"\n",(0,a.jsxs)(n.p,{children:["except that if the resulting ",(0,a.jsx)(t,{term:"list",children:(0,a.jsx)("i",{children:"list"})})," contains a ",(0,a.jsx)(t,{term:"string",children:(0,a.jsx)("i",{children:"string"})})," or ",":wild"," immediately followed by ",":back",","]}),"\n",(0,a.jsx)(t,{term:"merge-pathnames",children:(0,a.jsx)("b",{children:"merge-pathnames"})}),"\n",(0,a.jsxs)(n.p,{children:["both of them are removed. This removal of redundant ",":back"," ",(0,a.jsx)(t,{term:"keyword",children:(0,a.jsx)("i",{children:"keywords"})})," is repeated as many times as possible. If (pathname-directory ",(0,a.jsx)(n.em,{children:"default-pathname"}),") is not a ",(0,a.jsx)(t,{term:"list",children:(0,a.jsx)("i",{children:"list"})})," or (pathname-directory ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})}),") is not a ",(0,a.jsx)(t,{term:"list",children:(0,a.jsx)("i",{children:"list"})})," whose ",(0,a.jsx)(t,{term:"car",children:(0,a.jsx)("i",{children:"car"})})," is ",":relative",", the merged directory is (or (pathname-directory ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})}),") (pathname-directory ",(0,a.jsx)(n.em,{children:"default-pathname"}),"))"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(t,{term:"merge-pathnames",children:(0,a.jsx)("b",{children:"merge-pathnames"})})," maps customary case in ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})})," into customary case in the output ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("i",{children:"pathname"})}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lisp",children:'(merge-pathnames "CMUC::FORMAT" \n\t\t "CMUC::PS:<LISPIO>.FASL") \n\u2192 #P"CMUC::PS:<LISPIO>FORMAT.FASL.0" \n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(t,{term:"default-pathname-defaults",children:(0,a.jsx)("b",{children:"*default-pathname-defaults*"})}),", ",(0,a.jsx)(t,{term:"pathname",children:(0,a.jsx)("b",{children:"pathname"})}),", ",(0,a.jsx)(t,{term:"logical-pathname",children:(0,a.jsx)("b",{children:"logical-pathname"})}),", Section 20.1 (File System Concepts), Section 19.1.2 (Pathnames as Filenames)"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,a.jsxs)(n.p,{children:["The net effect is that if just a name is supplied, the host, device, directory, and type will come from ",(0,a.jsx)(n.em,{children:"default-pathname"}),", but the version will come from ",(0,a.jsx)(n.em,{children:"default-version"}),". If nothing or just a directory is supplied, the name, type, and version will come from ",(0,a.jsx)(n.em,{children:"default-pathname"})," together."]})]})}function s(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const l={title:"merge-pathnames"},c="merge-pathnames",m={id:"chap-19/bj-e-dictionary/merge-pathnames_function",title:"merge-pathnames",description:"Expanded Reference: merge-pathnames",source:"@site/docs/chap-19/bj-e-dictionary/merge-pathnames_function.md",sourceDirName:"chap-19/bj-e-dictionary",slug:"/chap-19/bj-e-dictionary/merge-pathnames_function",permalink:"/cl-language-reference/chap-19/bj-e-dictionary/merge-pathnames_function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-19/bj-e-dictionary/merge-pathnames_function.md",tags:[],version:"current",frontMatter:{title:"merge-pathnames"},sidebar:"tutorialSidebar",previous:{title:"make-pathname",permalink:"/cl-language-reference/chap-19/bj-e-dictionary/make-pathname_function"},next:{title:"namestring, file-namestring, directory-namestring, host-namestring, enough-namestring",permalink:"/cl-language-reference/chap-19/bj-e-dictionary/namestring_file-namestring_directory-namestring_host-namestring_enough-namestring_function"}},d={},o=[{value:"Expanded Reference: merge-pathnames",id:"expanded-reference-merge-pathnames",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"merge-pathnames",children:"merge-pathnames"}),"\n","\n","\n",(0,a.jsx)(s,{}),"\n",(0,a.jsx)(n.h2,{id:"expanded-reference-merge-pathnames",children:"Expanded Reference: merge-pathnames"}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lisp",children:"(merge-pathnames )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>h,a:()=>s});var a=t(67294);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function h(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);