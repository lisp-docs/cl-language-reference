"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[49342],{46742:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>f,default:()=>b,frontMatter:()=>j,metadata:()=>g,toc:()=>y});var t=i(85893),s=i(11151);function r(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["There are many kinds of ",(0,t.jsx)(i,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file systems"})}),", varying widely both in their superficial syntactic details, and in their underlying power and structure. The facilities provided by Common Lisp for referring to and manipulating ",(0,t.jsx)(i,{term:"file",children:(0,t.jsx)("i",{children:"files"})})," has been chosen to be compatible with many kinds of ",(0,t.jsx)(i,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file systems"})}),", while at the same time minimizing the program-visible differences between kinds of ",(0,t.jsx)(i,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file systems"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Since ",(0,t.jsx)(i,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file systems"})})," vary in their conventions for naming ",(0,t.jsx)(i,{term:"file",children:(0,t.jsx)("i",{children:"files"})}),", there are two distinct ways to represent ",(0,t.jsx)(i,{term:"filename",children:(0,t.jsx)("i",{children:"filenames"})}),": as ",(0,t.jsx)(i,{term:"namestring",children:(0,t.jsx)("i",{children:"namestrings"})})," and as ",(0,t.jsx)(i,{term:"pathname",children:(0,t.jsx)("i",{children:"pathnames"})}),"."]})]})}function a(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}function l(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:r}=n;return i||c("DictionaryLink",!0),r||c("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(r,{term:"namestring",children:(0,t.jsx)("i",{children:"namestring"})})," is a ",(0,t.jsx)(r,{term:"string",children:(0,t.jsx)("i",{children:"string"})})," that represents a ",(0,t.jsx)(r,{term:"filename",children:(0,t.jsx)("i",{children:"filename"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["In general, the syntax of ",(0,t.jsx)(r,{term:"namestring",children:(0,t.jsx)("i",{children:"namestrings"})})," involves the use of ",(0,t.jsx)(r,{term:"implementation-defined",children:(0,t.jsx)("i",{children:"implementation-defined"})})," conventions, usually those customary for the ",(0,t.jsx)(r,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file system"})})," in which the named ",(0,t.jsx)(r,{term:"file",children:(0,t.jsx)("i",{children:"file"})})," resides. The only exception is the syntax of a ",(0,t.jsx)(n.em,{children:"logical pathname namestring"}),", which is defined in this specification; see Section 19.3.1 (Syntax of Logical Pathname Namestrings)."]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(r,{styled:!0,term:"conforming program",children:(0,t.jsx)("i",{children:"conforming program"})})," must never unconditionally use a ",(0,t.jsx)(n.em,{children:"literal namestring"})," other than a ",(0,t.jsx)(n.em,{children:"logical pathname namestring"})," because Common Lisp does not define any ",(0,t.jsx)(r,{term:"namestring",children:(0,t.jsx)("i",{children:"namestring"})})," syntax other than that for ",(0,t.jsx)(r,{styled:!0,term:"logical pathname",children:(0,t.jsx)("i",{children:"logical pathnames"})})," that would be guaranteed to be portable. However, a ",(0,t.jsx)(r,{styled:!0,term:"conforming program",children:(0,t.jsx)("i",{children:"conforming program"})})," can, if it is careful, successfully manipulate user-supplied data which contains or refers to non-portable ",(0,t.jsx)(r,{term:"namestring",children:(0,t.jsx)("i",{children:"namestrings"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(r,{term:"namestring",children:(0,t.jsx)("i",{children:"namestring"})})," can be ",(0,t.jsx)(n.em,{children:"coerced"})," to a ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})})," by the ",(0,t.jsx)(r,{term:"function",children:(0,t.jsx)("i",{children:"functions"})})," ",(0,t.jsx)(i,{term:"pathname",children:(0,t.jsx)("b",{children:"pathname"})})," or ",(0,t.jsx)(i,{term:"parse-namestring",children:(0,t.jsx)("b",{children:"parse-namestring"})}),"."]})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}function c(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function h(e){const n={p:"p",strong:"strong",...(0,s.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:r}=n;return i||d("DictionaryLink",!0),r||d("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"Pathnames"})})," are structured ",(0,t.jsx)(r,{term:"object",children:(0,t.jsx)("i",{children:"objects"})})," that can represent, in an ",(0,t.jsx)(r,{term:"implementation-independent",children:(0,t.jsx)("i",{children:"implementation-independent"})})," way, the ",(0,t.jsx)(r,{term:"filename",children:(0,t.jsx)("i",{children:"filenames"})})," that are used natively by an underlying ",(0,t.jsx)(r,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file system"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["In addition, ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathnames"})})," can also represent certain partially composed ",(0,t.jsx)(r,{term:"filename",children:(0,t.jsx)("i",{children:"filenames"})})," for which an underlying ",(0,t.jsx)(r,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file system"})})," might not have a specific ",(0,t.jsx)(r,{term:"namestring",children:(0,t.jsx)("i",{children:"namestring"})})," representation."]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})})," need not correspond to any file that actually exists, and more than one ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})})," can refer to the same file. For example, the ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})})," with a version of ",":newest"," might refer to the same file as a ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})})," with the same components except a certain number as the version. Indeed, a ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})})," with version ",":newest"," might refer to different files as time passes, because the meaning of such a ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})})," depends on the state of the file system."]}),"\n",(0,t.jsxs)(n.p,{children:["Some ",(0,t.jsx)(r,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file systems"})})," naturally use a structural model for their ",(0,t.jsx)(r,{term:"filename",children:(0,t.jsx)("i",{children:"filenames"})}),", while others do not. Within the Common Lisp ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})})," model, all ",(0,t.jsx)(r,{term:"filename",children:(0,t.jsx)("i",{children:"filenames"})})," are seen as having a particular structure, even if that structure is not reflected in the underlying ",(0,t.jsx)(r,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file system"})}),". The nature of the mapping between structure imposed by ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathnames"})})," and the structure, if any, that is used by the underlying ",(0,t.jsx)(r,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file system"})})," is ",(0,t.jsx)(r,{term:"implementation-defined",children:(0,t.jsx)("i",{children:"implementation-defined"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Every ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})})," has six components: a host, a device, a directory, a name, a type, and a version. By naming ",(0,t.jsx)(r,{term:"file",children:(0,t.jsx)("i",{children:"files"})})," with ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathnames"})}),", Common Lisp programs can work in essentially the same way even in ",(0,t.jsx)(r,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file systems"})})," that seem superficially quite different. For a detailed description of these components, see Section 19.2.1 (Pathname Components)."]}),"\n",(0,t.jsxs)(n.p,{children:["The mapping of the ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})})," components into the concepts peculiar to each ",(0,t.jsx)(r,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file system"})})," is ",(0,t.jsx)(r,{term:"implementation-defined",children:(0,t.jsx)("i",{children:"implementation-defined"})}),". There exist conceivable ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathnames"})})," for which there is no mapping to a syntactically valid ",(0,t.jsx)(r,{term:"filename",children:(0,t.jsx)("i",{children:"filename"})})," in a particular ",(0,t.jsx)(r,{term:"implementation",children:(0,t.jsx)("i",{children:"implementation"})}),". An ",(0,t.jsx)(r,{term:"implementation",children:(0,t.jsx)("i",{children:"implementation"})})," may use various strategies in an attempt to find a mapping; for example, an ",(0,t.jsx)(r,{term:"implementation",children:(0,t.jsx)("i",{children:"implementation"})})," may quietly truncate ",(0,t.jsx)(r,{term:"filename",children:(0,t.jsx)("i",{children:"filenames"})})," that exceed length limitations imposed by the underlying ",(0,t.jsx)(r,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file system"})}),", or ignore certain ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})})," components for which the ",(0,t.jsx)(r,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file system"})})," provides no support. If such a mapping cannot be found, an error of ",(0,t.jsx)(r,{term:"type",children:(0,t.jsx)("i",{children:"type"})})," ",(0,t.jsx)(i,{term:"file-error",children:(0,t.jsx)("b",{children:"file-error"})})," is signaled."]}),"\n",(0,t.jsxs)(n.p,{children:["The time at which this mapping and associated error signaling occurs is ",(0,t.jsx)(r,{term:"implementation-dependent",children:(0,t.jsx)("i",{children:"implementation-dependent"})}),". Specifically, it may occur at the time the ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})})," is constructed, when coercing a ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})})," to a ",(0,t.jsx)(r,{term:"namestring",children:(0,t.jsx)("i",{children:"namestring"})}),", or when an attempt is made to ",(0,t.jsx)(r,{term:"open",children:(0,t.jsx)("i",{children:"open"})})," or otherwise access the ",(0,t.jsx)(r,{term:"file",children:(0,t.jsx)("i",{children:"file"})})," designated by the ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Figure 19\u20131 lists some ",(0,t.jsx)(r,{styled:!0,term:"defined name",children:(0,t.jsx)("i",{children:"defined names"})})," that are applicable to ",(0,t.jsx)(r,{term:"pathname",children:(0,t.jsx)("i",{children:"pathnames"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["|",(0,t.jsxs)("p",{children:[(0,t.jsx)(n.strong,{children:"*default-pathname-defaults* namestring pathname-name directory-namestring open pathname-type enough-namestring parse-namestring pathname-version file-namestring pathname pathnamep file-string-length pathname-device translate-pathname host-namestring pathname-directory truename"})," "]}),(0,t.jsx)("p",{children:(0,t.jsx)(n.strong,{children:"make-pathname pathname-host user-homedir-pathname merge-pathnames pathname-match-p wild-pathname-p"})}),"|"]}),"\n",(0,t.jsx)(n.p,{children:"| :- |"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Figure 19\u20131. Pathname Operations"})})]})}function o(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}function d(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function p(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Parsing is the operation used to convert a ",(0,t.jsx)(i,{term:"namestring",children:(0,t.jsx)("i",{children:"namestring"})})," into a ",(0,t.jsx)(i,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})}),". Except in the case of parsing ",(0,t.jsx)(n.em,{children:"logical pathname namestrings"}),", this operation is ",(0,t.jsx)(i,{term:"implementation-dependent",children:(0,t.jsx)("i",{children:"implementation-dependent"})}),", because the format of ",(0,t.jsx)(i,{term:"namestring",children:(0,t.jsx)("i",{children:"namestrings"})})," is ",(0,t.jsx)(i,{term:"implementation-dependent",children:(0,t.jsx)("i",{children:"implementation-dependent"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(i,{styled:!0,term:"conforming implementation",children:(0,t.jsx)("i",{children:"conforming implementation"})})," is free to accommodate other ",(0,t.jsx)(i,{styled:!0,term:"file system",children:(0,t.jsx)("i",{children:"file system"})})," features in its ",(0,t.jsx)(i,{term:"pathname",children:(0,t.jsx)("i",{children:"pathname"})})," representation and provides a parser that can process such specifications in ",(0,t.jsx)(i,{term:"namestring",children:(0,t.jsx)("i",{children:"namestrings"})}),". ",(0,t.jsx)(i,{styled:!0,term:"conforming program",children:(0,t.jsx)("i",{children:"Conforming programs"})})," must not depend on any such features, since those features will not be portable."]})]})}function x(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}const j={title:"19.1 Overview of Filenames"},f="19.1 Overview of Filenames",g={id:"chap-19/bj-b-overview-of-filenames",title:"19.1 Overview of Filenames",description:"19.1.1 Namestrings as Filenames",source:"@site/docs/chap-19/bj-b-overview-of-filenames.md",sourceDirName:"chap-19",slug:"/chap-19/bj-b-overview-of-filenames",permalink:"/cl-language-reference/chap-19/bj-b-overview-of-filenames",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-19/bj-b-overview-of-filenames.md",tags:[],version:"current",frontMatter:{title:"19.1 Overview of Filenames"},sidebar:"tutorialSidebar",previous:{title:"19. Filenames",permalink:"/cl-language-reference/category/19-filenames"},next:{title:"19.2 Pathnames",permalink:"/cl-language-reference/chap-19/bj-c-pathnames"}},u={},y=[{value:"19.1.1 Namestrings as Filenames",id:"1911-namestrings-as-filenames",level:2},{value:"19.1.2 Pathnames as Filenames",id:"1912-pathnames-as-filenames",level:2},{value:"19.1.3 Parsing Namestrings Into Pathnames",id:"1913-parsing-namestrings-into-pathnames",level:2}];function v(e){const n={h1:"h1",h2:"h2",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"191-overview-of-filenames",children:"19.1 Overview of Filenames"}),"\n","\n",(0,t.jsx)(a,{}),"\n",(0,t.jsx)(n.h2,{id:"1911-namestrings-as-filenames",children:"19.1.1 Namestrings as Filenames"}),"\n","\n",(0,t.jsx)(m,{}),"\n",(0,t.jsx)(n.h2,{id:"1912-pathnames-as-filenames",children:"19.1.2 Pathnames as Filenames"}),"\n","\n",(0,t.jsx)(o,{}),"\n",(0,t.jsx)(n.h2,{id:"1913-parsing-namestrings-into-pathnames",children:"19.1.3 Parsing Namestrings Into Pathnames"}),"\n","\n","\n",(0,t.jsx)(x,{})]})}function b(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(v,{...e})}):v(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>a});var t=i(67294);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);