"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[11356],{94272:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>c,metadata:()=>h,toc:()=>a});var i=n(85893),r=n(11151);function t(e){const s={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"sublis, nsublis"})," ",(0,i.jsx)(s.em,{children:"Function"})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Syntax:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"sublis"})," ",(0,i.jsx)(s.em,{children:"alist tree"})," &key ",(0,i.jsx)(s.em,{children:"key test test-not \u2192 new-tree"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"nsublis"})," ",(0,i.jsx)(s.em,{children:"alist tree"})," &key ",(0,i.jsx)(s.em,{children:"key test test-not \u2192 new-tree"})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Arguments and Values:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"alist"}),"\u2014an ",(0,i.jsx)(s.em,{children:"association list"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"tree"}),"\u2014a ",(0,i.jsx)(s.em,{children:"tree"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"test"}),"\u2014a ",(0,i.jsx)(s.em,{children:"designator"})," for a ",(0,i.jsx)(s.em,{children:"function"})," of two ",(0,i.jsx)(s.em,{children:"arguments"})," that returns a ",(0,i.jsx)(s.em,{children:"generalized boolean"}),". ",(0,i.jsx)(s.em,{children:"test-not"}),"\u2014a ",(0,i.jsx)(s.em,{children:"designator"})," for a ",(0,i.jsx)(s.em,{children:"function"})," of two ",(0,i.jsx)(s.em,{children:"arguments"})," that returns a ",(0,i.jsx)(s.em,{children:"generalized boolean"}),". ",(0,i.jsx)(s.em,{children:"key"}),"\u2014a ",(0,i.jsx)(s.em,{children:"designator"})," for a ",(0,i.jsx)(s.em,{children:"function"})," of one argument, or ",(0,i.jsx)(s.strong,{children:"nil"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"new-tree"}),"\u2014a ",(0,i.jsx)(s.em,{children:"tree"}),"."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"sublis, nsublis"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"sublis"})," makes substitutions for ",(0,i.jsx)(s.em,{children:"objects"})," in ",(0,i.jsx)(s.em,{children:"tree"})," (a structure of ",(0,i.jsx)(s.em,{children:"conses"}),"). ",(0,i.jsx)(s.strong,{children:"nsublis"})," is like ",(0,i.jsx)(s.strong,{children:"sublis"})," but destructively modifies the relevant parts of the ",(0,i.jsx)(s.em,{children:"tree"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"sublis"})," looks at all subtrees and leaves of ",(0,i.jsx)(s.em,{children:"tree"}),"; if a subtree or leaf appears as a key in ",(0,i.jsx)(s.em,{children:"alist"})," (that is, the key and the subtree or leaf ",(0,i.jsx)(s.em,{children:"satisfy the test"}),"), it is replaced by the ",(0,i.jsx)(s.em,{children:"object"})," with which that key is associated. This operation is non-destructive. In effect, ",(0,i.jsx)(s.strong,{children:"sublis"})," can perform several ",(0,i.jsx)(s.strong,{children:"subst"})," operations simultaneously."]}),"\n",(0,i.jsxs)(s.p,{children:["If ",(0,i.jsx)(s.strong,{children:"sublis"})," succeeds, a new copy of ",(0,i.jsx)(s.em,{children:"tree"})," is returned in which each occurrence of such a subtree or leaf is replaced by the ",(0,i.jsx)(s.em,{children:"object"})," with which it is associated. If no changes are made, the original tree is returned. The original ",(0,i.jsx)(s.em,{children:"tree"})," is left unchanged, but the result tree may share cells with it."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"nsublis"})," is permitted to modify ",(0,i.jsx)(s.em,{children:"tree"})," but otherwise returns the same values as ",(0,i.jsx)(s.strong,{children:"sublis"}),". ",(0,i.jsx)(s.strong,{children:"Examples:"})]}),"\n",(0,i.jsx)(s.p,{children:"(sublis \u2019((x . 100) (z . zprime))"}),"\n",(0,i.jsx)(s.p,{children:"\u2019(plus x (minus g z x p) 4 . x))"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"\u2192"})," (PLUS 100 (MINUS G ZPRIME 100 P) 4 . 100)"]}),"\n",(0,i.jsx)(s.p,{children:"(sublis \u2019(((+ x y) . (- x y)) ((- x y) . (+ x y)))"}),"\n",(0,i.jsx)(s.p,{children:"\u2019(* (/ (+ x y) (+ x p)) (- x y))"}),"\n",(0,i.jsxs)(s.p,{children:[":test"," #\u2019equal)"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"\u2192"})," (* (/ (- X Y) (+ X P)) (+ X Y))"]}),"\n",(0,i.jsx)(s.p,{children:"(setq tree1 \u2019(1 (1 2) ((1 2 3)) (((1 2 3 4)))))"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"\u2192"})," (1 (1 2) ((1 2 3)) (((1 2 3 4))))"]}),"\n",(0,i.jsx)(s.p,{children:'(sublis \u2019((3 . "three")) tree1)'}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"\u2192"}),' (1 (1 2) ((1 2 "three")) (((1 2 "three" 4))))']}),"\n",(0,i.jsx)(s.p,{children:'(sublis \u2019((t . "string"))'}),"\n",(0,i.jsx)(s.p,{children:'(sublis \u2019((1 . "") (4 . 44)) tree1)'}),"\n",(0,i.jsxs)(s.p,{children:[":key"," #\u2019stringp)"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"\u2192"}),' ("string" ("string" 2) (("string" 2 3)) ((("string" 2 3 44))))']}),"\n",(0,i.jsxs)(s.p,{children:["tree1 ",(0,i.jsx)(s.em,{children:"\u2192"})," (1 (1 2) ((1 2 3)) (((1 2 3 4))))"]}),"\n",(0,i.jsx)(s.p,{children:'(setq tree2 \u2019("one" ("one" "two") (("one" "Two" "three"))))'}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"\u2192"}),' ("one" ("one" "two") (("one" "Two" "three")))']}),"\n",(0,i.jsx)(s.p,{children:'(sublis \u2019(("two" . 2)) tree2)'}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"\u2192"}),' ("one" ("one" "two") (("one" "Two" "three")))']}),"\n",(0,i.jsxs)(s.p,{children:["tree2 ",(0,i.jsx)(s.em,{children:"\u2192"}),' ("one" ("one" "two") (("one" "Two" "three")))']}),"\n",(0,i.jsxs)(s.p,{children:['(sublis \u2019(("two" . 2)) tree2 ',":test"," \u2019equal)"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"\u2192"}),' ("one" ("one" 2) (("one" "Two" "three")))']}),"\n",(0,i.jsx)(s.p,{children:"(nsublis \u2019((t . \u2019temp))"}),"\n",(0,i.jsx)(s.p,{children:"tree1"}),"\n",(0,i.jsxs)(s.p,{children:[":key"," #\u2019(lambda (x) (or (atom x) (< (list-length x) 3))))"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"\u2192"})," ((QUOTE TEMP) (QUOTE TEMP) QUOTE TEMP)"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Side Effects:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"nsublis"})," modifies ",(0,i.jsx)(s.em,{children:"tree"}),"."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"See Also:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"subst"}),", Section 3.2.1 (Compiler Terminology), Section 3.6 (Traversal Rules and Side Effects)"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(s.p,{children:["The ",":test-not"," parameter is deprecated."]}),"\n",(0,i.jsxs)(s.p,{children:["Because the side-effecting variants (",(0,i.jsx)(s.em,{children:"e.g."}),", ",(0,i.jsx)(s.strong,{children:"nsublis"}),") potentially change the path that is being traversed, their effects in the presence of shared or circular structure structure may vary in surprising ways when compared to their non-side-effecting alternatives. To see this, consider the following side-effect behavior, which might be exhibited by some implementations:"]}),"\n",(0,i.jsx)(s.p,{children:"(defun test-it (fn)"}),"\n",(0,i.jsx)(s.p,{children:"(let* ((shared-piece (list \u2019a \u2019b))"}),"\n",(0,i.jsx)(s.p,{children:"(data (list shared-piece shared-piece)))"}),"\n",(0,i.jsx)(s.p,{children:"(funcall fn \u2019((a . b) (b . a)) data)))"}),"\n",(0,i.jsxs)(s.p,{children:["(test-it #\u2019sublis) ",(0,i.jsx)(s.em,{children:"\u2192"})," ((B A) (B A))"]}),"\n",(0,i.jsxs)(s.p,{children:["(test-it #\u2019nsublis) ",(0,i.jsx)(s.em,{children:"\u2192"})," ((A B) (A B))"]})]})}function l(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}const c={},d="sublis, nsublis",h={id:"chap-14/be-c-dictionary/sublisaansublis",title:"sublis, nsublis",description:"Expanded Reference: sublis, nsublis",source:"@site/docs/chap-14/be-c-dictionary/sublisaansublis.md",sourceDirName:"chap-14/be-c-dictionary",slug:"/chap-14/be-c-dictionary/sublisaansublis",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/sublisaansublis",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-14/be-c-dictionary/sublisaansublis.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"set-exclusive-or, nset-exclusive-or",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/setexclusiveoraansetexclusiveor"},next:{title:"subsetp",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/subsetp"}},o={},a=[{value:"Expanded Reference: sublis, nsublis",id:"expanded-reference-sublis-nsublis",level:2}];function x(e){const s={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"sublis-nsublis",children:"sublis, nsublis"}),"\n","\n","\n",(0,i.jsx)(l,{}),"\n",(0,i.jsx)(s.h2,{id:"expanded-reference-sublis-nsublis",children:"Expanded Reference: sublis, nsublis"}),"\n",(0,i.jsx)(s.admonition,{type:"tip",children:(0,i.jsx)(s.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lisp",children:"(sublis, nsublis )\n"})})]})}function u(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},11151:(e,s,n)=>{n.d(s,{Z:()=>c,a:()=>l});var i=n(67294);const r={},t=i.createContext(r);function l(e){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);