"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[79168],{61598:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>h,default:()=>a,frontMatter:()=>d,metadata:()=>p,toc:()=>j});var s=n(85893),r=n(11151);function t(e){const i={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components},{DictionaryLink:n,GlossaryTerm:t}=i;return n||l("DictionaryLink",!0),t||l("GlossaryTerm",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"t"})," ",(0,s.jsx)(t,{styled:!0,term:"system class",children:(0,s.jsx)("i",{children:"System Class"})})]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Class Precedence List:"})}),"\n",(0,s.jsx)(n,{term:"t",children:(0,s.jsx)("b",{children:"t"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(i.p,{children:["The set of all ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"objects"})}),". The ",(0,s.jsx)(t,{term:"type",children:(0,s.jsx)("i",{children:"type"})})," ",(0,s.jsx)(n,{term:"t",children:(0,s.jsx)("b",{children:"t"})})," is a ",(0,s.jsx)(t,{term:"supertype",children:(0,s.jsx)("i",{children:"supertype"})})," of every ",(0,s.jsx)(t,{term:"type",children:(0,s.jsx)("i",{children:"type"})}),", including itself. Every ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"object"})})," is of ",(0,s.jsx)(t,{term:"type",children:(0,s.jsx)("i",{children:"type"})})," ",(0,s.jsx)(n,{term:"t",children:(0,s.jsx)("b",{children:"t"})}),"."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"satisfies"})," ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"Type Specifier"})})]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,s.jsx)(i.p,{children:"Predicating."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,s.jsxs)(i.p,{children:["(satisfies ",(0,s.jsx)(i.em,{children:"predicate-name"}),")"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:"predicate-name"}),"\u2014a ",(0,s.jsx)(t,{term:"symbol",children:(0,s.jsx)("i",{children:"symbol"})}),"."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,s.jsxs)(i.p,{children:["This denotes the set of all ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"objects"})})," that satisfy the ",(0,s.jsx)(i.em,{children:"predicate predicate-name"}),", which must be a ",(0,s.jsx)(t,{term:"symbol",children:(0,s.jsx)("i",{children:"symbol"})})," whose global ",(0,s.jsx)(t,{term:"function",children:(0,s.jsx)("i",{children:"function"})})," definition is a one-argument predicate. A name is required for ",(0,s.jsx)(i.em,{children:"predicate-name"}),"; ",(0,s.jsx)(t,{styled:!0,term:"lambda expression",children:(0,s.jsx)("i",{children:"lambda expressions"})})," are not allowed. For example, the ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifier"})})," (and integer (satisfies evenp)) denotes the set of all even integers. The form (typep ",(0,s.jsx)(i.em,{children:"x"})," \u2019(satisfies ",(0,s.jsx)(i.em,{children:"p"}),")) is equivalent to (if (",(0,s.jsx)(i.em,{children:"p x"}),") t nil)."]}),"\n",(0,s.jsxs)(i.p,{children:["The argument is required. The ",(0,s.jsx)(t,{term:"symbol",children:(0,s.jsx)("i",{children:"symbol"})})," ",(0,s.jsx)(i.strong,{children:"*"})," can be the argument, but it denotes itself (the ",(0,s.jsx)(t,{term:"symbol",children:(0,s.jsx)("i",{children:"symbol"})})," ",(0,s.jsx)(i.strong,{children:"*"}),"), and does not represent an unspecified value."]}),"\n",(0,s.jsxs)(i.p,{children:["The symbol ",(0,s.jsx)(i.strong,{children:"satisfies"})," is not valid as a ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifier"})})," ."]}),"\n",(0,s.jsx)(n,{term:"member",children:(0,s.jsx)("b",{children:"member"})}),"\n",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"Type Specifier"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,s.jsx)(i.p,{children:"Combining."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,s.jsxs)(i.p,{children:["(member ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"{object}"})}),"*)"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"object"})}),"\u2014an ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"object"})}),"."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,s.jsxs)(i.p,{children:["This denotes the set containing the named ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"objects"})}),". An ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"object"})})," is of this ",(0,s.jsx)(t,{term:"type",children:(0,s.jsx)("i",{children:"type"})})," if and only if it is ",(0,s.jsx)(n,{term:"eql",children:(0,s.jsx)("b",{children:"eql"})})," to one of the specified ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"objects"})}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifiers"})})," (member) and ",(0,s.jsx)(n,{term:"nil",children:(0,s.jsx)("b",{children:"nil"})})," are equivalent. ",(0,s.jsx)(i.strong,{children:"*"})," can be among the ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"objects"})}),", but if so it denotes itself (the symbol ",(0,s.jsx)(i.strong,{children:"*"}),") and does not represent an unspecified value. The symbol ",(0,s.jsx)(n,{term:"member",children:(0,s.jsx)("b",{children:"member"})})," is not valid as a ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifier"})})," ; and, specifically, it is not an abbreviation for either (member) or (member *)."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(i.p,{children:["the ",(0,s.jsx)(t,{term:"type",children:(0,s.jsx)("i",{children:"type"})})," ",(0,s.jsx)(n,{term:"eql",children:(0,s.jsx)("b",{children:"eql"})})]}),"\n",(0,s.jsx)(n,{term:"not",children:(0,s.jsx)("b",{children:"not"})}),"\n",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"Type Specifier"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,s.jsx)(i.p,{children:"Combining."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,s.jsxs)(i.p,{children:["(not ",(0,s.jsx)(i.em,{children:"typespec"}),")"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:"typespec"}),"\u2014a ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifier"})})," ."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,s.jsxs)(i.p,{children:["This denotes the set of all ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"objects"})})," that are not of the ",(0,s.jsx)(i.em,{children:"type typespec"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["The argument is required, and cannot be ",(0,s.jsx)(i.strong,{children:"*"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["The symbol ",(0,s.jsx)(n,{term:"not",children:(0,s.jsx)("b",{children:"not"})})," is not valid as a ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifier"})})," ."]}),"\n",(0,s.jsx)(n,{term:"and",children:(0,s.jsx)("b",{children:"and"})}),"\n",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"Type Specifier"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,s.jsx)(i.p,{children:"Combining."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,s.jsxs)(i.p,{children:["(and ",(0,s.jsx)(i.em,{children:"{typespec}"}),"*)"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:"typespec"}),"\u2014a ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifier"})})," ."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,s.jsxs)(i.p,{children:["This denotes the set of all ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"objects"})})," of the ",(0,s.jsx)(t,{term:"type",children:(0,s.jsx)("i",{children:"type"})})," determined by the intersection of the ",(0,s.jsx)(i.em,{children:"typespecs"}),". ",(0,s.jsx)(i.strong,{children:"*"})," is not permitted as an argument."]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifiers"})})," (and) and ",(0,s.jsx)(n,{term:"t",children:(0,s.jsx)("b",{children:"t"})})," are equivalent. The symbol ",(0,s.jsx)(n,{term:"and",children:(0,s.jsx)("b",{children:"and"})})," is not valid as a ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifier"})})," , and, specifically, it is not an abbreviation for (and)."]}),"\n",(0,s.jsx)(n,{term:"or",children:(0,s.jsx)("b",{children:"or"})}),"\n",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"Type Specifier"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,s.jsx)(i.p,{children:"Combining."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,s.jsxs)(i.p,{children:["(or ",(0,s.jsx)(i.em,{children:"{typespec}"}),"*)"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:"typespec"}),"\u2014a ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifier"})})," ."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,s.jsxs)(i.p,{children:["This denotes the set of all ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"objects"})})," of the ",(0,s.jsx)(t,{term:"type",children:(0,s.jsx)("i",{children:"type"})})," determined by the union of the ",(0,s.jsx)(i.em,{children:"typespecs"}),". For example, the ",(0,s.jsx)(t,{term:"type",children:(0,s.jsx)("i",{children:"type"})})," ",(0,s.jsx)(n,{term:"list",children:(0,s.jsx)("b",{children:"list"})})," by definition is the same as (or null cons). Also, the value returned by ",(0,s.jsx)(n,{term:"position",children:(0,s.jsx)("b",{children:"position"})})," is an ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"object"})})," of ",(0,s.jsx)(t,{term:"type",children:(0,s.jsx)("i",{children:"type"})})," (or null (integer 0 *)); ",(0,s.jsx)(i.em,{children:"i.e."}),", either ",(0,s.jsx)(n,{term:"nil",children:(0,s.jsx)("b",{children:"nil"})})," or a non-negative ",(0,s.jsx)(i.em,{children:"integer"})," ."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"*"})," is not permitted as an argument."]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifiers"})})," (or) and ",(0,s.jsx)(n,{term:"nil",children:(0,s.jsx)("b",{children:"nil"})})," are equivalent. The symbol ",(0,s.jsx)(n,{term:"or",children:(0,s.jsx)("b",{children:"or"})})," is not valid as a ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifier"})})," ; and, specifically, it is not an abbreviation for (or)."]}),"\n",(0,s.jsx)(n,{term:"values",children:(0,s.jsx)("b",{children:"values"})}),"\n",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"Type Specifier"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,s.jsx)(i.p,{children:"Specializing."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,s.jsxs)(i.p,{children:["(values ",(0,s.jsx)(i.em,{children:"\u2193value-typespec"}),")"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:"value-typespec::"}),"=",(0,s.jsx)(i.em,{children:"{typespec}"}),"* [&optional ",(0,s.jsx)(i.em,{children:"{typespec}"}),"*] [&rest ",(0,s.jsx)(i.em,{children:"typespec"}),"] [",(0,s.jsx)(i.strong,{children:"&allow-other-keys"}),"]"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:"typespec"}),"\u2014a ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifier"})})," ."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,s.jsxs)(i.p,{children:["This ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifier"})})," can be used only as the ",(0,s.jsx)(i.em,{children:"value-type"})," in a ",(0,s.jsx)(n,{term:"function",children:(0,s.jsx)("b",{children:"function"})})," ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifier"})})," or a ",(0,s.jsx)(n,{term:"the",children:(0,s.jsx)("b",{children:"the"})})," ",(0,s.jsx)(t,{styled:!0,term:"special form",children:(0,s.jsx)("i",{children:"special form"})}),". It is used to specify individual ",(0,s.jsx)(t,{term:"type",children:(0,s.jsx)("i",{children:"types"})})," when ",(0,s.jsx)(t,{styled:!0,term:"multiple values",children:(0,s.jsx)("i",{children:"multiple values"})})," are involved. The ",(0,s.jsx)(i.strong,{children:"&optional"})," and ",(0,s.jsx)(i.strong,{children:"&rest"})," markers can appear in the ",(0,s.jsx)(i.em,{children:"value-type"})," list; they indicate the parameter list of a ",(0,s.jsx)(t,{term:"function",children:(0,s.jsx)("i",{children:"function"})})," that, when given to ",(0,s.jsx)(n,{term:"multiple-value-call",children:(0,s.jsx)("b",{children:"multiple-value-call"})})," along with the values, would correctly receive those values."]}),"\n",(0,s.jsxs)(i.p,{children:["The symbol ",(0,s.jsx)(i.strong,{children:"*"})," may not be among the ",(0,s.jsx)(i.em,{children:"value-types"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["The symbol ",(0,s.jsx)(n,{term:"values",children:(0,s.jsx)("b",{children:"values"})})," is not valid as a ",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"type specifier"})})," ; and, specifically, it is not an abbreviation for (values)."]}),"\n",(0,s.jsx)(n,{term:"eql",children:(0,s.jsx)("b",{children:"eql"})}),"\n",(0,s.jsx)(t,{styled:!0,term:"type specifier",children:(0,s.jsx)("i",{children:"Type Specifier"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,s.jsx)(i.p,{children:"Combining."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,s.jsxs)(i.p,{children:["(eql ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"object"})}),")"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"object"})}),"\u2014an ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"object"})}),"."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,s.jsxs)(i.p,{children:["Represents the ",(0,s.jsx)(t,{term:"type",children:(0,s.jsx)("i",{children:"type"})})," of all ",(0,s.jsx)(i.em,{children:"x"})," for which (eql ",(0,s.jsx)(i.em,{children:"object x"}),") is true."]}),"\n",(0,s.jsxs)(i.p,{children:["The argument ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"object"})})," is required. The ",(0,s.jsx)(t,{term:"object",children:(0,s.jsx)("i",{children:"object"})})," can be ",(0,s.jsx)(i.strong,{children:"*"}),", but if so it denotes itself (the symbol ",(0,s.jsx)(i.strong,{children:"*"}),") and does not represent an unspecified value. The ",(0,s.jsx)(t,{term:"symbol",children:(0,s.jsx)("i",{children:"symbol"})})," ",(0,s.jsx)(n,{term:"eql",children:(0,s.jsx)("b",{children:"eql"})})," is not valid as an ",(0,s.jsx)(t,{styled:!0,term:"atomic type specifier",children:(0,s.jsx)("i",{children:"atomic type specifier"})})," ."]})]})}function c(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}function l(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const d={title:"t"},h="t",p={id:"chap-4/e-e-dictionary/t_system-class",title:"t",description:"Expanded Reference: t",source:"@site/docs/chap-4/e-e-dictionary/t_system-class.md",sourceDirName:"chap-4/e-e-dictionary",slug:"/chap-4/e-e-dictionary/t_system-class",permalink:"/cl-language-reference/chap-4/e-e-dictionary/t_system-class",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/chap-4/e-e-dictionary/t_system-class.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{title:"t"},sidebar:"tutorialSidebar",previous:{title:"subtypep",permalink:"/cl-language-reference/chap-4/e-e-dictionary/subtypep_function"},next:{title:"type-error-datum, type-error-expected-type",permalink:"/cl-language-reference/chap-4/e-e-dictionary/type-error-datum_type-error-expected-type_function"}},o={},j=[{value:"Expanded Reference: t",id:"expanded-reference-t",level:2}];function x(e){const i={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"t",children:"t"}),"\n","\n","\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(i.h2,{id:"expanded-reference-t",children:"Expanded Reference: t"}),"\n",(0,s.jsx)(i.admonition,{type:"tip",children:(0,s.jsx)(i.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-lisp",children:"(t )\n"})})]})}function a(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},11151:(e,i,n)=>{n.d(i,{Z:()=>l,a:()=>c});var s=n(67294);const r={},t=s.createContext(r);function c(e){const i=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(t.Provider,{value:i},e.children)}}}]);