"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[12676],{89071:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>j,frontMatter:()=>o,metadata:()=>a,toc:()=>h});var t=i(85893),r=i(11151);function s(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:s}=n;return i||d("DictionaryLink",!0),s||d("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"signed-byte"})," ",(0,t.jsx)(s,{term:"type",children:(0,t.jsx)("i",{children:"Type"})})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Supertypes:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(i,{term:"signed-byte",children:(0,t.jsx)("b",{children:"signed-byte"})}),", ",(0,t.jsx)(i,{term:"integer",children:(0,t.jsx)("b",{children:"integer"})}),", ",(0,t.jsx)(i,{term:"rational",children:(0,t.jsx)("b",{children:"rational"})}),", ",(0,t.jsx)(i,{term:"real",children:(0,t.jsx)("b",{children:"real"})}),", ",(0,t.jsx)(i,{term:"number",children:(0,t.jsx)("b",{children:"number"})}),", ",(0,t.jsx)(i,{term:"t",children:(0,t.jsx)("b",{children:"t"})})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(n.p,{children:["The atomic ",(0,t.jsx)(s,{styled:!0,term:"type specifier",children:(0,t.jsx)("i",{children:"type specifier"})})," ",(0,t.jsx)(i,{term:"signed-byte",children:(0,t.jsx)("b",{children:"signed-byte"})})," denotes the same type as is denoted by the ",(0,t.jsx)(s,{styled:!0,term:"type specifier",children:(0,t.jsx)("i",{children:"type specifier"})})," ",(0,t.jsx)(i,{term:"integer",children:(0,t.jsx)("b",{children:"integer"})}),"; however, the list forms of these two ",(0,t.jsx)(s,{styled:!0,term:"type specifier",children:(0,t.jsx)("i",{children:"type specifiers"})})," have different semantics."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,t.jsx)(n.p,{children:"Abbreviating."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,t.jsxs)(n.p,{children:["(signed-byte [",(0,t.jsx)(n.em,{children:"s |"})," ",(0,t.jsx)(n.strong,{children:"*"}),"])"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"s"}),"\u2014a positive ",(0,t.jsx)(n.em,{children:"integer"})," ."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,t.jsxs)(n.p,{children:["This denotes the set of ",(0,t.jsx)("i",{children:"integers"})," that can be represented in two\u2019s-complement form in a ",(0,t.jsx)("i",{children:"byte"})," of ",(0,t.jsx)("i",{children:"s"})," bits. This is equivalent to (integer ",(0,t.jsx)("i",{children:"\u2212"}),"2",(0,t.jsxs)("sup",{children:[(0,t.jsx)("i",{children:"s\u2212"}),"1"]})," 2",(0,t.jsxs)("sup",{children:[(0,t.jsx)("i",{children:"s\u2212"}),"1"]})," ",(0,t.jsx)("i",{children:"\u2212"})," 1). The type ",(0,t.jsx)("b",{children:"signed-byte"})," or the type (signed-byte *) is the same as the ",(0,t.jsx)("i",{children:"type"})," ",(0,t.jsx)("b",{children:"integer"}),"."]})]})}function c(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}function d(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const o={title:"signed-byte"},l="signed-byte",a={id:"chap-12/bc-c-dictionary/signed-byte_type",title:"signed-byte",description:"Expanded Reference: signed-byte",source:"@site/docs/chap-12/bc-c-dictionary/signed-byte_type.md",sourceDirName:"chap-12/bc-c-dictionary",slug:"/chap-12/bc-c-dictionary/signed-byte_type",permalink:"/cl-language-reference/chap-12/bc-c-dictionary/signed-byte_type",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-12/bc-c-dictionary/signed-byte_type.md",tags:[],version:"current",frontMatter:{title:"signed-byte"},sidebar:"tutorialSidebar",previous:{title:"short-float, single-float, double-float, long-float",permalink:"/cl-language-reference/chap-12/bc-c-dictionary/short-float_single-float_double-float_long-float_type"},next:{title:"signum",permalink:"/cl-language-reference/chap-12/bc-c-dictionary/signum_function"}},p={},h=[{value:"Expanded Reference: signed-byte",id:"expanded-reference-signed-byte",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"signed-byte",children:"signed-byte"}),"\n","\n","\n",(0,t.jsx)(c,{}),"\n",(0,t.jsx)(n.h2,{id:"expanded-reference-signed-byte",children:"Expanded Reference: signed-byte"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"(signed-byte )\n"})})]})}function j(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(x,{...e})}):x(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>c});var t=i(67294);const r={},s=t.createContext(r);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);