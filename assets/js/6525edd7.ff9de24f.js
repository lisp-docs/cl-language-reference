"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[19467],{82874:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var r=t(85893),i=t(11151);function c(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components},{ClLinks:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"integer-length"})," ",(0,r.jsx)(t,{styled:!0,term:"function",children:(0,r.jsx)("i",{children:"Function"})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(t,{styled:!0,term:"integer-length",children:(0,r.jsx)("b",{children:"integer-length"})})," ",(0,r.jsx)(n.em,{children:"integer \u2192 number-of-bits"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"integer"}),"\u2014an ",(0,r.jsx)(n.em,{children:"integer"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"number-of-bits"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"integer"})," ."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns the number of bits needed to represent ",(0,r.jsx)(n.em,{children:"integer"})," in binary two\u2019s-complement format."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"\n(integer-length 0) \u2192 0 \n(integer-length 1) \u2192 1 \n(integer-length 3) \u2192 2 \n(integer-length 4) \u2192 3 \n(integer-length 7) \u2192 3 \n(integer-length -1) \u2192 0 \n(integer-length -4) \u2192 2 \n(integer-length -7) \u2192 3 \n(integer-length -8) \u2192 3 \n(integer-length (expt 2 9)) \u2192 10 \n(integer-length (1- (expt 2 9))) \u2192 9 \n(integer-length (- (expt 2 9))) \u2192 9 \n(integer-length (- (1+ (expt 2 9)))) \u2192 10 \n\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["Should signal an error of ",(0,r.jsx)(t,{styled:!0,term:"type",children:(0,r.jsx)("i",{children:"type"})})," ",(0,r.jsx)(t,{styled:!0,term:"type-error",children:(0,r.jsx)("b",{children:"type-error"})})," if ",(0,r.jsx)(n.em,{children:"integer"})," is not an ",(0,r.jsx)(n.em,{children:"integer"})," ."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsx)(n.p,{children:"This function could have been defined by:"}),"\n",(0,r.jsx)(n.p,{children:"(defun integer-length (integer)"}),"\n",(0,r.jsx)(n.p,{children:"(ceiling (log (if (minusp integer)"}),"\n",(0,r.jsx)(n.p,{children:"(- integer)"}),"\n",(0,r.jsx)(n.p,{children:"(1+ integer))"}),"\n",(0,r.jsx)(n.p,{children:"2)))"}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"integer"})," is non-negative, then its value can be represented in unsigned binary form in a field whose width in bits is no smaller than (integer-length ",(0,r.jsx)(n.em,{children:"integer"}),"). Regardless of the sign of ",(0,r.jsx)(n.em,{children:"integer"}),", its value can be represented in signed binary two\u2019s-complement form in a field whose width in bits is no smaller than (+ (integer-length ",(0,r.jsx)(n.em,{children:"integer"}),") 1)."]})]})}function s(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}const l={title:"integer-length"},o="integer-length",d={id:"chap-12/bc-c-dictionary/integer-length_function",title:"integer-length",description:"Expanded Reference: integer-length",source:"@site/docs/chap-12/bc-c-dictionary/integer-length_function.md",sourceDirName:"chap-12/bc-c-dictionary",slug:"/chap-12/bc-c-dictionary/integer-length_function",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/integer-length_function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-12/bc-c-dictionary/integer-length_function.md",tags:[],version:"current",frontMatter:{title:"integer-length"},sidebar:"tutorialSidebar",previous:{title:"incf, decf",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/incf_decf_macro"},next:{title:"integer",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/integer_system-class"}},g={},h=[{value:"Expanded Reference: integer-length",id:"expanded-reference-integer-length",level:2}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"integer-length",children:"integer-length"}),"\n","\n","\n",(0,r.jsx)(s,{}),"\n",(0,r.jsx)(n.h2,{id:"expanded-reference-integer-length",children:"Expanded Reference: integer-length"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(integer-length )\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>s});var r=t(67294);const i={},c=r.createContext(i);function s(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);