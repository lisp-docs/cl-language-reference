"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[96182],{70176:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>x,frontMatter:()=>l,metadata:()=>a,toc:()=>h});var r=i(85893),t=i(11151);function s(e){const n={em:"em",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," ",(0,r.jsx)(n.em,{children:"Macro"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," (",(0,r.jsx)(n.em,{children:"stream-symbol object"})," &key ",(0,r.jsx)(n.em,{children:"prefix per-line-prefix suffix"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"{declaration}"}),"* ",(0,r.jsx)(n.em,{children:"{form}"}),"*"]}),"\n",(0,r.jsxs)(n.p,{children:["\u2192 ",(0,r.jsx)(n.strong,{children:"nil"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"stream-symbol"}),"\u2014a ",(0,r.jsx)(n.em,{children:"stream variable designator"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"object"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"; evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[":prefix","\u2014a ",(0,r.jsx)(n.em,{children:"string"}),"; evaluated. Complicated defaulting behavior; see below."]}),"\n",(0,r.jsxs)(n.p,{children:[":per-line-prefix","\u2014a ",(0,r.jsx)(n.em,{children:"string"}),"; evaluated. Complicated defaulting behavior; see below. ",":suffix","\u2014a ",(0,r.jsx)(n.em,{children:"string"}),"; evaluated. The default is the ",(0,r.jsx)(n.em,{children:"null string"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,r.jsx)(n.strong,{children:"declare"})," ",(0,r.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"forms"}),"\u2014an ",(0,r.jsx)(n.em,{children:"implicit progn"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"pprint-logical-block"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsx)(n.p,{children:"Causes printing to be grouped into a logical block."}),"\n",(0,r.jsxs)(n.p,{children:["The logical block is printed to the ",(0,r.jsx)(n.em,{children:"stream"})," that is the ",(0,r.jsx)(n.em,{children:"value"})," of the ",(0,r.jsx)(n.em,{children:"variable"})," denoted by ",(0,r.jsx)(n.em,{children:"stream-symbol"}),". During the execution of the ",(0,r.jsx)(n.em,{children:"forms"}),", that ",(0,r.jsx)(n.em,{children:"variable"})," is ",(0,r.jsx)(n.em,{children:"bound"})," to a ",(0,r.jsx)(n.em,{children:"pretty printing stream"})," that supports decisions about the arrangement of output and then forwards the output to the destination stream. All the standard printing functions (",(0,r.jsx)(n.em,{children:"e.g."}),", ",(0,r.jsx)(n.strong,{children:"write"}),", ",(0,r.jsx)(n.strong,{children:"princ"}),", and ",(0,r.jsx)(n.strong,{children:"terpri"}),") can be used to print output to the ",(0,r.jsx)(n.em,{children:"pretty printing stream"}),". All and only the output sent to this ",(0,r.jsx)(n.em,{children:"pretty printing stream"})," is treated as being in the logical block."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"prefix"})," specifies a prefix to be printed before the beginning of the logical block. The ",(0,r.jsx)(n.em,{children:"per-line-prefix"})," specifies a prefix that is printed before the block and at the beginning of each new line in the block. The ",":prefix"," and ",":pre-line-prefix"," ",(0,r.jsx)(n.em,{children:"arguments"})," are mutually exclusive. If neither ",":prefix"," nor ",":per-line-prefix"," is specified, a ",(0,r.jsx)(n.em,{children:"prefix"})," of the ",(0,r.jsx)(n.em,{children:"null string"})," is assumed."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"suffix"})," specifies a suffix that is printed just after the logical block."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"object"})," is normally a ",(0,r.jsx)(n.em,{children:"list"})," that the body ",(0,r.jsx)(n.em,{children:"forms"})," are responsible for printing. If ",(0,r.jsx)(n.em,{children:"object"})," is not a ",(0,r.jsx)(n.em,{children:"list"}),", it is printed using ",(0,r.jsx)(n.strong,{children:"write"}),". (This makes it easier to write printing functions that are robust in the face of malformed arguments.) If ",(0,r.jsx)(n.strong,{children:"*print-circle*"})," is ",(0,r.jsx)(n.em,{children:"non-nil"})," and ",(0,r.jsx)(n.em,{children:"object"})," is a circular (or shared) reference to a ",(0,r.jsx)(n.em,{children:"cons"}),", then an appropriate \u201c#",(0,r.jsx)(n.em,{children:"n"}),"#\u201d marker is printed. (This makes it easy to write printing"]}),"\n",(0,r.jsxs)(n.p,{children:["functions that provide full support for circularity and sharing abbreviation.) If ",(0,r.jsx)(n.strong,{children:"*print-level*"})," is not ",(0,r.jsx)(n.strong,{children:"nil"})," and the logical block is at a dynamic nesting depth of greater than ",(0,r.jsx)(n.strong,{children:"*print-level*"})," in logical blocks, \u201c#\u201d is printed. (This makes easy to write printing functions that provide full support for depth abbreviation.)"]}),"\n",(0,r.jsxs)(n.p,{children:["If either of the three conditions above occurs, the indicated output is printed on ",(0,r.jsx)(n.em,{children:"stream-symbol"})," and the body ",(0,r.jsx)(n.em,{children:"forms"})," are skipped along with the printing of the ",":prefix"," and ",":suffix",". (If the body ",(0,r.jsx)(n.em,{children:"forms"})," are not to be responsible for printing a list, then the first two tests above can be turned off by supplying ",(0,r.jsx)(n.strong,{children:"nil"})," for the ",(0,r.jsx)(n.em,{children:"object"})," argument.)"]}),"\n",(0,r.jsxs)(n.p,{children:["In addition to the ",(0,r.jsx)(n.em,{children:"object"})," argument of ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"}),", the arguments of the standard printing functions (such as ",(0,r.jsx)(n.strong,{children:"write"}),", ",(0,r.jsx)(n.strong,{children:"print"}),", ",(0,r.jsx)(n.strong,{children:"prin1"}),", and ",(0,r.jsx)(n.strong,{children:"pprint"}),", as well as the arguments of the standard ",(0,r.jsx)(n.em,{children:"format directives"})," such as ~A, ~S, (and ~W) are all checked (when necessary) for circularity and sharing. However, such checking is not applied to the arguments of the functions ",(0,r.jsx)(n.strong,{children:"write-line"}),", ",(0,r.jsx)(n.strong,{children:"write-string"}),", and ",(0,r.jsx)(n.strong,{children:"write-char"})," or to the literal text output by ",(0,r.jsx)(n.strong,{children:"format"}),". A consequence of this is that you must use one of the latter functions if you want to print some literal text in the output that is not supposed to be checked for circularity or sharing."]}),"\n",(0,r.jsxs)(n.p,{children:["The body ",(0,r.jsx)(n.em,{children:"forms"})," of a ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," ",(0,r.jsx)(n.em,{children:"form"})," must not perform any side-effects on the surrounding environment; for example, no ",(0,r.jsx)(n.em,{children:"variables"})," must be assigned which have not been ",(0,r.jsx)(n.em,{children:"bound"})," within its scope."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," ",(0,r.jsx)(n.em,{children:"macro"})," may be used regardless of the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-pretty*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Affected By:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"*print-circle*"}),", ",(0,r.jsx)(n.strong,{children:"*print-level*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["An error of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"type-error"})," is signaled if any of the ",":suffix",", ",":prefix",", or ",":per-line-prefix"," is supplied but does not evaluate to a ",(0,r.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["An error is signaled if ",":prefix"," and ",":pre-line-prefix"," are both used."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," and the ",(0,r.jsx)(n.em,{children:"pretty printing stream"})," it creates have ",(0,r.jsx)(n.em,{children:"dynamic extent"}),". The consequences are undefined if, outside of this extent, output is attempted to the ",(0,r.jsx)(n.em,{children:"pretty printing stream"})," it creates."]}),"\n",(0,r.jsx)(n.p,{children:"It is also unspecified what happens if, within this extent, any output is sent directly to the underlying destination stream."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pprint-pop"}),", ",(0,r.jsx)(n.strong,{children:"pprint-exit-if-list-exhausted"}),", Section 22.3.5.2 (Tilde Less-Than-Sign: Logical Block)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["One reason for using the ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," ",(0,r.jsx)(n.em,{children:"macro"})," when the ",(0,r.jsx)(n.em,{children:"value"})," of ",(0,r.jsx)(n.strong,{children:"*print-pretty*"})," is ",(0,r.jsx)(n.strong,{children:"nil"})," would be to allow it to perform checking for ",(0,r.jsx)(n.em,{children:"dotted lists"}),", as well as (in conjunction with ",(0,r.jsx)(n.strong,{children:"pprint-pop"}),") checking for ",(0,r.jsx)(n.strong,{children:"*print-level*"})," or ",(0,r.jsx)(n.strong,{children:"*print-length*"})," being exceeded."]}),"\n",(0,r.jsxs)(n.p,{children:["Detection of circularity and sharing is supported by the ",(0,r.jsx)(n.em,{children:"pretty printer"})," by in essence performing requested output twice. On the first pass, circularities and sharing are detected and the actual outputting of characters is suppressed. On the second pass, the appropriate \u201c#",(0,r.jsx)(n.em,{children:"n"}),"=\u201d and \u201c#",(0,r.jsx)(n.em,{children:"n"}),"#\u201d markers are inserted and characters are output. This is why the restriction on side-effects is necessary. Obeying this restriction is facilitated by using ",(0,r.jsx)(n.strong,{children:"pprint-pop"}),", instead of an ordinary ",(0,r.jsx)(n.strong,{children:"pop"})," when traversing a list being printed by the body ",(0,r.jsx)(n.em,{children:"forms"})," of the ",(0,r.jsx)(n.strong,{children:"pprint-logical-block"})," ",(0,r.jsx)(n.em,{children:"form"}),".)"]})]})}function c(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}const l={title:"pprint-logical-block"},o="pprint-logical-block",a={id:"chap-22/cc-e-dictionary/pprint-logical-block_macro",title:"pprint-logical-block",description:"Expanded Reference: pprint-logical-block",source:"@site/docs/chap-22/cc-e-dictionary/pprint-logical-block_macro.md",sourceDirName:"chap-22/cc-e-dictionary",slug:"/chap-22/cc-e-dictionary/pprint-logical-block_macro",permalink:"/cl-language-reference/docs/chap-22/cc-e-dictionary/pprint-logical-block_macro",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-22/cc-e-dictionary/pprint-logical-block_macro.md",tags:[],version:"current",frontMatter:{title:"pprint-logical-block"},sidebar:"tutorialSidebar",previous:{title:"pprint-indent",permalink:"/cl-language-reference/docs/chap-22/cc-e-dictionary/pprint-indent_function"},next:{title:"pprint-newline",permalink:"/cl-language-reference/docs/chap-22/cc-e-dictionary/pprint-newline_function"}},d={},h=[{value:"Expanded Reference: pprint-logical-block",id:"expanded-reference-pprint-logical-block",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"pprint-logical-block",children:"pprint-logical-block"}),"\n","\n","\n",(0,r.jsx)(c,{}),"\n",(0,r.jsx)(n.h2,{id:"expanded-reference-pprint-logical-block",children:"Expanded Reference: pprint-logical-block"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(pprint-logical-block )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>c});var r=i(67294);const t={},s=r.createContext(t);function c(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);