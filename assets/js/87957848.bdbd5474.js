"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[22262],{10652:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>x,frontMatter:()=>o,metadata:()=>d,toc:()=>a});var r=s(85893),t=s(11151);function c(e){const n={em:"em",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"vector"})," ",(0,r.jsx)(n.em,{children:"System Class"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Class Precedence List:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"vector"}),", ",(0,r.jsx)(n.strong,{children:"array"}),", ",(0,r.jsx)(n.strong,{children:"sequence"}),", ",(0,r.jsx)(n.strong,{children:"t"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Any one-dimensional ",(0,r.jsx)(n.em,{children:"array"})," is a ",(0,r.jsx)(n.em,{children:"vector"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"vector"})," is a ",(0,r.jsx)(n.em,{children:"subtype"})," of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"array"}),"; for all ",(0,r.jsx)(n.em,{children:"types"})," x, (vector x) is the same as (array x (*)). The ",(0,r.jsx)(n.em,{children:"type"})," (vector t), the ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"string"}),", and the ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"bit-vector"})," are ",(0,r.jsx)(n.em,{children:"disjoint subtypes"})," of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"vector"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,r.jsx)(n.p,{children:"Specializing."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:["(vector [",(0,r.jsx)(n.em,{children:"{element-type |"})," ",(0,r.jsx)(n.strong,{children:"*"}),(0,r.jsx)(n.em,{children:"}"})," [",(0,r.jsx)(n.em,{children:"{size |"})," ",(0,r.jsx)(n.strong,{children:"*"}),(0,r.jsx)(n.em,{children:"}"}),"]])"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"size"}),"\u2014a non-negative ",(0,r.jsx)(n.em,{children:"fixnum"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"element-type"}),"\u2014a ",(0,r.jsx)(n.em,{children:"type specifier"})," ."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["This denotes the set of specialized ",(0,r.jsx)(n.em,{children:"vectors"})," whose ",(0,r.jsx)(n.em,{children:"element type"})," and ",(0,r.jsx)(n.em,{children:"dimension"})," match the specified values. Specifically:"]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"element-type"})," is the ",(0,r.jsx)(n.em,{children:"symbol"})," ",(0,r.jsx)(n.strong,{children:"*"}),", ",(0,r.jsx)(n.em,{children:"vectors"})," are not excluded on the basis of their ",(0,r.jsx)(n.em,{children:"element type"}),". Otherwise, only those ",(0,r.jsx)(n.em,{children:"vectors"})," are included whose ",(0,r.jsx)(n.em,{children:"actual array element type"})," is the result of ",(0,r.jsx)(n.em,{children:"upgrading element-type"}),"; see Section 15.1.2.1 (Array Upgrading)."]}),"\n",(0,r.jsxs)(n.p,{children:["If a ",(0,r.jsx)(n.em,{children:"size"})," is specified, the set includes only those ",(0,r.jsx)(n.em,{children:"vectors"})," whose only ",(0,r.jsx)(n.em,{children:"dimension"})," is ",(0,r.jsx)(n.em,{children:"size"}),". If the ",(0,r.jsx)(n.em,{children:"symbol"})," ",(0,r.jsx)(n.strong,{children:"*"})," is specified instead of a ",(0,r.jsx)(n.em,{children:"size"}),", the set is not restricted on the basis of ",(0,r.jsx)(n.em,{children:"dimension"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:"Section 15.1.2.2 (Required Kinds of Specialized Arrays), Section 2.4.8.3 (Sharpsign Left Parenthesis), Section 22.1.3.7 (Printing Other Vectors), Section 2.4.8.12 (Sharpsign A)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"type"})," (vector ",(0,r.jsx)(n.em,{children:"e s"}),") is equivalent to the ",(0,r.jsx)(n.em,{children:"type"})," (array ",(0,r.jsx)(n.em,{children:"e"})," (",(0,r.jsx)(n.em,{children:"s"}),"))."]}),"\n",(0,r.jsxs)(n.p,{children:["The type (vector bit) has the name ",(0,r.jsx)(n.strong,{children:"bit-vector"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The union of all ",(0,r.jsx)(n.em,{children:"types"})," (vector ",(0,r.jsx)(n.em,{children:"C"}),"), where ",(0,r.jsx)(n.em,{children:"C"})," is any ",(0,r.jsx)(n.em,{children:"subtype"})," of ",(0,r.jsx)(n.strong,{children:"character"}),", has the name ",(0,r.jsx)(n.strong,{children:"string"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["(vector *) refers to all ",(0,r.jsx)(n.em,{children:"vectors"})," regardless of element type, (vector ",(0,r.jsx)(n.em,{children:"type-specifier"}),") refers only to those ",(0,r.jsx)(n.em,{children:"vectors"})," that can result from giving ",(0,r.jsx)(n.em,{children:"type-specifier"})," as the ",":element-type"," argument to ",(0,r.jsx)(n.strong,{children:"make-array"}),"."]})]})}function i(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}const o={title:"vector"},l="vector",d={id:"chap-15/bf-c-dictionary/vector_system-class",title:"vector",description:"Expanded Reference: vector",source:"@site/docs/chap-15/bf-c-dictionary/vector_system-class.md",sourceDirName:"chap-15/bf-c-dictionary",slug:"/chap-15/bf-c-dictionary/vector_system-class",permalink:"/cl-language-reference/docs/chap-15/bf-c-dictionary/vector_system-class",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-15/bf-c-dictionary/vector_system-class.md",tags:[],version:"current",frontMatter:{title:"vector"},sidebar:"tutorialSidebar",previous:{title:"vector",permalink:"/cl-language-reference/docs/chap-15/bf-c-dictionary/vector_function"},next:{title:"vectorp",permalink:"/cl-language-reference/docs/chap-15/bf-c-dictionary/vectorp_function"}},h={},a=[{value:"Expanded Reference: vector",id:"expanded-reference-vector",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"vector",children:"vector"}),"\n","\n","\n",(0,r.jsx)(i,{}),"\n",(0,r.jsx)(n.h2,{id:"expanded-reference-vector",children:"Expanded Reference: vector"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(vector )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>i});var r=s(67294);const t={},c=r.createContext(t);function i(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);