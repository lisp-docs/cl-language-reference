"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[24703],{68941:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>h,default:()=>p,frontMatter:()=>d,metadata:()=>a,toc:()=>l});var i=t(85893),r=t(11151);function o(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"define-method-combination"})," ",(0,i.jsx)(n.em,{children:"Macro"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"define-method-combination"})," ",(0,i.jsx)(n.em,{children:"name"})," [[ ",(0,i.jsx)(n.em,{children:"\u2193short-form-option"})," ]]"]}),"\n",(0,i.jsx)(n.p,{children:"\u2192 name"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"define-method-combination"})," ",(0,i.jsx)(n.em,{children:"name lambda-list"})]}),"\n",(0,i.jsxs)(n.p,{children:["(",(0,i.jsx)(n.em,{children:"{method-group-specifier}"}),"*)"]}),"\n",(0,i.jsxs)(n.p,{children:["[(",":arguments"," ",(0,i.jsx)(n.em,{children:". args-lambda-list"}),")]"]}),"\n",(0,i.jsxs)(n.p,{children:["[(",":generic-function"," ",(0,i.jsx)(n.em,{children:"generic-function-symbol"}),")]"]}),"\n",(0,i.jsxs)(n.p,{children:["[[ ",(0,i.jsx)(n.em,{children:"{declaration}"}),"* ",(0,i.jsx)(n.em,{children:"| documentation"})," ]]"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"{form}"}),"*"]}),"\n",(0,i.jsx)(n.p,{children:"\u2192 name"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"short-form-option::"}),"=",":documentation"," ",(0,i.jsx)(n.em,{children:"documentation |"})]}),"\n",(0,i.jsxs)(n.p,{children:[":identity-with-one-argument"," ",(0,i.jsx)(n.em,{children:"identity-with-one-argument |"})]}),"\n",(0,i.jsxs)(n.p,{children:[":operator"," ",(0,i.jsx)(n.em,{children:"operator"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"method-group-specifier::"}),"=(",(0,i.jsx)(n.em,{children:"name {{qualifier-pattern}"}),(0,i.jsx)("sup",{children:"+"}),(0,i.jsx)(n.em,{children:"| predicate}"})," [[ ",(0,i.jsx)(n.em,{children:"\u2193long-form-option"})," ]])"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"long-form-option::"}),"=",":description"," ",(0,i.jsx)(n.em,{children:"description |"})]}),"\n",(0,i.jsxs)(n.p,{children:[":order"," ",(0,i.jsx)(n.em,{children:"order |"})]}),"\n",(0,i.jsxs)(n.p,{children:[":required"," ",(0,i.jsx)(n.em,{children:"required-p"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"args-lambda-list"}),"\u2014a ",(0,i.jsx)(n.em,{children:"define-method-combination arguments lambda list"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,i.jsx)(n.strong,{children:"declare"})," ",(0,i.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"description"}),"\u2014a ",(0,i.jsx)(n.em,{children:"format control"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"documentation"}),"\u2014a ",(0,i.jsx)(n.em,{children:"string"}),"; not evaluated."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"forms"}),"\u2014an ",(0,i.jsx)(n.em,{children:"implicit progn"})," that must compute and return the ",(0,i.jsx)(n.em,{children:"form"})," that specifies how the ",(0,i.jsx)(n.em,{children:"methods"})," are combined, that is, the ",(0,i.jsx)(n.em,{children:"effective method"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"define-method-combination"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"generic-function-symbol"}),"\u2014a ",(0,i.jsx)(n.em,{children:"symbol"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"identity-with-one-argument"}),"\u2014a ",(0,i.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"lambda-list"}),"\u2014",(0,i.jsx)(n.em,{children:"ordinary lambda list"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"name"}),"\u2014a ",(0,i.jsx)(n.em,{children:"symbol"}),". Non-",(0,i.jsx)(n.em,{children:"keyword"}),", ",(0,i.jsx)(n.em,{children:"non-nil symbols"})," are usually used."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"operator"}),"\u2014an ",(0,i.jsx)(n.em,{children:"operator"})," . ",(0,i.jsx)(n.em,{children:"Name"})," and ",(0,i.jsx)(n.em,{children:"operator"})," are often the ",(0,i.jsx)(n.em,{children:"same symbol"}),". This is the default, but it is not required."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"order"}),"\u2014",":most-specific-first"," or ",":most-specific-last","; evaluated."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"predicate"}),"\u2014a ",(0,i.jsx)(n.em,{children:"symbol"})," that names a ",(0,i.jsx)(n.em,{children:"function"})," of one argument that returns a ",(0,i.jsx)(n.em,{children:"generalized boolean"}),". ",(0,i.jsx)(n.em,{children:"qualifier-pattern"}),"\u2014a ",(0,i.jsx)(n.em,{children:"list"}),", or the ",(0,i.jsx)(n.em,{children:"symbol"})," ",(0,i.jsx)(n.strong,{children:"*"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"required-p"}),"\u2014a ",(0,i.jsx)(n.em,{children:"generalized boolean"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(n.p,{children:["The macro ",(0,i.jsx)(n.strong,{children:"define-method-combination"})," is used to define new types of method combination."]}),"\n",(0,i.jsxs)(n.p,{children:["There are two forms of ",(0,i.jsx)(n.strong,{children:"define-method-combination"}),". The short form is a simple facility for the cases that are expected to be most commonly needed. The long form is more powerful but more verbose. It resembles ",(0,i.jsx)(n.strong,{children:"defmacro"})," in that the body is an expression, usually using backquote, that computes a ",(0,i.jsx)(n.em,{children:"form"}),". Thus arbitrary control structures can be implemented. The long form also allows"]}),"\n",(0,i.jsxs)(n.p,{children:["arbitrary processing of method ",(0,i.jsx)(n.em,{children:"qualifiers"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Short Form"})}),"\n",(0,i.jsxs)(n.p,{children:["The short form syntax of ",(0,i.jsx)(n.strong,{children:"define-method-combination"})," is recognized when the sec ond ",(0,i.jsx)(n.em,{children:"subform"})," is a ",(0,i.jsx)(n.em,{children:"non-nil"})," symbol or is not present. When the short form is"]}),"\n",(0,i.jsxs)(n.p,{children:["used, ",(0,i.jsx)(n.em,{children:"name"})," is defined as a type of method combination that produces a Lisp form (",(0,i.jsx)(n.em,{children:"operator method-call method-call . . ."}),"). The ",(0,i.jsx)(n.em,{children:"operator"})," is a ",(0,i.jsx)(n.em,{children:"symbol"})," that can be the ",(0,i.jsx)(n.em,{children:"name"})," of a ",(0,i.jsx)(n.em,{children:"function"}),", ",(0,i.jsx)(n.em,{children:"macro"}),", or ",(0,i.jsx)(n.em,{children:"special operator"})," . The ",(0,i.jsx)(n.em,{children:"operator"})," can be supplied by a keyword option; it defaults to ",(0,i.jsx)(n.em,{children:"name"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Keyword options for the short form are the following:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"\u2022"})," The ",":documentation"," option is used to document the method-combination type; see description of long form below."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"\u2022"})," The ",":identity-with-one-argument"," option enables an optimization when its value is ",(0,i.jsx)(n.em,{children:"true"})," (the default is ",(0,i.jsx)(n.em,{children:"false"}),"). If there is exactly one applicable method and it is a"]}),"\n",(0,i.jsxs)(n.p,{children:["primary method, that method serves as the effective method and ",(0,i.jsx)(n.em,{children:"operator"})," is not"]}),"\n",(0,i.jsx)(n.p,{children:"called. This optimization avoids the need to create a new effective method and"}),"\n",(0,i.jsxs)(n.p,{children:["avoids the overhead of a ",(0,i.jsx)(n.em,{children:"function"})," call. This option is designed to be used with"]}),"\n",(0,i.jsxs)(n.p,{children:["operators such as ",(0,i.jsx)(n.strong,{children:"progn"}),", ",(0,i.jsx)(n.strong,{children:"and"}),", +, and ",(0,i.jsx)(n.strong,{children:"max"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"define-method-combination"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"\u2022"})," The ",":operator"," option specifies the ",(0,i.jsx)(n.em,{children:"name"})," of the operator. The ",(0,i.jsx)(n.em,{children:"operator"})," argument is a ",(0,i.jsx)(n.em,{children:"symbol"})," that can be the ",(0,i.jsx)(n.em,{children:"name"})," of a ",(0,i.jsx)(n.em,{children:"function"}),", ",(0,i.jsx)(n.em,{children:"macro"}),", or ",(0,i.jsx)(n.em,{children:"special form"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["These types of method combination require exactly one ",(0,i.jsx)(n.em,{children:"qualifier"})," per method. An error is signaled if there are applicable methods with no ",(0,i.jsx)(n.em,{children:"qualifiers"})," or with ",(0,i.jsx)(n.em,{children:"qualifiers"})," that are not supported by the method combination type."]}),"\n",(0,i.jsxs)(n.p,{children:["A method combination procedure defined in this way recognizes two roles for methods. A method whose one ",(0,i.jsx)(n.em,{children:"qualifier"})," is the symbol naming this type of method combination is defined to be a primary method. At least one primary method must be applicable or an error is signaled. A method with ",":around"," as its one ",(0,i.jsx)(n.em,{children:"qualifier"})," is an auxiliary method that behaves the same as an ",(0,i.jsx)(n.em,{children:"around method"})," in standard method combination. The ",(0,i.jsx)(n.em,{children:"function"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"call-next-method"})," can only be used in ",(0,i.jsx)(n.em,{children:"around methods"}),"; it cannot be used in primary methods defined by the short form of the ",(0,i.jsx)(n.strong,{children:"define-method-combination"})," macro."]}),"\n",(0,i.jsxs)(n.p,{children:["A method combination procedure defined in this way accepts an optional argument named ",(0,i.jsx)(n.em,{children:"order"}),", which defaults to ",":most-specific-first",". A value of ",":most-specific-last"," reverses the order of the primary methods without affecting the order of the auxiliary methods."]}),"\n",(0,i.jsxs)(n.p,{children:["The short form automatically includes error checking and support for ",(0,i.jsx)(n.em,{children:"around methods"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"For a discussion of built-in method combination types, see Section 7.6.6.4 (Built-in Method Combination Types)."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Long Form"})}),"\n",(0,i.jsxs)(n.p,{children:["The long form syntax of ",(0,i.jsx)(n.strong,{children:"define-method-combination"})," is recognized when the second ",(0,i.jsx)(n.em,{children:"subform"})," is a list."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"lambda-list"})," receives any arguments provided after the ",(0,i.jsx)(n.em,{children:"name"})," of the method combination type in the ",":method-combination"," option to ",(0,i.jsx)(n.strong,{children:"defgeneric"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A list of method group specifiers follows. Each specifier selects a subset of the applicable methods to play a particular role, either by matching their ",(0,i.jsx)(n.em,{children:"qualifiers"})," against some patterns or by testing their ",(0,i.jsx)(n.em,{children:"qualifiers"})," with a ",(0,i.jsx)(n.em,{children:"predicate"}),". These method group specifiers define all method ",(0,i.jsx)(n.em,{children:"qualifiers"})," that can be used with this type of method combination."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"car"})," of each ",(0,i.jsx)(n.em,{children:"method-group-specifier"})," is a ",(0,i.jsx)(n.em,{children:"symbol"})," which ",(0,i.jsx)(n.em,{children:"names"})," a ",(0,i.jsx)(n.em,{children:"variable"}),". During the execution of the ",(0,i.jsx)(n.em,{children:"forms"})," in the body of ",(0,i.jsx)(n.strong,{children:"define-method-combination"}),", this ",(0,i.jsx)(n.em,{children:"variable"})," is bound to a list of the ",(0,i.jsx)(n.em,{children:"methods"})," in the method group. The ",(0,i.jsx)(n.em,{children:"methods"})," in this list occur in the order specified by the ",":order"," option."]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.em,{children:"qualifier-pattern"})," is a ",(0,i.jsx)(n.em,{children:"symbol"})," it must be ",(0,i.jsx)(n.strong,{children:"*"}),". A method matches a ",(0,i.jsx)(n.em,{children:"qualifier-pattern"})," if the method\u2019s list of ",(0,i.jsx)(n.em,{children:"qualifiers"})," is ",(0,i.jsx)(n.strong,{children:"equal"})," to the ",(0,i.jsx)(n.em,{children:"qualifier-pattern"})," (except that the symbol ",(0,i.jsx)(n.strong,{children:"*"})," in a ",(0,i.jsx)(n.em,{children:"qualifier-pattern"})," matches anything). Thus a ",(0,i.jsx)(n.em,{children:"qualifier-pattern"})," can be one of the following: the ",(0,i.jsx)(n.em,{children:"empty list"}),", which matches ",(0,i.jsx)(n.em,{children:"unqualified methods"}),"; the symbol ",(0,i.jsx)(n.strong,{children:"*"}),", which matches all methods; a true list, which matches methods with the same number of ",(0,i.jsx)(n.em,{children:"qualifiers"})," as the length of the list when each ",(0,i.jsx)(n.em,{children:"qualifier"})," matches the corresponding list element; or a dotted list that ends"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"define-method-combination"})}),"\n",(0,i.jsxs)(n.p,{children:["in the symbol ",(0,i.jsx)(n.strong,{children:"*"})," (the ",(0,i.jsx)(n.strong,{children:"*"})," matches any number of additional ",(0,i.jsx)(n.em,{children:"qualifiers"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["Each applicable method is tested against the ",(0,i.jsx)(n.em,{children:"qualifier-patterns"})," and ",(0,i.jsx)(n.em,{children:"predicates"})," in left-to-right order. As soon as a ",(0,i.jsx)(n.em,{children:"qualifier-pattern"})," matches or a ",(0,i.jsx)(n.em,{children:"predicate"})," returns true, the method becomes a member of the corresponding method group and no further tests are made. Thus if a method could be a member of more than one method group, it joins only the first such group. If a method group has more than one ",(0,i.jsx)(n.em,{children:"qualifier-pattern"}),", a method need only satisfy one of the ",(0,i.jsx)(n.em,{children:"qualifier-patterns"})," to be a member of the group."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"name"})," of a ",(0,i.jsx)(n.em,{children:"predicate"})," function can appear instead of ",(0,i.jsx)(n.em,{children:"qualifier-patterns"})," in a method group specifier. The ",(0,i.jsx)(n.em,{children:"predicate"})," is called for each method that has not been assigned to an earlier method group; it is called with one argument, the method\u2019s ",(0,i.jsx)(n.em,{children:"qualifier list"}),". The ",(0,i.jsx)(n.em,{children:"predicate"})," should return true if the method is to be a member of the method group. A ",(0,i.jsx)(n.em,{children:"predicate"})," can be distinguished from a ",(0,i.jsx)(n.em,{children:"qualifier-pattern"})," because it is a ",(0,i.jsx)(n.em,{children:"symbol"})," other than ",(0,i.jsx)(n.strong,{children:"nil"})," or ",(0,i.jsx)(n.strong,{children:"*"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If there is an applicable method that does not fall into any method group, the ",(0,i.jsx)(n.em,{children:"function"})," ",(0,i.jsx)(n.strong,{children:"invalid-method-error"})," is called."]}),"\n",(0,i.jsxs)(n.p,{children:["Method group specifiers can have keyword options following the ",(0,i.jsx)(n.em,{children:"qualifier"})," patterns or predicate. Keyword options can be distinguished from additional ",(0,i.jsx)(n.em,{children:"qualifier"})," patterns because they are neither lists nor the symbol ",(0,i.jsx)(n.strong,{children:"*"}),". The keyword options are as follows:"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"\u2022"})," The ",":description"," option is used to provide a description of the role of methods in the method group. Programming environment tools use (apply #\u2019format stream"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"format-control"})," (method-qualifiers ",(0,i.jsx)(n.em,{children:"method"}),")) to print this description, which is"]}),"\n",(0,i.jsx)(n.p,{children:"expected to be concise. This keyword option allows the description of a method"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"qualifier"})," to be defined in the same module that defines the meaning of the method"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"qualifier"})," . In most cases, ",(0,i.jsx)(n.em,{children:"format-control"})," will not contain any ",(0,i.jsx)(n.strong,{children:"format"})," directives,"]}),"\n",(0,i.jsxs)(n.p,{children:["but they are available for generality. If ",":description"," is not supplied, a default"]}),"\n",(0,i.jsxs)(n.p,{children:["description is generated based on the variable name and the ",(0,i.jsx)(n.em,{children:"qualifier"})," patterns and"]}),"\n",(0,i.jsxs)(n.p,{children:["on whether this method group includes the ",(0,i.jsx)(n.em,{children:"unqualified methods"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"\u2022"})," The ",":order"," option specifies the order of methods. The ",(0,i.jsx)(n.em,{children:"order"})," argument is a ",(0,i.jsx)(n.em,{children:"form"})," that evaluates to ",":most-specific-first"," or ",":most-specific-last",". If it evaluates"]}),"\n",(0,i.jsxs)(n.p,{children:["to any other value, an error is signaled. If ",":order"," is not supplied, it defaults to"]}),"\n",(0,i.jsxs)(n.p,{children:[":most-specific-first","."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"\u2022"})," The ",":required"," option specifies whether at least one method in this method group is required. If its value is ",(0,i.jsx)(n.em,{children:"true"})," and the method group is empty (that is, no"]}),"\n",(0,i.jsxs)(n.p,{children:["applicable methods match the ",(0,i.jsx)(n.em,{children:"qualifier"})," patterns or satisfy the predicate), an error"]}),"\n",(0,i.jsxs)(n.p,{children:["is signaled. If ",":required"," is not supplied, it defaults to ",(0,i.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The use of method group specifiers provides a convenient syntax to select methods, to divide them among the possible roles, and to perform the necessary error checking. It is possible to perform further filtering of methods in the body ",(0,i.jsx)(n.em,{children:"forms"})," by using normal list-processing operations and the functions ",(0,i.jsx)(n.strong,{children:"method-qualifiers"})," and ",(0,i.jsx)(n.strong,{children:"invalid-method-error"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["It is permissible to use ",(0,i.jsx)(n.strong,{children:"setq"})," on the variables named in the method group specifiers and"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"define-method-combination"})}),"\n",(0,i.jsxs)(n.p,{children:["to bind additional variables. It is also possible to bypass the method group specifier mechanism and do everything in the body ",(0,i.jsx)(n.em,{children:"forms"}),". This is accomplished by writing a single method group with ",(0,i.jsx)(n.strong,{children:"*"})," as its only ",(0,i.jsx)(n.em,{children:"qualifier-pattern"}),"; the variable is then bound to a ",(0,i.jsx)(n.em,{children:"list"})," of all of the ",(0,i.jsx)(n.em,{children:"applicable methods"}),", in most-specific-first order."]}),"\n",(0,i.jsxs)(n.p,{children:["The body ",(0,i.jsx)(n.em,{children:"forms"})," compute and return the ",(0,i.jsx)(n.em,{children:"form"})," that specifies how the methods are combined, that is, the e\u21b5ective method. The e\u21b5ective method is evaluated in the ",(0,i.jsx)(n.em,{children:"null lexical environment"})," augmented with a local macro definition for ",(0,i.jsx)(n.strong,{children:"call-method"})," and with bindings named by symbols not ",(0,i.jsx)(n.em,{children:"accessible"})," from the COMMON-LISP-USER ",(0,i.jsx)(n.em,{children:"package"}),". Given a method object in one of the ",(0,i.jsx)(n.em,{children:"lists"})," produced by the method group specifiers and a ",(0,i.jsx)(n.em,{children:"list"})," of next methods, ",(0,i.jsx)(n.strong,{children:"call-method"})," will invoke the method such that ",(0,i.jsx)(n.strong,{children:"call-next-method"})," has available the next methods."]}),"\n",(0,i.jsxs)(n.p,{children:["When an e\u21b5ective method has no e\u21b5ect other than to call a single method, some implementations employ an optimization that uses the single method directly as the e\u21b5ective method, thus avoiding the need to create a new e\u21b5ective method. This optimization is active when the e\u21b5ective method form consists entirely of an invocation of the ",(0,i.jsx)(n.strong,{children:"call-method"})," macro whose first ",(0,i.jsx)(n.em,{children:"subform"})," is a method object and whose second ",(0,i.jsx)(n.em,{children:"subform"})," is ",(0,i.jsx)(n.strong,{children:"nil"})," or unsupplied. Each ",(0,i.jsx)(n.strong,{children:"define-method-combination"})," body is responsible for stripping o\u21b5 redundant invocations of ",(0,i.jsx)(n.strong,{children:"progn"}),", ",(0,i.jsx)(n.strong,{children:"and"}),", ",(0,i.jsx)(n.strong,{children:"multiple-value-prog1"}),", and the like, if this optimization is desired."]}),"\n",(0,i.jsxs)(n.p,{children:["The list (",":arguments"," . ",(0,i.jsx)(n.em,{children:"lambda-list"}),") can appear before any declarations or ",(0,i.jsx)(n.em,{children:"documentation string"}),". This form is useful when the method combination type performs some specific behavior as part of the combined method and that behavior needs access to the arguments to the ",(0,i.jsx)(n.em,{children:"generic function"}),". Each parameter variable defined by ",(0,i.jsx)(n.em,{children:"lambda-list"})," is bound to a ",(0,i.jsx)(n.em,{children:"form"})," that can be inserted into the e\u21b5ective method. When this ",(0,i.jsx)(n.em,{children:"form"})," is evaluated during execution of the e\u21b5ective method, its value is the corresponding argument to the ",(0,i.jsx)(n.em,{children:"generic function"}),"; the consequences of using such a ",(0,i.jsx)(n.em,{children:"form"})," as the ",(0,i.jsx)(n.em,{children:"place"})," in a ",(0,i.jsx)(n.strong,{children:"setf"})," ",(0,i.jsx)(n.em,{children:"form"})," are undefined. Argument correspondence is computed by dividing the ",":arguments"," ",(0,i.jsx)(n.em,{children:"lambda-list"})," and the ",(0,i.jsx)(n.em,{children:"generic function lambda-list"})," into three sections: the ",(0,i.jsx)(n.em,{children:"required parameters"}),", the ",(0,i.jsx)(n.em,{children:"optional parameters"}),", and the ",(0,i.jsx)(n.em,{children:"keyword"})," and ",(0,i.jsx)(n.em,{children:"rest parameters"}),". The ",(0,i.jsx)(n.em,{children:"arguments"})," supplied to the ",(0,i.jsx)(n.em,{children:"generic function"})," for a particular ",(0,i.jsx)(n.em,{children:"call"})," are also divided into three sections; the required ",(0,i.jsx)(n.em,{children:"arguments"})," section contains as many ",(0,i.jsx)(n.em,{children:"arguments"})," as the ",(0,i.jsx)(n.em,{children:"generic function"})," has ",(0,i.jsx)(n.em,{children:"required parameters"}),", the optional ",(0,i.jsx)(n.em,{children:"arguments"})," section contains as many arguments as the ",(0,i.jsx)(n.em,{children:"generic function"})," has ",(0,i.jsx)(n.em,{children:"optional parameters"}),", and the keyword/rest ",(0,i.jsx)(n.em,{children:"arguments"})," section contains the remaining arguments. Each ",(0,i.jsx)(n.em,{children:"parameter"})," in the required and optional sections of the ",":arguments"," ",(0,i.jsx)(n.em,{children:"lambda-list"})," accesses the argument at the same position in the corresponding section of the ",(0,i.jsx)(n.em,{children:"arguments"}),". If the section of the ",":arguments"," ",(0,i.jsx)(n.em,{children:"lambda-list"})," is shorter, extra ",(0,i.jsx)(n.em,{children:"arguments"})," are ignored. If the section of the ",":arguments"," ",(0,i.jsx)(n.em,{children:"lambda-list"})," is longer, excess ",(0,i.jsx)(n.em,{children:"required parameters"})," are bound to forms that evaluate to ",(0,i.jsx)(n.strong,{children:"nil"})," and excess ",(0,i.jsx)(n.em,{children:"optional parameters"})," are ",(0,i.jsx)(n.em,{children:"bound"})," to their initforms. The ",(0,i.jsx)(n.em,{children:"keyword parameters"})," and ",(0,i.jsx)(n.em,{children:"rest parameters"})," in the ",":arguments"," ",(0,i.jsx)(n.em,{children:"lambda-list"})," access the keyword/rest section of the ",(0,i.jsx)(n.em,{children:"arguments"}),". If the ",":arguments"," ",(0,i.jsx)(n.em,{children:"lambda-list"})," contains ",(0,i.jsx)(n.strong,{children:"&key"}),", it behaves as if it also contained ",(0,i.jsx)(n.strong,{children:"&allow-other-keys"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["In addition, ",(0,i.jsx)(n.strong,{children:"&whole"})," ",(0,i.jsx)(n.em,{children:"var"})," can be placed first in the ",":arguments"," ",(0,i.jsx)(n.em,{children:"lambda-list"}),". It causes ",(0,i.jsx)(n.em,{children:"var"})," to"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"define-method-combination"})}),"\n",(0,i.jsxs)(n.p,{children:["be ",(0,i.jsx)(n.em,{children:"bound"})," to a ",(0,i.jsx)(n.em,{children:"form"})," that ",(0,i.jsx)(n.em,{children:"evaluates"})," to a ",(0,i.jsx)(n.em,{children:"list"})," of all of the ",(0,i.jsx)(n.em,{children:"arguments"})," supplied to the ",(0,i.jsx)(n.em,{children:"generic function"}),". This is di\u21b5erent from ",(0,i.jsx)(n.strong,{children:"&rest"})," because it accesses all of the arguments, not just the keyword/rest ",(0,i.jsx)(n.em,{children:"arguments"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Erroneous conditions detected by the body should be reported with"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"method-combination-error"})," or ",(0,i.jsx)(n.strong,{children:"invalid-method-error"}),"; these ",(0,i.jsx)(n.em,{children:"functions"})," add any nec essary contextual information to the error message and will signal the appropriate error."]}),"\n",(0,i.jsxs)(n.p,{children:["The body ",(0,i.jsx)(n.em,{children:"forms"})," are evaluated inside of the ",(0,i.jsx)(n.em,{children:"bindings"})," created by the ",(0,i.jsx)(n.em,{children:"lambda list"})," and method group specifiers. Declarations at the head of the body are positioned directly inside of ",(0,i.jsx)(n.em,{children:"bindings"})," created by the ",(0,i.jsx)(n.em,{children:"lambda list"})," and outside of the ",(0,i.jsx)(n.em,{children:"bindings"})," of the method group variables. Thus method group variables cannot be declared in this way. ",(0,i.jsx)(n.strong,{children:"locally"})," may be used around the body, however."]}),"\n",(0,i.jsxs)(n.p,{children:["Within the body ",(0,i.jsx)(n.em,{children:"forms"}),", ",(0,i.jsx)(n.em,{children:"generic-function-symbol"})," is bound to the ",(0,i.jsx)(n.em,{children:"generic function object"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Documentation"})," is attached as a ",(0,i.jsx)(n.em,{children:"documentation string"})," to ",(0,i.jsx)(n.em,{children:"name"})," (as kind"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"method-combination"}),") and to the ",(0,i.jsx)(n.em,{children:"method combination object"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that two methods with identical specializers, but with di\u21b5erent ",(0,i.jsx)(n.em,{children:"qualifiers"}),", are not ordered by the algorithm described in Step 2 of the method selection and combination process described in Section 7.6.6 (Method Selection and Combination). Normally the two methods play di\u21b5erent roles in the e\u21b5ective method because they have di\u21b5erent ",(0,i.jsx)(n.em,{children:"qualifiers"}),", and no matter how they are ordered in the result of Step 2, the e\u21b5ective method is the same. If the two methods play the same role and their order matters, an error is signaled. This happens as part of the ",(0,i.jsx)(n.em,{children:"qualifier"})," pattern matching in ",(0,i.jsx)(n.strong,{children:"define-method-combination"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If a ",(0,i.jsx)(n.strong,{children:"define-method-combination"})," ",(0,i.jsx)(n.em,{children:"form"})," appears as a ",(0,i.jsx)(n.em,{children:"top level form"}),", the ",(0,i.jsx)(n.em,{children:"compiler"})," must make the ",(0,i.jsx)(n.em,{children:"method combination name"})," be recognized as a valid ",(0,i.jsx)(n.em,{children:"method combination name"})," in subsequent ",(0,i.jsx)(n.strong,{children:"defgeneric"})," ",(0,i.jsx)(n.em,{children:"forms"}),". However, the ",(0,i.jsx)(n.em,{children:"method combination"})," is executed no earlier than when the ",(0,i.jsx)(n.strong,{children:"define-method-combination"})," ",(0,i.jsx)(n.em,{children:"form"})," is executed, and possibly as late as the time that ",(0,i.jsx)(n.em,{children:"generic functions"})," that use the ",(0,i.jsx)(n.em,{children:"method combination"})," are executed."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:'\nMost examples of the long form of **define-method-combination** also illustrate the use of the related *functions* that are provided as part of the declarative method combination facility. \n;;; Examples of the short form of define-method-combination \n(define-method-combination and :identity-with-one-argument t) \n(defmethod func and ((x class1) y) ...) \n;;; The equivalent of this example in the long form is: \n(define-method-combination and \n\n    \n    \n    **define-method-combination** \n  (&amp;optional (order :most-specific-first)) \n   ((around (:around)) \n    (primary (and) :order order :required t)) \n   (let ((form (if (rest primary) \n\t\t   \u2018(and ,@(mapcar #\u2019(lambda (method) \n\t\t\t\t       \u2018(call-method ,method)) \n\t\t\t\t     primary)) \n\t\t    \u2018(call-method ,(first primary))))) \n     (if around \n\t \u2018(call-method ,(first around) \n\t\t       (,@(rest around) \n\t\t\t  (make-method ,form))) \n\t  form))) \n;;; Examples of the long form of define-method-combination \n\t\t\t\t\t;The default method-combination technique \n  (define-method-combination standard () \n    ((around (:around)) \n     (before (:before)) \n     (primary () :required t) \n     (after (:after))) \n    (flet ((call-methods (methods) \n\t     (mapcar #\u2019(lambda (method) \n\t\t\t \u2018(call-method ,method)) \n\t\t       methods))) \n      (let ((form (if (or before after (rest primary)) \n\t\t      \u2018(multiple-value-prog1 \n\t\t\t   (progn ,@(call-methods before) \n\t\t\t\t  (call-method ,(first primary) \n\t\t\t\t\t       ,(rest primary))) \n\t\t\t ,@(call-methods (reverse after))) \n\t\t       \u2018(call-method ,(first primary))))) \n\t(if around \n\t    \u2018(call-method ,(first around) \n\t\t\t  (,@(rest around) \n\t\t\t     (make-method ,form))) \n\t     form)))) \n\t\t\t\t\t;A simple way to try several methods until one returns non-nil \n  (define-method-combination or () \n    ((methods (or))) \n    \u2018(or ,@(mapcar #\u2019(lambda (method) \n\t\t       \u2018(call-method ,method)) \n\t\t     methods))) \n\n  \n  \n  **define-method-combination** \n\t\t\t\t\t;A more complete version of the preceding \n  (define-method-combination or \n      (&amp;optional (order \u2019:most-specific-first)) \n       ((around (:around)) \n\t(primary (or))) \n       ;; Process the order argument \n       (case order \n\t (:most-specific-first) \n\t (:most-specific-last (setq primary (reverse primary))) \n\t (otherwise (method-combination-error "&#126;S is an invalid order.&#126;@ \n:most-specific-first and :most-specific-last are the possible values." order))) \n       ;; Must have a primary method \n       (unless primary \n\t (method-combination-error "A primary method is required.")) \n       ;; Construct the form that calls the primary methods \n       (let ((form (if (rest primary) \n\t\t       \u2018(or ,@(mapcar #\u2019(lambda (method) \n\t\t\t\t\t  \u2018(call-method ,method)) \n\t\t\t\t\tprimary)) \n\t\t\t\u2018(call-method ,(first primary))))) \n\t ;; Wrap the around methods around that form \n\t (if around \n\t     \u2018(call-method ,(first around) \n\t\t\t   (,@(rest around) \n\t\t\t      (make-method ,form))) \n\t      form))) \n\t\t\t\t\t;The same thing, using the :order and :required keyword options \n    (define-method-combination or \n\t(&amp;optional (order \u2019:most-specific-first)) \n\t ((around (:around)) \n\t  (primary (or) :order order :required t)) \n\t (let ((form (if (rest primary) \n\t\t\t \u2018(or ,@(mapcar #\u2019(lambda (method) \n\t\t\t\t\t    \u2018(call-method ,method)) \n\t\t\t\t\t  primary)) \n\t\t\t  \u2018(call-method ,(first primary))))) \n\t   (if around \n\t       \u2018(call-method ,(first around) \n\t\t\t     (,@(rest around) \n\t\t\t\t(make-method ,form))) \n\t\tform))) \n\n      \n      \n      **define-method-combination** \n\t\t\t\t\t;This short-form call is behaviorally identical to the preceding \n      (define-method-combination or :identity-with-one-argument t) \n\t\t\t\t\t;Order methods by positive integer qualifiers \n\t\t\t\t\t;:around methods are disallowed to keep the example small \n      (define-method-combination example-method-combination () \n\t((methods positive-integer-qualifier-p)) \n\t\u2018(progn ,@(mapcar #\u2019(lambda (method) \n\t\t\t      \u2018(call-method ,method)) \n\t\t\t    (stable-sort methods #\u2019< \n\t\t\t\t\t :key #\u2019(lambda (method) \n\t\t\t\t\t\t  (first (method-qualifiers method))))))) \n      (defun positive-integer-qualifier-p (method-qualifiers) \n\t(and (= (length method-qualifiers) 1) \n\t     (typep (first method-qualifiers) \u2019(integer 0 \\*)))) \n;;; Example of the use of :arguments \n      (define-method-combination progn-with-lock () \n\t((methods ())) \n\t(:arguments object) \n\t\u2018(unwind-protect \n\t      (progn (lock (object-lock ,object)) \n\t\t     ,@(mapcar #\u2019(lambda (method) \n\t\t\t\t   \u2018(call-method ,method)) \n\t\t\t\t methods)) \n\t   (unlock (object-lock ,object)))) \n\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Side Eects:"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"compiler"})," is not required to perform any compile-time side-e\u21b5ects."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,i.jsxs)(n.p,{children:["Method combination types defined with the short form require exactly one ",(0,i.jsx)(n.em,{children:"qualifier"})," per method. An error of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"error"})," is signaled if there are applicable methods with no ",(0,i.jsx)(n.em,{children:"qualifiers"})," or with ",(0,i.jsx)(n.em,{children:"qualifiers"})," that are not supported by the method combination type. At least one primary method must be applicable or an error of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"error"})," is signaled."]}),"\n",(0,i.jsxs)(n.p,{children:["If an applicable method does not fall into any method group, the system signals an error of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"error"})," indicating that the method is invalid for the kind of method combination in use."]}),"\n",(0,i.jsxs)(n.p,{children:["If the value of the ",":required"," option is ",(0,i.jsx)(n.em,{children:"true"})," and the method group is empty (that is, no applicable methods match the ",(0,i.jsx)(n.em,{children:"qualifier"})," patterns or satisfy the predicate), an error of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"error"})," is signaled."]}),"\n",(0,i.jsxs)(n.p,{children:["If the ",":order"," option evaluates to a value other than ",":most-specific-first"," or ",":most-specific-last",", an error of ",(0,i.jsx)(n.em,{children:"type"})," ",(0,i.jsx)(n.strong,{children:"error"})," is signaled."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"call-method"}),", ",(0,i.jsx)(n.strong,{children:"call-next-method"}),", ",(0,i.jsx)(n.strong,{children:"documentation"}),", ",(0,i.jsx)(n.strong,{children:"method-qualifiers"}),", ",(0,i.jsx)(n.strong,{children:"method-combination-error"}),", ",(0,i.jsx)(n.strong,{children:"invalid-method-error"}),", ",(0,i.jsx)(n.strong,{children:"defgeneric"}),", Section 7.6.6 (Method Selection and Combination), Sec tion 7.6.6.4 (Built-in Method Combination Types), Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",":method-combination"," option of ",(0,i.jsx)(n.strong,{children:"defgeneric"})," is used to specify that a ",(0,i.jsx)(n.em,{children:"generic function"})," should use a particular method combination type. The first argument to the ",":method-combination"," option is the ",(0,i.jsx)(n.em,{children:"name"})," of a method combination type and the remaining arguments are options for that type."]})]})}function s(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}const d={},h="define-method-combination",a={id:"chap-7/h-h-dictionary/definemethodcombination",title:"define-method-combination",description:"Expanded Reference: define-method-combination",source:"@site/docs/chap-7/h-h-dictionary/definemethodcombination.md",sourceDirName:"chap-7/h-h-dictionary",slug:"/chap-7/h-h-dictionary/definemethodcombination",permalink:"/cl-language-reference/docs/chap-7/h-h-dictionary/definemethodcombination",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-7/h-h-dictionary/definemethodcombination.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"defgeneric",permalink:"/cl-language-reference/docs/chap-7/h-h-dictionary/defgeneric"},next:{title:"defmethod",permalink:"/cl-language-reference/docs/chap-7/h-h-dictionary/defmethod"}},c={},l=[{value:"Expanded Reference: define-method-combination",id:"expanded-reference-define-method-combination",level:2}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"define-method-combination",children:"define-method-combination"}),"\n","\n","\n",(0,i.jsx)(s,{}),"\n",(0,i.jsx)(n.h2,{id:"expanded-reference-define-method-combination",children:"Expanded Reference: define-method-combination"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lisp",children:"(define-method-combination )\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>s});var i=t(67294);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);