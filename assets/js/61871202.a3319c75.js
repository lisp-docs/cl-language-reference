"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[85093],{681:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>w,contentTitle:()=>y,default:()=>C,frontMatter:()=>g,metadata:()=>v,toc:()=>k});var r=i(85893),t=i(11151);function s(e){const n={em:"em",p:"p",...(0,t.a)(),...e.components},{ClLinks:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"Declarations"})})," provide a way of specifying information for use by program processors, such as the evaluator or the compiler."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Local declarations"})," can be embedded in executable code using ",(0,r.jsx)(i,{term:"declare",children:(0,r.jsx)("b",{children:"declare"})}),". ",(0,r.jsx)(n.em,{children:"Global declarations"}),", or ",(0,r.jsx)(i,{term:"proclamation",children:(0,r.jsx)("i",{children:"proclamations"})}),", are established by ",(0,r.jsx)(i,{term:"proclaim",children:(0,r.jsx)("b",{children:"proclaim"})})," or ",(0,r.jsx)(i,{term:"declaim",children:(0,r.jsx)("b",{children:"declaim"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(i,{term:"the",children:(0,r.jsx)("b",{children:"the"})})," ",(0,r.jsx)(n.em,{children:"special form"})," provides a shorthand notation for making a ",(0,r.jsx)(n.em,{children:"local declaration"})," about the ",(0,r.jsx)(i,{term:"type",children:(0,r.jsx)("i",{children:"type"})})," of the ",(0,r.jsx)(i,{term:"value",children:(0,r.jsx)("i",{children:"value"})})," of a given ",(0,r.jsx)(i,{term:"form",children:(0,r.jsx)("i",{children:"form"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The consequences are undefined if a program violates a ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"declaration"})})," or a ",(0,r.jsx)(i,{term:"proclamation",children:(0,r.jsx)("i",{children:"proclamation"})}),"."]})]})}function o(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}function c(e){const n={em:"em",p:"p",strong:"strong",...(0,t.a)(),...e.components},{ClLinks:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["In general, an ",(0,r.jsx)(i,{term:"implementation",children:(0,r.jsx)("i",{children:"implementation"})})," is free to ignore ",(0,r.jsx)(n.em,{children:"declaration specifiers"})," except for the ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("b",{children:"declaration"})}),", ",(0,r.jsx)(i,{term:"notinline",children:(0,r.jsx)("b",{children:"notinline"})}),", ",(0,r.jsx)(n.strong,{children:"safety"}),", and ",(0,r.jsx)(i,{term:"special",children:(0,r.jsx)("b",{children:"special"})})," ",(0,r.jsx)(n.em,{children:"declaration specifiers"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("b",{children:"declaration"})})," ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"declaration"})})," must suppress warnings about unrecognized ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"declarations"})})," of the kind that it declares. If an ",(0,r.jsx)(i,{term:"implementation",children:(0,r.jsx)("i",{children:"implementation"})})," does not produce warnings about unrecognized declarations, it may safely ignore this ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"declaration"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(i,{term:"notinline",children:(0,r.jsx)("b",{children:"notinline"})})," ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"declaration"})})," must be recognized by any ",(0,r.jsx)(i,{term:"implementation",children:(0,r.jsx)("i",{children:"implementation"})})," that supports inline functions or ",(0,r.jsx)(n.em,{children:"compiler macros"})," in order to disable those facilities. An ",(0,r.jsx)(i,{term:"implementation",children:(0,r.jsx)("i",{children:"implementation"})})," that does not use inline functions or ",(0,r.jsx)(n.em,{children:"compiler macros"})," may safely ignore this ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"declaration"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"safety"})," ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"declaration"})})," that increases the current safety level must always be recognized. An ",(0,r.jsx)(i,{term:"implementation",children:(0,r.jsx)("i",{children:"implementation"})})," that always processes code as if safety were high may safely ignore this ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"declaration"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(i,{term:"special",children:(0,r.jsx)("b",{children:"special"})})," ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"declaration"})})," must be processed by all ",(0,r.jsx)(i,{term:"implementation",children:(0,r.jsx)("i",{children:"implementations"})}),"."]})]})}function l(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}function a(e){const n={em:"em",p:"p",...(0,t.a)(),...e.components},{ClLinks:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.em,{children:"declaration specifier"})," is an ",(0,r.jsx)(i,{term:"expression",children:(0,r.jsx)("i",{children:"expression"})})," that can appear at top level of a ",(0,r.jsx)(i,{term:"declare",children:(0,r.jsx)("b",{children:"declare"})})," expression or a ",(0,r.jsx)(i,{term:"declaim",children:(0,r.jsx)("b",{children:"declaim"})})," form, or as the argument to ",(0,r.jsx)(i,{term:"proclaim",children:(0,r.jsx)("b",{children:"proclaim"})}),". It is a ",(0,r.jsx)(i,{term:"list",children:(0,r.jsx)("i",{children:"list"})})," whose ",(0,r.jsx)(i,{term:"car",children:(0,r.jsx)("i",{children:"car"})})," is a ",(0,r.jsx)(n.em,{children:"declaration identifier"})," , and whose ",(0,r.jsx)(i,{term:"cdr",children:(0,r.jsx)("i",{children:"cdr"})})," is data interpreted according to rules specific to the ",(0,r.jsx)(n.em,{children:"declaration identifier"})," ."]})}function d(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}function h(e){const n={em:"em",p:"p",strong:"strong",...(0,t.a)(),...e.components},{ClLinks:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Figure 3\u20139 shows a list of all ",(0,r.jsx)(n.em,{children:"declaration identifiers"})," defined by this standard."]}),"\n",(0,r.jsxs)(n.p,{children:["|",(0,r.jsxs)("p",{children:[(0,r.jsx)(n.strong,{children:"declaration ignore special"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.strong,{children:"dynamic-extent inline type"})," "]}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.strong,{children:"ftype notinline"})," "]}),(0,r.jsx)("p",{children:(0,r.jsx)(n.strong,{children:"ignorable optimize"})}),"|"]}),"\n",(0,r.jsx)(n.p,{children:"| :- |"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Figure 3\u20139. Common Lisp Declaration Identifiers"})}),"\n",(0,r.jsxs)(n.p,{children:["An implementation is free to support other (",(0,r.jsx)(i,{term:"implementation-defined",children:(0,r.jsx)("i",{children:"implementation-defined"})}),") ",(0,r.jsx)(n.em,{children:"declaration identifiers"})," as well. A warning might be issued if a ",(0,r.jsx)(n.em,{children:"declaration identifier"})," is not among those defined above, is not defined by the ",(0,r.jsx)(i,{term:"implementation",children:(0,r.jsx)("i",{children:"implementation"})}),", is not a ",(0,r.jsx)(n.em,{children:"type name"}),", and has not been declared in a ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("b",{children:"declaration"})})," ",(0,r.jsx)(i,{term:"proclamation",children:(0,r.jsx)("i",{children:"proclamation"})}),"."]})]})}function x(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}function m(e){const n={em:"em",p:"p",...(0,t.a)(),...e.components};return(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.em,{children:"type specifier"})," can be used as a ",(0,r.jsx)(n.em,{children:"declaration identifier"})," . (",(0,r.jsx)(n.em,{children:"type-specifier {var}"}),"*) is taken as shorthand for (type ",(0,r.jsx)(n.em,{children:"type-specifier {var}"}),"*)."]})}function j(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}function p(e){const n={em:"em",p:"p",...(0,t.a)(),...e.components},{ClLinks:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"Declarations"})})," can be divided into two kinds: those that apply to the ",(0,r.jsx)(i,{term:"binding",children:(0,r.jsx)("i",{children:"bindings"})})," of ",(0,r.jsx)(i,{term:"variable",children:(0,r.jsx)("i",{children:"variables"})})," or ",(0,r.jsx)(i,{term:"function",children:(0,r.jsx)("i",{children:"functions"})}),"; and those that do not apply to ",(0,r.jsx)(i,{term:"binding",children:(0,r.jsx)("i",{children:"bindings"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"declaration"})})," that appears at the head of a binding ",(0,r.jsx)(i,{term:"form",children:(0,r.jsx)("i",{children:"form"})})," and applies to a ",(0,r.jsx)(i,{term:"variable",children:(0,r.jsx)("i",{children:"variable"})})," or ",(0,r.jsx)(n.em,{children:"function binding"})," made by that ",(0,r.jsx)(i,{term:"form",children:(0,r.jsx)("i",{children:"form"})})," is called a ",(0,r.jsx)(n.em,{children:"bound declaration"}),"; such a ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"declaration"})})," affects both the ",(0,r.jsx)(i,{term:"binding",children:(0,r.jsx)("i",{children:"binding"})})," and any references within the ",(0,r.jsx)(i,{term:"scope",children:(0,r.jsx)("i",{children:"scope"})})," of the ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"declaration"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"Declarations"})})," that are not ",(0,r.jsx)(n.em,{children:"bound declarations"})," are called ",(0,r.jsx)(n.em,{children:"free declarations"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.em,{children:"free declaration"})," in a ",(0,r.jsx)(n.em,{children:"form F"}),"1 that applies to a ",(0,r.jsx)(i,{term:"binding",children:(0,r.jsx)("i",{children:"binding"})})," for a ",(0,r.jsx)(n.em,{children:"name N established"})," by some ",(0,r.jsx)(n.em,{children:"form F"}),"2 of which ",(0,r.jsx)(n.em,{children:"F"}),"1 is a ",(0,r.jsx)(i,{term:"subform",children:(0,r.jsx)("i",{children:"subform"})})," affects only references to ",(0,r.jsx)(n.em,{children:"N"})," within ",(0,r.jsx)(n.em,{children:"F"}),"1; it does not to apply to other references to ",(0,r.jsx)(n.em,{children:"N"})," outside of ",(0,r.jsx)(n.em,{children:"F"}),"1, nor does it affect the manner in which the ",(0,r.jsx)(i,{term:"binding",children:(0,r.jsx)("i",{children:"binding"})})," of ",(0,r.jsx)(n.em,{children:"N"})," by ",(0,r.jsx)(n.em,{children:"F"}),"2 is ",(0,r.jsx)(n.em,{children:"established"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"Declarations"})})," that do not apply to ",(0,r.jsx)(i,{term:"binding",children:(0,r.jsx)("i",{children:"bindings"})})," can only appear as ",(0,r.jsx)(n.em,{children:"free declarations"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(i,{term:"scope",children:(0,r.jsx)("i",{children:"scope"})})," of a ",(0,r.jsx)(n.em,{children:"bound declaration"})," is the same as the ",(0,r.jsx)(n.em,{children:"lexical scope"})," of the ",(0,r.jsx)(i,{term:"binding",children:(0,r.jsx)("i",{children:"binding"})})," to which it applies; for ",(0,r.jsx)(n.em,{children:"special variables"}),", this means the ",(0,r.jsx)(i,{term:"scope",children:(0,r.jsx)("i",{children:"scope"})})," that the ",(0,r.jsx)(i,{term:"binding",children:(0,r.jsx)("i",{children:"binding"})})," would have had had it been a ",(0,r.jsx)(n.em,{children:"lexical binding"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Unless explicitly stated otherwise, the ",(0,r.jsx)(i,{term:"scope",children:(0,r.jsx)("i",{children:"scope"})})," of a ",(0,r.jsx)(n.em,{children:"free declaration"})," includes only the body ",(0,r.jsx)(i,{term:"subform",children:(0,r.jsx)("i",{children:"subforms"})})," of the ",(0,r.jsx)(i,{term:"form",children:(0,r.jsx)("i",{children:"form"})})," at whose head it appears, and no other ",(0,r.jsx)(i,{term:"subform",children:(0,r.jsx)("i",{children:"subforms"})}),". The ",(0,r.jsx)(i,{term:"scope",children:(0,r.jsx)("i",{children:"scope"})})," of ",(0,r.jsx)(n.em,{children:"free declarations"})," specifically does not include ",(0,r.jsx)(n.em,{children:"initialization forms"})," for ",(0,r.jsx)(i,{term:"binding",children:(0,r.jsx)("i",{children:"bindings"})})," established by the ",(0,r.jsx)(i,{term:"form",children:(0,r.jsx)("i",{children:"form"})})," containing the ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"declarations"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Some ",(0,r.jsx)(n.em,{children:"iteration forms"})," include step, end-test, or result ",(0,r.jsx)(i,{term:"subform",children:(0,r.jsx)("i",{children:"subforms"})})," that are also included in the ",(0,r.jsx)(i,{term:"scope",children:(0,r.jsx)("i",{children:"scope"})})," of ",(0,r.jsx)(i,{term:"declaration",children:(0,r.jsx)("i",{children:"declarations"})})," that appear in the ",(0,r.jsx)(n.em,{children:"iteration form"}),". Specifically, the ",(0,r.jsx)(n.em,{children:"iteration forms"})," and ",(0,r.jsx)(i,{term:"subform",children:(0,r.jsx)("i",{children:"subforms"})})," involved are:"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," ",(0,r.jsx)(i,{term:"do",children:(0,r.jsx)("b",{children:"do"})}),", ",(0,r.jsx)(i,{term:"do",children:(0,r.jsx)("b",{children:"do*"})}),": ",(0,r.jsx)(n.em,{children:"step-forms"}),", ",(0,r.jsx)(n.em,{children:"end-test-form"}),", and ",(0,r.jsx)(n.em,{children:"result-forms"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," ",(0,r.jsx)(i,{term:"dolist",children:(0,r.jsx)("b",{children:"dolist"})}),", ",(0,r.jsx)(i,{term:"dotimes",children:(0,r.jsx)("b",{children:"dotimes"})}),": ",(0,r.jsx)(n.em,{children:"result-form"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"\u2022"})," ",(0,r.jsx)(i,{term:"do-all-symbols",children:(0,r.jsx)("b",{children:"do-all-symbols"})}),", ",(0,r.jsx)(i,{term:"do-external-symbols",children:(0,r.jsx)("b",{children:"do-external-symbols"})}),", ",(0,r.jsx)(i,{term:"do-symbols",children:(0,r.jsx)("b",{children:"do-symbols"})}),": ",(0,r.jsx)(n.em,{children:"result-form"})]})]})}function f(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}function u(e){const n={code:"code",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"Here is an example illustrating the *scope* of *bound declarations*. \n(let ((x 1)) ;[1] 1st occurrence of x \n  (declare (special x)) ;[2] 2nd occurrence of x \n  (let ((x 2)) ;[3] 3rd occurrence of x \n    (let ((old-x x) ;[4] 4th occurrence of x \n\t  (x 3)) ;[5] 5th occurrence of x \n      (declare (special x)) ;[6] 6th occurrence of x \n      (list old-x x)))) ;[7] 7th occurrence of x \n\u2192 (2 3) \nThe first occurrence of x *establishes* a *dynamic binding* of x because of the **special** *declaration* for x in the second line. The third occurrence of x *establishes* a *lexical binding* of x (because there is no **special** *declaration* in the corresponding **let** *form*). The fourth occurrence of x *x* is a reference to the *lexical binding* of x established in the third line. The fifth occurrence of x *establishes* a *dynamic binding* of *x* for the body of the **let** *form* that begins on that line because of the **special** *declaration* for x in the sixth line. The reference to x in the fourth line is not affected by the **special** *declaration* in the sixth line because that reference is not within the \u201cwould-be *lexical scope*\u201d of the *variable* x in the fifth line. The reference to x in the seventh line is a reference to the *dynamic binding* of *x established* in the fifth line. \nHere is another example, to illustrate the *scope* of a *free declaration*. In the following: \n(lambda (&optional (x (foo 1))) ;[1] \n  (declare (notinline foo)) ;[2] \n  (foo x)) ;[3] \nthe *call* to foo in the first line might be compiled inline even though the *call* to foo in the third line must not be. This is because the **notinline** *declaration* for foo in the second line applies only to the body on the third line. In order to suppress inlining for both *calls*, one might write: \n(locally (declare (notinline foo)) ;[1] \n  (lambda (&optional (x (foo 1))) ;[2] \n    (foo x))) ;[3] \nor, alternatively: \n(lambda (&optional ;[1] \n\t   (x (locally (declare (notinline foo)) ;[2] \n\t\t(foo 1)))) ;[3] \n  (declare (notinline foo)) ;[4] \n  (foo x)) ;[5] \nFinally, here is an example that shows the *scope* of *declarations* in an *iteration form*. \n(let ((x 1)) ;[1] \n  (declare (special x)) ;[2]  \n  (let ((x 2)) ;[3] \n    (dotimes (i x x) ;[4] \n      (declare (special x))))) ;[5] \n\u2192 1 \nIn this example, the first reference to x on the fourth line is to the *lexical binding* of x established on the third line. However, the second occurrence of x on the fourth line lies within the *scope* of the *free declaration* on the fifth line (because this is the *result-form* of the **dotimes**) and therefore refers to the *dynamic binding* of x.  \n\n"})})}function b(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}const g={title:"3.3 Declarations"},y="3.3 Declarations",v={id:"chap-3/d-d-declarations",title:"3.3 Declarations",description:"3.3.1 Minimal Declaration Processing Requirements",source:"@site/docs/chap-3/d-d-declarations.md",sourceDirName:"chap-3",slug:"/chap-3/d-d-declarations",permalink:"/cl-language-reference/chap-3/d-d-declarations",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-3/d-d-declarations.md",tags:[],version:"current",frontMatter:{title:"3.3 Declarations"},sidebar:"tutorialSidebar",previous:{title:"3.2 Compilation",permalink:"/cl-language-reference/chap-3/d-c-compilation"},next:{title:"3.4 Lambda Lists",permalink:"/cl-language-reference/chap-3/d-e-lambda-lists"}},w={},k=[{value:"3.3.1 Minimal Declaration Processing Requirements",id:"331-minimal-declaration-processing-requirements",level:2},{value:"3.3.2 Declaration Specifiers",id:"332-declaration-specifiers",level:2},{value:"3.3.3 Declaration Identifiers",id:"333-declaration-identifiers",level:2},{value:"3.3.3.1 Shorthand notation for Type Declarations",id:"3331-shorthand-notation-for-type-declarations",level:3},{value:"3.3.4 Declaration Scope",id:"334-declaration-scope",level:2},{value:"3.3.4.1 Examples of Declaration Scope",id:"3341-examples-of-declaration-scope",level:3}];function D(e){const n={h1:"h1",h2:"h2",h3:"h3",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"33-declarations",children:"3.3 Declarations"}),"\n","\n",(0,r.jsx)(o,{}),"\n",(0,r.jsx)(n.h2,{id:"331-minimal-declaration-processing-requirements",children:"3.3.1 Minimal Declaration Processing Requirements"}),"\n","\n",(0,r.jsx)(l,{}),"\n",(0,r.jsx)(n.h2,{id:"332-declaration-specifiers",children:"3.3.2 Declaration Specifiers"}),"\n","\n",(0,r.jsx)(d,{}),"\n",(0,r.jsx)(n.h2,{id:"333-declaration-identifiers",children:"3.3.3 Declaration Identifiers"}),"\n","\n",(0,r.jsx)(x,{}),"\n",(0,r.jsx)(n.h3,{id:"3331-shorthand-notation-for-type-declarations",children:"3.3.3.1 Shorthand notation for Type Declarations"}),"\n","\n",(0,r.jsx)(j,{}),"\n",(0,r.jsx)(n.h2,{id:"334-declaration-scope",children:"3.3.4 Declaration Scope"}),"\n","\n",(0,r.jsx)(f,{}),"\n",(0,r.jsx)(n.h3,{id:"3341-examples-of-declaration-scope",children:"3.3.4.1 Examples of Declaration Scope"}),"\n","\n","\n",(0,r.jsx)(b,{})]})}function C(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(D,{...e})}):D(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>o});var r=i(67294);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);