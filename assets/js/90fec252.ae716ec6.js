"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[13115],{12247:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>X,contentTitle:()=>J,default:()=>ne,frontMatter:()=>G,metadata:()=>Q,toc:()=>$});var s=i(85893),r=i(11151);function t(e){return(0,s.jsx)(s.Fragment,{})}function o(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t()}function c(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The following terminology is used in this section."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"compiler"})," is a utility that translates code into an ",(0,s.jsx)(n.em,{children:"implementation-dependent"})," form that might be represented or executed efficiently. The term ",(0,s.jsx)(n.em,{children:"compiler"})," refers to both of the ",(0,s.jsx)(n.em,{children:"functions"})," ",(0,s.jsx)(n.strong,{children:"compile"})," and ",(0,s.jsx)(n.strong,{children:"compile-file"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The term ",(0,s.jsx)(n.em,{children:"compiled code"})," refers to ",(0,s.jsx)(n.em,{children:"objects"})," representing compiled programs, such as ",(0,s.jsx)(n.em,{children:"objects"})," constructed by ",(0,s.jsx)(n.strong,{children:"compile"})," or by ",(0,s.jsx)(n.strong,{children:"load"})," when ",(0,s.jsx)(n.em,{children:"loading"})," a ",(0,s.jsx)(n.em,{children:"compiled file"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The term ",(0,s.jsx)(n.em,{children:"implicit compilation"})," refers to ",(0,s.jsx)(n.em,{children:"compilation"})," performed during ",(0,s.jsx)(n.em,{children:"evaluation"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The term ",(0,s.jsx)(n.em,{children:"literal object"})," refers to a quoted ",(0,s.jsx)(n.em,{children:"object"})," or a ",(0,s.jsx)(n.em,{children:"self-evaluating object"})," or an ",(0,s.jsx)(n.em,{children:"object"})," that is a substructure of such an ",(0,s.jsx)(n.em,{children:"object"}),". A ",(0,s.jsx)(n.em,{children:"constant variable"})," is not itself a ",(0,s.jsx)(n.em,{children:"literal object"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The term ",(0,s.jsx)(n.em,{children:"coalesce"})," is defined as follows. Suppose A and B are two ",(0,s.jsx)(n.em,{children:"literal constants"})," in the ",(0,s.jsx)(n.em,{children:"source code"}),", and that A\u2019 and B\u2019 are the corresponding ",(0,s.jsx)(n.em,{children:"objects"})," in the ",(0,s.jsx)(n.em,{children:"compiled code"}),". If A\u2019 and B\u2019 are ",(0,s.jsx)(n.strong,{children:"eql"})," but A and B are not ",(0,s.jsx)(n.strong,{children:"eql"}),", then it is said that A and B have been coalesced by the compiler."]}),"\n",(0,s.jsxs)(n.p,{children:["The term ",(0,s.jsx)(n.em,{children:"minimal compilation"})," refers to actions the compiler must take at ",(0,s.jsx)(n.em,{children:"compile time"}),". These actions are specified in Section 3.2.2 (Compilation Semantics)."]}),"\n",(0,s.jsxs)(n.p,{children:["The verb ",(0,s.jsx)(n.em,{children:"process"})," refers to performing ",(0,s.jsx)(n.em,{children:"minimal compilation"}),", determining the time of evaluation for a ",(0,s.jsx)(n.em,{children:"form"}),", and possibly ",(0,s.jsx)(n.em,{children:"evaluating"})," that ",(0,s.jsx)(n.em,{children:"form"})," (if required)."]}),"\n",(0,s.jsxs)(n.p,{children:["The term ",(0,s.jsx)(n.em,{children:"further compilation"})," refers to ",(0,s.jsx)(n.em,{children:"implementation-dependent"})," compilation beyond ",(0,s.jsx)(n.em,{children:"minimal compilation"}),". That is, ",(0,s.jsx)(n.em,{children:"processing"})," does not imply complete compilation. Block compilation and generation of machine-specific instructions are examples of further compilation. Further compilation is permitted to take place at ",(0,s.jsx)(n.em,{children:"run time"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Four different ",(0,s.jsx)(n.em,{children:"environments"})," relevant to compilation are distinguished: the ",(0,s.jsx)(n.em,{children:"startup environment"}),", the ",(0,s.jsx)(n.em,{children:"compilation environment"}),", the ",(0,s.jsx)(n.em,{children:"evaluation environment"}),", and the ",(0,s.jsx)(n.em,{children:"run-time environment"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"startup environment"})," is the ",(0,s.jsx)(n.em,{children:"environment"})," of the ",(0,s.jsx)(n.em,{children:"Lisp image"})," from which the ",(0,s.jsx)(n.em,{children:"compiler"})," was invoked."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"compilation environment"})," is maintained by the compiler and is used to hold definitions and declarations to be used internally by the compiler. Only those parts of a definition needed for correct compilation are saved. The ",(0,s.jsx)(n.em,{children:"compilation environment"})," is used as the ",(0,s.jsx)(n.em,{children:"environment argument"})," to macro expanders called by the compiler. It is unspecified whether a definition available in the ",(0,s.jsx)(n.em,{children:"compilation environment"})," can be used in an ",(0,s.jsx)(n.em,{children:"evaluation"})," initiated in the ",(0,s.jsx)(n.em,{children:"startup environment"})," or ",(0,s.jsx)(n.em,{children:"evaluation environment"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"evaluation environment"})," is a ",(0,s.jsx)(n.em,{children:"run-time environment"})," in which macro expanders and code specified by ",(0,s.jsx)(n.strong,{children:"eval-when"})," to be evaluated are evaluated. All evaluations initiated by the ",(0,s.jsx)(n.em,{children:"compiler"})]}),"\n",(0,s.jsxs)(n.p,{children:["take place in the ",(0,s.jsx)(n.em,{children:"evaluation environment"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"run-time environment"})," is the ",(0,s.jsx)(n.em,{children:"environment"})," in which the program being compiled will be executed."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"compilation environment"})," inherits from the ",(0,s.jsx)(n.em,{children:"evaluation environment"}),", and the ",(0,s.jsx)(n.em,{children:"compilation environment"})," and ",(0,s.jsx)(n.em,{children:"evaluation environment"})," might be ",(0,s.jsx)(n.em,{children:"identical"}),". The ",(0,s.jsx)(n.em,{children:"evaluation environment"})," inherits from the ",(0,s.jsx)(n.em,{children:"startup environment"}),", and the ",(0,s.jsx)(n.em,{children:"startup environment"})," and ",(0,s.jsx)(n.em,{children:"evaluation environment"})," might be ",(0,s.jsx)(n.em,{children:"identical"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The term ",(0,s.jsx)(n.em,{children:"compile time"})," refers to the duration of time that the compiler is processing ",(0,s.jsx)(n.em,{children:"source code"}),". At ",(0,s.jsx)(n.em,{children:"compile time"}),", only the ",(0,s.jsx)(n.em,{children:"compilation environment"})," and the ",(0,s.jsx)(n.em,{children:"evaluation environment"})," are available."]}),"\n",(0,s.jsxs)(n.p,{children:["The term ",(0,s.jsx)(n.em,{children:"compile-time definition"})," refers to a definition in the ",(0,s.jsx)(n.em,{children:"compilation environment"}),". For example, when compiling a file, the definition of a function might be retained in the ",(0,s.jsx)(n.em,{children:"compilation environment"})," if it is declared ",(0,s.jsx)(n.strong,{children:"inline"}),". This definition might not be available in the ",(0,s.jsx)(n.em,{children:"evaluation environment"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The term ",(0,s.jsx)(n.em,{children:"run time"})," refers to the duration of time that the loader is loading compiled code or compiled code is being executed. At run time, only the ",(0,s.jsx)(n.em,{children:"run-time environment"})," is available."]}),"\n",(0,s.jsxs)(n.p,{children:["The term ",(0,s.jsx)(n.em,{children:"run-time definition"})," refers to a definition in the ",(0,s.jsx)(n.em,{children:"run-time environment"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The term ",(0,s.jsx)(n.em,{children:"run-time compiler"})," refers to the ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"compile"})," or ",(0,s.jsx)(n.em,{children:"implicit compilation"}),", for which the compilation and run-time ",(0,s.jsx)(n.em,{children:"environments"})," are maintained in the same ",(0,s.jsx)(n.em,{children:"Lisp image"}),". Note that when the ",(0,s.jsx)(n.em,{children:"run-time compiler"})," is used, the ",(0,s.jsx)(n.em,{children:"run-time environment"})," and ",(0,s.jsx)(n.em,{children:"startup environment"})," are the same."]})]})}function l(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}function a(e){const n={em:"em",p:"p",...(0,r.a)(),...e.components};return(0,s.jsxs)(n.p,{children:["Conceptually, compilation is a process that traverses code, performs certain kinds of syntactic and semantic analyses using information (such as proclamations and ",(0,s.jsx)(n.em,{children:"macro"})," definitions) present in the ",(0,s.jsx)(n.em,{children:"compilation environment"}),", and produces equivalent, possibly more efficient code."]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}function d(e){const n={em:"em",p:"p",strong:"strong",table:"table",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"compiler macro"})," can be defined for a ",(0,s.jsx)(n.em,{children:"name"})," that also names a ",(0,s.jsx)(n.em,{children:"function"})," or ",(0,s.jsx)(n.em,{children:"macro"}),". That is, it is possible for a ",(0,s.jsx)(n.em,{children:"function name"})," to name both a ",(0,s.jsx)(n.em,{children:"function"})," and a ",(0,s.jsx)(n.em,{children:"compiler macro"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"function name"})," names a ",(0,s.jsx)(n.em,{children:"compiler macro"})," if ",(0,s.jsx)(n.strong,{children:"compiler-macro-function"})," is ",(0,s.jsx)(n.em,{children:"true"})," of the ",(0,s.jsx)(n.em,{children:"function name"})," in the ",(0,s.jsx)(n.em,{children:"lexical environment"})," in which it appears. Creating a ",(0,s.jsx)(n.em,{children:"lexical binding"})," for the ",(0,s.jsx)(n.em,{children:"function name"})," not only creates a new local ",(0,s.jsx)(n.em,{children:"function"})," or ",(0,s.jsx)(n.em,{children:"macro"})," definition, but also ",(0,s.jsx)(n.em,{children:"shadows"}),"<sub>2</sub> the ",(0,s.jsx)(n.em,{children:"compiler macro"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"function"})," returned by ",(0,s.jsx)(n.strong,{children:"compiler-macro-function"})," is a ",(0,s.jsx)(n.em,{children:"function"})," of two arguments, called the expansion function. To expand a ",(0,s.jsx)(n.em,{children:"compiler macro"}),", the expansion function is invoked by calling the ",(0,s.jsx)(n.em,{children:"macroexpand hook"})," with the expansion function as its first argument, the entire compiler macro ",(0,s.jsx)(n.em,{children:"form"})," as its second argument, and the current compilation ",(0,s.jsx)(n.em,{children:"environment"})," (or with the current lexical ",(0,s.jsx)(n.em,{children:"environment"}),", if the ",(0,s.jsx)(n.em,{children:"form"})," is being processed by something other than ",(0,s.jsx)(n.strong,{children:"compile-file"}),") as its third"]}),"\n",(0,s.jsxs)(n.p,{children:["argument. The ",(0,s.jsx)(n.em,{children:"macroexpand hook"}),", in turn, calls the expansion function with the ",(0,s.jsx)(n.em,{children:"form"})," as its first argument and the ",(0,s.jsx)(n.em,{children:"environment"})," as its second argument. The return value from the expansion function, which is passed through by the ",(0,s.jsx)(n.em,{children:"macroexpand hook"}),", might either be the ",(0,s.jsx)(n.em,{children:"same form"}),", or else a form that can, at the discretion of the ",(0,s.jsx)(n.em,{children:"code"})," doing the expansion, be used in place of the original ",(0,s.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,s.jsx)(n.table,{children:(0,s.jsx)(n.thead,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.th,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"*macroexpand-hook* compiler-macro-function define-compiler-macro"})})})})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Figure 3\u20136. Defined names applicable to compiler macros"})})]})}function m(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function x(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The purpose of the ",(0,s.jsx)(n.em,{children:"compiler macro"})," facility is to permit selective source code transformations as optimization advice to the ",(0,s.jsx)(n.em,{children:"compiler"})," . When a ",(0,s.jsx)(n.em,{children:"compound form"})," is being processed (as by the compiler), if the ",(0,s.jsx)(n.em,{children:"operator"})," names a ",(0,s.jsx)(n.em,{children:"compiler macro"})," then the ",(0,s.jsx)(n.em,{children:"compiler macro function"})," may be"]}),"\n",(0,s.jsxs)(n.p,{children:["invoked on the form, and the resulting expansion recursively processed in preference to performing the usual processing on the original ",(0,s.jsx)(n.em,{children:"form"})," according to its normal interpretation as a ",(0,s.jsx)(n.em,{children:"function form"})," or ",(0,s.jsx)(n.em,{children:"macro form"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"compiler macro function"}),", like a ",(0,s.jsx)(n.em,{children:"macro function"}),", is a ",(0,s.jsx)(n.em,{children:"function"})," of two ",(0,s.jsx)(n.em,{children:"arguments"}),": the entire call ",(0,s.jsx)(n.em,{children:"form"})," and the ",(0,s.jsx)(n.em,{children:"environment"}),". Unlike an ordinary ",(0,s.jsx)(n.em,{children:"macro function"}),", a ",(0,s.jsx)(n.em,{children:"compiler macro function"})," can decline to provide an expansion merely by returning a value that is the ",(0,s.jsx)(n.em,{children:"same"})," as the original ",(0,s.jsx)(n.em,{children:"form"}),". The consequences are undefined if a ",(0,s.jsx)(n.em,{children:"compiler macro function"})," destructively modifies any part of its ",(0,s.jsx)(n.em,{children:"form"})," argument."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"form"})," passed to the compiler macro function can either be a ",(0,s.jsx)(n.em,{children:"list"})," whose ",(0,s.jsx)(n.em,{children:"car"})," is the function name, or a ",(0,s.jsx)(n.em,{children:"list"})," whose ",(0,s.jsx)(n.em,{children:"car"})," is ",(0,s.jsx)(n.strong,{children:"funcall"})," and whose ",(0,s.jsx)(n.em,{children:"cadr"})," is a list (function ",(0,s.jsx)(n.em,{children:"name"}),"); note that this affects destructuring of the form argument by the ",(0,s.jsx)(n.em,{children:"compiler macro function"}),". ",(0,s.jsx)(n.strong,{children:"define-compiler-macro"})," arranges for destructuring of arguments to be performed correctly for both possible formats."]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.strong,{children:"compile-file"})," chooses to expand a ",(0,s.jsx)(n.em,{children:"top level form"})," that is a ",(0,s.jsx)(n.em,{children:"compiler macro form"}),", the expansion is also treated as a ",(0,s.jsx)(n.em,{children:"top level form"})," for the purposes of ",(0,s.jsx)(n.strong,{children:"eval-when"})," processing; see Section 3.2.3.1 (Processing of Top Level Forms)."]})]})}function j(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}function p(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Compiler macros"})," may be defined for ",(0,s.jsx)(n.em,{children:"function names"})," that name ",(0,s.jsx)(n.em,{children:"macros"})," as well as ",(0,s.jsx)(n.em,{children:"functions"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Compiler macro"})," definitions are strictly global. There is no provision for defining local ",(0,s.jsx)(n.em,{children:"compiler macros"})," in the way that ",(0,s.jsx)(n.strong,{children:"macrolet"})," defines local ",(0,s.jsx)(n.em,{children:"macros"}),". Lexical bindings of a function name shadow any compiler macro definition associated with the name as well as its global ",(0,s.jsx)(n.em,{children:"function"})," or ",(0,s.jsx)(n.em,{children:"macro"})," definition."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that the presence of a compiler macro definition does not affect the values returned by functions that access ",(0,s.jsx)(n.em,{children:"function"})," definitions (",(0,s.jsx)(n.em,{children:"e.g."}),", ",(0,s.jsx)(n.strong,{children:"fboundp"}),") or ",(0,s.jsx)(n.em,{children:"macro"})," definitions (",(0,s.jsx)(n.em,{children:"e.g."}),", ",(0,s.jsx)(n.strong,{children:"macroexpand"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["Compiler macros are global, and the function ",(0,s.jsx)(n.strong,{children:"compiler-macro-function"})," is sufficient to resolve their interaction with other lexical and global definitions."]})]})}function f(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}function u(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The presence of a ",(0,s.jsx)(n.em,{children:"compiler macro"})," definition for a ",(0,s.jsx)(n.em,{children:"function"})," or ",(0,s.jsx)(n.em,{children:"macro"})," indicates that it is desirable for the ",(0,s.jsx)(n.em,{children:"compiler"})," to use the expansion of the ",(0,s.jsx)(n.em,{children:"compiler macro"})," instead of the original ",(0,s.jsx)(n.em,{children:"function form"})," or ",(0,s.jsx)(n.em,{children:"macro form"}),". However, no language processor (compiler, evaluator, or other code walker) is ever required to actually invoke ",(0,s.jsx)(n.em,{children:"compiler macro functions"}),", or to make use of the resulting expansion if it does invoke a ",(0,s.jsx)(n.em,{children:"compiler macro function"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When the ",(0,s.jsx)(n.em,{children:"compiler"})," encounters a ",(0,s.jsx)(n.em,{children:"form"})," during processing that represents a call to a ",(0,s.jsx)(n.em,{children:"compiler macro name"})," (that is not declared ",(0,s.jsx)(n.strong,{children:"notinline"}),"), the ",(0,s.jsx)(n.em,{children:"compiler"})," might expand the ",(0,s.jsx)(n.em,{children:"compiler macro"}),", and might use the expansion in place of the original ",(0,s.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.strong,{children:"eval"})," encounters a ",(0,s.jsx)(n.em,{children:"form"})," during processing that represents a call to a ",(0,s.jsx)(n.em,{children:"compiler macro name"})," (that is not declared ",(0,s.jsx)(n.strong,{children:"notinline"}),"), ",(0,s.jsx)(n.strong,{children:"eval"})," might expand the ",(0,s.jsx)(n.em,{children:"compiler macro"}),", and might use the expansion in place of the original ",(0,s.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["There are two situations in which a ",(0,s.jsx)(n.em,{children:"compiler macro"})," definition must not be applied by any language processor:"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," The global function name binding associated with the compiler macro is shadowed by a lexical binding of the function name."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," The function name has been declared or proclaimed ",(0,s.jsx)(n.strong,{children:"notinline"})," and the call form appears within the scope of the declaration."]}),"\n",(0,s.jsxs)(n.p,{children:["It is unspecified whether ",(0,s.jsx)(n.em,{children:"compiler macros"})," are expanded or used in any other situations."]})]})}function g(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}function b(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Although it is technically permissible, as described above, for ",(0,s.jsx)(n.strong,{children:"eval"})," to treat ",(0,s.jsx)(n.em,{children:"compiler macros"})," in the same situations as ",(0,s.jsx)(n.em,{children:"compiler"})," might, this is not necessarily a good idea in ",(0,s.jsx)(n.em,{children:"interpreted implementations"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Compiler macros"})," exist for the purpose of trading compile-time speed for run-time speed. Programmers who write ",(0,s.jsx)(n.em,{children:"compiler macros"})," tend to assume that the ",(0,s.jsx)(n.em,{children:"compiler macros"})," can take more time than normal ",(0,s.jsx)(n.em,{children:"functions"})," and ",(0,s.jsx)(n.em,{children:"macros"})," in order to produce code which is especially optimal for use at run time. Since ",(0,s.jsx)(n.strong,{children:"eval"})," in an ",(0,s.jsx)(n.em,{children:"interpreted implementation"})," might perform semantic analysis of the same form multiple times, it might be inefficient in general for the ",(0,s.jsx)(n.em,{children:"implementation"})," to choose to call ",(0,s.jsx)(n.em,{children:"compiler macros"})," on every such ",(0,s.jsx)(n.em,{children:"evaluation"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Nevertheless, the decision about what to do in these situations is left to each ",(0,s.jsx)(n.em,{children:"implementation"}),". Evaluation and"]})]})}function v(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(b,{...e})}):b(e)}function y(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Minimal compilation"})," is defined as follows:"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," All ",(0,s.jsx)(n.em,{children:"compiler macro"})," calls appearing in the ",(0,s.jsx)(n.em,{children:"source code"})," being compiled are expanded, if at all, at compile time; they will not be expanded at run time."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," All ",(0,s.jsx)(n.em,{children:"macro"})," and ",(0,s.jsx)(n.em,{children:"symbol macro"})," calls appearing in the source code being compiled are expanded at compile time in such a way that they will not be expanded again at run time. ",(0,s.jsx)(n.strong,{children:"macrolet"})," and ",(0,s.jsx)(n.strong,{children:"symbol-macrolet"})," are effectively replaced by ",(0,s.jsx)(n.em,{children:"forms"})," corresponding to their bodies in which calls to ",(0,s.jsx)(n.em,{children:"macros"})," are replaced by their expansions."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," The first ",(0,s.jsx)(n.em,{children:"argument"})," in a ",(0,s.jsx)(n.strong,{children:"load-time-value"})," ",(0,s.jsx)(n.em,{children:"form"})," in ",(0,s.jsx)(n.em,{children:"source code"})," processed by ",(0,s.jsx)(n.strong,{children:"compile"})," is ",(0,s.jsx)(n.em,{children:"evaluated"})," at ",(0,s.jsx)(n.em,{children:"compile time"}),"; in ",(0,s.jsx)(n.em,{children:"source code"})," processed by ",(0,s.jsx)(n.strong,{children:"compile-file"}),", the compiler arranges for it to be ",(0,s.jsx)(n.em,{children:"evaluated"})," at ",(0,s.jsx)(n.em,{children:"load time"}),". In either case, the result of the ",(0,s.jsx)(n.em,{children:"evaluation"})," is remembered and used later as the value of the ",(0,s.jsx)(n.strong,{children:"load-time-value"})," ",(0,s.jsx)(n.em,{children:"form"})," at ",(0,s.jsx)(n.em,{children:"execution time"}),"."]})]})}function w(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(y,{...e})}):y(e)}function T(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["All ",(0,s.jsx)(n.em,{children:"conforming programs"})," must obey the following constraints, which are designed to minimize the observable differences between compiled and interpreted programs:"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," Definitions of any referenced ",(0,s.jsx)(n.em,{children:"macros"})," must be present in the ",(0,s.jsx)(n.em,{children:"compilation environment"}),". Any ",(0,s.jsx)(n.em,{children:"form"})," that is a ",(0,s.jsx)(n.em,{children:"list"})," beginning with a ",(0,s.jsx)(n.em,{children:"symbol"})," that does not name a ",(0,s.jsx)(n.em,{children:"special operator"})," or a ",(0,s.jsx)(n.em,{children:"macro"})," defined in the ",(0,s.jsx)(n.em,{children:"compilation environment"})," is treated by the compiler as a function call."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," ",(0,s.jsx)(n.strong,{children:"Special"})," proclamations for ",(0,s.jsx)(n.em,{children:"dynamic variables"})," must be made in the ",(0,s.jsx)(n.em,{children:"compilation environment"}),". Any ",(0,s.jsx)(n.em,{children:"binding"})," for which there is no ",(0,s.jsx)(n.strong,{children:"special"})," declaration or proclamation in the ",(0,s.jsx)(n.em,{children:"compilation environment"})," is treated by the compiler as a ",(0,s.jsx)(n.em,{children:"lexical binding"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," The definition of a function that is defined and declared ",(0,s.jsx)(n.strong,{children:"inline"})," in the ",(0,s.jsx)(n.em,{children:"compilation environment"})," must be the same at run time."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," Within a ",(0,s.jsx)(n.em,{children:"function"})," named ",(0,s.jsx)(n.em,{children:"F"}),", the compiler may (but is not required to) assume that an apparent recursive call to a ",(0,s.jsx)(n.em,{children:"function"})," named ",(0,s.jsx)(n.em,{children:"F"})," refers to the same definition of ",(0,s.jsx)(n.em,{children:"F"}),", unless that function has been declared ",(0,s.jsx)(n.strong,{children:"notinline"}),". The consequences of redefining such a recursively defined ",(0,s.jsx)(n.em,{children:"function F"})," while it is executing are undefined."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," A call within a file to a named function that is defined in the same file refers to that function, unless that function has been declared ",(0,s.jsx)(n.strong,{children:"notinline"}),". The consequences are unspecified if functions are redefined individually at run time or multiply defined in the same file."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," The argument syntax and number of return values for all functions whose ",(0,s.jsx)(n.strong,{children:"ftype"})," is declared at compile time must remain the same at run time."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022 Constant variables"})," defined in the ",(0,s.jsx)(n.em,{children:"compilation environment"})," must have a ",(0,s.jsx)(n.em,{children:"similar"})," value at run time. A reference to a ",(0,s.jsx)(n.em,{children:"constant variable"})," in ",(0,s.jsx)(n.em,{children:"source code"})," is equivalent to a reference to a ",(0,s.jsx)(n.em,{children:"literal object"})," that is the ",(0,s.jsx)(n.em,{children:"value"})," of the ",(0,s.jsx)(n.em,{children:"constant variable"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," Type definitions made with ",(0,s.jsx)(n.strong,{children:"deftype"})," or ",(0,s.jsx)(n.strong,{children:"defstruct"})," in the ",(0,s.jsx)(n.em,{children:"compilation environment"})," must retain the same definition at run time. Classes defined by ",(0,s.jsx)(n.strong,{children:"defclass"})," in the ",(0,s.jsx)(n.em,{children:"compilation environment"})," must be defined at run time to have the same ",(0,s.jsx)(n.em,{children:"superclasses"})," and same ",(0,s.jsx)(n.em,{children:"metaclass"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["This implies that ",(0,s.jsx)(n.em,{children:"subtype"}),"/",(0,s.jsx)(n.em,{children:"supertype"})," relationships of ",(0,s.jsx)(n.em,{children:"type specifiers"})," must not change between ",(0,s.jsx)(n.em,{children:"compile time"})," and ",(0,s.jsx)(n.em,{children:"run time"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," Type declarations present in the compilation ",(0,s.jsx)(n.em,{children:"environment"})," must accurately describe the corresponding values at run time; otherwise, the consequences are undefined. It is permissible for an unknown ",(0,s.jsx)(n.em,{children:"type"})," to appear in a declaration at compile time, though a warning might be signaled in such a case."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," Except in the situations explicitly listed above, a ",(0,s.jsx)(n.em,{children:"function"})," defined in the ",(0,s.jsx)(n.em,{children:"evaluation environment"})," is permitted to have a different definition or a different ",(0,s.jsx)(n.em,{children:"signature"})," at run time, and the run-time definition prevails."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Conforming programs"})," should not be written using any additional assumptions about consistency between the run-time ",(0,s.jsx)(n.em,{children:"environment"})," and the startup, evaluation, and compilation ",(0,s.jsx)(n.em,{children:"environments"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Except where noted, when a compile-time and a run-time definition are different, one of the following occurs at run time:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," an error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"error"})," is signaled"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," the compile-time definition prevails"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u2022"})," the run-time definition prevails"]}),"\n",(0,s.jsxs)(n.p,{children:["If the ",(0,s.jsx)(n.em,{children:"compiler"})," processes a ",(0,s.jsx)(n.em,{children:"function form"})," whose ",(0,s.jsx)(n.em,{children:"operator"})," is not defined at compile time, no error is signaled at compile time."]})]})}function C(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(T,{...e})}):T(e)}function k(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"compile-file"})," performs compilation of ",(0,s.jsx)(n.em,{children:"forms"})," in a file following the rules specified in Section 3.2.2 (Compilation Semantics), and produces an output file that can be loaded by using ",(0,s.jsx)(n.strong,{children:"load"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Normally, the ",(0,s.jsx)(n.em,{children:"top level forms"})," appearing in a file compiled with ",(0,s.jsx)(n.strong,{children:"compile-file"})," are evaluated only when the resulting compiled file is loaded, and not when the file is compiled. However, it is typically the case that some forms in the file need to be evaluated at compile time so the remainder of the file can be read and compiled correctly."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"eval-when"})," ",(0,s.jsx)(n.em,{children:"special form"})," can be used to control whether a ",(0,s.jsx)(n.em,{children:"top level form"})," is evaluated at compile time, load time, or both. It is possible to specify any of three situations with ",(0,s.jsx)(n.strong,{children:"eval-when"}),", denoted by the symbols ",":compile-toplevel",", ",":load-toplevel",", and ",":execute",". For top level ",(0,s.jsx)(n.strong,{children:"eval-when"})," forms, ",":compile-toplevel"," specifies that the compiler must evaluate the body at compile time, and ",":load-toplevel"," specifies that the compiler must arrange to evaluate the body at load time. For non-top level ",(0,s.jsx)(n.strong,{children:"eval-when"})," forms, ",":execute"," specifies that the body must be executed in the run-time ",(0,s.jsx)(n.em,{children:"environment"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The behavior of this ",(0,s.jsx)(n.em,{children:"form"})," can be more precisely understood in terms of a model of how ",(0,s.jsx)(n.strong,{children:"compile-file"})," processes forms in a file to be compiled. There are two processing modes, called \u201cnot-compile-time\u201d and \u201ccompile-time-too\u201d."]}),"\n",(0,s.jsxs)(n.p,{children:["Successive forms are read from the file by ",(0,s.jsx)(n.strong,{children:"compile-file"})," and processed in not-compile-time mode; in this mode, ",(0,s.jsx)(n.strong,{children:"compile-file"})," arranges for forms to be evaluated only at load time and not at compile time. When ",(0,s.jsx)(n.strong,{children:"compile-file"})," is in compile-time-too mode, forms are evaluated both at compile time and load time."]})]})}function S(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(k,{...e})}):k(e)}function F(e){const n={em:"em",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Processing of ",(0,s.jsx)(n.em,{children:"top level forms"})," in the file compiler is defined as follows:"]}),"\n",(0,s.jsxs)(n.p,{children:["1. If the ",(0,s.jsx)(n.em,{children:"form"})," is a ",(0,s.jsx)(n.em,{children:"compiler macro form"})," (not disabled by a ",(0,s.jsx)(n.strong,{children:"notinline"})," ",(0,s.jsx)(n.em,{children:"declaration"}),"), the ",(0,s.jsx)(n.em,{children:"implementation"})," might or might not choose to compute the ",(0,s.jsx)(n.em,{children:"compiler macro expansion"})," of the ",(0,s.jsx)(n.em,{children:"form"})," and, having performed the expansion, might or might not choose to process the result as a ",(0,s.jsx)(n.em,{children:"top level form"})," in the same processing mode (compile-time-too or not-compile time). If it declines to obtain or use the expansion, it must process the original ",(0,s.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["2. If the form is a ",(0,s.jsx)(n.em,{children:"macro form"}),", its ",(0,s.jsx)(n.em,{children:"macro expansion"})," is computed and processed as a ",(0,s.jsx)(n.em,{children:"top level form"})," in the same processing mode (compile-time-too or not-compile-time)."]}),"\n",(0,s.jsxs)(n.p,{children:["3. If the form is a ",(0,s.jsx)(n.strong,{children:"progn"})," form, each of its body ",(0,s.jsx)(n.em,{children:"forms"})," is sequentially processed as a ",(0,s.jsx)(n.em,{children:"top level form"})," in the same processing mode."]}),"\n",(0,s.jsxs)(n.p,{children:["4. If the form is a ",(0,s.jsx)(n.strong,{children:"locally"}),", ",(0,s.jsx)(n.strong,{children:"macrolet"}),", or ",(0,s.jsx)(n.strong,{children:"symbol-macrolet"}),", ",(0,s.jsx)(n.strong,{children:"compile-file"})," establishes the appropriate bindings and processes the body forms as ",(0,s.jsx)(n.em,{children:"top level forms"})," with those bindings in effect in the same processing mode. (Note that this implies that the lexical ",(0,s.jsx)(n.em,{children:"environment"})," in which ",(0,s.jsx)(n.em,{children:"top level forms"})," are processed is not necessarily the ",(0,s.jsx)(n.em,{children:"null lexical environment"}),".)"]}),"\n",(0,s.jsxs)(n.p,{children:["5. If the form is an ",(0,s.jsx)(n.strong,{children:"eval-when"})," form, it is handled according to Figure 3\u20137."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.th,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"CT LT E Mode Action New Mode"})})})}),(0,s.jsx)(n.tbody,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"<p>Yes Yes \u2014 \u2014 Process compile-time-too No Yes Yes CTT Process compile-time-too No Yes Yes NCT Process not-compile-time No Yes No \u2014 Process not-compile-time Yes No \u2014 \u2014 Evaluate \u2014 </p><p>No No Yes CTT Evaluate \u2014 No No Yes NCT Discard \u2014 No No No \u2014 Discard \u2014</p>"})})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Figure 3\u20137. EVAL-WHEN processing"})}),"\n",(0,s.jsxs)(n.p,{children:["Column ",(0,s.jsx)(n.strong,{children:"CT"})," indicates whether ",":compile-toplevel"," is specified. Column ",(0,s.jsx)(n.strong,{children:"LT"})," indicates whether ",":load-toplevel"," is specified. Column ",(0,s.jsx)(n.strong,{children:"E"})," indicates whether ",":execute"," is specified. Column ",(0,s.jsx)(n.strong,{children:"Mode"})," indicates the processing mode; a dash (\u2014) indicates that the processing mode is not relevant."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Action"})," column specifies one of three actions:"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Process:"})," process the body as ",(0,s.jsx)(n.em,{children:"top level forms"})," in the specified mode."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Evaluate:"})," evaluate the body in the dynamic execution context of the compiler, using the ",(0,s.jsx)(n.em,{children:"evaluation environment"})," as the global environment and the ",(0,s.jsx)(n.em,{children:"lexical environment"})," in which the ",(0,s.jsx)(n.strong,{children:"eval-when"})," appears."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Discard:"})," ignore the ",(0,s.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"New Mode"})," column indicates the new processing mode. A dash (\u2014) indicates the compiler remains in its current mode."]}),"\n",(0,s.jsxs)(n.p,{children:["6. Otherwise, the form is a ",(0,s.jsx)(n.em,{children:"top level form"})," that is not one of the special cases. In compile time-too mode, the compiler first evaluates the form in the evaluation ",(0,s.jsx)(n.em,{children:"environment"})," and then minimally compiles it. In not-compile-time mode, the ",(0,s.jsx)(n.em,{children:"form"})," is simply minimally compiled. All ",(0,s.jsx)(n.em,{children:"subforms"})," are treated as ",(0,s.jsx)(n.em,{children:"non-top-level forms"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that ",(0,s.jsx)(n.em,{children:"top level forms"})," are processed in the order in which they textually appear in the file and that each ",(0,s.jsx)(n.em,{children:"top level form"})," read by the compiler is processed before the next is read. However, the order of processing (including macro expansion) of ",(0,s.jsx)(n.em,{children:"subforms"})," that are not ",(0,s.jsx)(n.em,{children:"top level forms"})," and the order of further compilation is unspecified as long as Common Lisp"]}),"\n",(0,s.jsx)(n.p,{children:"semantics are preserved."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"eval-when"})," forms cause compile-time evaluation only at top level. Both ",":compile-toplevel"," and ",":load-toplevel"," situation specifications are ignored for ",(0,s.jsx)(n.em,{children:"non-top-level forms"}),". For ",(0,s.jsx)(n.em,{children:"non-top-level"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"forms"}),", an ",(0,s.jsx)(n.strong,{children:"eval-when"})," specifying the ",":execute"," situation is treated as an ",(0,s.jsx)(n.em,{children:"implicit progn"})," including the ",(0,s.jsx)(n.em,{children:"forms"})," in the body of the ",(0,s.jsx)(n.strong,{children:"eval-when"})," ",(0,s.jsx)(n.em,{children:"form"}),"; otherwise, the ",(0,s.jsx)(n.em,{children:"forms"})," in the body are ignored."]})]})}function A(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(F,{...e})}):F(e)}function q(e){const n={em:"em",p:"p",strong:"strong",table:"table",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Defining ",(0,s.jsx)(n.em,{children:"macros"})," (such as ",(0,s.jsx)(n.strong,{children:"defmacro"})," or ",(0,s.jsx)(n.strong,{children:"defvar"}),") appearing within a file being processed by ",(0,s.jsx)(n.strong,{children:"compile-file"})," normally have compile-time side effects which affect how subsequent ",(0,s.jsx)(n.em,{children:"forms"})," in the same ",(0,s.jsx)(n.em,{children:"file"})," are compiled. A convenient model for explaining how these side effects happen is that the defining macro expands into one or more ",(0,s.jsx)(n.strong,{children:"eval-when"})," ",(0,s.jsx)(n.em,{children:"forms"}),", and that the calls which cause the compile-time side effects to happen appear in the body of an (eval-when (",":compile-toplevel",") ...) ",(0,s.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The compile-time side effects may cause information about the definition to be stored differently than if the defining macro had been processed in the \u2018normal\u2019 way (either interpretively or by loading the compiled file)."}),"\n",(0,s.jsxs)(n.p,{children:["In particular, the information stored by the defining ",(0,s.jsx)(n.em,{children:"macros"})," at compile time might or might not be available to the interpreter (either during or after compilation), or during subsequent calls to the ",(0,s.jsx)(n.em,{children:"compiler"})," . For example, the following code is nonportable because it assumes that the ",(0,s.jsx)(n.em,{children:"compiler"})," stores the macro definition of foo where it is available to the interpreter:"]}),"\n",(0,s.jsx)(n.p,{children:"(defmacro foo (x) \u2018(car ,x))"}),"\n",(0,s.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":compile-toplevel"," ",":load-toplevel",")"]}),"\n",(0,s.jsx)(n.p,{children:"(print (foo \u2019(a b c))))"}),"\n",(0,s.jsxs)(n.p,{children:["A portable way to do the same thing would be to include the macro definition inside the ",(0,s.jsx)(n.strong,{children:"eval-when"})," ",(0,s.jsx)(n.em,{children:"form"}),", as in:"]}),"\n",(0,s.jsxs)(n.p,{children:["(eval-when (",":execute"," ",":compile-toplevel"," ",":load-toplevel",")"]}),"\n",(0,s.jsx)(n.p,{children:"(defmacro foo (x) \u2018(car ,x))"}),"\n",(0,s.jsx)(n.p,{children:"(print (foo \u2019(a b c))))"}),"\n",(0,s.jsxs)(n.p,{children:["Figure 3\u20138 lists macros that make definitions available both in the compilation and run-time ",(0,s.jsx)(n.em,{children:"environments"}),". It is not specified whether definitions made available in the ",(0,s.jsx)(n.em,{children:"compilation environment"})," are available in the evaluation ",(0,s.jsx)(n.em,{children:"environment"}),", nor is it specified whether they are available in subsequent compilation units or subsequent invocations of the compiler. As with ",(0,s.jsx)(n.strong,{children:"eval-when"}),", these compile-time side effects happen only when the defining macros appear at top level."]}),"\n",(0,s.jsx)(n.table,{children:(0,s.jsx)(n.thead,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.th,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"declaim define-modify-macro defsetf defclass define-setf-expander defstruct defconstant defmacro deftype define-compiler-macro defpackage defvar define-condition defparameter"})})})})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Figure 3\u20138. Defining Macros That Affect the Compile-Time Environment"})})]})}function I(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(q,{...e})}):q(e)}function N(e){const n={em:"em",p:"p",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Except where explicitly stated otherwise, no ",(0,s.jsx)(n.em,{children:"macro"})," defined in the Common Lisp standard produces an expansion that could cause any of the ",(0,s.jsx)(n.em,{children:"subforms"})," of the ",(0,s.jsx)(n.em,{children:"macro form"})," to be treated as ",(0,s.jsx)(n.em,{children:"top level forms"}),". If an ",(0,s.jsx)(n.em,{children:"implementation"})," also provides a ",(0,s.jsx)(n.em,{children:"special operator"})," definition of a Common Lisp ",(0,s.jsx)(n.em,{children:"macro"}),", the ",(0,s.jsx)(n.em,{children:"special operator"})," definition must be semantically equivalent in this respect."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Compiler macro"})," expansions must also have the same top level evaluation semantics as the ",(0,s.jsx)(n.em,{children:"form"})," which they replace. This is of concern both to ",(0,s.jsx)(n.em,{children:"conforming implementations"})," and to ",(0,s.jsx)(n.em,{children:"conforming programs"}),"."]})]})}function M(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(N,{...e})}):N(e)}function E(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The functions ",(0,s.jsx)(n.strong,{children:"eval"})," and ",(0,s.jsx)(n.strong,{children:"compile"})," are required to ensure that ",(0,s.jsx)(n.em,{children:"literal objects"})," referenced within the resulting interpreted or compiled code objects are the ",(0,s.jsx)(n.em,{children:"same"})," as the corresponding ",(0,s.jsx)(n.em,{children:"objects"})," in the ",(0,s.jsx)(n.em,{children:"source code"}),". ",(0,s.jsx)(n.strong,{children:"compile-file"}),", on the other hand, must produce a ",(0,s.jsx)(n.em,{children:"compiled file"})," that, when loaded with ",(0,s.jsx)(n.strong,{children:"load"}),", constructs the ",(0,s.jsx)(n.em,{children:"objects"})," defined by the ",(0,s.jsx)(n.em,{children:"source code"})," and produces references to them."]}),"\n",(0,s.jsxs)(n.p,{children:["In the case of ",(0,s.jsx)(n.strong,{children:"compile-file"}),", ",(0,s.jsx)(n.em,{children:"objects"})," constructed by ",(0,s.jsx)(n.strong,{children:"load"})," of the ",(0,s.jsx)(n.em,{children:"compiled file"})," cannot be spoken of as being the ",(0,s.jsx)(n.em,{children:"same"})," as the ",(0,s.jsx)(n.em,{children:"objects"})," constructed at compile time, because the ",(0,s.jsx)(n.em,{children:"compiled file"})," may be loaded into a different ",(0,s.jsx)(n.em,{children:"Lisp image"})," than the one in which it was compiled. This section defines the concept of ",(0,s.jsx)(n.em,{children:"similarity"})," which relates ",(0,s.jsx)(n.em,{children:"objects"})," in the ",(0,s.jsx)(n.em,{children:"evaluation environment"})," to the corresponding ",(0,s.jsx)(n.em,{children:"objects"})," in"]}),"\n",(0,s.jsxs)(n.p,{children:["the ",(0,s.jsx)(n.em,{children:"run-time environment"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The constraints on ",(0,s.jsx)(n.em,{children:"literal objects"})," described in this section apply only to ",(0,s.jsx)(n.strong,{children:"compile-file"}),"; ",(0,s.jsx)(n.strong,{children:"eval"})," and ",(0,s.jsx)(n.strong,{children:"compile"})," do not copy or coalesce constants."]})]})}function z(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(E,{...e})}):E(e)}function L(e){const n={em:"em",p:"p",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The fact that the ",(0,s.jsx)(n.em,{children:"file compiler"})," represents ",(0,s.jsx)(n.em,{children:"literal objects"})," externally in a ",(0,s.jsx)(n.em,{children:"compiled file"})," and must later reconstruct suitable equivalents of those ",(0,s.jsx)(n.em,{children:"objects"})," when that ",(0,s.jsx)(n.em,{children:"file"})," is loaded imposes a need for constraints on the nature of the ",(0,s.jsx)(n.em,{children:"objects"})," that can be used as ",(0,s.jsx)(n.em,{children:"literal objects"})," in ",(0,s.jsx)(n.em,{children:"code"})," to be processed by the ",(0,s.jsx)(n.em,{children:"file compiler"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.em,{children:"object"})," that can be used as a ",(0,s.jsx)(n.em,{children:"literal object"})," in ",(0,s.jsx)(n.em,{children:"code"})," to be processed by the ",(0,s.jsx)(n.em,{children:"file compiler"})," is called an ",(0,s.jsx)(n.em,{children:"externalizable object"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["We define that two ",(0,s.jsx)(n.em,{children:"objects"})," are ",(0,s.jsx)(n.em,{children:"similar"})," if they satisfy a two-place conceptual equivalence predicate (defined below), which is independent of the ",(0,s.jsx)(n.em,{children:"Lisp image"})," so that the two ",(0,s.jsx)(n.em,{children:"objects"})," in different ",(0,s.jsx)(n.em,{children:"Lisp images"})," can be understood to be equivalent under this predicate. Further, by inspecting the definition of this conceptual predicate, the programmer can anticipate what aspects of an ",(0,s.jsx)(n.em,{children:"object"})," are reliably preserved by ",(0,s.jsx)(n.em,{children:"file compilation"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"file compiler"})," must cooperate with the ",(0,s.jsx)(n.em,{children:"loader"})," in order to assure that in each case where an ",(0,s.jsx)(n.em,{children:"externalizable object"})," is processed as a ",(0,s.jsx)(n.em,{children:"literal object"}),", the ",(0,s.jsx)(n.em,{children:"loader"})," will construct a ",(0,s.jsx)(n.em,{children:"similar object"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The set of ",(0,s.jsx)(n.em,{children:"objects"})," that are ",(0,s.jsx)(n.em,{children:"externalizable objects"})," are those for which the new conceptual term \u201c",(0,s.jsx)(n.em,{children:"similar"}),"\u201d is defined, such that when a ",(0,s.jsx)(n.em,{children:"compiled file"})," is ",(0,s.jsx)(n.em,{children:"loaded"}),", an ",(0,s.jsx)(n.em,{children:"object"})," can be constructed which"]}),"\n",(0,s.jsxs)(n.p,{children:["can be shown to be ",(0,s.jsx)(n.em,{children:"similar"})," to the original ",(0,s.jsx)(n.em,{children:"object"})," which existed at the time the ",(0,s.jsx)(n.em,{children:"file compiler"})," was operating."]})]})}function P(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(L,{...e})}):L(e)}function O(e){return(0,s.jsx)(s.Fragment,{})}function D(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(O,{...e})}):O()}function W(e){const n={em:"em",p:"p",...(0,r.a)(),...e.components};return(0,s.jsxs)(n.p,{children:["Of the ",(0,s.jsx)(n.em,{children:"types"})," over which ",(0,s.jsx)(n.em,{children:"similarity"})," is defined, some are treated as aggregate objects. For these types, ",(0,s.jsx)(n.em,{children:"similarity"})," is defined recursively. We say that an ",(0,s.jsx)(n.em,{children:"object"})," of these types has certain \u201cbasic qualities\u201d and to satisfy the ",(0,s.jsx)(n.em,{children:"similarity"})," relationship, the values of the corresponding qualities of the two ",(0,s.jsx)(n.em,{children:"objects"})," must also be similar."]})}function Y(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(W,{...e})}):W(e)}function B(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Two ",(0,s.jsx)(n.em,{children:"objects S"})," (in ",(0,s.jsx)(n.em,{children:"source code"}),") and ",(0,s.jsx)(n.em,{children:"C"})," (in ",(0,s.jsx)(n.em,{children:"compiled code"}),") are defined to be ",(0,s.jsx)(n.em,{children:"similar"})," if and only if they are both of one of the ",(0,s.jsx)(n.em,{children:"types"})," listed here (or defined by the ",(0,s.jsx)(n.em,{children:"implementation"}),") and they both satisfy all additional requirements of ",(0,s.jsx)(n.em,{children:"similarity"})," indicated for that ",(0,s.jsx)(n.em,{children:"type"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"number"})}),"\n",(0,s.jsxs)(n.p,{children:["Two ",(0,s.jsx)(n.em,{children:"numbers S"})," and ",(0,s.jsx)(n.em,{children:"C"})," are ",(0,s.jsx)(n.em,{children:"similar"})," if they are of the same ",(0,s.jsx)(n.em,{children:"type"})," and represent the same mathematical value."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"character"})}),"\n",(0,s.jsxs)(n.p,{children:["Two ",(0,s.jsx)(n.em,{children:"simple characters S"})," and ",(0,s.jsx)(n.em,{children:"C"})," are ",(0,s.jsx)(n.em,{children:"similar"})," if they have ",(0,s.jsx)(n.em,{children:"similar code attributes"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Implementations"})," providing additional, ",(0,s.jsx)(n.em,{children:"implementation-defined attributes"})," must define whether and how ",(0,s.jsx)(n.em,{children:"non-simple characters"})," can be regarded as ",(0,s.jsx)(n.em,{children:"similar"})," ."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"symbol"})}),"\n",(0,s.jsxs)(n.p,{children:["Two ",(0,s.jsx)(n.em,{children:"apparently uninterned symbols S"})," and ",(0,s.jsx)(n.em,{children:"C"})," are ",(0,s.jsx)(n.em,{children:"similar"})," if their ",(0,s.jsx)(n.em,{children:"names"})," are ",(0,s.jsx)(n.em,{children:"similar"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:["Two ",(0,s.jsx)(n.em,{children:"interned"})," symbols ",(0,s.jsx)(n.em,{children:"S"})," and ",(0,s.jsx)(n.em,{children:"C"})," are ",(0,s.jsx)(n.em,{children:"similar"})," if their ",(0,s.jsx)(n.em,{children:"names"})," are ",(0,s.jsx)(n.em,{children:"similar"})," , and if either ",(0,s.jsx)(n.em,{children:"S"})," is accessible in the ",(0,s.jsx)(n.em,{children:"current package"})," at compile time and ",(0,s.jsx)(n.em,{children:"C"})," is accessible in the ",(0,s.jsx)(n.em,{children:"current package"})," at load time, or ",(0,s.jsx)(n.em,{children:"C"})," is accessible in the ",(0,s.jsx)(n.em,{children:"package"})," that is ",(0,s.jsx)(n.em,{children:"similar"})," to the ",(0,s.jsx)(n.em,{children:"home package"})," of ",(0,s.jsx)(n.em,{children:"S"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["(Note that ",(0,s.jsx)(n.em,{children:"similarity"})," of ",(0,s.jsx)(n.em,{children:"symbols"})," is dependent on neither the ",(0,s.jsx)(n.em,{children:"current readtable"})," nor how the ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"read"})," would parse the ",(0,s.jsx)(n.em,{children:"characters"})," in the ",(0,s.jsx)(n.em,{children:"name"})," of the ",(0,s.jsx)(n.em,{children:"symbol"}),".)"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"package"})}),"\n",(0,s.jsxs)(n.p,{children:["Two ",(0,s.jsx)(n.em,{children:"packages S"})," and ",(0,s.jsx)(n.em,{children:"C"})," are ",(0,s.jsx)(n.em,{children:"similar"})," if their ",(0,s.jsx)(n.em,{children:"names"})," are ",(0,s.jsx)(n.em,{children:"similar"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that although a ",(0,s.jsx)(n.em,{children:"package object"})," is an ",(0,s.jsx)(n.em,{children:"externalizable object"}),", the programmer is responsible for ensuring that the corresponding ",(0,s.jsx)(n.em,{children:"package"})," is already in existence when code"]}),"\n",(0,s.jsxs)(n.p,{children:["referencing it as a ",(0,s.jsx)(n.em,{children:"literal object"})," is ",(0,s.jsx)(n.em,{children:"loaded"}),". The ",(0,s.jsx)(n.em,{children:"loader"})," finds the corresponding ",(0,s.jsx)(n.em,{children:"package object"})," as if by calling ",(0,s.jsx)(n.strong,{children:"find-package"})," with that ",(0,s.jsx)(n.em,{children:"name"})," as an ",(0,s.jsx)(n.em,{children:"argument"}),". An error is signaled by the ",(0,s.jsx)(n.em,{children:"loader"})," if no ",(0,s.jsx)(n.em,{children:"package"})," exists at load time."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"random-state"})}),"\n",(0,s.jsxs)(n.p,{children:["Two ",(0,s.jsx)(n.em,{children:"random states S"})," and ",(0,s.jsx)(n.em,{children:"C"})," are ",(0,s.jsx)(n.em,{children:"similar"})," if ",(0,s.jsx)(n.em,{children:"S"})," would always produce the same sequence of pseudo-random numbers as a ",(0,s.jsx)(n.em,{children:"copy"}),"<sub>5</sub> of ",(0,s.jsx)(n.em,{children:"C"})," when given as the ",(0,s.jsx)(n.em,{children:"random-state argument"})," to the ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"random"}),", assuming equivalent ",(0,s.jsx)(n.em,{children:"limit arguments"})," in each case."]}),"\n",(0,s.jsxs)(n.p,{children:["(Note that since ",(0,s.jsx)(n.em,{children:"C"})," has been processed by the ",(0,s.jsx)(n.em,{children:"file compiler"})," , it cannot be used directly as an ",(0,s.jsx)(n.em,{children:"argument"})," to ",(0,s.jsx)(n.strong,{children:"random"})," because ",(0,s.jsx)(n.strong,{children:"random"})," would perform a side effect.)"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"cons"})}),"\n",(0,s.jsxs)(n.p,{children:["Two ",(0,s.jsx)(n.em,{children:"conses"}),", ",(0,s.jsx)(n.em,{children:"S"})," and ",(0,s.jsx)(n.em,{children:"C"}),", are ",(0,s.jsx)(n.em,{children:"similar"})," if the ",(0,s.jsx)(n.em,{children:"car"})," <sub>2</sub> of ",(0,s.jsx)(n.em,{children:"S"})," is ",(0,s.jsx)(n.em,{children:"similar"})," to the ",(0,s.jsx)(n.em,{children:"car"})," <sub>2</sub> of ",(0,s.jsx)(n.em,{children:"C"}),", and the ",(0,s.jsx)(n.em,{children:"cdr"})," <sub>2</sub> of ",(0,s.jsx)(n.em,{children:"S"})," is ",(0,s.jsx)(n.em,{children:"similar"})," to the ",(0,s.jsx)(n.em,{children:"cdr"})," <sub>2</sub> of ",(0,s.jsx)(n.em,{children:"C"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"array"})}),"\n",(0,s.jsxs)(n.p,{children:["Two one-dimensional ",(0,s.jsx)(n.em,{children:"arrays"}),", ",(0,s.jsx)(n.em,{children:"S"})," and ",(0,s.jsx)(n.em,{children:"C"}),", are ",(0,s.jsx)(n.em,{children:"similar"})," if the ",(0,s.jsx)(n.em,{children:"length"})," of ",(0,s.jsx)(n.em,{children:"S"})," is ",(0,s.jsx)(n.em,{children:"similar"})," to the ",(0,s.jsx)(n.em,{children:"length"})," of ",(0,s.jsx)(n.em,{children:"C"}),", the ",(0,s.jsx)(n.em,{children:"actual array element type"})," of ",(0,s.jsx)(n.em,{children:"S"})," is ",(0,s.jsx)(n.em,{children:"similar"})," to the ",(0,s.jsx)(n.em,{children:"actual array element type"})," of ",(0,s.jsx)(n.em,{children:"C"}),", and each ",(0,s.jsx)(n.em,{children:"active element"})," of ",(0,s.jsx)(n.em,{children:"S"})," is ",(0,s.jsx)(n.em,{children:"similar"})," to the corresponding ",(0,s.jsx)(n.em,{children:"element"})," of ",(0,s.jsx)(n.em,{children:"C"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Two ",(0,s.jsx)(n.em,{children:"arrays"})," of ",(0,s.jsx)(n.em,{children:"rank"})," other than one, ",(0,s.jsx)(n.em,{children:"S"})," and ",(0,s.jsx)(n.em,{children:"C"}),", are ",(0,s.jsx)(n.em,{children:"similar"})," if the ",(0,s.jsx)(n.em,{children:"rank"})," of ",(0,s.jsx)(n.em,{children:"S"})," is ",(0,s.jsx)(n.em,{children:"similar"})," to the ",(0,s.jsx)(n.em,{children:"rank"})," of ",(0,s.jsx)(n.em,{children:"C"}),", each ",(0,s.jsx)(n.em,{children:"dimension"}),"<sub>1</sub> of ",(0,s.jsx)(n.em,{children:"S"})," is ",(0,s.jsx)(n.em,{children:"similar"})," to the corresponding ",(0,s.jsx)(n.em,{children:"dimension"}),"<sub>1</sub> of ",(0,s.jsx)(n.em,{children:"C"}),", the ",(0,s.jsx)(n.em,{children:"actual array element type"})," of ",(0,s.jsx)(n.em,{children:"S"})," is ",(0,s.jsx)(n.em,{children:"similar"})," to the ",(0,s.jsx)(n.em,{children:"actual array element type"})," of ",(0,s.jsx)(n.em,{children:"C"}),", and each ",(0,s.jsx)(n.em,{children:"element"})," of ",(0,s.jsx)(n.em,{children:"S"})," is ",(0,s.jsx)(n.em,{children:"similar"})," to the corresponding ",(0,s.jsx)(n.em,{children:"element"})," of ",(0,s.jsx)(n.em,{children:"C"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In addition, if ",(0,s.jsx)(n.em,{children:"S"})," is a ",(0,s.jsx)(n.em,{children:"simple array"}),", then ",(0,s.jsx)(n.em,{children:"C"})," must also be a ",(0,s.jsx)(n.em,{children:"simple array"}),". If ",(0,s.jsx)(n.em,{children:"S"})," is a ",(0,s.jsx)(n.em,{children:"displaced array"}),", has a ",(0,s.jsx)(n.em,{children:"fill pointer"})," , or is ",(0,s.jsx)(n.em,{children:"actually adjustable"}),", ",(0,s.jsx)(n.em,{children:"C"})," is permitted to lack any or all of these qualities."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"hash-table"})}),"\n",(0,s.jsxs)(n.p,{children:["Two ",(0,s.jsx)(n.em,{children:"hash tables S"})," and ",(0,s.jsx)(n.em,{children:"C"})," are ",(0,s.jsx)(n.em,{children:"similar"})," if they meet the following three requirements: 1. They both have the same test (",(0,s.jsx)(n.em,{children:"e.g."}),", they are both ",(0,s.jsx)(n.strong,{children:"eql"})," ",(0,s.jsx)(n.em,{children:"hash tables"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["2. There is a unique one-to-one correspondence between the keys of the two ",(0,s.jsx)(n.em,{children:"hash tables"}),", such that the corresponding keys are ",(0,s.jsx)(n.em,{children:"similar"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:["3. For all keys, the values associated with two corresponding keys are ",(0,s.jsx)(n.em,{children:"similar"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:["If there is more than one possible one-to-one correspondence between the keys of ",(0,s.jsx)(n.em,{children:"S"})," and ",(0,s.jsx)(n.em,{children:"C"}),", the consequences are unspecified. A ",(0,s.jsx)(n.em,{children:"conforming program"})," cannot use a table such as ",(0,s.jsx)(n.em,{children:"S"})," as an ",(0,s.jsx)(n.em,{children:"externalizable constant"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"pathname"})}),"\n",(0,s.jsxs)(n.p,{children:["Two ",(0,s.jsx)(n.em,{children:"pathnames S"})," and ",(0,s.jsx)(n.em,{children:"C"})," are ",(0,s.jsx)(n.em,{children:"similar"})," if all corresponding ",(0,s.jsx)(n.em,{children:"pathname components"})," are ",(0,s.jsx)(n.em,{children:"similar"})," ."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"function"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Functions"})," are not ",(0,s.jsx)(n.em,{children:"externalizable objects"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"structure-object"})," and ",(0,s.jsx)(n.strong,{children:"standard-object"})]}),"\n",(0,s.jsxs)(n.p,{children:["A general-purpose concept of ",(0,s.jsx)(n.em,{children:"similarity"})," does not exist for ",(0,s.jsx)(n.em,{children:"structures"})," and ",(0,s.jsx)(n.em,{children:"standard objects"}),". However, a ",(0,s.jsx)(n.em,{children:"conforming program"})," is permitted to define a ",(0,s.jsx)(n.strong,{children:"make-load-form"})," ",(0,s.jsx)(n.em,{children:"method"})," for any ",(0,s.jsx)(n.em,{children:"class K"})," defined by that ",(0,s.jsx)(n.em,{children:"program"})," that is a ",(0,s.jsx)(n.em,{children:"subclass"})," of either ",(0,s.jsx)(n.strong,{children:"structure-object"})," or ",(0,s.jsx)(n.strong,{children:"standard-object"}),". The effect of such a ",(0,s.jsx)(n.em,{children:"method"})," is to define that an ",(0,s.jsx)(n.em,{children:"object S"})," of ",(0,s.jsx)(n.em,{children:"type K"})," in ",(0,s.jsx)(n.em,{children:"source code"})," is ",(0,s.jsx)(n.em,{children:"similar"})," to an ",(0,s.jsx)(n.em,{children:"object C"})," of ",(0,s.jsx)(n.em,{children:"type K"})," in ",(0,s.jsx)(n.em,{children:"compiled code"})," if ",(0,s.jsx)(n.em,{children:"C"})," was constructed from ",(0,s.jsx)(n.em,{children:"code"})," produced by calling ",(0,s.jsx)(n.strong,{children:"make-load-form"})," on ",(0,s.jsx)(n.em,{children:"S"}),"."]})]})}function H(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(B,{...e})}):B(e)}function U(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Some ",(0,s.jsx)(n.em,{children:"objects"}),", such as ",(0,s.jsx)(n.em,{children:"streams"}),", ",(0,s.jsx)(n.strong,{children:"readtables"}),", and ",(0,s.jsx)(n.strong,{children:"methods"})," are not ",(0,s.jsx)(n.em,{children:"externalizable objects"})," under the definition of similarity given above. That is, such ",(0,s.jsx)(n.em,{children:"objects"})," may not portably appear as ",(0,s.jsx)(n.em,{children:"literal objects"})," in ",(0,s.jsx)(n.em,{children:"code"})," to be processed by the ",(0,s.jsx)(n.em,{children:"file compiler"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.em,{children:"implementation"})," is permitted to extend the rules of similarity, so that other kinds of ",(0,s.jsx)(n.em,{children:"objects"})," are ",(0,s.jsx)(n.em,{children:"externalizable objects"})," for that ",(0,s.jsx)(n.em,{children:"implementation"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If for some kind of ",(0,s.jsx)(n.em,{children:"object"}),", ",(0,s.jsx)(n.em,{children:"similarity"})," is neither defined by this specification nor by the ",(0,s.jsx)(n.em,{children:"implementation"}),", then the ",(0,s.jsx)(n.em,{children:"file compiler"})," must signal an error upon encountering such an ",(0,s.jsx)(n.em,{children:"object"})," as a ",(0,s.jsx)(n.em,{children:"literal constant"}),"."]})]})}function _(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(U,{...e})}):U(e)}function K(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["If two ",(0,s.jsx)(n.em,{children:"literal objects"})," appearing in the source code for a single file processed with the ",(0,s.jsx)(n.em,{children:"file compiler"})," are the ",(0,s.jsx)(n.em,{children:"identical"}),", the corresponding ",(0,s.jsx)(n.em,{children:"objects"})," in the ",(0,s.jsx)(n.em,{children:"compiled code"})," must also be the ",(0,s.jsx)(n.em,{children:"identical"}),". With the exception of ",(0,s.jsx)(n.em,{children:"symbols"})," and ",(0,s.jsx)(n.em,{children:"packages"}),", any two ",(0,s.jsx)(n.em,{children:"literal objects"})," in ",(0,s.jsx)(n.em,{children:"code"})," being processed by the ",(0,s.jsx)(n.em,{children:"file compiler"})," may be ",(0,s.jsx)(n.em,{children:"coalesced"})," if and only if they are ",(0,s.jsx)(n.em,{children:"similar"})," ; if they are either both ",(0,s.jsx)(n.em,{children:"symbols"})," or both ",(0,s.jsx)(n.em,{children:"packages"}),", they may only be ",(0,s.jsx)(n.em,{children:"coalesced"})," if and only if they are ",(0,s.jsx)(n.em,{children:"identical"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Objects"})," containing circular references can be ",(0,s.jsx)(n.em,{children:"externalizable objects"}),". The ",(0,s.jsx)(n.em,{children:"file compiler"})," is required to preserve ",(0,s.jsx)(n.strong,{children:"eql"}),"ness of substructures within a ",(0,s.jsx)(n.em,{children:"file"}),". Preserving ",(0,s.jsx)(n.strong,{children:"eql"}),"ness means that subobjects that are the ",(0,s.jsx)(n.em,{children:"same"})," in the ",(0,s.jsx)(n.em,{children:"source code"})," must be the ",(0,s.jsx)(n.em,{children:"same"})," in the corresponding ",(0,s.jsx)(n.em,{children:"compiled code"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In addition, the following are constraints on the handling of ",(0,s.jsx)(n.em,{children:"literal objects"})," by the ",(0,s.jsx)(n.em,{children:"file compiler"})," :"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"array:"})," If an ",(0,s.jsx)(n.em,{children:"array"})," in the source code is a ",(0,s.jsx)(n.em,{children:"simple array"}),", then the corresponding ",(0,s.jsx)(n.em,{children:"array"})," in the compiled code will also be a ",(0,s.jsx)(n.em,{children:"simple array"}),". If an ",(0,s.jsx)(n.em,{children:"array"})," in the source code is displaced, has a ",(0,s.jsx)(n.em,{children:"fill pointer"})," , or is ",(0,s.jsx)(n.em,{children:"actually adjustable"}),", the corresponding ",(0,s.jsx)(n.em,{children:"array"})," in the compiled code might lack any or all of these qualities. If an ",(0,s.jsx)(n.em,{children:"array"})," in the source code has a fill pointer, then the corresponding ",(0,s.jsx)(n.em,{children:"array"})," in the compiled code might be only the size implied by the fill pointer."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"packages:"})," The loader is required to find the corresponding ",(0,s.jsx)(n.em,{children:"package object"})," as if by calling ",(0,s.jsx)(n.strong,{children:"find-package"})," with the package name as an argument. An error of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"package-error"})," is signaled if no ",(0,s.jsx)(n.em,{children:"package"})," of that name exists at load time."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"random-state:"})," A constant ",(0,s.jsx)(n.em,{children:"random state"})," object cannot be used as the state argument to the ",(0,s.jsx)(n.em,{children:"function"})," ",(0,s.jsx)(n.strong,{children:"random"})," because ",(0,s.jsx)(n.strong,{children:"random"})," modifies this data structure."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"structure, standard-object:"})," ",(0,s.jsx)(n.em,{children:"Objects"})," of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"structure-object"})," and ",(0,s.jsx)(n.strong,{children:"standard-object"})," may appear in compiled constants if there is an appropriate ",(0,s.jsx)(n.strong,{children:"make-load-form"})," method defined for that ",(0,s.jsx)(n.em,{children:"type"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"file compiler"})," calls ",(0,s.jsx)(n.strong,{children:"make-load-form"})," on any ",(0,s.jsx)(n.em,{children:"object"})," that is referenced as a ",(0,s.jsx)(n.em,{children:"literal object"})," if the ",(0,s.jsx)(n.em,{children:"object"})," is a ",(0,s.jsx)(n.em,{children:"generalized instance"})," of ",(0,s.jsx)(n.strong,{children:"standard-object"}),", ",(0,s.jsx)(n.strong,{children:"structure-object"}),", ",(0,s.jsx)(n.strong,{children:"condition"}),", or any of a (possibly empty) ",(0,s.jsx)(n.em,{children:"implementation-dependent"})," set of other ",(0,s.jsx)(n.em,{children:"classes"}),". The ",(0,s.jsx)(n.em,{children:"file compiler"})," only calls ",(0,s.jsx)(n.strong,{children:"make-load-form"})," once for any given ",(0,s.jsx)(n.em,{children:"object"})," within a single ",(0,s.jsx)(n.em,{children:"file"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"symbol:"})," In order to guarantee that ",(0,s.jsx)(n.em,{children:"compiled files"})," can be ",(0,s.jsx)(n.em,{children:"loaded"})," correctly, users must ensure that the ",(0,s.jsx)(n.em,{children:"packages"})," referenced in those ",(0,s.jsx)(n.em,{children:"files"})," are defined consistently at compile time and load time. ",(0,s.jsx)(n.em,{children:"Conforming programs"})," must satisfy the following requirements:"]}),"\n",(0,s.jsxs)(n.p,{children:["1. The ",(0,s.jsx)(n.em,{children:"current package"})," when a ",(0,s.jsx)(n.em,{children:"top level form"})," in the ",(0,s.jsx)(n.em,{children:"file"})," is processed by ",(0,s.jsx)(n.strong,{children:"compile-file"})," must be the same as the ",(0,s.jsx)(n.em,{children:"current package"})," when the ",(0,s.jsx)(n.em,{children:"code"})," corresponding to that ",(0,s.jsx)(n.em,{children:"top level form"})," in the ",(0,s.jsx)(n.em,{children:"compiled file"})," is executed by ",(0,s.jsx)(n.strong,{children:"load"}),". In particular:"]}),"\n",(0,s.jsxs)(n.p,{children:["a. Any ",(0,s.jsx)(n.em,{children:"top level form"})," in a ",(0,s.jsx)(n.em,{children:"file"})," that alters the ",(0,s.jsx)(n.em,{children:"current package"})," must change it to"]}),"\n",(0,s.jsxs)(n.p,{children:["a ",(0,s.jsx)(n.em,{children:"package"})," of the same ",(0,s.jsx)(n.em,{children:"name"})," both at compile time and at load time."]}),"\n",(0,s.jsxs)(n.p,{children:["b. If the first ",(0,s.jsx)(n.em,{children:"non-atomic top level form"})," in the ",(0,s.jsx)(n.em,{children:"file"})," is not an ",(0,s.jsx)(n.strong,{children:"in-package"})," ",(0,s.jsx)(n.em,{children:"form"}),","]}),"\n",(0,s.jsxs)(n.p,{children:["then the ",(0,s.jsx)(n.em,{children:"current package"})," at the time ",(0,s.jsx)(n.strong,{children:"load"})," is called must be a ",(0,s.jsx)(n.em,{children:"package"})," with"]}),"\n",(0,s.jsxs)(n.p,{children:["the same ",(0,s.jsx)(n.em,{children:"name"})," as the package that was the ",(0,s.jsx)(n.em,{children:"current package"})," at the time"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"compile-file"})," was called."]}),"\n",(0,s.jsxs)(n.p,{children:["2. For all ",(0,s.jsx)(n.em,{children:"symbols"})," appearing lexically within a ",(0,s.jsx)(n.em,{children:"top level form"})," that were ",(0,s.jsx)(n.em,{children:"accessible"})," in the ",(0,s.jsx)(n.em,{children:"package"})," that was the ",(0,s.jsx)(n.em,{children:"current package"})," during processing of that ",(0,s.jsx)(n.em,{children:"top level form"})," at compile time, but whose ",(0,s.jsx)(n.em,{children:"home package"})," was another ",(0,s.jsx)(n.em,{children:"package"}),", at load time there must be a ",(0,s.jsx)(n.em,{children:"symbol"})," with the same ",(0,s.jsx)(n.em,{children:"name"})," that is ",(0,s.jsx)(n.em,{children:"accessible"})," in both the load-time ",(0,s.jsx)(n.em,{children:"current package"})," and in the ",(0,s.jsx)(n.em,{children:"package"})," with the same ",(0,s.jsx)(n.em,{children:"name"})," as the compile-time ",(0,s.jsx)(n.em,{children:"home package"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["3. For all ",(0,s.jsx)(n.em,{children:"symbols"})," represented in the ",(0,s.jsx)(n.em,{children:"compiled file"})," that were ",(0,s.jsx)(n.em,{children:"external symbols"})," in their ",(0,s.jsx)(n.em,{children:"home package"})," at compile time, there must be a ",(0,s.jsx)(n.em,{children:"symbol"})," with the same ",(0,s.jsx)(n.em,{children:"name"})," that is an ",(0,s.jsx)(n.em,{children:"external symbol"})," in the ",(0,s.jsx)(n.em,{children:"package"})," with the same ",(0,s.jsx)(n.em,{children:"name"})," at load time."]}),"\n",(0,s.jsxs)(n.p,{children:["If any of these conditions do not hold, the ",(0,s.jsx)(n.em,{children:"package"})," in which the ",(0,s.jsx)(n.em,{children:"loader"})," looks for the affected ",(0,s.jsx)(n.em,{children:"symbols"})," is unspecified. ",(0,s.jsx)(n.em,{children:"Implementations"})," are permitted to signal an error or to define this behavior."]})]})}function R(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(K,{...e})}):K(e)}function V(e){const n={em:"em",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"compile"})," and ",(0,s.jsx)(n.strong,{children:"compile-file"})," are permitted to signal errors and warnings, including errors due to compile-time processing of (eval-when (",":compile-toplevel",") ...) forms, macro expansion, and conditions signaled by the compiler itself."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Conditions"})," of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"error"})," might be signaled by the compiler in situations where the compilation cannot proceed without intervention."]}),"\n",(0,s.jsxs)(n.p,{children:["In addition to situations for which the standard specifies that ",(0,s.jsx)(n.em,{children:"conditions"})," of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"warning"})," must or might be signaled, warnings might be signaled in situations where the compiler can determine that the consequences are undefined or that a run-time error will be signaled. Examples of this situation are as follows: violating type declarations, altering or assigning the value of a constant defined with ",(0,s.jsx)(n.strong,{children:"defconstant"}),", calling built-in Lisp functions with a wrong number of arguments or malformed keyword argument lists, and using unrecognized declaration specifiers."]}),"\n",(0,s.jsxs)(n.p,{children:["The compiler is permitted to issue warnings about matters of programming style as conditions of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"style-warning"}),". Examples of this situation are as follows: redefining a function using a different argument list, calling a function with a wrong number of arguments, not declaring ",(0,s.jsx)(n.strong,{children:"ignore"})," of a local variable that is not referenced, and referencing a variable declared ",(0,s.jsx)(n.strong,{children:"ignore"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Both ",(0,s.jsx)(n.strong,{children:"compile"})," and ",(0,s.jsx)(n.strong,{children:"compile-file"})," are permitted (but not required) to ",(0,s.jsx)(n.em,{children:"establish"})," a ",(0,s.jsx)(n.em,{children:"handler"})," for ",(0,s.jsx)(n.em,{children:"conditions"})," of ",(0,s.jsx)(n.em,{children:"type"})," ",(0,s.jsx)(n.strong,{children:"error"}),". For example, they might signal a warning, and restart compilation from some ",(0,s.jsx)(n.em,{children:"implementation-dependent"})," point in order to let the compilation proceed without manual intervention."]}),"\n",(0,s.jsxs)(n.p,{children:["Both ",(0,s.jsx)(n.strong,{children:"compile"})," and ",(0,s.jsx)(n.strong,{children:"compile-file"})," return three values, the second two indicating whether the source code being compiled contained errors and whether style warnings were issued."]}),"\n",(0,s.jsxs)(n.p,{children:["Some warnings might be deferred until the end of compilation. See ",(0,s.jsx)(n.strong,{children:"with-compilation-unit"}),"."]})]})}function Z(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(V,{...e})}):V(e)}const G={title:"3.2 Compilation"},J="3.2 Compilation",Q={id:"chap-3/d-c-compilation",title:"3.2 Compilation",description:"3.2.1 Compiler Terminology",source:"@site/docs/chap-3/d-c-compilation.md",sourceDirName:"chap-3",slug:"/chap-3/d-c-compilation",permalink:"/cl-language-reference/docs/chap-3/d-c-compilation",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-3/d-c-compilation.md",tags:[],version:"current",frontMatter:{title:"3.2 Compilation"},sidebar:"tutorialSidebar",previous:{title:"3.1 Evaluation",permalink:"/cl-language-reference/docs/chap-3/d-b-evaluation"},next:{title:"3.3 Declarations",permalink:"/cl-language-reference/docs/chap-3/d-d-declarations"}},X={},$=[{value:"3.2.1 Compiler Terminology",id:"321-compiler-terminology",level:2},{value:"3.2.2 Compilation Semantics",id:"322-compilation-semantics",level:2},{value:"3.2.2.1 Compiler Macros",id:"3221-compiler-macros",level:3},{value:"3.2.2.1.1 Purpose of Compiler Macros",id:"32211-purpose-of-compiler-macros",level:4},{value:"3.2.2.1.2 Naming of Compiler Macros",id:"32212-naming-of-compiler-macros",level:4},{value:"3.2.2.1.3 When Compiler Macros Are Used",id:"32213-when-compiler-macros-are-used",level:4},{value:"3.2.2.1.3.1 Notes about the Implementation of Compiler Macros",id:"322131-notes-about-the-implementation-of-compiler-macros",level:5},{value:"3.2.2.2 Minimal Compilation",id:"3222-minimal-compilation",level:3},{value:"3.2.2.3 Semantic Constraints",id:"3223-semantic-constraints",level:3},{value:"3.2.3 File Compilation",id:"323-file-compilation",level:2},{value:"3.2.3.1 Processing of Top Level Forms",id:"3231-processing-of-top-level-forms",level:3},{value:"3.2.3.1.1 Processing of Defining Macros",id:"32311-processing-of-defining-macros",level:4},{value:"3.2.3.1.2 Constraints on Macros and Compiler Macros",id:"32312-constraints-on-macros-and-compiler-macros",level:4},{value:"3.2.4 Literal Objects in Compiled Files",id:"324-literal-objects-in-compiled-files",level:2},{value:"3.2.4.1 Externalizable Objects",id:"3241-externalizable-objects",level:3},{value:"3.2.4.2 Similarity of Literal Objects",id:"3242-similarity-of-literal-objects",level:3},{value:"3.2.4.2.1 Similarity of Aggregate Objects",id:"32421-similarity-of-aggregate-objects",level:4},{value:"3.2.4.2.2 Definition of Similarity",id:"32422-definition-of-similarity",level:4},{value:"3.2.4.3 Extensions to Similarity Rules",id:"3243-extensions-to-similarity-rules",level:3},{value:"3.2.4.4 Additional Constraints on Externalizable Objects",id:"3244-additional-constraints-on-externalizable-objects",level:3},{value:"3.2.5 Exceptional Situations in the Compiler",id:"325-exceptional-situations-in-the-compiler",level:2}];function ee(e){const n={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"32-compilation",children:"3.2 Compilation"}),"\n","\n",(0,s.jsx)(o,{}),"\n",(0,s.jsx)(n.h2,{id:"321-compiler-terminology",children:"3.2.1 Compiler Terminology"}),"\n","\n",(0,s.jsx)(l,{}),"\n",(0,s.jsx)(n.h2,{id:"322-compilation-semantics",children:"3.2.2 Compilation Semantics"}),"\n","\n",(0,s.jsx)(h,{}),"\n",(0,s.jsx)(n.h3,{id:"3221-compiler-macros",children:"3.2.2.1 Compiler Macros"}),"\n","\n",(0,s.jsx)(m,{}),"\n",(0,s.jsx)(n.h4,{id:"32211-purpose-of-compiler-macros",children:"3.2.2.1.1 Purpose of Compiler Macros"}),"\n","\n",(0,s.jsx)(j,{}),"\n",(0,s.jsx)(n.h4,{id:"32212-naming-of-compiler-macros",children:"3.2.2.1.2 Naming of Compiler Macros"}),"\n","\n",(0,s.jsx)(f,{}),"\n",(0,s.jsx)(n.h4,{id:"32213-when-compiler-macros-are-used",children:"3.2.2.1.3 When Compiler Macros Are Used"}),"\n","\n",(0,s.jsx)(g,{}),"\n",(0,s.jsx)(n.h5,{id:"322131-notes-about-the-implementation-of-compiler-macros",children:"3.2.2.1.3.1 Notes about the Implementation of Compiler Macros"}),"\n","\n",(0,s.jsx)(v,{}),"\n",(0,s.jsx)(n.h3,{id:"3222-minimal-compilation",children:"3.2.2.2 Minimal Compilation"}),"\n","\n",(0,s.jsx)(w,{}),"\n",(0,s.jsx)(n.h3,{id:"3223-semantic-constraints",children:"3.2.2.3 Semantic Constraints"}),"\n","\n",(0,s.jsx)(C,{}),"\n",(0,s.jsx)(n.h2,{id:"323-file-compilation",children:"3.2.3 File Compilation"}),"\n","\n",(0,s.jsx)(S,{}),"\n",(0,s.jsx)(n.h3,{id:"3231-processing-of-top-level-forms",children:"3.2.3.1 Processing of Top Level Forms"}),"\n","\n",(0,s.jsx)(A,{}),"\n",(0,s.jsx)(n.h4,{id:"32311-processing-of-defining-macros",children:"3.2.3.1.1 Processing of Defining Macros"}),"\n","\n",(0,s.jsx)(I,{}),"\n",(0,s.jsx)(n.h4,{id:"32312-constraints-on-macros-and-compiler-macros",children:"3.2.3.1.2 Constraints on Macros and Compiler Macros"}),"\n","\n",(0,s.jsx)(M,{}),"\n",(0,s.jsx)(n.h2,{id:"324-literal-objects-in-compiled-files",children:"3.2.4 Literal Objects in Compiled Files"}),"\n","\n",(0,s.jsx)(z,{}),"\n",(0,s.jsx)(n.h3,{id:"3241-externalizable-objects",children:"3.2.4.1 Externalizable Objects"}),"\n","\n",(0,s.jsx)(P,{}),"\n",(0,s.jsx)(n.h3,{id:"3242-similarity-of-literal-objects",children:"3.2.4.2 Similarity of Literal Objects"}),"\n","\n",(0,s.jsx)(D,{}),"\n",(0,s.jsx)(n.h4,{id:"32421-similarity-of-aggregate-objects",children:"3.2.4.2.1 Similarity of Aggregate Objects"}),"\n","\n",(0,s.jsx)(Y,{}),"\n",(0,s.jsx)(n.h4,{id:"32422-definition-of-similarity",children:"3.2.4.2.2 Definition of Similarity"}),"\n","\n",(0,s.jsx)(H,{}),"\n",(0,s.jsx)(n.h3,{id:"3243-extensions-to-similarity-rules",children:"3.2.4.3 Extensions to Similarity Rules"}),"\n","\n",(0,s.jsx)(_,{}),"\n",(0,s.jsx)(n.h3,{id:"3244-additional-constraints-on-externalizable-objects",children:"3.2.4.4 Additional Constraints on Externalizable Objects"}),"\n","\n",(0,s.jsx)(R,{}),"\n",(0,s.jsx)(n.h2,{id:"325-exceptional-situations-in-the-compiler",children:"3.2.5 Exceptional Situations in the Compiler"}),"\n","\n","\n",(0,s.jsx)(Z,{})]})}function ne(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(ee,{...e})}):ee(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>o});var s=i(67294);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);