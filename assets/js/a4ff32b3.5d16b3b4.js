"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[74287],{42088:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=n(85893),r=n(11151);const o={},s="method-qualifiers",a={id:"meta-object-protocol/method-qualifiers",title:"method-qualifiers",description:"Generic Function METHOD-QUALIFIERS",source:"@site/docs/meta-object-protocol/method-qualifiers.md",sourceDirName:"meta-object-protocol",slug:"/meta-object-protocol/method-qualifiers",permalink:"/cl-language-reference/meta-object-protocol/method-qualifiers",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/method-qualifiers.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"method-qualifiers-standard-method",permalink:"/cl-language-reference/meta-object-protocol/method-qualifiers-standard-method"},next:{title:"method-specializers-standard-method",permalink:"/cl-language-reference/meta-object-protocol/method-specializers-standard-method"}},d={},l=[{value:"<strong>method-qualifiers</strong> (<em>method</em> standard-method)",id:"method-qualifiers-method-standard-method",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"method-qualifiers",children:"method-qualifiers"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.em,{children:"Generic Function"})," ",(0,i.jsx)(t.strong,{children:"METHOD-QUALIFIERS"})]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Syntax:"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"method-qualifiers"})," ",(0,i.jsx)(t.em,{children:"method"})," => ",(0,i.jsx)(t.em,{children:"qualifiers"})]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Arguments and values:"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.em,{children:"method"})," -- A method metaobject."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.em,{children:"qualifiers"})," -- An list of qualifiers."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Description:"})}),"\n",(0,i.jsxs)(t.p,{children:["Returns a (possibly empty) list of the qualifiers of ",(0,i.jsx)(t.em,{children:"method"}),". This value is a list of non-",(0,i.jsx)(t.code,{children:"nil"})," atoms. This is the defaulted value of the ",(0,i.jsx)(t.code,{children:":qualifiers"})," initialization argument that was associated with the method during initialization."]}),"\n",(0,i.jsx)(t.p,{children:"This generic function can be called by the user or the implementation."}),"\n",(0,i.jsxs)(t.p,{children:["An error is signaled if the argument ",(0,i.jsx)(t.em,{children:"method"})," is not a method metaobject. An error is also signaled if the method metaobject has not been initialized."]}),"\n",(0,i.jsx)(t.p,{children:"The list returned by this function will not be mutated by the implementation. The results are undefined if a portable program allows this list to be mutated."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Methods:"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"method-qualifiers-method-standard-method",children:(0,i.jsxs)(t.a,{href:"/meta-object-protocol/method-qualifiers-standard-method",children:[(0,i.jsx)(t.strong,{children:"method-qualifiers"})," (",(0,i.jsx)(t.em,{children:"method"})," standard-method)"]})})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>s});var i=n(67294);const r={},o=i.createContext(r);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);