"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[48635],{81672:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>j,frontMatter:()=>a,metadata:()=>h,toc:()=>x});var s=i(85893),r=i(11151);function t(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:t}=n;return i||d("DictionaryLink",!0),t||d("GlossaryTerm",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," ",(0,s.jsx)(t,{styled:!0,term:"standard generic function",children:(0,s.jsx)("i",{children:"Standard Generic Function"})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," ",(0,s.jsx)(n.em,{children:"previous current"})," &rest ",(0,s.jsx)(n.em,{children:"initargs"})," &key &allow-other-keys \u2192 implementation-dependent"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Method Signatures:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," (",(0,s.jsx)(n.em,{children:"previous"})," ",(0,s.jsx)(i,{term:"standard-object",children:(0,s.jsx)("b",{children:"standard-object"})}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["(",(0,s.jsx)(n.em,{children:"current"})," ",(0,s.jsx)(i,{term:"standard-object",children:(0,s.jsx)("b",{children:"standard-object"})}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["&rest ",(0,s.jsx)(n.em,{children:"initargs"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"previous"}),"\u2014a copy of the original ",(0,s.jsx)(t,{term:"instance",children:(0,s.jsx)("i",{children:"instance"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"current"}),"\u2014the original ",(0,s.jsx)(t,{term:"instance",children:(0,s.jsx)("i",{children:"instance"})})," (altered)."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"initargs"}),"\u2014an ",(0,s.jsx)(t,{styled:!0,term:"initialization argument list",children:(0,s.jsx)("i",{children:"initialization argument list"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["The generic function ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," is not intended to be called by program mers. Programmers may write ",(0,s.jsx)(t,{term:"method",children:(0,s.jsx)("i",{children:"methods"})})," for it. The ",(0,s.jsx)(t,{term:"function",children:(0,s.jsx)("i",{children:"function"})})," ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," is called only by the ",(0,s.jsx)(t,{term:"function",children:(0,s.jsx)("i",{children:"function"})})," ",(0,s.jsx)(i,{term:"change-class",children:(0,s.jsx)("b",{children:"change-class"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The system-supplied primary ",(0,s.jsx)(t,{term:"method",children:(0,s.jsx)("i",{children:"method"})})," on ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," checks the validity of ",(0,s.jsx)(n.em,{children:"initargs"})," and signals an error if an ",(0,s.jsx)(n.em,{children:"initarg"})," is supplied that is not declared as valid. This ",(0,s.jsx)(t,{term:"method",children:(0,s.jsx)("i",{children:"method"})})," then initializes ",(0,s.jsx)(t,{term:"slot",children:(0,s.jsx)("i",{children:"slots"})})," with values according to the ",(0,s.jsx)(n.em,{children:"initargs"}),", and initializes the newly added ",(0,s.jsx)(t,{term:"slot",children:(0,s.jsx)("i",{children:"slots"})})," with values according to their ",":initform"," forms. It does this by calling the generic function ",(0,s.jsx)(i,{term:"shared-initialize",children:(0,s.jsx)("b",{children:"shared-initialize"})})," with the following arguments: the instance (",(0,s.jsx)(n.em,{children:"current"}),"), a list of ",(0,s.jsx)(t,{term:"name",children:(0,s.jsx)("i",{children:"names"})})," of the newly added ",(0,s.jsx)(t,{term:"slot",children:(0,s.jsx)("i",{children:"slots"})}),", and the ",(0,s.jsx)(n.em,{children:"initargs"})," it received. Newly added ",(0,s.jsx)(t,{term:"slot",children:(0,s.jsx)("i",{children:"slots"})})," are those ",(0,s.jsx)(t,{styled:!0,term:"local slot",children:(0,s.jsx)("i",{children:"local slots"})})," for which no ",(0,s.jsx)(t,{term:"slot",children:(0,s.jsx)("i",{children:"slot"})})," of the same name exists in the ",(0,s.jsx)(n.em,{children:"previous"})," class."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{term:"method",children:(0,s.jsx)("i",{children:"Methods"})})," for ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," can be defined to specify actions to be taken when an ",(0,s.jsx)(t,{term:"instance",children:(0,s.jsx)("i",{children:"instance"})})," is updated. If only ",(0,s.jsx)(t,{styled:!0,term:"after method",children:(0,s.jsx)("i",{children:"after methods"})})," for ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," are defined, they will be run after the system-supplied primary ",(0,s.jsx)(t,{term:"method",children:(0,s.jsx)("i",{children:"method"})})," for initialization and therefore will not interfere with the default behavior of ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{term:"method",children:(0,s.jsx)("i",{children:"Methods"})})," on ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," can be defined to initialize ",(0,s.jsx)(t,{term:"slot",children:(0,s.jsx)("i",{children:"slots"})})," differently from ",(0,s.jsx)(i,{term:"change-class",children:(0,s.jsx)("b",{children:"change-class"})}),". The default behavior of ",(0,s.jsx)(i,{term:"change-class",children:(0,s.jsx)("b",{children:"change-class"})})," is described in Section 7.2 (Changing the Class of an Instance)."]}),"\n",(0,s.jsxs)(n.p,{children:["The arguments to ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," are computed by ",(0,s.jsx)(i,{term:"change-class",children:(0,s.jsx)("b",{children:"change-class"})}),". When ",(0,s.jsx)(i,{term:"change-class",children:(0,s.jsx)("b",{children:"change-class"})})," is invoked on an ",(0,s.jsx)(t,{term:"instance",children:(0,s.jsx)("i",{children:"instance"})}),", a copy of that ",(0,s.jsx)(t,{term:"instance",children:(0,s.jsx)("i",{children:"instance"})})," is made; ",(0,s.jsx)(i,{term:"change-class",children:(0,s.jsx)("b",{children:"change-class"})})," then de structively alters the original ",(0,s.jsx)(t,{term:"instance",children:(0,s.jsx)("i",{children:"instance"})}),". The first argument to ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"}),", ",(0,s.jsx)(n.em,{children:"previous"}),", is that copy; it holds the old ",(0,s.jsx)(t,{term:"slot",children:(0,s.jsx)("i",{children:"slot"})})," values temporarily. This argument has dynamic extent within ",(0,s.jsx)(i,{term:"change-class",children:(0,s.jsx)("b",{children:"change-class"})}),"; if it is referenced in any way once ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," returns, the results are undefined. The second argument to ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"}),", ",(0,s.jsx)(n.em,{children:"current"}),", is the altered original ",(0,s.jsx)(t,{term:"instance",children:(0,s.jsx)("i",{children:"instance"})}),". The intended use of ",(0,s.jsx)(n.em,{children:"previous"})," is to extract old ",(0,s.jsx)(t,{term:"slot",children:(0,s.jsx)("i",{children:"slot"})})," values by using ",(0,s.jsx)(i,{term:"slot-value",children:(0,s.jsx)("b",{children:"slot-value"})})," or ",(0,s.jsx)(i,{term:"with-slots",children:(0,s.jsx)("b",{children:"with-slots"})})," or by invoking a reader generic function, or to run other ",(0,s.jsx)(t,{term:"method",children:(0,s.jsx)("i",{children:"methods"})})," that were applicable to ",(0,s.jsx)(t,{term:"instance",children:(0,s.jsx)("i",{children:"instances"})})," of the original ",(0,s.jsx)(t,{term:"class",children:(0,s.jsx)("i",{children:"class"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"See the example for the *function* **change-class**. \n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(n.p,{children:["The system-supplied primary ",(0,s.jsx)(t,{term:"method",children:(0,s.jsx)("i",{children:"method"})})," on ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," signals an error if an initialization argument is supplied that is not declared as valid."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(i,{term:"change-class",children:(0,s.jsx)("b",{children:"change-class"})}),", ",(0,s.jsx)(i,{term:"shared-initialize",children:(0,s.jsx)("b",{children:"shared-initialize"})}),", Section 7.2 (Changing the Class of an Instance), Section 7.1.4 (Rules for Initialization Arguments), Section 7.1.2 (Declaring the Validity of Initialization Arguments)"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Initargs"})," are declared as valid by using the ",":initarg"," option to ",(0,s.jsx)(i,{term:"defclass",children:(0,s.jsx)("b",{children:"defclass"})}),", or by defining ",(0,s.jsx)(t,{term:"method",children:(0,s.jsx)("i",{children:"methods"})})," for ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," or ",(0,s.jsx)(i,{term:"shared-initialize",children:(0,s.jsx)("b",{children:"shared-initialize"})}),". The keyword name of each keyword parameter specifier in the ",(0,s.jsx)(t,{styled:!0,term:"lambda list",children:(0,s.jsx)("i",{children:"lambda list"})})," of any ",(0,s.jsx)(t,{term:"method",children:(0,s.jsx)("i",{children:"method"})})," defined on ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," or ",(0,s.jsx)(i,{term:"shared-initialize",children:(0,s.jsx)("b",{children:"shared-initialize"})})," is declared as a valid ",(0,s.jsx)(n.em,{children:"initarg"})," name for all ",(0,s.jsx)(n.em,{children:"classes"})," for which that ",(0,s.jsx)(t,{term:"method",children:(0,s.jsx)("i",{children:"method"})})," is applicable."]}),"\n",(0,s.jsxs)(n.p,{children:["The value returned by ",(0,s.jsx)(n.strong,{children:"update-instance-for-different-class"})," is ignored by ",(0,s.jsx)(i,{term:"change-class",children:(0,s.jsx)("b",{children:"change-class"})}),"."]})]})}function c(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}function d(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const a={title:"update-instance-for-different-class"},l="update-instance-for-different-class",h={id:"chap-7/h-h-dictionary/update-instance-for-different-class_standard-generic-function",title:"update-instance-for-different-class",description:"Expanded Reference: update-instance-for-different-class",source:"@site/docs/chap-7/h-h-dictionary/update-instance-for-different-class_standard-generic-function.md",sourceDirName:"chap-7/h-h-dictionary",slug:"/chap-7/h-h-dictionary/update-instance-for-different-class_standard-generic-function",permalink:"/cl-language-reference/chap-7/h-h-dictionary/update-instance-for-different-class_standard-generic-function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/chap-7/h-h-dictionary/update-instance-for-different-class_standard-generic-function.md",tags:[],version:"current",lastUpdatedBy:"daninus14",frontMatter:{title:"update-instance-for-different-class"},sidebar:"tutorialSidebar",previous:{title:"unbound-slot",permalink:"/cl-language-reference/chap-7/h-h-dictionary/unbound-slot_condition-type"},next:{title:"update-instance-for-redefined-class",permalink:"/cl-language-reference/chap-7/h-h-dictionary/update-instance-for-redefined-class_standard-generic-function"}},o={},x=[{value:"Expanded Reference: update-instance-for-different-class",id:"expanded-reference-update-instance-for-different-class",level:2}];function f(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"update-instance-for-different-class",children:"update-instance-for-different-class"}),"\n","\n","\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-update-instance-for-different-class",children:"Expanded Reference: update-instance-for-different-class"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(update-instance-for-different-class )\n"})})]})}function j(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>c});var s=i(67294);const r={},t=s.createContext(r);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);