"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[79187],{36129:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var t=r(85893),o=r(11151);function i(n){const e={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"cerror"})," ",(0,t.jsx)(e.em,{children:"Function"})]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Syntax:"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"cerror"})," ",(0,t.jsx)(e.em,{children:"continue-format-control datum"})," &rest ",(0,t.jsx)(e.em,{children:"arguments \u2192"})," ",(0,t.jsx)(e.strong,{children:"nil"})]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Arguments and Values:"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.em,{children:"Continue-format-control"}),"\u2014a ",(0,t.jsx)(e.em,{children:"format control"}),"."]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.em,{children:"datum"}),", ",(0,t.jsx)(e.em,{children:"arguments"}),"\u2014",(0,t.jsx)(e.em,{children:"designators"})," for a ",(0,t.jsx)(e.em,{children:"condition"})," of default type ",(0,t.jsx)(e.strong,{children:"simple-error"}),"."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"cerror"})," effectively invokes ",(0,t.jsx)(e.strong,{children:"error"})," on the ",(0,t.jsx)(e.em,{children:"condition"})," named by ",(0,t.jsx)(e.em,{children:"datum"}),". As with any function that implicitly calls ",(0,t.jsx)(e.strong,{children:"error"}),", if the ",(0,t.jsx)(e.em,{children:"condition"})," is not handled, (invoke-debugger ",(0,t.jsx)(e.em,{children:"condition"}),") is executed. While signaling is going on, and while in the debugger if it is reached, it is possible to continue code execution (",(0,t.jsx)(e.em,{children:"i.e."}),", to return from ",(0,t.jsx)(e.strong,{children:"cerror"}),") using the ",(0,t.jsx)(e.strong,{children:"continue"})," ",(0,t.jsx)(e.em,{children:"restart"}),"."]}),"\n",(0,t.jsxs)(e.p,{children:["If ",(0,t.jsx)(e.em,{children:"datum"})," is a ",(0,t.jsx)(e.em,{children:"condition"}),", ",(0,t.jsx)(e.em,{children:"arguments"})," can be supplied, but are used only in conjunction with the ",(0,t.jsx)(e.em,{children:"continue-format-control"}),"."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lisp",children:' \n\n(defun real-sqrt (n) \n\n(when (minusp n) \n\n(setq n (- n)) \n\n\n\n \n\n \n\n**cerror** \n\n(cerror "Return sqrt(&#126;D) instead." "Tried to take sqrt(-&#126;D)." n)) (sqrt n)) \n\n(real-sqrt 4) \n\n\u2192 2.0 \n\n(real-sqrt -9) \n\n\u25b7 Correctable error in REAL-SQRT: Tried to take sqrt(-9). \n\n\u25b7 Restart options: \n\n\u25b7 1: Return sqrt(9) instead. \n\n\u25b7 2: Top level. \n\n\u25b7 Debug> :continue 1 \n\n\u2192 3.0 \n\n(define-condition not-a-number (error) \n\n((argument :reader not-a-number-argument :initarg :argument)) (:report (lambda (condition stream) \n\n(format stream "&#126;S is not a number." \n\n(not-a-number-argument condition))))) \n\n(defun assure-number (n) \n\n(loop (when (numberp n) (return n)) \n\n(cerror "Enter a number." \n\n\u2019not-a-number :argument n) \n\n(format t "&#126;&amp;Type a number: ") \n\n(setq n (read)) \n\n(fresh-line))) \n\n(assure-number \u2019a) \n\n\u25b7 Correctable error in ASSURE-NUMBER: A is not a number. \n\n\u25b7 Restart options: \n\n\u25b7 1: Enter a number. \n\n\u25b7 2: Top level. \n\n\u25b7 Debug> :continue 1 \n\n\u25b7 Type a number: 1/2 \n\n\u2192 1/2 \n\n(defun assure-large-number (n) \n\n(loop (when (and (numberp n) (> n 73)) (return n)) \n\n(cerror "Enter a number&#126;:[&#126;; a bit larger than &#126;D&#126;]." \n\n"&#126;\\*&#126;A is not a large number." \n\n(numberp n) n) \n\n(format t "&#126;&amp;Type a large number: ") \n\n(setq n (read)) \n\n(fresh-line))) \n\n\n\n \n\n \n\n**cerror** \n\n(assure-large-number 10000) \n\n\u2192 10000 \n\n(assure-large-number \u2019a) \n\n\u25b7 Correctable error in ASSURE-LARGE-NUMBER: A is not a large number. \n\n\u25b7 Restart options: \n\n\u25b7 1: Enter a number. \n\n\u25b7 2: Top level. \n\n\u25b7 Debug> :continue 1 \n\n\u25b7 Type a large number: 88 \n\n\u2192 88 \n\n(assure-large-number 37) \n\n\u25b7 Correctable error in ASSURE-LARGE-NUMBER: 37 is not a large number. \n\n\u25b7 Restart options: \n\n\u25b7 1: Enter a number a bit larger than 37. \n\n\u25b7 2: Top level. \n\n\u25b7 Debug> :continue 1 \n\n\u25b7 Type a large number: 259 \n\n\u2192 259 \n\n(define-condition not-a-large-number (error) \n\n((argument :reader not-a-large-number-argument :initarg :argument)) \n\n(:report (lambda (condition stream) \n\n(format stream "&#126;S is not a large number." \n\n(not-a-large-number-argument condition))))) \n\n(defun assure-large-number (n) \n\n(loop (when (and (numberp n) (> n 73)) (return n)) \n\n(cerror "Enter a number&#126;3\\*&#126;:[&#126;; a bit larger than &#126;\\*&#126;D&#126;]." \n\n\u2019not-a-large-number \n\n:argument n \n\n:ignore (numberp n) \n\n:ignore n \n\n:allow-other-keys t) \n\n(format t "&#126;&amp;Type a large number: ") \n\n(setq n (read)) \n\n(fresh-line))) \n\n(assure-large-number \u2019a) \n\n\u25b7 Correctable error in ASSURE-LARGE-NUMBER: A is not a large number. \n\n\u25b7 Restart options: \n\n\u25b7 1: Enter a number. \n\n\n\n \n\n \n\n\u25b7 2: Top level. \n\n\u25b7 Debug> :continue 1 \n\n\u25b7 Type a large number: 88 \n\n\u2192 88 \n\n(assure-large-number 37) \n\n\u25b7 Correctable error in ASSURE-LARGE-NUMBER: A is not a large number. \n\n\u25b7 Restart options: \n\n\u25b7 1: Enter a number a bit larger than 37. \n\n\u25b7 2: Top level. \n\n\u25b7 Debug> :continue 1 \n\n\u25b7 Type a large number: 259 \n\n\u2192 259 \n\n\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Affected By:"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"*break-on-signals*"}),"."]}),"\n",(0,t.jsx)(e.p,{children:"Existing handler bindings."}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"See Also:"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"error"}),", ",(0,t.jsx)(e.strong,{children:"format"}),", ",(0,t.jsx)(e.strong,{children:"handler-bind"}),", ",(0,t.jsx)(e.strong,{children:"*break-on-signals*"}),", ",(0,t.jsx)(e.strong,{children:"simple-type-error"})]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Notes:"})}),"\n",(0,t.jsxs)(e.p,{children:["If ",(0,t.jsx)(e.em,{children:"datum"})," is a ",(0,t.jsx)(e.em,{children:"condition type"})," rather than a ",(0,t.jsx)(e.em,{children:"string"}),", the ",(0,t.jsx)(e.strong,{children:"format"})," directive ~* may be especially useful in the ",(0,t.jsx)(e.em,{children:"continue-format-control"})," in order to ignore the ",(0,t.jsx)(e.em,{children:"keywords"})," in the ",(0,t.jsx)(e.em,{children:"initialization argument list"}),". For example:"]}),"\n",(0,t.jsx)(e.p,{children:'(cerror "enter a new value to replace ~*~s"'}),"\n",(0,t.jsx)(e.p,{children:"\u2019not-a-number"}),"\n",(0,t.jsxs)(e.p,{children:[":argument"," a)"]})]})}function a(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(i,{...n})}):i(n)}const s={},c="cerror",l={id:"chap-9/j-c-dictionary/cerror",title:"cerror",description:"Expanded Reference: cerror",source:"@site/docs/chap-9/j-c-dictionary/cerror.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/cerror",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/cerror",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/cerror.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"cell-error-name",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/cellerrorname"},next:{title:"check-type",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/checktype"}},d={},u=[{value:"Expanded Reference: cerror",id:"expanded-reference-cerror",level:2}];function m(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"cerror",children:"cerror"}),"\n","\n","\n",(0,t.jsx)(a,{}),"\n",(0,t.jsx)(e.h2,{id:"expanded-reference-cerror",children:"Expanded Reference: cerror"}),"\n",(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsx)(e.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lisp",children:"(cerror )\n"})})]})}function h(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(m,{...n})}):m(n)}},11151:(n,e,r)=>{r.d(e,{Z:()=>s,a:()=>a});var t=r(67294);const o={},i=t.createContext(o);function a(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);