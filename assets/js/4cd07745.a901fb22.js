"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[67991],{71438:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>x,frontMatter:()=>l,metadata:()=>a,toc:()=>p});var s=r(85893),c=r(11151);function t(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"revappend, nreconc"})," ",(0,s.jsx)(n.em,{children:"Function"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"revappend"})," ",(0,s.jsx)(n.em,{children:"list tail \u2192 result-list"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"nreconc"})," ",(0,s.jsx)(n.em,{children:"list tail \u2192 result-list"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"list"}),"\u2014a ",(0,s.jsx)(n.em,{children:"proper list"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"tail"}),"\u2014an ",(0,s.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"result-list"}),"\u2014an ",(0,s.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"revappend"})," constructs a ",(0,s.jsx)(n.em,{children:"copy"}),(0,s.jsx)("sub",{children:"2"})," of ",(0,s.jsx)(n.em,{children:"list"}),", but with the ",(0,s.jsx)(n.em,{children:"elements"})," in reverse order. It then appends (as if by ",(0,s.jsx)(n.strong,{children:"nconc"}),") the ",(0,s.jsx)(n.em,{children:"tail"})," to that reversed list and returns the result."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"nreconc"})," reverses the order of ",(0,s.jsx)(n.em,{children:"elements"})," in ",(0,s.jsx)(n.em,{children:"list"})," (as if by ",(0,s.jsx)(n.strong,{children:"nreverse"}),"). It then appends (as if by ",(0,s.jsx)(n.strong,{children:"nconc"}),") the ",(0,s.jsx)(n.em,{children:"tail"})," to that reversed list and returns the result."]}),"\n",(0,s.jsxs)(n.p,{children:["The resulting ",(0,s.jsx)(n.em,{children:"list"})," shares ",(0,s.jsx)(n.em,{children:"list structure"})," with ",(0,s.jsx)(n.em,{children:"tail"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"revappend, nreconc"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(let ((list-1 (list 1 2 3)) \n      (list-2 (list \u2019a \u2019b \u2019c))) \n  (print (revappend list-1 list-2)) \n  (print (equal list-1 \u2019(1 2 3))) \n  (print (equal list-2 \u2019(a b c)))) \n\u25b7 (3 2 1 A B C) \n\u25b7 T \n\u25b7 T \n\u2192 T \n(revappend \u2019(1 2 3) \u2019()) \u2192 (3 2 1) \n(revappend \u2019(1 2 3) \u2019(a . b)) \u2192 (3 2 1 A . B) \n(revappend \u2019() \u2019(a b c)) \u2192 (A B C) \n(revappend \u2019(1 2 3) \u2019a) \u2192 (3 2 1 . A) \n(revappend \u2019() \u2019a) \u2192 A ;degenerate case \n(let ((list-1 \u2019(1 2 3)) \n      (list-2 \u2019(a b c))) \n  (print (nreconc list-1 list-2)) \n  (print (equal list-1 \u2019(1 2 3))) \n  (print (equal list-2 \u2019(a b c)))) \n\u25b7 (3 2 1 A B C) \n\u25b7 NIL \n\u25b7 T \n\u2192 T \n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"revappend"})," does not modify either of its ",(0,s.jsx)(n.em,{children:"arguments"}),". ",(0,s.jsx)(n.strong,{children:"nreconc"})," is permitted to modify ",(0,s.jsx)(n.em,{children:"list"})," but not ",(0,s.jsx)(n.em,{children:"tail"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Although it might be implemented differently, ",(0,s.jsx)(n.strong,{children:"nreconc"})," is constrained to have side-effect behavior equivalent to:"]}),"\n",(0,s.jsxs)(n.p,{children:["(nconc (nreverse ",(0,s.jsx)(n.em,{children:"list"}),") ",(0,s.jsx)(n.em,{children:"tail"}),")"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"reverse"}),", ",(0,s.jsx)(n.strong,{children:"nreverse"}),", ",(0,s.jsx)(n.strong,{children:"nconc"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:["The following functional equivalences are true, although good ",(0,s.jsx)(n.em,{children:"implementations"})," will typically use a faster algorithm for achieving the same effect:"]}),"\n",(0,s.jsxs)(n.p,{children:["(revappend ",(0,s.jsx)(n.em,{children:"list tail"}),") ",(0,s.jsx)(n.em,{children:"\u2261"})," (nconc (reverse ",(0,s.jsx)(n.em,{children:"list"}),") ",(0,s.jsx)(n.em,{children:"tail"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["(nreconc ",(0,s.jsx)(n.em,{children:"list tail"}),") ",(0,s.jsx)(n.em,{children:"\u2261"})," (nconc (nreverse ",(0,s.jsx)(n.em,{children:"list"}),") ",(0,s.jsx)(n.em,{children:"tail"}),")"]})]})}function i(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}const l={},d="revappend, nreconc",a={id:"chap-14/be-c-dictionary/revappend",title:"revappend, nreconc",description:"Expanded Reference: revappend, nreconc",source:"@site/docs/chap-14/be-c-dictionary/revappend.md",sourceDirName:"chap-14/be-c-dictionary",slug:"/chap-14/be-c-dictionary/revappend",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/revappend",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-14/be-c-dictionary/revappend.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"rest",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/rest"},next:{title:"rplaca, rplacd",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/rplaca"}},o={},p=[{value:"Expanded Reference: revappend, nreconc",id:"expanded-reference-revappend-nreconc",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"revappend-nreconc",children:"revappend, nreconc"}),"\n","\n","\n",(0,s.jsx)(i,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-revappend-nreconc",children:"Expanded Reference: revappend, nreconc"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(revappend, nreconc )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>i});var s=r(67294);const c={},t=s.createContext(c);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);