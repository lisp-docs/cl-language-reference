"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[40346],{96638:(r,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>d,default:()=>b,frontMatter:()=>l,metadata:()=>h,toc:()=>x});var n=i(85893),s=i(11151);function t(r){const e={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...r.components},{DictionaryLink:i,GlossaryTerm:t}=e;return i||a("DictionaryLink",!0),t||a("GlossaryTerm",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"bit, sbit"})," ",(0,n.jsx)(t,{term:"accessor",children:(0,n.jsx)("i",{children:"Accessor"})})]}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Syntax:"})}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(i,{term:"bit",children:(0,n.jsx)("b",{children:"bit"})})," ",(0,n.jsx)(e.em,{children:"bit-array"})," &rest ",(0,n.jsx)(e.em,{children:"subscripts \u2192 bit"})]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"sbit"})," ",(0,n.jsx)(e.em,{children:"bit-array"})," &rest ",(0,n.jsx)(e.em,{children:"subscripts \u2192 bit"})]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"(setf (bit"})," ",(0,n.jsx)(e.em,{children:"bit-array"})," &rest ",(0,n.jsx)(e.em,{children:"subscripts"}),"**)** ",(0,n.jsx)(e.em,{children:"new-bit"}),"**)**"]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"(setf (sbit"})," ",(0,n.jsx)(e.em,{children:"bit-array"})," &rest ",(0,n.jsx)(e.em,{children:"subscripts"}),"**)** ",(0,n.jsx)(e.em,{children:"new-bit"}),"**)**"]}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Arguments and Values:"})}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:"bit-array"}),"\u2014for ",(0,n.jsx)(i,{term:"bit",children:(0,n.jsx)("b",{children:"bit"})}),", a ",(0,n.jsx)(t,{styled:!0,term:"bit array",children:(0,n.jsx)("i",{children:"bit array"})}),"; for ",(0,n.jsx)(i,{term:"sbit",children:(0,n.jsx)("b",{children:"sbit"})}),", a ",(0,n.jsx)(t,{styled:!0,term:"simple bit array",children:(0,n.jsx)("i",{children:"simple bit array"})}),"."]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:"subscripts"}),"\u2014a ",(0,n.jsx)(t,{term:"list",children:(0,n.jsx)("i",{children:"list"})})," of ",(0,n.jsx)(e.em,{children:"valid array indices"})," for the ",(0,n.jsx)(e.em,{children:"bit-array"}),"."]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(t,{term:"bit",children:(0,n.jsx)("i",{children:"bit"})}),"\u2014a ",(0,n.jsx)(t,{term:"bit",children:(0,n.jsx)("i",{children:"bit"})}),"."]}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Description:"})}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(i,{term:"bit",children:(0,n.jsx)("b",{children:"bit"})})," and ",(0,n.jsx)(i,{term:"sbit",children:(0,n.jsx)("b",{children:"sbit"})})," ",(0,n.jsx)(t,{term:"access",children:(0,n.jsx)("i",{children:"access"})})," the ",(0,n.jsx)(e.em,{children:"bit-array element"})," specified by ",(0,n.jsx)(e.em,{children:"subscripts"}),"."]}),"\n",(0,n.jsxs)(e.p,{children:["These ",(0,n.jsx)(t,{term:"function",children:(0,n.jsx)("i",{children:"functions"})})," ignore the ",(0,n.jsx)(t,{styled:!0,term:"fill pointer",children:(0,n.jsx)("i",{children:"fill pointer"})})," when ",(0,n.jsx)(e.em,{children:"accessing elements"}),"."]}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Examples:"})}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-lisp",children:" \n(bit (setq ba (make-array 8 \n:element-type \u2019bit \n:initial-element 1)) \n\\3) \u2192 1 \n(setf (bit ba 3) 0) \u2192 0 \n(bit ba 3) \u2192 0 \n(sbit ba 5) \u2192 1 \n(setf (sbit ba 5) 1) \u2192 1 \n \n \n(sbit ba 5) \u2192 1 \n"})}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"See Also:"})}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(i,{term:"aref",children:(0,n.jsx)("b",{children:"aref"})}),", Section 3.2.1 (Compiler Terminology)"]}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Notes:"})}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(i,{term:"bit",children:(0,n.jsx)("b",{children:"bit"})})," and ",(0,n.jsx)(i,{term:"sbit",children:(0,n.jsx)("b",{children:"sbit"})})," are like ",(0,n.jsx)(i,{term:"aref",children:(0,n.jsx)("b",{children:"aref"})})," except that they require ",(0,n.jsx)(t,{term:"array",children:(0,n.jsx)("i",{children:"arrays"})})," to be a ",(0,n.jsx)(t,{styled:!0,term:"bit array",children:(0,n.jsx)("i",{children:"bit array"})})," and a ",(0,n.jsx)(t,{styled:!0,term:"simple bit array",children:(0,n.jsx)("i",{children:"simple bit array"})}),", respectively."]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(i,{term:"bit",children:(0,n.jsx)("b",{children:"bit"})})," and ",(0,n.jsx)(i,{term:"sbit",children:(0,n.jsx)("b",{children:"sbit"})}),", unlike ",(0,n.jsx)(i,{term:"char",children:(0,n.jsx)("b",{children:"char"})})," and ",(0,n.jsx)(i,{term:"schar",children:(0,n.jsx)("b",{children:"schar"})}),", allow the first argument to be an ",(0,n.jsx)(t,{term:"array",children:(0,n.jsx)("i",{children:"array"})})," of any ",(0,n.jsx)(t,{term:"rank",children:(0,n.jsx)("i",{children:"rank"})}),"."]}),"\n",(0,n.jsxs)("b",{children:[(0,n.jsx)("sup",{children:"bit-and, bit-andc1, bit-andc2, bit-eqv, bit-ior, bit"})," nand, bit-nor, bit-not, bit-orc1, bit-orc2, bit-xor"]}),"\n",(0,n.jsx)("i",{children:"Function"}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Syntax:"})}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"bit-and"})," ",(0,n.jsx)(e.em,{children:"bit-array1 bit-array2"})," &optional ",(0,n.jsx)(e.em,{children:"opt-arg \u2192 resulting-bit-array"})]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"bit-andc1"})," ",(0,n.jsx)(e.em,{children:"bit-array1 bit-array2"})," &optional ",(0,n.jsx)(e.em,{children:"opt-arg \u2192 resulting-bit-array"})]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"bit-andc2"})," ",(0,n.jsx)(e.em,{children:"bit-array1 bit-array2"})," &optional ",(0,n.jsx)(e.em,{children:"opt-arg \u2192 resulting-bit-array"})]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"bit-eqv"})," ",(0,n.jsx)(e.em,{children:"bit-array1 bit-array2"})," &optional ",(0,n.jsx)(e.em,{children:"opt-arg \u2192 resulting-bit-array"})]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"bit-ior"})," ",(0,n.jsx)(e.em,{children:"bit-array1 bit-array2"})," &optional ",(0,n.jsx)(e.em,{children:"opt-arg \u2192 resulting-bit-array"})]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"bit-nand"})," ",(0,n.jsx)(e.em,{children:"bit-array1 bit-array2"})," &optional ",(0,n.jsx)(e.em,{children:"opt-arg \u2192 resulting-bit-array"})]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"bit-nor"})," ",(0,n.jsx)(e.em,{children:"bit-array1 bit-array2"})," &optional ",(0,n.jsx)(e.em,{children:"opt-arg \u2192 resulting-bit-array"})]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"bit-orc1"})," ",(0,n.jsx)(e.em,{children:"bit-array1 bit-array2"})," &optional ",(0,n.jsx)(e.em,{children:"opt-arg \u2192 resulting-bit-array"})]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"bit-orc2"})," ",(0,n.jsx)(e.em,{children:"bit-array1 bit-array2"})," &optional ",(0,n.jsx)(e.em,{children:"opt-arg \u2192 resulting-bit-array"})]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"bit-xor"})," ",(0,n.jsx)(e.em,{children:"bit-array1 bit-array2"})," &optional ",(0,n.jsx)(e.em,{children:"opt-arg \u2192 resulting-bit-array"})]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:"bit-not"})," ",(0,n.jsx)(e.em,{children:"bit-array"})," &optional ",(0,n.jsx)(e.em,{children:"opt-arg \u2192 resulting-bit-array"})]}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Arguments and Values:"})}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:"bit-array"}),", ",(0,n.jsx)(e.em,{children:"bit-array1"}),", ",(0,n.jsx)(e.em,{children:"bit-array2"}),"\u2014a ",(0,n.jsx)(t,{styled:!0,term:"bit array",children:(0,n.jsx)("i",{children:"bit array"})}),"."]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:"Opt-arg"}),"\u2014a ",(0,n.jsx)(t,{styled:!0,term:"bit array",children:(0,n.jsx)("i",{children:"bit array"})}),", or ",(0,n.jsx)(i,{term:"t",children:(0,n.jsx)("b",{children:"t"})}),", or ",(0,n.jsx)(i,{term:"nil",children:(0,n.jsx)("b",{children:"nil"})}),". The default is ",(0,n.jsx)(i,{term:"nil",children:(0,n.jsx)("b",{children:"nil"})}),"."]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:"Bit-array"}),", ",(0,n.jsx)(e.em,{children:"bit-array1"}),", ",(0,n.jsx)(e.em,{children:"bit-array2"}),", and ",(0,n.jsx)(e.em,{children:"opt-arg"})," (if an ",(0,n.jsx)(t,{term:"array",children:(0,n.jsx)("i",{children:"array"})}),") must all be of the same ",(0,n.jsx)(t,{term:"rank",children:(0,n.jsx)("i",{children:"rank"})})," and ",(0,n.jsx)(t,{term:"dimension",children:(0,n.jsx)("i",{children:"dimensions"})}),"."]}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:"resulting-bit-array"}),"\u2014a ",(0,n.jsx)(t,{styled:!0,term:"bit array",children:(0,n.jsx)("i",{children:"bit array"})}),"."]}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Description:"})}),"\n",(0,n.jsxs)(e.p,{children:["These functions perform bit-wise logical operations on ",(0,n.jsx)(e.em,{children:"bit-array1"})," and ",(0,n.jsx)(e.em,{children:"bit-array2"})," and return an ",(0,n.jsx)(t,{term:"array",children:(0,n.jsx)("i",{children:"array"})})," of matching ",(0,n.jsx)(t,{term:"rank",children:(0,n.jsx)("i",{children:"rank"})})," and ",(0,n.jsx)(t,{term:"dimension",children:(0,n.jsx)("i",{children:"dimensions"})}),", such that any given bit of the result is produced by operating on corresponding bits from each of the arguments."]}),"\n",(0,n.jsxs)(e.p,{children:["In the case of ",(0,n.jsx)(e.strong,{children:"bit-not"}),", an ",(0,n.jsx)(t,{term:"array",children:(0,n.jsx)("i",{children:"array"})})," of ",(0,n.jsx)(t,{term:"rank",children:(0,n.jsx)("i",{children:"rank"})})," and ",(0,n.jsx)(t,{term:"dimension",children:(0,n.jsx)("i",{children:"dimensions"})})," matching ",(0,n.jsx)(e.em,{children:"bit-array"})," is returned that contains a copy of ",(0,n.jsx)(e.em,{children:"bit-array"})," with all the bits inverted."]}),"\n",(0,n.jsxs)(e.p,{children:["If ",(0,n.jsx)(e.em,{children:"opt-arg"})," is of type (array bit) the contents of the result are destructively placed into ",(0,n.jsx)(e.em,{children:"opt-arg"}),". If ",(0,n.jsx)(e.em,{children:"opt-arg"})," is the symbol ",(0,n.jsx)(i,{term:"t",children:(0,n.jsx)("b",{children:"t"})}),", ",(0,n.jsx)(e.em,{children:"bit-array"})," or ",(0,n.jsx)(e.em,{children:"bit-array1"})," is replaced with the result; if ",(0,n.jsx)(e.em,{children:"opt-arg"})," is ",(0,n.jsx)(i,{term:"nil",children:(0,n.jsx)("b",{children:"nil"})})," or omitted, a new ",(0,n.jsx)(t,{term:"array",children:(0,n.jsx)("i",{children:"array"})})," is created to contain the result."]}),"\n",(0,n.jsxs)(e.p,{children:["Figure 15\u20134 indicates the logical operation performed by each of the ",(0,n.jsx)(t,{term:"function",children:(0,n.jsx)("i",{children:"functions"})}),"."]}),"\n",(0,n.jsxs)(e.p,{children:["|",(0,n.jsx)(e.strong,{children:"Function Operation"}),"|"]}),"\n",(0,n.jsx)(e.p,{children:"| :- |"}),"\n",(0,n.jsxs)(e.p,{children:["|",(0,n.jsxs)("p",{children:[(0,n.jsx)(e.strong,{children:"bit-and"})," and "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(e.strong,{children:"bit-eqv"})," equivalence (exclusive nor) "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(e.strong,{children:"bit-not"})," complement "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(e.strong,{children:"bit-ior"})," inclusive or "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(e.strong,{children:"bit-xor"})," exclusive or "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(e.strong,{children:"bit-nand"})," complement of ",(0,n.jsx)(e.em,{children:"bit-array1"})," and ",(0,n.jsx)(e.em,{children:"bit-array2"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(e.strong,{children:"bit-nor"})," complement of ",(0,n.jsx)(e.em,{children:"bit-array1"})," or ",(0,n.jsx)(e.em,{children:"bit-array2"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(e.strong,{children:"bit-andc1"})," and complement of ",(0,n.jsx)(e.em,{children:"bit-array1"})," with ",(0,n.jsx)(e.em,{children:"bit-array2"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(e.strong,{children:"bit-andc2"})," and ",(0,n.jsx)(e.em,{children:"bit-array1"})," with complement of ",(0,n.jsx)(e.em,{children:"bit-array2"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(e.strong,{children:"bit-orc1"})," or complement of ",(0,n.jsx)(e.em,{children:"bit-array1"})," with ",(0,n.jsx)(e.em,{children:"bit-array2"})," "]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(e.strong,{children:"bit-orc2"})," or ",(0,n.jsx)(e.em,{children:"bit-array1"})," with complement of ",(0,n.jsx)(e.em,{children:"bit-array2"})]}),"|"]}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Figure 15\u20134. Bit-wise Logical Operations on Bit Arrays"})}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Examples:"})}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-lisp",children:"(bit-and (setq ba #\\*11101010) #\\*01101011) \u2192 #\\*01101010 \n(bit-and #\\*1100 #\\*1010) \u2192 #\\*1000 \n(bit-andc1 #\\*1100 #\\*1010) \u2192 #\\*0010 \n(setq rba (bit-andc2 ba #\\*00110011 t)) \u2192 #\\*11001000 \n(eq rba ba) \u2192 true \n(bit-not (setq ba #\\*11101010)) \u2192 #\\*00010101 \n(setq rba (bit-not ba \n\t\t   (setq tba (make-array 8 \n\t\t\t\t\t :element-type \u2019bit)))) \n\u2192 #\\*00010101 \n(equal rba tba) \u2192 true \n(bit-xor #\\*1100 #\\*1010) \u2192 #\\*0110 \n"})}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"See Also:"})}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(i,{term:"lognot",children:(0,n.jsx)("b",{children:"lognot"})}),", ",(0,n.jsx)(i,{term:"logand",children:(0,n.jsx)("b",{children:"logand"})})]})]})}function c(r={}){const{wrapper:e}={...(0,s.a)(),...r.components};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(t,{...r})}):t(r)}function a(r,e){throw new Error("Expected "+(e?"component":"object")+" `"+r+"` to be defined: you likely forgot to import, pass, or provide it.")}const l={title:"bit, sbit"},d="bit, sbit",h={id:"chap-15/bf-c-dictionary/bit_sbit_accessor",title:"bit, sbit",description:"Expanded Reference: bit, sbit",source:"@site/docs/chap-15/bf-c-dictionary/bit_sbit_accessor.md",sourceDirName:"chap-15/bf-c-dictionary",slug:"/chap-15/bf-c-dictionary/bit_sbit_accessor",permalink:"/cl-language-reference/chap-15/bf-c-dictionary/bit_sbit_accessor",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/chap-15/bf-c-dictionary/bit_sbit_accessor.md",tags:[],version:"current",lastUpdatedBy:"daninus14",frontMatter:{title:"bit, sbit"},sidebar:"tutorialSidebar",previous:{title:"bit-vector",permalink:"/cl-language-reference/chap-15/bf-c-dictionary/bit-vector_system-class"},next:{title:"fill-pointer",permalink:"/cl-language-reference/chap-15/bf-c-dictionary/fill-pointer_accessor"}},o={},x=[{value:"Expanded Reference: bit, sbit",id:"expanded-reference-bit-sbit",level:2}];function j(r){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"bit-sbit",children:"bit, sbit"}),"\n","\n","\n",(0,n.jsx)(c,{}),"\n",(0,n.jsx)(e.h2,{id:"expanded-reference-bit-sbit",children:"Expanded Reference: bit, sbit"}),"\n",(0,n.jsx)(e.admonition,{type:"tip",children:(0,n.jsx)(e.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-lisp",children:"(bit, sbit )\n"})})]})}function b(r={}){const{wrapper:e}={...(0,s.a)(),...r.components};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(j,{...r})}):j(r)}},11151:(r,e,i)=>{i.d(e,{Z:()=>a,a:()=>c});var n=i(67294);const s={},t=n.createContext(s);function c(r){const e=n.useContext(t);return n.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function a(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(s):r.components||s:c(r.components),n.createElement(t.Provider,{value:e},r.children)}}}]);