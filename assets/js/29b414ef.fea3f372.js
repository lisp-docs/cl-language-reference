"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[92579],{41338:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>m,contentTitle:()=>t,default:()=>f,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var a=r(85893),i=r(11151);function o(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"proclaim"})," ",(0,a.jsx)(n.em,{children:"forms"})," are ordinary ",(0,a.jsx)(n.em,{children:"function forms"}),", ",(0,a.jsx)(n.em,{children:"macro forms"})," can expand into them. ",(0,a.jsx)(n.strong,{children:"declaim"})," ",(0,a.jsx)(n.em,{children:"Macro"})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"declaim"})," ",(0,a.jsx)(n.em,{children:"{declaration-specifier}"}),"* ",(0,a.jsx)(n.em,{children:"! implementation-dependent"})]}),"\n",(0,a.jsx)(n.p,{children:"Evaluation and"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"declaration-specifier"}),"\u2014a ",(0,a.jsx)(n.em,{children:"declaration specifier"})," ; not evaluated."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsxs)(n.p,{children:["Establishes the ",(0,a.jsx)(n.em,{children:"declarations"})," specified by the ",(0,a.jsx)(n.em,{children:"declaration-specifiers"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["If a use of this macro appears as a ",(0,a.jsx)(n.em,{children:"top level form"})," in a ",(0,a.jsx)(n.em,{children:"file"})," being processed by the ",(0,a.jsx)(n.em,{children:"file compiler"})," , the proclamations are also made at compile-time. As with other defining macros, it is unspecified whether or not the compile-time side-e\u21b5ects of a ",(0,a.jsx)(n.strong,{children:"declaim"})," persist after the ",(0,a.jsx)(n.em,{children:"file"})," has been ",(0,a.jsx)(n.em,{children:"compiled"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lisp",children:" \n\n\n\n\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"declare"}),", ",(0,a.jsx)(n.strong,{children:"proclaim"})]})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}const s={},t="proclaim** forms are ordinary function forms, macro forms can expand into them. **declaim",d={id:"chap-3/d-i-dictionary/proclaimaaaaformsaaareaordinaryaafunctionaformsa",title:"proclaim** *forms* are ordinary *function forms*, *macro forms* can expand into them. **declaim",description:"Expanded Reference: proclaim *forms* are ordinary *function forms*, *macro forms* can expand into them. declaim",source:"@site/docs/chap-3/d-i-dictionary/proclaimaaaaformsaaareaordinaryaafunctionaformsa.md",sourceDirName:"chap-3/d-i-dictionary",slug:"/chap-3/d-i-dictionary/proclaimaaaaformsaaareaordinaryaafunctionaformsa",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/proclaimaaaaformsaaareaordinaryaafunctionaformsa",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-3/d-i-dictionary/proclaimaaaaformsaaareaordinaryaafunctionaformsa.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"proclaim",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/proclaim"},next:{title:"quote",permalink:"/cl-language-reference/docs/chap-3/d-i-dictionary/quote"}},m={},l=[{value:"Expanded Reference: proclaim** <em>forms</em> are ordinary <em>function forms</em>, <em>macro forms</em> can expand into them. **declaim",id:"expanded-reference-proclaim-forms-are-ordinary-function-forms-macro-forms-can-expand-into-them-declaim",level:2}];function p(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"proclaim-forms-are-ordinary-function-forms-macro-forms-can-expand-into-them-declaim",children:["proclaim** ",(0,a.jsx)(n.em,{children:"forms"})," are ordinary ",(0,a.jsx)(n.em,{children:"function forms"}),", ",(0,a.jsx)(n.em,{children:"macro forms"})," can expand into them. **declaim"]}),"\n","\n","\n",(0,a.jsx)(c,{}),"\n",(0,a.jsxs)(n.h2,{id:"expanded-reference-proclaim-forms-are-ordinary-function-forms-macro-forms-can-expand-into-them-declaim",children:["Expanded Reference: proclaim** ",(0,a.jsx)(n.em,{children:"forms"})," are ordinary ",(0,a.jsx)(n.em,{children:"function forms"}),", ",(0,a.jsx)(n.em,{children:"macro forms"})," can expand into them. **declaim"]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lisp",children:"(proclaim** *forms* are ordinary *function forms*, *macro forms* can expand into them. **declaim )\n"})})]})}function f(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>s,a:()=>c});var a=r(67294);const i={},o=a.createContext(i);function c(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);