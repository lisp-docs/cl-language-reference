"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[73540],{72150:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>x,frontMatter:()=>c,metadata:()=>a,toc:()=>h});var t=s(85893),r=s(11151);function i(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"sublis, nsublis"})," ",(0,t.jsx)(n.em,{children:"Function"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"sublis"})," ",(0,t.jsx)(n.em,{children:"alist tree"})," &key ",(0,t.jsx)(n.em,{children:"key test test-not \u2192 new-tree"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"nsublis"})," ",(0,t.jsx)(n.em,{children:"alist tree"})," &key ",(0,t.jsx)(n.em,{children:"key test test-not \u2192 new-tree"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"alist"}),"\u2014an ",(0,t.jsx)(n.em,{children:"association list"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"tree"}),"\u2014a ",(0,t.jsx)(n.em,{children:"tree"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"test"}),"\u2014a ",(0,t.jsx)(n.em,{children:"designator"})," for a ",(0,t.jsx)(n.em,{children:"function"})," of two ",(0,t.jsx)(n.em,{children:"arguments"})," that returns a ",(0,t.jsx)(n.em,{children:"generalized boolean"}),". ",(0,t.jsx)(n.em,{children:"test-not"}),"\u2014a ",(0,t.jsx)(n.em,{children:"designator"})," for a ",(0,t.jsx)(n.em,{children:"function"})," of two ",(0,t.jsx)(n.em,{children:"arguments"})," that returns a ",(0,t.jsx)(n.em,{children:"generalized boolean"}),". ",(0,t.jsx)(n.em,{children:"key"}),"\u2014a ",(0,t.jsx)(n.em,{children:"designator"})," for a ",(0,t.jsx)(n.em,{children:"function"})," of one argument, or ",(0,t.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"new-tree"}),"\u2014a ",(0,t.jsx)(n.em,{children:"tree"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"sublis, nsublis"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"sublis"})," makes substitutions for ",(0,t.jsx)(n.em,{children:"objects"})," in ",(0,t.jsx)(n.em,{children:"tree"})," (a structure of ",(0,t.jsx)(n.em,{children:"conses"}),"). ",(0,t.jsx)(n.strong,{children:"nsublis"})," is like ",(0,t.jsx)(n.strong,{children:"sublis"})," but destructively modifies the relevant parts of the ",(0,t.jsx)(n.em,{children:"tree"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"sublis"})," looks at all subtrees and leaves of ",(0,t.jsx)(n.em,{children:"tree"}),"; if a subtree or leaf appears as a key in ",(0,t.jsx)(n.em,{children:"alist"})," (that is, the key and the subtree or leaf ",(0,t.jsx)(n.em,{children:"satisfy the test"}),"), it is replaced by the ",(0,t.jsx)(n.em,{children:"object"})," with which that key is associated. This operation is non-destructive. In effect, ",(0,t.jsx)(n.strong,{children:"sublis"})," can perform several ",(0,t.jsx)(n.strong,{children:"subst"})," operations simultaneously."]}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.strong,{children:"sublis"})," succeeds, a new copy of ",(0,t.jsx)(n.em,{children:"tree"})," is returned in which each occurrence of such a subtree or leaf is replaced by the ",(0,t.jsx)(n.em,{children:"object"})," with which it is associated. If no changes are made, the original tree is returned. The original ",(0,t.jsx)(n.em,{children:"tree"})," is left unchanged, but the result tree may share cells with it."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"nsublis"})," is permitted to modify ",(0,t.jsx)(n.em,{children:"tree"})," but otherwise returns the same values as ",(0,t.jsx)(n.strong,{children:"sublis"}),". ",(0,t.jsx)(n.strong,{children:"Examples:"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:' \n\n\n\n(sublis \u2019((x . 100) (z . zprime)) \n\n\n\n\u2019(plus x (minus g z x p) 4 . x)) \n\n\n\n*\u2192* (PLUS 100 (MINUS G ZPRIME 100 P) 4 . 100) \n\n\n\n(sublis \u2019(((+ x y) . (- x y)) ((- x y) . (+ x y))) \n\n\n\n\u2019(\\* (/ (+ x y) (+ x p)) (- x y)) \n\n\n\n:test #\u2019equal) \n\n\n\n*\u2192* (\\* (/ (- X Y) (+ X P)) (+ X Y)) \n\n\n\n(setq tree1 \u2019(1 (1 2) ((1 2 3)) (((1 2 3 4))))) \n\n\n\n*\u2192* (1 (1 2) ((1 2 3)) (((1 2 3 4)))) \n\n\n\n(sublis \u2019((3 . "three")) tree1) \n\n\n\n*\u2192* (1 (1 2) ((1 2 "three")) (((1 2 "three" 4)))) \n\n\n\n(sublis \u2019((t . "string")) \n\n\n\n(sublis \u2019((1 . "") (4 . 44)) tree1) \n\n\n\n:key #\u2019stringp) \n\n\n\n*\u2192* ("string" ("string" 2) (("string" 2 3)) ((("string" 2 3 44)))) \n\n\n\ntree1 *\u2192* (1 (1 2) ((1 2 3)) (((1 2 3 4)))) \n\n\n\n(setq tree2 \u2019("one" ("one" "two") (("one" "Two" "three")))) \n\n\n\n*\u2192* ("one" ("one" "two") (("one" "Two" "three"))) \n\n\n\n(sublis \u2019(("two" . 2)) tree2) \n\n\n\n*\u2192* ("one" ("one" "two") (("one" "Two" "three"))) \n\n\n\ntree2 *\u2192* ("one" ("one" "two") (("one" "Two" "three"))) \n\n\n\n(sublis \u2019(("two" . 2)) tree2 :test \u2019equal) \n\n\n\n*\u2192* ("one" ("one" 2) (("one" "Two" "three"))) \n\n\n\n(nsublis \u2019((t . \u2019temp)) \n\n\n\ntree1 \n\n\n\n:key #\u2019(lambda (x) (or (atom x) (&lt; (list-length x) 3)))) \n\n\n\n*\u2192* ((QUOTE TEMP) (QUOTE TEMP) QUOTE TEMP) \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Side Effects:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"nsublis"})," modifies ",(0,t.jsx)(n.em,{children:"tree"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"subst"}),", Section 3.2.1 (Compiler Terminology), Section 3.6 (Traversal Rules and Side Effects)"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",":test-not"," parameter is deprecated."]}),"\n",(0,t.jsxs)(n.p,{children:["Because the side-effecting variants (",(0,t.jsx)(n.em,{children:"e.g."}),", ",(0,t.jsx)(n.strong,{children:"nsublis"}),") potentially change the path that is being traversed, their effects in the presence of shared or circular structure structure may vary in surprising ways when compared to their non-side-effecting alternatives. To see this, consider the following side-effect behavior, which might be exhibited by some implementations:"]}),"\n",(0,t.jsx)(n.p,{children:"(defun test-it (fn)"}),"\n",(0,t.jsx)(n.p,{children:"(let* ((shared-piece (list \u2019a \u2019b))"}),"\n",(0,t.jsx)(n.p,{children:"(data (list shared-piece shared-piece)))"}),"\n",(0,t.jsx)(n.p,{children:"(funcall fn \u2019((a . b) (b . a)) data)))"}),"\n",(0,t.jsxs)(n.p,{children:["(test-it #\u2019sublis) ",(0,t.jsx)(n.em,{children:"\u2192"})," ((B A) (B A))"]}),"\n",(0,t.jsxs)(n.p,{children:["(test-it #\u2019nsublis) ",(0,t.jsx)(n.em,{children:"\u2192"})," ((A B) (A B))"]})]})}function l(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}const c={},o="sublis, nsublis",a={id:"chap-14/be-c-dictionary/sublis",title:"sublis, nsublis",description:"Expanded Reference: sublis, nsublis",source:"@site/docs/chap-14/be-c-dictionary/sublis.md",sourceDirName:"chap-14/be-c-dictionary",slug:"/chap-14/be-c-dictionary/sublis",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/sublis",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-14/be-c-dictionary/sublis.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"set-exclusive-or, nset-exclusive-or",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/setexclusiveor"},next:{title:"subsetp",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/subsetp"}},d={},h=[{value:"Expanded Reference: sublis, nsublis",id:"expanded-reference-sublis-nsublis",level:2}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"sublis-nsublis",children:"sublis, nsublis"}),"\n","\n","\n",(0,t.jsx)(l,{}),"\n",(0,t.jsx)(n.h2,{id:"expanded-reference-sublis-nsublis",children:"Expanded Reference: sublis, nsublis"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"(sublis, nsublis )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>l});var t=s(67294);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);