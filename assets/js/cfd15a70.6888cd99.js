"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[23308],{42891:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>x,frontMatter:()=>o,metadata:()=>a,toc:()=>h});var r=i(85893),t=i(11151);function s(e){const n={em:"em",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"float"})," ",(0,r.jsx)(n.em,{children:"System Class"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Class Precedence List:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"float"}),", ",(0,r.jsx)(n.strong,{children:"real"}),", ",(0,r.jsx)(n.strong,{children:"number"}),", ",(0,r.jsx)(n.strong,{children:"t"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)("i",{children:"float"})," is a mathematical rational (but ",(0,r.jsx)("i",{children:"not"})," a Common Lisp ",(0,r.jsx)("i",{children:"rational"}),") of the form ",(0,r.jsxs)("i",{children:["s \xb7 f \xb7 b",(0,r.jsx)("sup",{children:"e\u2212p"})]}),", where ",(0,r.jsx)("i",{children:"s"})," is +1 or ",(0,r.jsx)("i",{children:"\u2212"}),"1, the ",(0,r.jsx)("i",{children:"sign"}),"; ",(0,r.jsx)("i",{children:"b"})," is an ",(0,r.jsx)("i",{children:"integer"})," greater than 1, the ",(0,r.jsx)("i",{children:"base"})," or ",(0,r.jsx)("i",{children:"radix"})," of the representation; ",(0,r.jsx)("i",{children:"p"})," is a positive ",(0,r.jsx)("i",{children:"integer"})," , the ",(0,r.jsx)("i",{children:"precision"})," (in base-",(0,r.jsx)("i",{children:"b"})," digits) of the ",(0,r.jsx)("i",{children:"float"}),"; ",(0,r.jsx)("i",{children:"f"})," is a positive ",(0,r.jsx)("i",{children:"integer"})," between ",(0,r.jsxs)("i",{children:["b",(0,r.jsx)("sup",{children:"p\u2212"})]}),"1 and ",(0,r.jsxs)("i",{children:["b",(0,r.jsx)("sup",{children:"p"})," \u2212"]})," 1 (inclusive), the significand; and ",(0,r.jsx)("i",{children:"e"})," is an ",(0,r.jsx)("i",{children:"integer"})," , the exponent. The value of ",(0,r.jsx)("i",{children:"p"})," and the"]}),"\n",(0,r.jsxs)(n.p,{children:["range of ",(0,r.jsx)(n.em,{children:"e"})," depends on the implementation and on the type of ",(0,r.jsx)(n.em,{children:"float"})," within that implementation. In addition, there is a floating-point zero; depending on the implementation, there can also be a \u201cminus zero\u201d. If there is no minus zero, then 0\u25b70 and ",(0,r.jsx)(n.em,{children:"\u2212"}),"0\u25b70 are both interpreted as simply a floating-point zero. (= 0.0 -0.0) is always true. If there is a minus zero, (eql -0.0 0.0) is ",(0,r.jsx)(n.em,{children:"false"}),", otherwise it is ",(0,r.jsx)(n.em,{children:"true"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"types"})," ",(0,r.jsx)(n.strong,{children:"short-float"}),", ",(0,r.jsx)(n.strong,{children:"single-float"}),", ",(0,r.jsx)(n.strong,{children:"double-float"}),", and ",(0,r.jsx)(n.strong,{children:"long-float"})," are ",(0,r.jsx)(n.em,{children:"subtypes"})," of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"float"}),". Any two of them must be either ",(0,r.jsx)(n.em,{children:"disjoint types"})," or the ",(0,r.jsx)(n.em,{children:"same type"}),"; if the ",(0,r.jsx)(n.em,{children:"same type"}),", then any other ",(0,r.jsx)(n.em,{children:"types"})," between them in the above ordering must also be the ",(0,r.jsx)(n.em,{children:"same type"}),". For example, if the ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"single-float"})," and the ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"long-float"})," are the ",(0,r.jsx)(n.em,{children:"same type"}),", then the ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"double-float"})," must be the ",(0,r.jsx)(n.em,{children:"same type"})," also."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Kind:"})}),"\n",(0,r.jsx)(n.p,{children:"Abbreviating."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:["(float [",(0,r.jsx)(n.em,{children:"lower-limit"})," [",(0,r.jsx)(n.em,{children:"upper-limit"}),"]])"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Arguments:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"lower-limit"}),", ",(0,r.jsx)(n.em,{children:"upper-limit"}),"\u2014",(0,r.jsx)(n.em,{children:"interval designators"})," for ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"float"}),". The defaults for each of ",(0,r.jsx)(n.em,{children:"lower-limit"})," and ",(0,r.jsx)(n.em,{children:"upper-limit"})," is the ",(0,r.jsx)(n.em,{children:"symbol"})," ",(0,r.jsx)(n.strong,{children:"*"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compound Type Specifier Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["This denotes the ",(0,r.jsx)(n.em,{children:"floats"})," on the interval described by ",(0,r.jsx)(n.em,{children:"lower-limit"})," and ",(0,r.jsx)(n.em,{children:"upper-limit"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsx)(n.p,{children:"Figure 2\u20139, Section 2.3.2 (Constructing Numbers from Tokens), Section 22.1.3.1.3 (Printing Floats)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["Note that all mathematical integers are representable not only as Common Lisp ",(0,r.jsx)(n.em,{children:"reals"}),", but also as ",(0,r.jsx)(n.em,{children:"complex floats"}),". For example, possible representations of the mathematical number 1 include the ",(0,r.jsx)(n.em,{children:"integer"})," 1, the ",(0,r.jsx)(n.em,{children:"float"})," 1.0, or the ",(0,r.jsx)(n.em,{children:"complex"})," #C(1.0 0.0)."]})]})}function l(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}const o={},c="float",a={id:"chap-12/bc-c-dictionary/float",title:"float",description:"Expanded Reference: float",source:"@site/docs/chap-12/bc-c-dictionary/float.md",sourceDirName:"chap-12/bc-c-dictionary",slug:"/chap-12/bc-c-dictionary/float",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/float",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-12/bc-c-dictionary/float.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"fixnum",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/fixnum"},next:{title:"floor, ffloor, ceiling, fceiling, truncate, ftruncate, round, fround",permalink:"/cl-language-reference/docs/chap-12/bc-c-dictionary/floor"}},d={},h=[{value:"Expanded Reference: float",id:"expanded-reference-float",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"float",children:"float"}),"\n","\n","\n",(0,r.jsx)(l,{}),"\n",(0,r.jsx)(n.h2,{id:"expanded-reference-float",children:"Expanded Reference: float"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(float )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>l});var r=i(67294);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);