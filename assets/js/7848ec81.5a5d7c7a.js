"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[26243],{8566:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>pn,contentTitle:()=>hn,default:()=>yn,frontMatter:()=>an,metadata:()=>mn,toc:()=>xn});var t=i(85893),s=i(11151);function r(e){const n={p:"p",...(0,s.a)(),...e.components};return(0,t.jsx)(n.p,{children:"This section contains notational conventions and definitions of terms used in this manual."})}function o(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}function c(e){const n={p:"p",...(0,s.a)(),...e.components};return(0,t.jsx)(n.p,{children:"The following notational conventions are used throughout this document."})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}function l(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Fonts are used in this document to convey information."}),"\n",(0,t.jsx)(i,{styled:!0,term:"name",children:(0,t.jsx)("i",{children:"name"})}),"\n",(0,t.jsx)(n.p,{children:"Denotes a formal term whose meaning is defined in the Glossary. When this font is used, the Glossary definition takes precedence over normal English usage."}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes a glossary term appears subscripted, as in \u201c",(0,t.jsx)(i,{styled:!0,term:"whitespace",children:(0,t.jsx)("i",{children:"whitespace"})}),(0,t.jsx)("sub",{children:"2"}),".\u201d Such a notation selects one particular Glossary definition out of several, in this case the second. The subscript notation for Glossary terms is generally used where the context might be insufficient to disambiguate among the available definitions."]}),"\n",(0,t.jsx)(i,{styled:!0,term:"name",children:(0,t.jsx)("i",{children:"name"})}),"\n",(0,t.jsxs)(n.p,{children:["Denotes the introduction of a formal term locally to the current text. There is still a corresponding glossary entry, and is formally equivalent to a use of \u201c",(0,t.jsx)(i,{styled:!0,term:"name",children:(0,t.jsx)("i",{children:"name"})}),",\u201d but the hope is that making such uses conspicuous will save the reader a trip to the glossary in some cases."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"name"})}),"\n",(0,t.jsxs)(n.p,{children:["Denotes a symbol in the COMMON-LISP ",(0,t.jsx)(i,{styled:!0,term:"package",children:(0,t.jsx)("i",{children:"package"})}),". For information about ",(0,t.jsx)(i,{styled:!0,term:"case",children:(0,t.jsx)("i",{children:"case"})})," conventions, see Section 1.4.1.4.1 (Case in Symbols)."]}),"\n",(0,t.jsx)(n.p,{children:"name"}),"\n",(0,t.jsxs)(n.p,{children:["Denotes a sample ",(0,t.jsx)(i,{styled:!0,term:"name",children:(0,t.jsx)("i",{children:"name"})})," or piece of ",(0,t.jsx)(i,{styled:!0,term:"code",children:(0,t.jsx)("i",{children:"code"})})," that a programmer might write in Common Lisp."]}),"\n",(0,t.jsxs)(n.p,{children:["This font is also used for certain ",(0,t.jsx)(i,{styled:!0,term:"standardized",children:(0,t.jsx)("i",{children:"standardized"})})," names that are not names of ",(0,t.jsx)(i,{styled:!0,term:"external symbol",children:(0,t.jsx)("i",{children:"external symbols"})})," of the COMMON-LISP ",(0,t.jsx)(i,{styled:!0,term:"package",children:(0,t.jsx)("i",{children:"package"})}),", such as ",(0,t.jsx)(i,{styled:!0,term:"keyword",children:(0,t.jsx)("i",{children:"keywords"})}),(0,t.jsx)("sub",{children:"1"}),", ",(0,t.jsx)(n.em,{children:"package names"}),", and ",(0,t.jsx)(i,{styled:!0,term:"loop keyword",children:(0,t.jsx)("i",{children:"loop keywords"})}),"."]}),"\n",(0,t.jsx)(i,{styled:!0,term:"name",children:(0,t.jsx)("i",{children:"name"})}),"\n",(0,t.jsxs)(n.p,{children:["Denotes the name of a ",(0,t.jsx)(i,{styled:!0,term:"parameter",children:(0,t.jsx)("i",{children:"parameter"})})," or ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"value"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["In some situations the notation \u201c\u27e8name\u27e9\u201d (",(0,t.jsx)(n.em,{children:"i.e."}),", the same font, but with surrounding \u201cangle brackets\u201d) is used instead in order to provide better visual separation from surrounding characters. These \u201cangle brackets\u201d are metasyntactic, and never actually appear in program input or output."]})]})}function a(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}function h(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(n.p,{children:["This specification uses an extended Backus Normal Form (BNF) to describe the syntax of Common Lisp ",(0,t.jsx)(i,{styled:!0,term:"macro form",children:(0,t.jsx)("i",{children:"macro forms"})})," and ",(0,t.jsx)(i,{styled:!0,term:"special form",children:(0,t.jsx)("i",{children:"special forms"})}),". This section discusses the syntax of BNF expressions."]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}function p(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"The primary extension used is the following:"}),"\n",(0,t.jsxs)(n.p,{children:["[[ ",(0,t.jsx)(n.em,{children:"O"})," ]]"]}),"\n",(0,t.jsxs)(n.p,{children:["An expression of this form appears whenever a list of elements is to be spliced into a larger structure and the elements can appear in any order. The symbol ",(0,t.jsx)(n.em,{children:"O"})," represents a description of the syntax of some number of syntactic elements to be spliced; that description must be of the form"]}),"\n",(0,t.jsx)("i",{children:"O"}),"\n",(0,t.jsx)("sub",{children:"1"}),"\n",(0,t.jsxs)("i",{children:["| . . . | O",(0,t.jsx)("sub",{children:"l"})]}),"\n",(0,t.jsxs)(n.p,{children:["where each ",(0,t.jsxs)("i",{children:["O",(0,t.jsx)("sub",{children:"i"})]})," can be of the form ",(0,t.jsx)("i",{children:"S"})," or of the form ",(0,t.jsx)("i",{children:"S"}),"* or of the form ",(0,t.jsx)("i",{children:"S"}),(0,t.jsx)("sup",{children:"1"}),". The expression [[ ",(0,t.jsx)("i",{children:"O"})," ]] means that a list of the form"]}),"\n",(0,t.jsxs)(n.p,{children:["(",(0,t.jsxs)("i",{children:["O",(0,t.jsx)("sub",{children:"i"})]}),"1",(0,t.jsxs)("i",{children:[". . . O",(0,t.jsx)("sub",{children:"ij"})]}),") 1 ",(0,t.jsx)("i",{children:"\u2264 j"})]}),"\n",(0,t.jsxs)(n.p,{children:["is spliced into the enclosing expression, such that if ",(0,t.jsx)("i",{children:"n 6"}),"= ",(0,t.jsx)("i",{children:"m"})," and 1 ",(0,t.jsx)("i",{children:"\u2264 n, m \u2264 j"}),", then either ",(0,t.jsxs)("i",{children:["O",(0,t.jsx)("sub",{children:"in"}),"6"]}),"= ",(0,t.jsxs)("i",{children:["O",(0,t.jsx)("sub",{children:"im"})]})," or ",(0,t.jsxs)("i",{children:["O",(0,t.jsx)("sub",{children:"in"})]})," = ",(0,t.jsxs)("i",{children:["O",(0,t.jsx)("sub",{children:"im"})]})," = ",(0,t.jsxs)("i",{children:["Q",(0,t.jsx)("sub",{children:"k"})]}),", where for some 1 ",(0,t.jsx)("i",{children:"\u2264 k \u2264 n"}),", ",(0,t.jsxs)("i",{children:["O",(0,t.jsx)("sub",{children:"k"})]})," is of the form ",(0,t.jsxs)("i",{children:["Q",(0,t.jsx)("sub",{children:"k"})]}),"*. Furthermore, for each ",(0,t.jsxs)("i",{children:["O",(0,t.jsx)("sub",{children:"in"})]})," that is of the form ",(0,t.jsxs)("i",{children:["Q",(0,t.jsx)("sub",{children:"k"})]}),(0,t.jsx)("sup",{children:"1"}),", that element is required to appear somewhere in the list to be spliced."]}),"\n",(0,t.jsx)(n.p,{children:"For example, the expression"}),"\n",(0,t.jsx)(n.p,{children:"(x [[ A | B* | C ]] y)"}),"\n",(0,t.jsx)(n.p,{children:"means that at most one A, any number of B\u2019s, and at most one C can occur in any order. It is a description of any of these:"}),"\n",(0,t.jsx)(n.p,{children:"(x y)"}),"\n",(0,t.jsx)(n.p,{children:"(x B A C y)"}),"\n",(0,t.jsx)(n.p,{children:"(x A B B B B B C y)"}),"\n",(0,t.jsx)(n.p,{children:"(x C B A B B B y)"}),"\n",(0,t.jsx)(n.p,{children:"but not any of these:"}),"\n",(0,t.jsx)(n.p,{children:"(x B B A A C C y)"}),"\n",(0,t.jsx)(n.p,{children:"(x C B C y)"}),"\n",(0,t.jsx)(n.p,{children:"In the first case, both A and C appear too often, and in the second case C appears too often."}),"\n",(0,t.jsxs)(n.p,{children:["The notation [[ ",(0,t.jsx)(n.em,{children:"O"}),(0,t.jsx)("sub",{children:"1"})," ",(0,t.jsx)(n.em,{children:"| O"}),(0,t.jsx)("sub",{children:"2"})," ",(0,t.jsx)(n.em,{children:"| . . ."})," ]]",(0,t.jsx)("sup",{children:"+"}),"adds the additional restriction that at least one item from among the possible choices must be used. For example:"]}),"\n",(0,t.jsxs)(n.p,{children:["(x [[ A | B* | C ]]",(0,t.jsx)("sup",{children:"+"}),"y)"]}),"\n",(0,t.jsx)(n.p,{children:"means that at most one A, any number of B\u2019s, and at most one C can occur in any order, but that in any case at least one of these options must be selected. It is a description of any of these:"}),"\n",(0,t.jsx)(n.p,{children:"(x B y)"}),"\n",(0,t.jsx)(n.p,{children:"(x B A C y)"}),"\n",(0,t.jsx)(n.p,{children:"(x A B B B B B C y)"}),"\n",(0,t.jsx)(n.p,{children:"(x C B A B B B y)"}),"\n",(0,t.jsx)(n.p,{children:"but not any of these:"}),"\n",(0,t.jsx)(n.p,{children:"(x y)"}),"\n",(0,t.jsx)(n.p,{children:"(x B B A A C C y)"}),"\n",(0,t.jsx)(n.p,{children:"(x C B C y)"}),"\n",(0,t.jsx)(n.p,{children:"In the first case, no item was used; in the second case, both A and C appear too often; and in the third case C appears too often."}),"\n",(0,t.jsx)(n.p,{children:"Also, the expression:"}),"\n",(0,t.jsxs)(n.p,{children:["(x [[ A",(0,t.jsx)("sup",{children:"1"}),"| B",(0,t.jsx)("sup",{children:"1"}),"| C ]] y)"]}),"\n",(0,t.jsx)(n.p,{children:"can generate exactly these and no others:"}),"\n",(0,t.jsx)(n.p,{children:"(x A B C y)"}),"\n",(0,t.jsx)(n.p,{children:"(x A C B y)"}),"\n",(0,t.jsx)(n.p,{children:"(x A B y)"}),"\n",(0,t.jsx)(n.p,{children:"(x B A C y)"}),"\n",(0,t.jsx)(n.p,{children:"(x B C A y)"}),"\n",(0,t.jsx)(n.p,{children:"(x B A y)"}),"\n",(0,t.jsx)(n.p,{children:"(x C A B y)"}),"\n",(0,t.jsx)(n.p,{children:"(x C B A y)"})]})}function x(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}function j(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["An indirection extension is introduced in order to make this new syntax more readable: ",(0,t.jsx)(n.em,{children:"\u2193O"})]}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.em,{children:"O"})," is a non-terminal symbol, the right-hand side of its definition is substituted for the entire expression ",(0,t.jsx)(n.em,{children:"\u2193O"}),". For example, the following BNF is equivalent to the BNF in the previous example:"]}),"\n",(0,t.jsxs)(n.p,{children:["(x [[ ",(0,t.jsx)(n.em,{children:"\u2193O"})," ]] y)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"O::"}),"=A ",(0,t.jsx)(n.em,{children:"|"})," B* ",(0,t.jsx)(n.em,{children:"|"})," C"]})]})}function y(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(j,{...e})}):j(e)}function u(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{DictionaryLink:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("DictionaryLink",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"In some cases, an auxiliary definition in the BNF might appear to be unused within the BNF, but might still be useful elsewhere. For example, consider the following definitions:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(i,{styled:!0,term:"case",children:(0,t.jsx)("b",{children:"case"})})," ",(0,t.jsx)(n.em,{children:"keyform {\u2193normal-clause}"}),"* [",(0,t.jsx)(n.em,{children:"\u2193otherwise-clause"}),"] \u2192 {result}*"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(i,{styled:!0,term:"ccase",children:(0,t.jsx)("b",{children:"ccase"})})," ",(0,t.jsx)(n.em,{children:"keyplace {\u2193normal-clause}"}),"* \u2192 {result}*"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(i,{styled:!0,term:"ecase",children:(0,t.jsx)("b",{children:"ecase"})})," ",(0,t.jsx)(n.em,{children:"keyform {\u2193normal-clause}"}),"* \u2192 {result}*"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"normal-clause::"}),"=(",(0,t.jsx)(n.em,{children:"keys {form}"}),"*)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"otherwise-clause::"}),"=(",(0,t.jsx)(n.em,{children:"{otherwise | t} {form}"}),"*)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"clause::"}),"=",(0,t.jsx)(n.em,{children:"normal-clause | otherwise-clause"})]}),"\n",(0,t.jsxs)(n.p,{children:["Here the term \u201c",(0,t.jsx)(n.em,{children:"clause"}),"\u201d might appear to be \u201cdead\u201d in that it is not used in the BNF. However, the purpose of the BNF is not just to guide parsing, but also to define useful terms for reference in the descriptive text which follows. As such, the term \u201c",(0,t.jsx)(n.em,{children:"clause"}),"\u201d might appear in text that follows, as shorthand for \u201c",(0,t.jsx)(n.em,{children:"normal-clause"})," or ",(0,t.jsx)(n.em,{children:"otherwise-clause"}),".\u201d"]})]})}function f(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}function g(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:r}=n;return i||v("DictionaryLink",!0),r||v("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"The special symbols described here are used as a notational convenience within this document, and are part of neither the Common Lisp language nor its environment."}),"\n",(0,t.jsx)(n.p,{children:"\u2192"}),"\n",(0,t.jsx)(n.p,{children:"This indicates evaluation. For example:"}),"\n",(0,t.jsx)(n.p,{children:"(+ 4 5) \u2192 9"}),"\n",(0,t.jsxs)(n.p,{children:["This means that the result of evaluating the ",(0,t.jsx)(r,{styled:!0,term:"form",children:(0,t.jsx)("i",{children:"form"})})," (+ 4 5) is 9."]}),"\n",(0,t.jsxs)(n.p,{children:["If a ",(0,t.jsx)(r,{styled:!0,term:"form",children:(0,t.jsx)("i",{children:"form"})})," returns ",(0,t.jsx)(r,{styled:!0,term:"multiple values",children:(0,t.jsx)("i",{children:"multiple values"})}),", those values might be shown separated by spaces, line breaks, or commas. For example:"]}),"\n",(0,t.jsx)(n.p,{children:"(truncate 7 5)"}),"\n",(0,t.jsx)(n.p,{children:"\u2192 1 2"}),"\n",(0,t.jsx)(n.p,{children:"(truncate 7 5)"}),"\n",(0,t.jsx)(n.p,{children:"\u2192 1"}),"\n",(0,t.jsx)(n.p,{children:"2"}),"\n",(0,t.jsx)(n.p,{children:"(truncate 7 5)"}),"\n",(0,t.jsx)(n.p,{children:"\u2192 1, 2"}),"\n",(0,t.jsx)(n.p,{children:"Each of the above three examples is equivalent, and specifies that (truncate 7 5) returns two values, which are 1 and 2."}),"\n",(0,t.jsxs)(n.p,{children:["Some ",(0,t.jsx)(r,{styled:!0,term:"conforming implementation",children:(0,t.jsx)("i",{children:"conforming implementations"})})," actually type an arrow (or some other indicator) before showing return values, while others do not."]}),"\n",(0,t.jsxs)("i",{children:[(0,t.jsx)("sup",{children:"or"}),"\u2192"]}),"\n",(0,t.jsxs)(n.p,{children:["The notation \u201c ",(0,t.jsxs)("i",{children:[(0,t.jsx)("sup",{children:"or"}),"\u2192"]}),"\u201d is used to denote one of several possible alternate results. The example"]}),"\n",(0,t.jsx)(n.p,{children:"(char-name #\\a)"}),"\n",(0,t.jsx)(n.p,{children:"\u2192 NIL"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)("i",{children:[(0,t.jsx)("sup",{children:"or"}),"\u2192"]}),' "LOWERCASE-a"']}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)("i",{children:[(0,t.jsx)("sup",{children:"or"}),"\u2192"]}),' "Small-A"']}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)("i",{children:[(0,t.jsx)("sup",{children:"or"}),"\u2192"]}),' "LA01"']}),"\n",(0,t.jsxs)(n.p,{children:["indicates that ",(0,t.jsx)(i,{styled:!0,term:"nil",children:(0,t.jsx)("b",{children:"nil"})}),', "LOWERCASE-a", "Small-A", "LA01" are among the possible results of (char-name #\\a)\u2014each with equal preference. Unless explicitly specified otherwise, it should not be assumed that the set of possible results shown is exhaustive. Formally, the above example is equivalent to']}),"\n",(0,t.jsx)(n.p,{children:"(char-name #\\a) \u2192 implementation-dependent"}),"\n",(0,t.jsx)(n.p,{children:"but it is intended to provide additional information to illustrate some of the ways in which it is permitted for implementations to diverge."}),"\n",(0,t.jsxs)("i",{children:[(0,t.jsx)("sup",{children:"not"})," \u2192"]}),"\n",(0,t.jsxs)(n.p,{children:["The notation \u201c",(0,t.jsxs)("i",{children:[(0,t.jsx)("sup",{children:"not"})," \u2192"]}),"\u201d is used to denote a result which is not possible. This might be used, for example, in order to emphasize a situation where some anticipated misconception might lead the reader to falsely believe that the result might be possible. For example,"]}),"\n",(0,t.jsx)(n.p,{children:"(function-lambda-expression"}),"\n",(0,t.jsx)(n.p,{children:"(funcall #\u2019(lambda (x) #\u2019(lambda () x)) nil))"}),"\n",(0,t.jsxs)(n.p,{children:["\u2192 NIL, ",(0,t.jsx)(r,{styled:!0,term:"true",children:(0,t.jsx)("i",{children:"true"})}),", NIL"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)("i",{children:[(0,t.jsx)("sup",{children:"or"}),"\u2192"]})," (LAMBDA () X), ",(0,t.jsx)("i",{children:"true"}),", NIL"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)("i",{children:[(0,t.jsx)("sup",{children:"not"})," \u2192"]})," NIL, ",(0,t.jsx)("i",{children:"false"}),", NIL"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)("i",{children:[(0,t.jsx)("sup",{children:"not"})," \u2192"]})," (LAMBDA () X), ",(0,t.jsx)("i",{children:"false"}),", NIL"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"\u2261"})}),"\n",(0,t.jsx)(n.p,{children:"This indicates code equivalence. For example:"}),"\n",(0,t.jsxs)(n.p,{children:["(gcd x (gcd y z)) ",(0,t.jsx)(n.em,{children:"\u2261"})," (gcd (gcd x y) z)"]}),"\n",(0,t.jsxs)(n.p,{children:["This means that the results and observable side-effects of evaluating the ",(0,t.jsx)(r,{styled:!0,term:"form",children:(0,t.jsx)("i",{children:"form"})})]}),"\n",(0,t.jsx)(n.p,{children:"(gcd x (gcd y z)) are always the same as the results and observable side-effects of (gcd (gcd x y) z) for any x, y, and z."}),"\n",(0,t.jsx)(n.p,{children:"\u25b7"}),"\n",(0,t.jsxs)(n.p,{children:["Common Lisp specifies input and output with respect to a non-interactive stream model. The specific details of how interactive input and output are mapped onto that non-interactive model are ",(0,t.jsx)(r,{styled:!0,term:"implementation-defined",children:(0,t.jsx)("i",{children:"implementation-defined"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, ",(0,t.jsx)(r,{styled:!0,term:"conforming implementation",children:(0,t.jsx)("i",{children:"conforming implementations"})})," are permitted to differ in issues of how interactive input is terminated. For example, the ",(0,t.jsx)(r,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})})," ",(0,t.jsx)(i,{styled:!0,term:"read",children:(0,t.jsx)("b",{children:"read"})})," terminates when the final delimiter is typed on a non-interactive stream. In some ",(0,t.jsx)(r,{styled:!0,term:"implementation",children:(0,t.jsx)("i",{children:"implementations"})}),", an interactive call to ",(0,t.jsx)(i,{styled:!0,term:"read",children:(0,t.jsx)("b",{children:"read"})})," returns as soon as the final delimiter is typed, even if that delimiter is not a ",(0,t.jsx)(r,{styled:!0,term:"newline",children:(0,t.jsx)("i",{children:"newline"})}),". In other ",(0,t.jsx)(r,{styled:!0,term:"implementation",children:(0,t.jsx)("i",{children:"implementations"})}),", a final ",(0,t.jsx)(r,{styled:!0,term:"newline",children:(0,t.jsx)("i",{children:"newline"})})," is always required. In still other ",(0,t.jsx)(r,{styled:!0,term:"implementation",children:(0,t.jsx)("i",{children:"implementations"})}),", there might be a command which \u201cactivates\u201d a buffer full of input without the command itself being visible on the program\u2019s input stream."]}),"\n",(0,t.jsx)(n.p,{children:"In the examples in this document, the notation \u201c\u25b7\u201d precedes lines where interactive input and output occurs. Within such a scenario, \u201cthis notation\u201d notates user input."}),"\n",(0,t.jsx)(n.p,{children:"For example, the notation"}),"\n",(0,t.jsx)(n.p,{children:"(+ 1 (print (+ (sqrt (read)) (sqrt (read)))))"}),"\n",(0,t.jsx)(n.p,{children:"\u25b7 9 16"}),"\n",(0,t.jsx)(n.p,{children:"\u25b7 7"}),"\n",(0,t.jsx)(n.p,{children:"\u2192 8"}),"\n",(0,t.jsxs)(n.p,{children:["shows an interaction in which \u201c(+ 1 (print (+ (sqrt (read)) (sqrt (read)))))\u201d is a ",(0,t.jsx)(r,{styled:!0,term:"form",children:(0,t.jsx)("i",{children:"form"})})," to be ",(0,t.jsx)(n.em,{children:"evaluated"}),", \u201c9 16 \u201d is interactive input, \u201c7\u201d is interactive output, and \u201c8\u201d is the ",(0,t.jsx)(n.em,{children:"value yielded"})," from the ",(0,t.jsx)(r,{styled:!0,term:"evaluation",children:(0,t.jsx)("i",{children:"evaluation"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The use of this notation is intended to disguise small differences in interactive input and output behavior between ",(0,t.jsx)(r,{styled:!0,term:"implementation",children:(0,t.jsx)("i",{children:"implementations"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes, the non-interactive stream model calls for a ",(0,t.jsx)(r,{styled:!0,term:"newline",children:(0,t.jsx)("i",{children:"newline"})}),". How that ",(0,t.jsx)(r,{styled:!0,term:"newline",children:(0,t.jsx)("i",{children:"newline"})})," character is interactively entered is an ",(0,t.jsx)(r,{styled:!0,term:"implementation-defined",children:(0,t.jsx)("i",{children:"implementation-defined"})})," detail of the user interface, but in that case, either the notation \u201c",(0,t.jsx)(r,{styled:!0,term:"newline",children:(0,t.jsx)("i",{children:"\u27e8Newline\u27e9"})}),"\u201d or \u201c\u2190\u201d might be used."]}),"\n",(0,t.jsx)(n.p,{children:'(progn (format t "~&Who? ") (read-line))'}),"\n",(0,t.jsx)(n.p,{children:"\u25b7 Who? Fred, Mary, and Sally\u2190"}),"\n",(0,t.jsxs)(n.p,{children:['\u2192 "Fred, Mary, and Sally", ',(0,t.jsx)(n.em,{children:"~~fal~~se"})]})]})}function b(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}function v(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function w(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(n.p,{children:["Some ",(0,t.jsx)(i,{styled:!0,term:"object",children:(0,t.jsx)("i",{children:"objects"})})," in Common Lisp can be notated in more than one way. In such situations, the choice of which notation to use is technically arbitrary, but conventions may exist which convey a \u201cpoint of view\u201d or \u201csense of intent.\u201d"]})}function T(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(w,{...e})}):w(e)}function E(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["While ",(0,t.jsx)(i,{styled:!0,term:"case",children:(0,t.jsx)("i",{children:"case"})})," is significant in the process of ",(0,t.jsx)(n.em,{children:"interning"})," a ",(0,t.jsx)(i,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})}),", the ",(0,t.jsx)(n.em,{children:"Lisp reader"})," , by default, attempts to canonicalize the case of a ",(0,t.jsx)(i,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," prior to interning; see Section 23.1.2 (Effect of Readtable Case on the Lisp Reader). As such, case in ",(0,t.jsx)(i,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbols"})})," is not, by default, significant. Throughout"]}),"\n",(0,t.jsxs)(n.p,{children:["this document, except as explicitly noted otherwise, the case in which a ",(0,t.jsx)(i,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})}),' appears is not significant; that is, HELLO, Hello, hElLo, and hello are all equivalent ways to denote a symbol whose name is "HELLO".']}),"\n",(0,t.jsxs)(n.p,{children:["The characters ",(0,t.jsx)(i,{styled:!0,term:"backslash",children:(0,t.jsx)("i",{children:"backslash"})})," and ",(0,t.jsx)(i,{styled:!0,term:"vertical-bar",children:(0,t.jsx)("i",{children:"vertical-bar"})})," are used to explicitly quote the ",(0,t.jsx)(i,{styled:!0,term:"case",children:(0,t.jsx)("i",{children:"case"})}),' and other parsing related aspects of characters. As such, the notations |hello| and \\h\\e\\l\\l\\o are equivalent ways to refer to a symbol whose name is "hello", and which is ',(0,t.jsx)(i,{styled:!0,term:"distinct",children:(0,t.jsx)("i",{children:"distinct"})}),' from any symbol whose name is "HELLO".']}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(i,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbols"})})," that correspond to Common Lisp ",(0,t.jsx)(i,{styled:!0,term:"defined name",children:(0,t.jsx)("i",{children:"defined names"})})," have ",(0,t.jsx)(i,{styled:!0,term:"uppercase",children:(0,t.jsx)("i",{children:"uppercase"})})," names even though their names generally appear in ",(0,t.jsx)(i,{styled:!0,term:"lowercase",children:(0,t.jsx)("i",{children:"lowercase"})})," in this document."]})]})}function S(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(E,{...e})}):E(e)}function F(e){const n={p:"p",...(0,s.a)(),...e.components};return(0,t.jsx)(n.p,{children:"Although Common Lisp provides a variety of ways for programs to manipulate the input and output radix for rational numbers, all numbers in this document are in decimal notation unless explicitly noted otherwise."})}function k(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(F,{...e})}):F(e)}function D(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:r}=n;return i||A("DictionaryLink",!0),r||A("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The dot appearing by itself in an ",(0,t.jsx)(r,{styled:!0,term:"expression",children:(0,t.jsx)("i",{children:"expression"})})," such as"]}),"\n",(0,t.jsxs)(n.p,{children:["(",(0,t.jsx)(n.em,{children:"item1 item2"})," . ",(0,t.jsx)(r,{styled:!0,term:"tail",children:(0,t.jsx)("i",{children:"tail"})}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["means that ",(0,t.jsx)(r,{styled:!0,term:"tail",children:(0,t.jsx)("i",{children:"tail"})})," represents a ",(0,t.jsx)(r,{styled:!0,term:"list",children:(0,t.jsx)("i",{children:"list"})})," of ",(0,t.jsx)(r,{styled:!0,term:"object",children:(0,t.jsx)("i",{children:"objects"})})," at the end of a list. For example,"]}),"\n",(0,t.jsx)(n.p,{children:"(A B C . (D E F))"}),"\n",(0,t.jsx)(n.p,{children:"is notationally equivalent to:"}),"\n",(0,t.jsx)(n.p,{children:"(A B C D E F)"}),"\n",(0,t.jsxs)(n.p,{children:["Although ",(0,t.jsx)(r,{styled:!0,term:"dot",children:(0,t.jsx)("i",{children:"dot"})})," is a valid constituent character in a symbol, no ",(0,t.jsx)(n.em,{children:"standardized symbols"})," contain the character ",(0,t.jsx)(r,{styled:!0,term:"dot",children:(0,t.jsx)("i",{children:"dot"})}),", so a period that follows a reference to a ",(0,t.jsx)(r,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," at the end of a sentence in this document should always be interpreted as a period and never as part of the ",(0,t.jsx)(r,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})}),"\u2019s ",(0,t.jsx)(r,{styled:!0,term:"name",children:(0,t.jsx)("i",{children:"name"})}),". For example, within this document, a sentence such as \u201cThis sample sentence refers to the symbol ",(0,t.jsx)(i,{styled:!0,term:"car",children:(0,t.jsx)("b",{children:"car"})}),'.\u201d refers to a symbol whose name is "CAR" (with three letters), and never to a four-letter symbol "CAR."']})]})}function C(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(D,{...e})}):D(e)}function A(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function G(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:r}=n;return i||B("DictionaryLink",!0),r||B("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(i,{styled:!0,term:"nil",children:(0,t.jsx)("b",{children:"nil"})})," has a variety of meanings. It is a ",(0,t.jsx)(r,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," in the COMMON-LISP ",(0,t.jsx)(r,{styled:!0,term:"package",children:(0,t.jsx)("i",{children:"package"})})," with the ",(0,t.jsx)(r,{styled:!0,term:"name",children:(0,t.jsx)("i",{children:"name"})}),' "NIL", it is ',(0,t.jsx)(r,{styled:!0,term:"boolean",children:(0,t.jsx)("i",{children:"boolean"})})," (and ",(0,t.jsx)(r,{styled:!0,term:"generalized boolean",children:(0,t.jsx)("i",{children:"generalized boolean"})}),") ",(0,t.jsx)(r,{styled:!0,term:"false",children:(0,t.jsx)("i",{children:"false"})}),", it is the ",(0,t.jsx)(r,{styled:!0,term:"empty list",children:(0,t.jsx)("i",{children:"empty list"})}),", and it is the ",(0,t.jsx)(r,{styled:!0,term:"name",children:(0,t.jsx)("i",{children:"name"})})," of the ",(0,t.jsx)(r,{styled:!0,term:"empty type",children:(0,t.jsx)("i",{children:"empty type"})})," (a ",(0,t.jsx)(r,{styled:!0,term:"subtype",children:(0,t.jsx)("i",{children:"subtype"})})," of all ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"types"})}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["Within Common Lisp, ",(0,t.jsx)(i,{styled:!0,term:"nil",children:(0,t.jsx)("b",{children:"nil"})})," can be notated interchangeably as either NIL or (). By convention, the choice of notation offers a hint as to which of its many roles it is playing."]}),"\n",(0,t.jsxs)(n.p,{children:["|",(0,t.jsx)(n.strong,{children:"For Evaluation? Notation Typically Implied Role"}),"|"]}),"\n",(0,t.jsx)(n.p,{children:"| :- |"}),"\n",(0,t.jsxs)(n.p,{children:["|",(0,t.jsxs)("p",{children:["Yes nil use as a ",(0,t.jsx)(r,{styled:!0,term:"boolean",children:(0,t.jsx)("i",{children:"boolean"})}),". "]}),(0,t.jsxs)("p",{children:["Yes \u2019nil use as a ",(0,t.jsx)(r,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})}),". "]}),(0,t.jsxs)("p",{children:["Yes \u2019() use as an ",(0,t.jsx)(r,{styled:!0,term:"empty list",children:(0,t.jsx)("i",{children:"empty list"})})," "]}),(0,t.jsxs)("p",{children:["No nil use as a ",(0,t.jsx)(r,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," or ",(0,t.jsx)(r,{styled:!0,term:"boolean",children:(0,t.jsx)("i",{children:"boolean"})}),". No () use as an ",(0,t.jsx)(r,{styled:!0,term:"empty list",children:(0,t.jsx)("i",{children:"empty list"})}),"."]}),"|"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Figure 1\u20131. Notations for NIL"})}),"\n",(0,t.jsxs)(n.p,{children:["Within this document only, ",(0,t.jsx)(i,{styled:!0,term:"nil",children:(0,t.jsx)("b",{children:"nil"})})," is also sometimes notated as ",(0,t.jsx)(r,{styled:!0,term:"false",children:(0,t.jsx)("i",{children:"false"})})," to emphasize its role as a ",(0,t.jsx)(r,{styled:!0,term:"boolean",children:(0,t.jsx)("i",{children:"boolean"})}),". For example:"]}),"\n",(0,t.jsx)(n.p,{children:"(print ()) ;avoided"}),"\n",(0,t.jsx)(n.p,{children:"(defun three nil 3) ;avoided"}),"\n",(0,t.jsx)(n.p,{children:"\u2019(nil nil) ;list of two symbols"}),"\n",(0,t.jsx)(n.p,{children:"\u2019(() ()) ;list of empty lists"}),"\n",(0,t.jsx)(n.p,{children:"(defun three () 3) ;Emphasize empty parameter list."}),"\n",(0,t.jsx)(n.p,{children:"(append \u2019() \u2019()) \u2192 () ;Emphasize use of empty lists"}),"\n",(0,t.jsx)(n.p,{children:"(not nil) \u2192 true ;Emphasize use as Boolean false"}),"\n",(0,t.jsx)(n.p,{children:"(get \u2019nil \u2019color) ;Emphasize use as a symbol"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(r,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})})," is sometimes said to \u201cbe ",(0,t.jsx)(r,{styled:!0,term:"false",children:(0,t.jsx)("i",{children:"false"})}),"\u201d or \u201cbe ",(0,t.jsx)(r,{styled:!0,term:"true",children:(0,t.jsx)("i",{children:"true"})}),"\u201d in some circumstance. Since no ",(0,t.jsx)(r,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})})," object can be the same as ",(0,t.jsx)(i,{styled:!0,term:"nil",children:(0,t.jsx)("b",{children:"nil"})})," and all ",(0,t.jsx)(n.em,{children:"function objects"})," represent ",(0,t.jsx)(r,{styled:!0,term:"true",children:(0,t.jsx)("i",{children:"true"})})," when viewed as ",(0,t.jsx)(r,{styled:!0,term:"boolean",children:(0,t.jsx)("i",{children:"booleans"})}),", it would be meaningless to say that the ",(0,t.jsx)(r,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})})," was literally ",(0,t.jsx)(r,{styled:!0,term:"false",children:(0,t.jsx)("i",{children:"false"})})," and uninteresting to say that it was literally ",(0,t.jsx)(r,{styled:!0,term:"true",children:(0,t.jsx)("i",{children:"true"})}),". Instead, these phrases are just traditional alternative ways of saying that the"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})})," \u201creturns ",(0,t.jsx)(r,{styled:!0,term:"false",children:(0,t.jsx)("i",{children:"false"})}),"\u201d or \u201creturns ",(0,t.jsx)(r,{styled:!0,term:"true",children:(0,t.jsx)("i",{children:"true"})}),",\u201d respectively."]})]})}function N(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(G,{...e})}):G(e)}function B(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function I(e){const n={p:"p",strong:"strong",...(0,s.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:r}=n;return i||q("DictionaryLink",!0),r||q("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(r,{styled:!0,term:"designator",children:(0,t.jsx)("i",{children:"designator"})})," is an ",(0,t.jsx)(r,{styled:!0,term:"object",children:(0,t.jsx)("i",{children:"object"})})," that denotes another ",(0,t.jsx)(r,{styled:!0,term:"object",children:(0,t.jsx)("i",{children:"object"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Where a ",(0,t.jsx)(r,{styled:!0,term:"parameter",children:(0,t.jsx)("i",{children:"parameter"})})," of an ",(0,t.jsx)(r,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," is described as a ",(0,t.jsx)(r,{styled:!0,term:"designator",children:(0,t.jsx)("i",{children:"designator"})})," , the description of the ",(0,t.jsx)(r,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," is written in a way that assumes that the value of the ",(0,t.jsx)(r,{styled:!0,term:"parameter",children:(0,t.jsx)("i",{children:"parameter"})})," is the denoted ",(0,t.jsx)(r,{styled:!0,term:"object",children:(0,t.jsx)("i",{children:"object"})}),"; that is, that the ",(0,t.jsx)(r,{styled:!0,term:"parameter",children:(0,t.jsx)("i",{children:"parameter"})})," is already of the denoted ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})}),". (The specific nature of the ",(0,t.jsx)(r,{styled:!0,term:"object",children:(0,t.jsx)("i",{children:"object"})})," denoted by a \u201c\u27e8typeii designator*\u201d or a \u201c",(0,t.jsx)(r,{styled:!0,term:"designator",children:(0,t.jsx)("i",{children:"designator"})})," for a \u27e8type\u27e9\u201d can be found in the Glossary entry for \u201c\u27e8typeii designator* .\u201d)"]}),"\n",(0,t.jsxs)(n.p,{children:["For example, \u201c",(0,t.jsx)(i,{styled:!0,term:"nil",children:(0,t.jsx)("b",{children:"nil"})}),"\u201d and \u201cthe ",(0,t.jsx)(r,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"value"})})," of ",(0,t.jsx)(n.strong,{children:"*standard-output*"}),"\u201d are operationally indistinguishable as ",(0,t.jsx)(r,{styled:!0,term:"stream designator",children:(0,t.jsx)("i",{children:"stream designators"})}),". Similarly, the ",(0,t.jsx)(r,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," foo and the ",(0,t.jsx)(r,{styled:!0,term:"string",children:(0,t.jsx)("i",{children:"string"})}),' "FOO" are operationally indistinguishable as ',(0,t.jsx)(r,{styled:!0,term:"string designator",children:(0,t.jsx)("i",{children:"string designators"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Except as otherwise noted, in a situation where the denoted ",(0,t.jsx)(r,{styled:!0,term:"object",children:(0,t.jsx)("i",{children:"object"})})," might be used multiple times, it is ",(0,t.jsx)(r,{styled:!0,term:"implementation-dependent",children:(0,t.jsx)("i",{children:"implementation-dependent"})})," whether the ",(0,t.jsx)(r,{styled:!0,term:"object",children:(0,t.jsx)("i",{children:"object"})})," is coerced only once or whether the coercion occurs each time the ",(0,t.jsx)(r,{styled:!0,term:"object",children:(0,t.jsx)("i",{children:"object"})})," must be used."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, ",(0,t.jsx)(i,{styled:!0,term:"mapcar",children:(0,t.jsx)("b",{children:"mapcar"})})," receives a ",(0,t.jsx)(r,{styled:!0,term:"function designator",children:(0,t.jsx)("i",{children:"function designator"})})," as an argument, and its description is written as if this were simply a function. In fact, it is ",(0,t.jsx)(r,{styled:!0,term:"implementation-dependent",children:(0,t.jsx)("i",{children:"implementation-dependent"})})," whether the ",(0,t.jsx)(r,{styled:!0,term:"function designator",children:(0,t.jsx)("i",{children:"function designator"})})," is coerced right away or whether it is carried around internally in the form that it was given as an ",(0,t.jsx)(r,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"argument"})})," and re-coerced each time it is needed. In most cases, ",(0,t.jsx)(r,{styled:!0,term:"conforming program",children:(0,t.jsx)("i",{children:"conforming programs"})})," cannot detect the distinction, but there are some pathological situations (particularly those involving self-redefining or mutually-redefining functions) which do conform and which can detect this difference. The following program is a ",(0,t.jsx)(r,{styled:!0,term:"conforming program",children:(0,t.jsx)("i",{children:"conforming program"})}),", but might or might not have portably correct results, depending on whether its correctness depends on one or the other of the results:"]}),"\n",(0,t.jsx)(n.p,{children:"(defun add-some (x)"}),"\n",(0,t.jsx)(n.p,{children:"(defun add-some (x) (+ x 2))"}),"\n",(0,t.jsx)(n.p,{children:"(+ x 1)) \u2192 ADD-SOME"}),"\n",(0,t.jsx)(n.p,{children:"(mapcar \u2019add-some \u2019(1 2 3 4))"}),"\n",(0,t.jsx)(n.p,{children:"\u2192 (2 3 4 5)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)("i",{children:[(0,t.jsx)("sup",{children:"or"}),"\u2192"]})," (2 4 5 6)"]}),"\n",(0,t.jsxs)(n.p,{children:["In a few rare situations, there may be a need in a dictionary entry to refer to the ",(0,t.jsx)(r,{styled:!0,term:"object",children:(0,t.jsx)("i",{children:"object"})})," that was the original ",(0,t.jsx)(r,{styled:!0,term:"designator",children:(0,t.jsx)("i",{children:"designator"})})," for a ",(0,t.jsx)(r,{styled:!0,term:"parameter",children:(0,t.jsx)("i",{children:"parameter"})})," . Since naming the ",(0,t.jsx)(r,{styled:!0,term:"parameter",children:(0,t.jsx)("i",{children:"parameter"})})," would refer to the denoted ",(0,t.jsx)(r,{styled:!0,term:"object",children:(0,t.jsx)("i",{children:"object"})}),", the phrase \u201cthe \u27e8parameter-nameii designator*\u201d can be used to refer to the ",(0,t.jsx)(r,{styled:!0,term:"designator",children:(0,t.jsx)("i",{children:"designator"})})," which was the ",(0,t.jsx)(r,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"argument"})})," from which the ",(0,t.jsx)(r,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"value"})})," of \u27e8parameter-name\u27e9 was computed."]})]})}function L(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(I,{...e})}):I(e)}function q(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function O(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["When a word having no pre-attached semantics is required (",(0,t.jsx)(n.em,{children:"e.g."}),", in an example), it is common in the Lisp community to use one of the words \u201cfoo,\u201d \u201cbar,\u201d \u201cbaz,\u201d and \u201cquux.\u201d For example, in"]}),"\n",(0,t.jsx)(n.p,{children:"(defun foo (x) (+ x 1))"}),"\n",(0,t.jsx)(n.p,{children:"the use of the name foo is just a shorthand way of saying \u201cplease substitute your favorite name here.\u201d"}),"\n",(0,t.jsx)(n.p,{children:"These nonsense words have gained such prevalance of usage, that it is commonplace for newcomers to the community to begin to wonder if there is an attached semantics which they are overlooking\u2014there is not."})]})}function z(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(O,{...e})}):O(e)}function M(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:r}=n;return i||P("DictionaryLink",!0),r||P("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Situations in which errors might, should, or must be signaled are described in the standard. The wording used to describe such situations is intended to have precise meaning. The following list is a glossary of those meanings."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Safe code"})}),"\n",(0,t.jsxs)(n.p,{children:["This is ",(0,t.jsx)(r,{styled:!0,term:"code",children:(0,t.jsx)("i",{children:"code"})})," processed with the ",(0,t.jsx)(n.strong,{children:"safety"})," optimization at its highest setting (3). ",(0,t.jsx)(n.strong,{children:"safety"})," is a lexical property of code. The phrase \u201cthe function F should signal an error\u201d means that if F is invoked from code processed with the highest ",(0,t.jsx)(n.strong,{children:"safety"})," optimization, an error is signaled. It is ",(0,t.jsx)(r,{styled:!0,term:"implementation-dependent",children:(0,t.jsx)("i",{children:"implementation-dependent"})})," whether F or the calling code signals the error."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Unsafe code"})}),"\n",(0,t.jsx)(n.p,{children:"This is code processed with lower safety levels."}),"\n",(0,t.jsx)(n.p,{children:"Unsafe code might do error checking. Implementations are permitted to treat all code as safe code all the time."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"An error is signaled"})}),"\n",(0,t.jsxs)(n.p,{children:["This means that an error is signaled in both safe and unsafe code. ",(0,t.jsx)(r,{styled:!0,term:"conforming code",children:(0,t.jsx)("i",{children:"Conforming code"})})," may rely on the fact that the error is signaled in both safe and unsafe code. Every implementation is required to detect the error in both safe and unsafe code. For example, \u201can error is signaled if ",(0,t.jsx)(i,{styled:!0,term:"unexport",children:(0,t.jsx)("b",{children:"unexport"})})," is given a ",(0,t.jsx)(r,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," not ",(0,t.jsx)(r,{styled:!0,term:"accessible",children:(0,t.jsx)("i",{children:"accessible"})})," in the ",(0,t.jsx)(r,{styled:!0,term:"current package",children:(0,t.jsx)("i",{children:"current package"})}),".\u201d"]}),"\n",(0,t.jsxs)(n.p,{children:["If an explicit error type is not specified, the default is ",(0,t.jsx)(i,{styled:!0,term:"error",children:(0,t.jsx)("b",{children:"error"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"An error should be signaled"})}),"\n",(0,t.jsxs)(n.p,{children:["This means that an error is signaled in safe code, and an error might be signaled in unsafe code. ",(0,t.jsx)(r,{styled:!0,term:"conforming code",children:(0,t.jsx)("i",{children:"Conforming code"})})," may rely on the fact that the error is signaled in safe code. Every implementation is required to detect the error at least in safe code. When the error is not signaled, the \u201cconsequences are undefined\u201d (see below). For example, \u201c",(0,t.jsx)(i,{styled:!0,term:"+",children:(0,t.jsx)("b",{children:"+"})})," should signal an error of ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," ",(0,t.jsx)(i,{styled:!0,term:"type-error",children:(0,t.jsx)("b",{children:"type-error"})})," if any argument is not of ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," ",(0,t.jsx)(i,{styled:!0,term:"number",children:(0,t.jsx)("b",{children:"number"})}),".\u201d"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Should be prepared to signal an error"})}),"\n",(0,t.jsxs)(n.p,{children:["This is similar to \u201cshould be signaled\u201d except that it does not imply that \u2018extra effort\u2019 has to be taken on the part of an ",(0,t.jsx)(r,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," to discover an erroneous situation if the normal action of that ",(0,t.jsx)(r,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," can be performed successfully with only \u2018lazy\u2019 checking. An ",(0,t.jsx)(r,{styled:!0,term:"implementation",children:(0,t.jsx)("i",{children:"implementation"})})," is always permitted to signal an error, but even in ",(0,t.jsx)(n.em,{children:"safe code"}),", it is only required to signal the error when failing to signal it might lead to incorrect results. In ",(0,t.jsx)(n.em,{children:"unsafe code"}),", the consequences are undefined."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, defining that \u201c",(0,t.jsx)(i,{styled:!0,term:"find",children:(0,t.jsx)("b",{children:"find"})})," should be prepared to signal an error of ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," ",(0,t.jsx)(i,{styled:!0,term:"type-error",children:(0,t.jsx)("b",{children:"type-error"})})," if its second ",(0,t.jsx)(r,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"argument"})})," is not a ",(0,t.jsx)(r,{styled:!0,term:"proper list",children:(0,t.jsx)("i",{children:"proper list"})}),"\u201d does not imply that an error is always signaled. The ",(0,t.jsx)(r,{styled:!0,term:"form",children:(0,t.jsx)("i",{children:"form"})})]}),"\n",(0,t.jsx)(n.p,{children:"(find \u2019a \u2019(a b . c))"}),"\n",(0,t.jsxs)(n.p,{children:["must either signal an error of ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," ",(0,t.jsx)(i,{styled:!0,term:"type-error",children:(0,t.jsx)("b",{children:"type-error"})})," in ",(0,t.jsx)(n.em,{children:"safe code"}),", else return A. In ",(0,t.jsx)(n.em,{children:"unsafe code"}),", the consequences are undefined. By contrast,"]}),"\n",(0,t.jsx)(n.p,{children:"(find \u2019d \u2019(a b . c))"}),"\n",(0,t.jsxs)(n.p,{children:["must signal an error of ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," ",(0,t.jsx)(i,{styled:!0,term:"type-error",children:(0,t.jsx)("b",{children:"type-error"})})," in ",(0,t.jsx)(n.em,{children:"safe code"}),". In ",(0,t.jsx)(n.em,{children:"unsafe code"}),", the consequences are undefined. Also,"]}),"\n",(0,t.jsx)(n.p,{children:"(find \u2019d \u2019#1=(a b . #1#))"}),"\n",(0,t.jsxs)(n.p,{children:["in ",(0,t.jsx)(n.em,{children:"safe code"})," might return ",(0,t.jsx)(i,{styled:!0,term:"nil",children:(0,t.jsx)("b",{children:"nil"})})," (as an ",(0,t.jsx)(r,{styled:!0,term:"implementation-defined",children:(0,t.jsx)("i",{children:"implementation-defined"})})," extension), might never return, or might signal an error of ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," ",(0,t.jsx)(i,{styled:!0,term:"type-error",children:(0,t.jsx)("b",{children:"type-error"})}),". In ",(0,t.jsx)(n.em,{children:"unsafe code"}),", the consequences are undefined."]}),"\n",(0,t.jsxs)(n.p,{children:["Typically, the \u201cshould be prepared to signal\u201d terminology is used in type checking situations where there are efficiency considerations that make it impractical to detect errors that are not relevant to the correct operation of the ",(0,t.jsx)(r,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," ."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"The consequences are unspecified"})}),"\n",(0,t.jsxs)(n.p,{children:["This means that the consequences are unpredictable but harmless. Implementations are permitted to specify the consequences of this situation. No ",(0,t.jsx)(r,{styled:!0,term:"conforming code",children:(0,t.jsx)("i",{children:"conforming code"})})," may depend on the results or effects of this situation, and all ",(0,t.jsx)(r,{styled:!0,term:"conforming code",children:(0,t.jsx)("i",{children:"conforming code"})})," is required to treat the"]}),"\n",(0,t.jsxs)(n.p,{children:["results and effects of this situation as unpredictable but harmless. For example, \u201cif the second argument to ",(0,t.jsx)(i,{styled:!0,term:"shared-initialize",children:(0,t.jsx)("b",{children:"shared-initialize"})})," specifies a name that does not correspond to any ",(0,t.jsx)(n.em,{children:"slots accessible"})," in the ",(0,t.jsx)(r,{styled:!0,term:"object",children:(0,t.jsx)("i",{children:"object"})}),", the results are unspecified.\u201d"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"The consequences are undefined"})}),"\n",(0,t.jsxs)(n.p,{children:["This means that the consequences are unpredictable. The consequences may range from harmless to fatal. No ",(0,t.jsx)(r,{styled:!0,term:"conforming code",children:(0,t.jsx)("i",{children:"conforming code"})})," may depend on the results or effects. ",(0,t.jsx)(r,{styled:!0,term:"conforming code",children:(0,t.jsx)("i",{children:"Conforming code"})})," must treat the consequences as unpredictable. In places where the words \u201cmust,\u201d \u201cmust not,\u201d or \u201cmay not\u201d are used, then \u201cthe consequences are undefined\u201d if the stated requirement is not met and no specific consequence is explicitly stated. An implementation is permitted to signal an error in this case."]}),"\n",(0,t.jsxs)(n.p,{children:["For example: \u201cOnce a name has been declared by ",(0,t.jsx)(i,{styled:!0,term:"defconstant",children:(0,t.jsx)("b",{children:"defconstant"})})," to be constant, any further assignment or binding of that variable has undefined consequences.\u201d"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"An error might be signaled"})}),"\n",(0,t.jsxs)(n.p,{children:["This means that the situation has undefined consequences; however, if an error is signaled, it is of the specified ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})}),". For example, \u201c",(0,t.jsx)(i,{styled:!0,term:"open",children:(0,t.jsx)("b",{children:"open"})})," might signal an error of ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," ",(0,t.jsx)(i,{styled:!0,term:"file-error",children:(0,t.jsx)("b",{children:"file-error"})}),".\u201d"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"The return values are unspecified"})}),"\n",(0,t.jsxs)(n.p,{children:["This means that only the number and nature of the return values of a ",(0,t.jsx)(r,{styled:!0,term:"form",children:(0,t.jsx)("i",{children:"form"})})," are not specified. However, the issue of whether or not any side-effects or transfer of control occurs is still well-specified."]}),"\n",(0,t.jsx)(n.p,{children:"A program can be well-specified even if it uses a function whose returns values are unspecified. For example, even if the return values of some function F are unspecified, an expression such as (length (list (F))) is still well-specified because it does not rely on any particular aspect of the value or values returned by F."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Implementations may be extended to cover this situation"})}),"\n",(0,t.jsxs)(n.p,{children:["This means that the ",(0,t.jsx)(r,{styled:!0,term:"situation",children:(0,t.jsx)("i",{children:"situation"})})," has undefined consequences; however, a ",(0,t.jsx)(n.em,{children:"conforming"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{styled:!0,term:"implementation",children:(0,t.jsx)("i",{children:"implementation"})})," is free to treat the situation in a more specific way. For example, an ",(0,t.jsx)(r,{styled:!0,term:"implementation",children:(0,t.jsx)("i",{children:"implementation"})})," might define that an error is signaled, or that an error should be signaled, or even that a certain well-defined non-error behavior occurs."]}),"\n",(0,t.jsxs)(n.p,{children:["No ",(0,t.jsx)(r,{styled:!0,term:"conforming code",children:(0,t.jsx)("i",{children:"conforming code"})})," may depend on the consequences of such a ",(0,t.jsx)(r,{styled:!0,term:"situation",children:(0,t.jsx)("i",{children:"situation"})}),"; all ",(0,t.jsx)(r,{styled:!0,term:"conforming code",children:(0,t.jsx)("i",{children:"conforming code"})})," must treat the consequences of the situation as undefined. ",(0,t.jsx)(r,{styled:!0,term:"implementation",children:(0,t.jsx)("i",{children:"Implementations"})})," are required to document how the situation is treated."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, \u201cimplementations may be extended to define other type specifiers to have a corresponding ",(0,t.jsx)(r,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})}),".\u201d"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Implementations are free to extend the syntax"})}),"\n",(0,t.jsxs)(n.p,{children:["This means that in this situation implementations are permitted to define unambiguous extensions to the syntax of the ",(0,t.jsx)(r,{styled:!0,term:"form",children:(0,t.jsx)("i",{children:"form"})})," being described. No ",(0,t.jsx)(r,{styled:!0,term:"conforming code",children:(0,t.jsx)("i",{children:"conforming code"})})," may depend on this extension. Implementations are required to document each such extension. All"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{styled:!0,term:"conforming code",children:(0,t.jsx)("i",{children:"conforming code"})})," is required to treat the syntax as meaningless. The standard might disallow certain extensions while allowing others. For example, \u201cno implementation is free to extend the syntax of ",(0,t.jsx)(i,{styled:!0,term:"defclass",children:(0,t.jsx)("b",{children:"defclass"})}),".\u201d"]})]})}function W(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(M,{...e})}):M(e)}function P(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function R(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(n.p,{children:["This means that ",(0,t.jsx)(i,{styled:!0,term:"implementation",children:(0,t.jsx)("i",{children:"implementations"})})," are encouraged to issue a warning if the context is appropriate (",(0,t.jsx)(n.em,{children:"e.g."}),", when compiling). However, a ",(0,t.jsx)(i,{styled:!0,term:"conforming implementation",children:(0,t.jsx)("i",{children:"conforming implementation"})})," is not required to issue a warning."]})}function V(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(R,{...e})}):R(e)}function U(e){const n={p:"p",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Front matter and back matter, such as the \u201cTable of Contents,\u201d \u201cIndex,\u201d \u201cFigures,\u201d \u201cCredits,\u201d and \u201cAppendix\u201d are not considered formally part of this standard, so that we retain the flexibility needed to update these sections even at the last minute without fear of needing a formal vote to change those parts of the document. These items are quite short and very useful, however, and it is not recommended that they be removed even in an abridged version of this document."}),"\n",(0,t.jsx)(n.p,{children:"Within the concept sections, subsections whose names begin with the words \u201cNote\u201d or \u201cNotes\u201d or \u201cExample\u201d or \u201cExamples\u201d are provided for illustration purposes only, and are not considered part of the standard."}),"\n",(0,t.jsx)(n.p,{children:"An attempt has been made to place these sections last in their parent section, so that they could be removed without disturbing the contiguous numbering of the surrounding sections in order to produce a document of smaller size."}),"\n",(0,t.jsx)(n.p,{children:"Likewise, the \u201cExamples\u201d and \u201cNotes\u201d sections in a dictionary entry are not considered part of the standard and could be removed if necessary."}),"\n",(0,t.jsx)(n.p,{children:"Nevertheless, the examples provide important clarifications and consistency checks for the rest of the material, and such abridging is not recommended unless absolutely unavoidable."})]})}function H(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(U,{...e})}):U(e)}function K(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The dictionary entry for each ",(0,t.jsx)(i,{styled:!0,term:"defined name",children:(0,t.jsx)("i",{children:"defined name"})})," is partitioned into sections. Except as explicitly indicated otherwise below, each section is introduced by a label identifying that section. The omission of a section implies that the section is either not applicable, or would provide no interesting information."]}),"\n",(0,t.jsx)(n.p,{children:"This section defines the significance of each potential section in a dictionary entry."})]})}function _(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(K,{...e})}):K(e)}function Q(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["For an ",(0,t.jsx)(i,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," , anything that can affect the side effects of or ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"values"})})," returned by the ",(0,t.jsx)(i,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," ."]}),"\n",(0,t.jsxs)(n.p,{children:["For a ",(0,t.jsx)(i,{styled:!0,term:"variable",children:(0,t.jsx)("i",{children:"variable"})}),", anything that can affect the ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"value"})})," of the ",(0,t.jsx)(i,{styled:!0,term:"variable",children:(0,t.jsx)("i",{children:"variable"})})," including ",(0,t.jsx)(i,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"functions"})})," that bind or assign it."]})]})}function Y(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Q,{...e})}):Q(e)}function X(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(n.p,{children:["This information describes the syntax information of entries such as those for ",(0,t.jsx)(i,{styled:!0,term:"declaration",children:(0,t.jsx)("i",{children:"declarations"})})," and special ",(0,t.jsx)(i,{styled:!0,term:"expression",children:(0,t.jsx)("i",{children:"expressions"})})," which are never ",(0,t.jsx)(n.em,{children:"evaluated"})," as ",(0,t.jsx)(i,{styled:!0,term:"form",children:(0,t.jsx)("i",{children:"forms"})}),", and so do not return ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"values"})}),"."]})}function Z(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(X,{...e})}):X(e)}function J(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["An English language description of what ",(0,t.jsx)(i,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"arguments"})})," the ",(0,t.jsx)(i,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," accepts and what ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"values"})})," it returns, including information about defaults for ",(0,t.jsx)(i,{styled:!0,term:"parameter",children:(0,t.jsx)("i",{children:"parameters"})})," corresponding to omittable ",(0,t.jsx)(i,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"arguments"})})," (such as ",(0,t.jsx)(i,{styled:!0,term:"optional parameter",children:(0,t.jsx)("i",{children:"optional parameters"})})," and ",(0,t.jsx)(i,{styled:!0,term:"keyword parameter",children:(0,t.jsx)("i",{children:"keyword parameters"})}),"). For ",(0,t.jsx)(i,{styled:!0,term:"special operator",children:(0,t.jsx)("i",{children:"special operators"})})," and ",(0,t.jsx)(i,{styled:!0,term:"macro",children:(0,t.jsx)("i",{children:"macros"})}),", their ",(0,t.jsx)(i,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"arguments"})})," are not ",(0,t.jsx)(n.em,{children:"evaluated"})," unless it is explicitly stated in their descriptions that they are ",(0,t.jsx)(n.em,{children:"evaluated"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Except as explicitly specified otherwise, the consequences are undefined if these type restrictions are violated."})]})}function $(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(J,{...e})}):J(e)}function ee(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(n.p,{children:["This information alerts the reader to the kinds of ",(0,t.jsx)(i,{styled:!0,term:"binding",children:(0,t.jsx)("i",{children:"bindings"})})," that might potentially be affected by a declaration. Whether in fact any particular such ",(0,t.jsx)(i,{styled:!0,term:"binding",children:(0,t.jsx)("i",{children:"binding"})})," is actually affected is dependent on additional factors as well. See the \u201cDescription\u201d section of the declaration in question for details."]})}function ne(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(ee,{...e})}):ee(e)}function ie(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:r}=n;return i||se("DictionaryLink",!0),r||se("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This appears in the dictionary entry for a ",(0,t.jsx)(r,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})}),", and contains an ordered list of the ",(0,t.jsx)(n.em,{children:"classes"})," defined by Common Lisp that must be in the ",(0,t.jsx)(r,{styled:!0,term:"class precedence list",children:(0,t.jsx)("i",{children:"class precedence list"})})," of this ",(0,t.jsx)(r,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["It is permissible for other (",(0,t.jsx)(r,{styled:!0,term:"implementation-defined",children:(0,t.jsx)("i",{children:"implementation-defined"})}),") ",(0,t.jsx)(n.em,{children:"classes"})," to appear in the ",(0,t.jsx)(r,{styled:!0,term:"implementation",children:(0,t.jsx)("i",{children:"implementation"})}),"\u2019s ",(0,t.jsx)(r,{styled:!0,term:"class precedence list",children:(0,t.jsx)("i",{children:"class precedence list"})})," for the ",(0,t.jsx)(r,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["It is permissible for either ",(0,t.jsx)(i,{styled:!0,term:"standard-object",children:(0,t.jsx)("b",{children:"standard-object"})})," or ",(0,t.jsx)(i,{styled:!0,term:"structure-object",children:(0,t.jsx)("b",{children:"structure-object"})})," to appear in the ",(0,t.jsx)(r,{styled:!0,term:"implementation",children:(0,t.jsx)("i",{children:"implementation"})}),"\u2019s ",(0,t.jsx)(r,{styled:!0,term:"class precedence list",children:(0,t.jsx)("i",{children:"class precedence list"})}),"; for details, see Section 4.2.2 (Type Relationships)."]}),"\n",(0,t.jsxs)(n.p,{children:["Except as explicitly indicated otherwise somewhere in this specification, no additional ",(0,t.jsx)(n.em,{children:"standardized classes"})," may appear in the ",(0,t.jsx)(r,{styled:!0,term:"implementation",children:(0,t.jsx)("i",{children:"implementation"})}),"\u2019s ",(0,t.jsx)(r,{styled:!0,term:"class precedence list",children:(0,t.jsx)("i",{children:"class precedence list"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["By definition of the relationship between ",(0,t.jsx)(n.em,{children:"classes"})," and ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"types"})}),", the ",(0,t.jsx)(n.em,{children:"classes"})," listed in this section are also ",(0,t.jsx)(r,{styled:!0,term:"supertype",children:(0,t.jsx)("i",{children:"supertypes"})})," of the ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," denoted by the ",(0,t.jsx)(r,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})}),"."]})]})}function te(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(ie,{...e})}):ie(e)}function se(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function re(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(i,{styled:!0,term:"atomic type specifier",children:(0,t.jsx)("i",{children:"atomic type specifiers"})})," are those ",(0,t.jsx)(i,{styled:!0,term:"defined name",children:(0,t.jsx)("i",{children:"defined names"})})," listed in Figure 4\u20132. Such dictionary entries are of kind \u201cClass,\u201d \u201cCondition Type,\u201d \u201cSystem Class,\u201d or \u201cType.\u201d A description of how to interpret a ",(0,t.jsx)(i,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," naming one of these ",(0,t.jsx)(i,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"types"})})," or ",(0,t.jsx)(n.em,{children:"classes"})," as an ",(0,t.jsx)(i,{styled:!0,term:"atomic type specifier",children:(0,t.jsx)("i",{children:"atomic type specifier"})})," is found in the \u201cDescription\u201d section of such dictionary entries."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(i,{styled:!0,term:"compound type specifier",children:(0,t.jsx)("i",{children:"compound type specifiers"})})," are those ",(0,t.jsx)(i,{styled:!0,term:"defined name",children:(0,t.jsx)("i",{children:"defined names"})})," listed in Figure 4\u20133. Such dictionary entries are of kind \u201cClass,\u201d \u201cSystem Class,\u201d \u201cType,\u201d or \u201cType Specifier.\u201d A description of how to interpret as a ",(0,t.jsx)(i,{styled:!0,term:"compound type specifier",children:(0,t.jsx)("i",{children:"compound type specifier"})})," a ",(0,t.jsx)(i,{styled:!0,term:"list",children:(0,t.jsx)("i",{children:"list"})})," whose ",(0,t.jsx)(i,{styled:!0,term:"car",children:(0,t.jsx)("i",{children:"car"})})," is such a ",(0,t.jsx)(i,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," is found in the \u201cCompound Type Specifier Kind,\u201d \u201cCompound Type Specifier Syntax,\u201d \u201cCompound Type Specifier Arguments,\u201d and \u201cCompound Type Specifier Description\u201d sections of such dictionary entries."]})]})}function oe(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(re,{...e})}):re(e)}function ce(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["An \u201cabbreviating\u201d ",(0,t.jsx)(i,{styled:!0,term:"type specifier",children:(0,t.jsx)("i",{children:"type specifier"})})," is one that describes a ",(0,t.jsx)(i,{styled:!0,term:"subtype",children:(0,t.jsx)("i",{children:"subtype"})})," for which it is in principle possible to enumerate the ",(0,t.jsx)(i,{styled:!0,term:"element",children:(0,t.jsx)("i",{children:"elements"})}),", but for which in practice it is impractical to do so."]}),"\n",(0,t.jsxs)(n.p,{children:["A \u201cspecializing\u201d ",(0,t.jsx)(i,{styled:!0,term:"type specifier",children:(0,t.jsx)("i",{children:"type specifier"})})," is one that describes a ",(0,t.jsx)(i,{styled:!0,term:"subtype",children:(0,t.jsx)("i",{children:"subtype"})})," by restricting the ",(0,t.jsx)(i,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," of one or more components of the ",(0,t.jsx)(i,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})}),", such as ",(0,t.jsx)(i,{styled:!0,term:"element type",children:(0,t.jsx)("i",{children:"element type"})})," or ",(0,t.jsx)(i,{styled:!0,term:"complex part type",children:(0,t.jsx)("i",{children:"complex part type"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["A \u201cpredicating\u201d ",(0,t.jsx)(i,{styled:!0,term:"type specifier",children:(0,t.jsx)("i",{children:"type specifier"})})," is one that describes a ",(0,t.jsx)(i,{styled:!0,term:"subtype",children:(0,t.jsx)("i",{children:"subtype"})})," containing only those ",(0,t.jsx)(i,{styled:!0,term:"object",children:(0,t.jsx)("i",{children:"objects"})})," that satisfy a given ",(0,t.jsx)(i,{styled:!0,term:"predicate",children:(0,t.jsx)("i",{children:"predicate"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["A \u201ccombining\u201d ",(0,t.jsx)(i,{styled:!0,term:"type specifier",children:(0,t.jsx)("i",{children:"type specifier"})})," is one that describes a ",(0,t.jsx)(i,{styled:!0,term:"subtype",children:(0,t.jsx)("i",{children:"subtype"})})," in a compositional way, using combining operations (such as \u201cand,\u201d \u201cor,\u201d and \u201cnot\u201d) on other ",(0,t.jsx)(i,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"types"})}),"."]})]})}function de(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(ce,{...e})}):ce(e)}function le(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This information about a ",(0,t.jsx)(i,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," describes the syntax of a ",(0,t.jsx)(i,{styled:!0,term:"compound type specifier",children:(0,t.jsx)("i",{children:"compound type specifier"})})," for that ",(0,t.jsx)(i,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Whether or not the ",(0,t.jsx)(i,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," is acceptable as an ",(0,t.jsx)(i,{styled:!0,term:"atomic type specifier",children:(0,t.jsx)("i",{children:"atomic type specifier"})})," is not represented here; see Section 1.4.4.6 (Dictionary Entries for Type Specifiers)."]})]})}function ae(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(le,{...e})}):le(e)}function he(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(n.p,{children:["This information describes ",(0,t.jsx)(i,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," information for the structures defined in the \u201cCompound Type Specifier Syntax\u201d section."]})}function me(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(he,{...e})}):he(e)}function pe(e){const n={p:"p",...(0,s.a)(),...e.components};return(0,t.jsx)(n.p,{children:"This information describes the meaning of the structures defined in the \u201cCompound Type Specifier Syntax\u201d section."})}function xe(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(pe,{...e})}):pe(e)}function je(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(n.p,{children:["This information describes the unchanging ",(0,t.jsx)(i,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," and ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"value"})})," of a ",(0,t.jsx)(i,{styled:!0,term:"constant variable",children:(0,t.jsx)("i",{children:"constant variable"})}),"."]})}function ye(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(je,{...e})}):je(e)}function ue(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(n.p,{children:["A summary of the ",(0,t.jsx)(i,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," and all intended aspects of the ",(0,t.jsx)(i,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," , but does not necessarily include all the fields referenced below it (\u201cSide Effects,\u201d \u201cExceptional Situations,\u201d ",(0,t.jsx)(n.em,{children:"etc."}),")"]})}function fe(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(ue,{...e})}):ue(e)}function ge(e){const n={code:"code",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"Examples of use of the *operator* . These examples are not considered part of the standard; see Section 1.4.3 (Sections Not Formally Part Of This Standard). \n"})})}function be(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(ge,{...e})}):ge(e)}function ve(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Three kinds of information may appear here:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"\u2022"})," Situations that are detected by the ",(0,t.jsx)(i,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})})," and formally signaled."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"\u2022"})," Situations that are handled by the ",(0,t.jsx)(i,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"\u2022"})," Situations that may be detected by the ",(0,t.jsx)(i,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This field does not include conditions that could be signaled by ",(0,t.jsx)(i,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"functions"})})," passed to and called by this ",(0,t.jsx)(i,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," as arguments or through dynamic variables, nor by executing subforms of this operator if it is a ",(0,t.jsx)(i,{styled:!0,term:"macro",children:(0,t.jsx)("i",{children:"macro"})})," or ",(0,t.jsx)(i,{styled:!0,term:"special operator",children:(0,t.jsx)("i",{children:"special operator"})})," ."]})]})}function we(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(ve,{...e})}):ve(e)}function Te(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(n.p,{children:["This information describes the initial ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"value"})})," of a ",(0,t.jsx)(i,{styled:!0,term:"dynamic variable",children:(0,t.jsx)("i",{children:"dynamic variable"})}),". Since this variable might change, see ",(0,t.jsx)(i,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," restrictions in the \u201cValue Type\u201d section."]})}function Ee(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Te,{...e})}):Te(e)}function Se(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(n.p,{children:["This information describes the ",(0,t.jsx)(i,{styled:!0,term:"argument precedence order",children:(0,t.jsx)("i",{children:"argument precedence order"})})," . If it is omitted, the ",(0,t.jsx)(i,{styled:!0,term:"argument precedence order",children:(0,t.jsx)("i",{children:"argument precedence order"})})," is the default (left to right)."]})}function Fe(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Se,{...e})}):Se(e)}function ke(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:r}=n;return i||Ce("DictionaryLink",!0),r||Ce("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The description of a ",(0,t.jsx)(r,{styled:!0,term:"generic function",children:(0,t.jsx)("i",{children:"generic function"})})," includes descriptions of the ",(0,t.jsx)(r,{styled:!0,term:"method",children:(0,t.jsx)("i",{children:"methods"})})," that are defined on that ",(0,t.jsx)(r,{styled:!0,term:"generic function",children:(0,t.jsx)("i",{children:"generic function"})})," by the standard. A method signature is used to describe the ",(0,t.jsx)(r,{styled:!0,term:"parameter",children:(0,t.jsx)("i",{children:"parameters"})})," and ",(0,t.jsx)(r,{styled:!0,term:"parameter specializer",children:(0,t.jsx)("i",{children:"parameter specializers"})})," for each ",(0,t.jsx)(r,{styled:!0,term:"method",children:(0,t.jsx)("i",{children:"method"})}),". ",(0,t.jsx)(r,{styled:!0,term:"method",children:(0,t.jsx)("i",{children:"Methods"})})," defined for the ",(0,t.jsx)(r,{styled:!0,term:"generic function",children:(0,t.jsx)("i",{children:"generic function"})})," must be of the form described by the ",(0,t.jsx)(n.em,{children:"method signature"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"F"})," (",(0,t.jsx)(n.em,{children:"x class"}),") (",(0,t.jsx)(n.em,{children:"y t"}),") &optional ",(0,t.jsx)(n.em,{children:"z"})," &key ",(0,t.jsx)(n.em,{children:"k"})]}),"\n",(0,t.jsxs)(n.p,{children:["This ",(0,t.jsx)(r,{styled:!0,term:"signature",children:(0,t.jsx)("i",{children:"signature"})})," indicates that this method on the ",(0,t.jsx)(r,{styled:!0,term:"generic function",children:(0,t.jsx)("i",{children:"generic function"})})," ",(0,t.jsx)(n.strong,{children:"F"})," has two ",(0,t.jsx)(r,{styled:!0,term:"required parameter",children:(0,t.jsx)("i",{children:"required parameters"})}),": ",(0,t.jsx)(n.em,{children:"x"}),", which must be a ",(0,t.jsx)(r,{styled:!0,term:"generalized instance",children:(0,t.jsx)("i",{children:"generalized instance"})})," of the ",(0,t.jsx)(n.em,{children:"class class"}),"; and ",(0,t.jsx)(n.em,{children:"y"}),", which can be any ",(0,t.jsx)(r,{styled:!0,term:"object",children:(0,t.jsx)("i",{children:"object"})})," (",(0,t.jsx)(n.em,{children:"i.e."}),", a ",(0,t.jsx)(r,{styled:!0,term:"generalized instance",children:(0,t.jsx)("i",{children:"generalized instance"})})," of the ",(0,t.jsx)(r,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})})," ",(0,t.jsx)(i,{styled:!0,term:"t",children:(0,t.jsx)("b",{children:"t"})}),"). In addition, there is an ",(0,t.jsx)(n.em,{children:"optional parameter z"})," and a ",(0,t.jsx)(n.em,{children:"keyword parameter k"}),". This ",(0,t.jsx)(r,{styled:!0,term:"signature",children:(0,t.jsx)("i",{children:"signature"})})," also indicates that this method on F is a ",(0,t.jsx)(r,{styled:!0,term:"primary method",children:(0,t.jsx)("i",{children:"primary method"})})," and has no ",(0,t.jsx)(r,{styled:!0,term:"qualifier",children:(0,t.jsx)("i",{children:"qualifiers"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For each ",(0,t.jsx)(r,{styled:!0,term:"parameter",children:(0,t.jsx)("i",{children:"parameter"})})," , the ",(0,t.jsx)(r,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"argument"})})," supplied must be in the intersection of the ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," specified in the description of the corresponding ",(0,t.jsx)(r,{styled:!0,term:"generic function",children:(0,t.jsx)("i",{children:"generic function"})})," and the ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," given in the ",(0,t.jsx)(r,{styled:!0,term:"signature",children:(0,t.jsx)("i",{children:"signature"})})," of some ",(0,t.jsx)(r,{styled:!0,term:"method",children:(0,t.jsx)("i",{children:"method"})})," (including not only those ",(0,t.jsx)(r,{styled:!0,term:"method",children:(0,t.jsx)("i",{children:"methods"})})," defined in this specification, but also ",(0,t.jsx)(r,{styled:!0,term:"implementation-defined",children:(0,t.jsx)("i",{children:"implementation-defined"})})," or user-defined ",(0,t.jsx)(r,{styled:!0,term:"method",children:(0,t.jsx)("i",{children:"methods"})})," in situations where the definition of such ",(0,t.jsx)(r,{styled:!0,term:"method",children:(0,t.jsx)("i",{children:"methods"})})," is permitted)."]})]})}function De(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(ke,{...e})}):ke(e)}function Ce(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function Ae(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:r}=n;return i||Ne("DictionaryLink",!0),r||Ne("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This section introduces the dictionary entry. It is not explicitly labeled. It appears preceded and followed by a horizontal bar."}),"\n",(0,t.jsxs)(n.p,{children:["In large print at left, the ",(0,t.jsx)(r,{styled:!0,term:"defined name",children:(0,t.jsx)("i",{children:"defined name"})})," appears; if more than one ",(0,t.jsx)(r,{styled:!0,term:"defined name",children:(0,t.jsx)("i",{children:"defined name"})})," is to be described by the entry, all such ",(0,t.jsx)(r,{styled:!0,term:"name",children:(0,t.jsx)("i",{children:"names"})})," are shown separated by commas."]}),"\n",(0,t.jsx)(n.p,{children:"In somewhat smaller italic print at right is an indication of what kind of dictionary entry this is. Possible values are:"}),"\n",(0,t.jsx)(r,{styled:!0,term:"accessor",children:(0,t.jsx)("i",{children:"Accessor"})}),"\n",(0,t.jsxs)(n.p,{children:["This is an ",(0,t.jsx)(n.em,{children:"accessor function"}),"."]}),"\n",(0,t.jsx)(r,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"Class"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(r,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Condition Type"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(r,{styled:!0,term:"subtype",children:(0,t.jsx)("i",{children:"subtype"})})," of ",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," ",(0,t.jsx)(i,{styled:!0,term:"condition",children:(0,t.jsx)("b",{children:"condition"})}),"."]}),"\n",(0,t.jsx)(r,{styled:!0,term:"constant variable",children:(0,t.jsx)("i",{children:"Constant Variable"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(r,{styled:!0,term:"constant variable",children:(0,t.jsx)("i",{children:"constant variable"})}),"."]}),"\n",(0,t.jsx)(r,{styled:!0,term:"declaration",children:(0,t.jsx)("i",{children:"Declaration"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(r,{styled:!0,term:"declaration identifier",children:(0,t.jsx)("i",{children:"declaration identifier"})})," ."]}),"\n",(0,t.jsx)(r,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"Function"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(r,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Local Function"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(r,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})})," that is defined only lexically within the scope of some other ",(0,t.jsx)(r,{styled:!0,term:"macro form",children:(0,t.jsx)("i",{children:"macro form"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Local Macro"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(r,{styled:!0,term:"macro",children:(0,t.jsx)("i",{children:"macro"})})," that is defined only lexically within the scope of some other ",(0,t.jsx)(r,{styled:!0,term:"macro form",children:(0,t.jsx)("i",{children:"macro form"})}),"."]}),"\n",(0,t.jsx)(r,{styled:!0,term:"macro",children:(0,t.jsx)("i",{children:"Macro"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(r,{styled:!0,term:"macro",children:(0,t.jsx)("i",{children:"macro"})}),"."]}),"\n",(0,t.jsx)(r,{styled:!0,term:"restart",children:(0,t.jsx)("i",{children:"Restart"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(r,{styled:!0,term:"restart",children:(0,t.jsx)("i",{children:"restart"})}),"."]}),"\n",(0,t.jsx)(r,{styled:!0,term:"special operator",children:(0,t.jsx)("i",{children:"Special Operator"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(r,{styled:!0,term:"special operator",children:(0,t.jsx)("i",{children:"special operator"})})," ."]}),"\n",(0,t.jsx)(r,{styled:!0,term:"standard generic function",children:(0,t.jsx)("i",{children:"Standard Generic Function"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(r,{styled:!0,term:"standard generic function",children:(0,t.jsx)("i",{children:"standard generic function"})}),"."]}),"\n",(0,t.jsx)(r,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"Symbol"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(r,{styled:!0,term:"symbol",children:(0,t.jsx)("i",{children:"symbol"})})," that is specially recognized in some particular situation, such as the syntax of a ",(0,t.jsx)(r,{styled:!0,term:"macro",children:(0,t.jsx)("i",{children:"macro"})}),"."]}),"\n",(0,t.jsx)(r,{styled:!0,term:"system class",children:(0,t.jsx)("i",{children:"System Class"})}),"\n",(0,t.jsxs)(n.p,{children:["This is like ",(0,t.jsx)(r,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})}),", but it identifies a ",(0,t.jsx)(r,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})})," that is potentially a ",(0,t.jsx)(r,{styled:!0,term:"built-in class",children:(0,t.jsx)("i",{children:"built-in class"})}),". (No ",(0,t.jsx)(r,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})})," is actually required to be a ",(0,t.jsx)(r,{styled:!0,term:"built-in class",children:(0,t.jsx)("i",{children:"built-in class"})}),".)"]}),"\n",(0,t.jsx)(r,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"Type"})}),"\n",(0,t.jsxs)(n.p,{children:["This is an ",(0,t.jsx)(r,{styled:!0,term:"atomic type specifier",children:(0,t.jsx)("i",{children:"atomic type specifier"})})," , and depending on information for each particular entry, may subject to form other ",(0,t.jsx)(r,{styled:!0,term:"type specifier",children:(0,t.jsx)("i",{children:"type specifiers"})}),"."]}),"\n",(0,t.jsx)(r,{styled:!0,term:"type specifier",children:(0,t.jsx)("i",{children:"Type Specifier"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(r,{styled:!0,term:"defined name",children:(0,t.jsx)("i",{children:"defined name"})})," that is not an ",(0,t.jsx)(r,{styled:!0,term:"atomic type specifier",children:(0,t.jsx)("i",{children:"atomic type specifier"})})," , but that can be used in constructing valid ",(0,t.jsx)(r,{styled:!0,term:"type specifier",children:(0,t.jsx)("i",{children:"type specifiers"})}),"."]}),"\n",(0,t.jsx)(r,{styled:!0,term:"variable",children:(0,t.jsx)("i",{children:"Variable"})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(r,{styled:!0,term:"dynamic variable",children:(0,t.jsx)("i",{children:"dynamic variable"})}),"."]})]})}function Ge(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Ae,{...e})}):Ae(e)}function Ne(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function Be(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(n.p,{children:["Information not found elsewhere in this description which pertains to this ",(0,t.jsx)(i,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," . Among other things, this might include cross reference information, code equivalences, stylistic hints, implementation hints, typical uses. This information is not considered part of the standard; any ",(0,t.jsx)(i,{styled:!0,term:"conforming implementation",children:(0,t.jsx)("i",{children:"conforming implementation"})})," or ",(0,t.jsx)(i,{styled:!0,term:"conforming program",children:(0,t.jsx)("i",{children:"conforming program"})})," is permitted to ignore the presence of this information."]})}function Ie(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Be,{...e})}):Be(e)}function Le(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(n.p,{children:["This offers a suggested pronunciation for ",(0,t.jsx)(i,{styled:!0,term:"defined name",children:(0,t.jsx)("i",{children:"defined names"})})," so that people not in verbal communication with the original designers can figure out how to pronounce words that are not in normal English usage. This information is advisory only, and is not considered part of the standard. For brevity, it is only provided for entries with names that are specific to Common Lisp and would not be found in ",(0,t.jsx)(n.em,{children:"Webster\u2019s Third New International Dictionary the English Language, Unabridged"}),"."]})}function qe(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Le,{...e})}):Le(e)}function Oe(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(n.p,{children:["List of references to other parts of this standard that offer information relevant to this ",(0,t.jsx)(i,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," . This list is not part of the standard."]})}function ze(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Oe,{...e})}):Oe(e)}function Me(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(n.p,{children:["Anything that is changed as a result of the evaluation of the ",(0,t.jsx)(i,{styled:!0,term:"form",children:(0,t.jsx)("i",{children:"form"})})," containing this ",(0,t.jsx)(i,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," ."]})}function We(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Me,{...e})}):Me(e)}function Pe(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This appears in the dictionary entry for a ",(0,t.jsx)(i,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})}),", and contains a list of the ",(0,t.jsx)(n.em,{children:"standardized types"})," that must be ",(0,t.jsx)(i,{styled:!0,term:"supertype",children:(0,t.jsx)("i",{children:"supertypes"})})," of this ",(0,t.jsx)(i,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(i,{styled:!0,term:"implementation",children:(0,t.jsx)("i",{children:"implementations"})})," where there is a corresponding ",(0,t.jsx)(i,{styled:!0,term:"class",children:(0,t.jsx)("i",{children:"class"})}),", the order of the ",(0,t.jsx)(n.em,{children:"classes"})," in the ",(0,t.jsx)(i,{styled:!0,term:"class precedence list",children:(0,t.jsx)("i",{children:"class precedence list"})})," is consistent with the order presented in this section."]})]})}function Re(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Pe,{...e})}):Pe(e)}function Ve(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This section describes how to use the ",(0,t.jsx)(i,{styled:!0,term:"defined name",children:(0,t.jsx)("i",{children:"defined name"})})," in code. The \u201cSyntax\u201d description for a ",(0,t.jsx)(i,{styled:!0,term:"generic function",children:(0,t.jsx)("i",{children:"generic function"})})," describes the ",(0,t.jsx)(i,{styled:!0,term:"lambda list",children:(0,t.jsx)("i",{children:"lambda list"})})," of the ",(0,t.jsx)(i,{styled:!0,term:"generic function",children:(0,t.jsx)("i",{children:"generic function"})})," itself, while the \u201cMethod Signatures\u201d describe the ",(0,t.jsx)(i,{styled:!0,term:"lambda list",children:(0,t.jsx)("i",{children:"lambda lists"})})," of the defined ",(0,t.jsx)(i,{styled:!0,term:"method",children:(0,t.jsx)("i",{children:"methods"})}),". The \u201cSyntax\u201d description for an ",(0,t.jsx)(i,{styled:!0,term:"ordinary function",children:(0,t.jsx)("i",{children:"ordinary function"})}),", a ",(0,t.jsx)(i,{styled:!0,term:"macro",children:(0,t.jsx)("i",{children:"macro"})}),", or a ",(0,t.jsx)(i,{styled:!0,term:"special operator",children:(0,t.jsx)("i",{children:"special operator"})})," describes its ",(0,t.jsx)(i,{styled:!0,term:"parameter",children:(0,t.jsx)("i",{children:"parameters"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, an ",(0,t.jsx)(i,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," description might say:"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"F"})," ",(0,t.jsx)(n.em,{children:"x y"})," &optional ",(0,t.jsx)(n.em,{children:"z"})," &key ",(0,t.jsx)(n.em,{children:"k"})]}),"\n",(0,t.jsxs)(n.p,{children:["This description indicates that the function ",(0,t.jsx)(n.strong,{children:"F"})," has two required parameters, ",(0,t.jsx)(n.em,{children:"x"})," and ",(0,t.jsx)(n.em,{children:"y"}),". In addition, there is an optional parameter ",(0,t.jsx)(n.em,{children:"z"})," and a keyword parameter ",(0,t.jsx)(n.em,{children:"k"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For ",(0,t.jsx)(i,{styled:!0,term:"macro",children:(0,t.jsx)("i",{children:"macros"})})," and ",(0,t.jsx)(i,{styled:!0,term:"special operator",children:(0,t.jsx)("i",{children:"special operators"})}),", syntax is given in modified BNF notation; see Section 1.4.1.2 (Modified BNF Syntax). For ",(0,t.jsx)(i,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"functions"})})," a ",(0,t.jsx)(i,{styled:!0,term:"lambda list",children:(0,t.jsx)("i",{children:"lambda list"})})," is given. In both cases, however, the outermost parentheses are omitted, and default value information is omitted."]})]})}function Ue(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Ve,{...e})}):Ve(e)}function He(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:r}=n;return i||_e("DictionaryLink",!0),r||_e("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"If two descriptions exist for the same operation but with different numbers of arguments, then the extra arguments are to be treated as optional. For example, this pair of lines:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(i,{styled:!0,term:"file-position",children:(0,t.jsx)("b",{children:"file-position"})})," ",(0,t.jsx)(n.em,{children:"stream \u2192 position"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(i,{styled:!0,term:"file-position",children:(0,t.jsx)("b",{children:"file-position"})})," ",(0,t.jsx)(n.em,{children:"stream position-spec \u2192 success-p"})]}),"\n",(0,t.jsx)(n.p,{children:"is operationally equivalent to this line:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(i,{styled:!0,term:"file-position",children:(0,t.jsx)("b",{children:"file-position"})})," ",(0,t.jsx)(r,{styled:!0,term:"stream",children:(0,t.jsx)("i",{children:"stream"})})," &optional ",(0,t.jsx)(n.em,{children:"position-spec \u2192 result"})]}),"\n",(0,t.jsxs)(n.p,{children:["and differs only in that it provides on opportunity to introduce different names for ",(0,t.jsx)(r,{styled:!0,term:"parameter",children:(0,t.jsx)("i",{children:"parameter"})})," and ",(0,t.jsx)(r,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"values"})})," for each case. The separated (multi-line) notation is used when an ",(0,t.jsx)(r,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operator"})})," is overloaded in such a way that the ",(0,t.jsx)(r,{styled:!0,term:"parameter",children:(0,t.jsx)("i",{children:"parameters"})})," are used in different ways depending on how many ",(0,t.jsx)(r,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"arguments"})})," are supplied (",(0,t.jsx)(n.em,{children:"e.g."}),", for the ",(0,t.jsx)(r,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})})," ",(0,t.jsx)(i,{styled:!0,term:"/",children:(0,t.jsx)("b",{children:"/"})}),") or the return values are different in the two cases (",(0,t.jsx)(n.em,{children:"e.g."}),", for the"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{styled:!0,term:"function",children:(0,t.jsx)("i",{children:"function"})})," ",(0,t.jsx)(i,{styled:!0,term:"file-position",children:(0,t.jsx)("b",{children:"file-position"})}),")."]})]})}function Ke(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(He,{...e})}):He(e)}function _e(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function Qe(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Within this specification, if the name of a ",(0,t.jsx)(i,{styled:!0,term:"rest parameter",children:(0,t.jsx)("i",{children:"rest parameter"})})," is chosen to be a plural noun, use of that name in ",(0,t.jsx)(i,{styled:!0,term:"parameter",children:(0,t.jsx)("i",{children:"parameter"})})," font refers to the ",(0,t.jsx)(i,{styled:!0,term:"list",children:(0,t.jsx)("i",{children:"list"})})," to which the ",(0,t.jsx)(i,{styled:!0,term:"rest parameter",children:(0,t.jsx)("i",{children:"rest parameter"})})," is bound. Use of the singular form of that name in ",(0,t.jsx)(i,{styled:!0,term:"parameter",children:(0,t.jsx)("i",{children:"parameter"})})," font refers to an ",(0,t.jsx)(i,{styled:!0,term:"element",children:(0,t.jsx)("i",{children:"element"})})," of that ",(0,t.jsx)(i,{styled:!0,term:"list",children:(0,t.jsx)("i",{children:"list"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:"For example, given a syntax description such as:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"F"})," &rest ",(0,t.jsx)(i,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"arguments"})})]}),"\n",(0,t.jsxs)(n.p,{children:["it is appropriate to refer either to the ",(0,t.jsx)(i,{styled:!0,term:"rest parameter",children:(0,t.jsx)("i",{children:"rest parameter"})})," named ",(0,t.jsx)(i,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"arguments"})})," by name, or to one of its elements by speaking of \u201can ",(0,t.jsx)(i,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"argument"})}),",\u201d \u201csome ",(0,t.jsx)(i,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"argument"})}),",\u201d \u201ceach ",(0,t.jsx)(i,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"argument"})}),"\u201d ",(0,t.jsx)(n.em,{children:"etc."})]})]})}function Ye(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Qe,{...e})}):Qe(e)}function Xe(e){const n={p:"p",strong:"strong",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["In some cases it is useful to refer to all arguments equally as a single aggregation using a ",(0,t.jsx)(i,{styled:!0,term:"rest parameter",children:(0,t.jsx)("i",{children:"rest parameter"})})," while at the same time requiring at least one argument. A variety of imperative and declarative means are available in ",(0,t.jsx)(i,{styled:!0,term:"code",children:(0,t.jsx)("i",{children:"code"})})," for expressing such a restriction, however they generally do not manifest themselves in a ",(0,t.jsx)(i,{styled:!0,term:"lambda list",children:(0,t.jsx)("i",{children:"lambda list"})}),". For descriptive purposes within this specification,"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"F"})," &rest ",(0,t.jsx)(i,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"arguments"})}),(0,t.jsx)("sup",{children:"+"})]}),"\n",(0,t.jsx)(n.p,{children:"means the same as"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"F"})," &rest ",(0,t.jsx)(i,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"arguments"})})]}),"\n",(0,t.jsxs)(n.p,{children:["but introduces the additional requirement that there be at least one ",(0,t.jsx)(i,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"argument"})}),"."]})]})}function Ze(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Xe,{...e})}):Xe(e)}function Je(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["An evaluation arrow \u201c\u2192\u201d precedes a list of ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"values"})})," to be returned. For example:"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"F"})," ",(0,t.jsx)(n.em,{children:"a b c \u2192 x"})]}),"\n",(0,t.jsxs)(n.p,{children:["indicates that F is an operator that has three ",(0,t.jsx)(i,{styled:!0,term:"required parameter",children:(0,t.jsx)("i",{children:"required parameters"})})," (",(0,t.jsx)(n.em,{children:"i.e."}),", ",(0,t.jsx)(n.em,{children:"a"}),", ",(0,t.jsx)(n.em,{children:"b"}),", and ",(0,t.jsx)(n.em,{children:"c"}),") and that returns one ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"value"})})," (",(0,t.jsx)(n.em,{children:"i.e."}),", ",(0,t.jsx)(n.em,{children:"x"}),"). If more than one ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"value"})})," is returned by an operator, the ",(0,t.jsx)(i,{styled:!0,term:"name",children:(0,t.jsx)("i",{children:"names"})})," of the ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"values"})})," are separated by commas, as in:"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"F"})," ",(0,t.jsx)(n.em,{children:"a b c \u2192 x, y, z"})]})]})}function $e(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Je,{...e})}):Je(e)}function en(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["If no ",(0,t.jsx)(i,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"arguments"})})," are permitted, or no ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"values"})})," are returned, a special notation is used to make this more visually apparent. For example,"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"F"})," ",(0,t.jsx)(n.em,{children:"\u27e8no arguments\u27e9 \u2192 \u27e8no values\u27e9"})]}),"\n",(0,t.jsxs)(n.p,{children:["indicates that F is an operator that accepts no ",(0,t.jsx)(i,{styled:!0,term:"argument",children:(0,t.jsx)("i",{children:"arguments"})})," and returns no ",(0,t.jsx)(i,{styled:!0,term:"value",children:(0,t.jsx)("i",{children:"values"})}),"."]})]})}function nn(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(en,{...e})}):en(e)}function tn(e){const n={em:"em",p:"p",strong:"strong",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Some ",(0,t.jsx)(i,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operators"})})," perform an unconditional transfer of control, and so never have any return values. Such ",(0,t.jsx)(i,{styled:!0,term:"operator",children:(0,t.jsx)("i",{children:"operators"})})," are notated using a notation such as the following:"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"F"})," ",(0,t.jsx)(n.em,{children:"a b c \u2192"})]})]})}function sn(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(tn,{...e})}):tn(e)}function rn(e){const n={em:"em",p:"p",...(0,s.a)(),...e.components},{DictionaryLink:i,GlossaryTerm:r}=n;return i||cn("DictionaryLink",!0),r||cn("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This information is used by dictionary entries such as \u201cDeclarations\u201d in order to restrict the context in which the declaration may appear."}),"\n",(0,t.jsxs)(n.p,{children:["A given \u201cDeclaration\u201d might appear in a ",(0,t.jsx)(r,{styled:!0,term:"declaration",children:(0,t.jsx)("i",{children:"declaration"})})," (",(0,t.jsx)(n.em,{children:"i.e."}),", a ",(0,t.jsx)(i,{styled:!0,term:"declare",children:(0,t.jsx)("b",{children:"declare"})})," ",(0,t.jsx)(r,{styled:!0,term:"expression",children:(0,t.jsx)("i",{children:"expression"})}),"), a ",(0,t.jsx)(r,{styled:!0,term:"proclamation",children:(0,t.jsx)("i",{children:"proclamation"})})," (",(0,t.jsx)(n.em,{children:"i.e."}),", a ",(0,t.jsx)(i,{styled:!0,term:"declaim",children:(0,t.jsx)("b",{children:"declaim"})})," or ",(0,t.jsx)(i,{styled:!0,term:"proclaim",children:(0,t.jsx)("b",{children:"proclaim"})})," ",(0,t.jsx)(r,{styled:!0,term:"form",children:(0,t.jsx)("i",{children:"form"})}),"), or both."]})]})}function on(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(rn,{...e})}):rn(e)}function cn(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}function dn(e){const n={p:"p",...(0,s.a)(),...e.components},{GlossaryTerm:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This information describes any ",(0,t.jsx)(i,{styled:!0,term:"type",children:(0,t.jsx)("i",{children:"type"})})," restrictions on a ",(0,t.jsx)(i,{styled:!0,term:"dynamic variable",children:(0,t.jsx)("i",{children:"dynamic variable"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Except as explicitly specified otherwise, the consequences are undefined if this type restriction is violated."})]})}function ln(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(dn,{...e})}):dn(e)}const an={title:"1.4 Definitions"},hn="1.4 Definitions",mn={id:"chap-1/b-e-definitions",title:"1.4 Definitions",description:"1.4.1 Notational Conventions",source:"@site/docs/chap-1/b-e-definitions.md",sourceDirName:"chap-1",slug:"/chap-1/b-e-definitions",permalink:"/cl-language-reference/chap-1/b-e-definitions",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-1/b-e-definitions.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{title:"1.4 Definitions"},sidebar:"tutorialSidebar",previous:{title:"1.3 Referenced Publications",permalink:"/cl-language-reference/chap-1/b-d-referenced-publications"},next:{title:"1.5 Conformance",permalink:"/cl-language-reference/chap-1/b-f-conformance"}},pn={},xn=[{value:"1.4.1 Notational Conventions",id:"141-notational-conventions",level:2},{value:"1.4.1.1 Font Key",id:"1411-font-key",level:3},{value:"1.4.1.2 Modified BNF Syntax",id:"1412-modified-bnf-syntax",level:3},{value:"1.4.1.2.1 Splicing in Modified BNF Syntax",id:"14121-splicing-in-modified-bnf-syntax",level:4},{value:"1.4.1.2.2 Indirection in Modified BNF Syntax",id:"14122-indirection-in-modified-bnf-syntax",level:4},{value:"1.4.1.2.3 Additional Uses for Indirect Definitions in Modified BNF Syntax",id:"14123-additional-uses-for-indirect-definitions-in-modified-bnf-syntax",level:4},{value:"1.4.1.3 Special Symbols",id:"1413-special-symbols",level:3},{value:"1.4.1.4 Objects with Multiple Notations",id:"1414-objects-with-multiple-notations",level:3},{value:"1.4.1.4.1 Case in Symbols",id:"14141-case-in-symbols",level:4},{value:"1.4.1.4.2 Numbers",id:"14142-numbers",level:4},{value:"1.4.1.4.3 Use of the Dot Character",id:"14143-use-of-the-dot-character",level:4},{value:"1.4.1.4.4 NIL",id:"14144-nil",level:4},{value:"1.4.1.5 Designators",id:"1415-designators",level:3},{value:"1.4.1.6 Nonsense Words",id:"1416-nonsense-words",level:3},{value:"1.4.2 Error Terminology",id:"142-error-terminology",level:2},{value:"1.4.3 Sections Not Formally Part Of This Standard",id:"143-sections-not-formally-part-of-this-standard",level:2},{value:"1.4.4 Interpreting Dictionary Entries",id:"144-interpreting-dictionary-entries",level:2},{value:"1.4.4.1 The \u201cAffected By\u201d Section of a Dictionary Entry",id:"1441-the-affected-by-section-of-a-dictionary-entry",level:3},{value:"1.4.4.2 The \u201cArguments\u201d Section of a Dictionary Entry",id:"1442-the-arguments-section-of-a-dictionary-entry",level:3},{value:"1.4.4.3 The \u201cArguments and Values\u201d Section of a Dictionary Entry",id:"1443-the-arguments-and-values-section-of-a-dictionary-entry",level:3},{value:"1.4.4.4 The \u201cBinding Types Affected\u201d Section of a Dictionary Entry",id:"1444-the-binding-types-affected-section-of-a-dictionary-entry",level:3},{value:"1.4.4.5 The \u201cClass Precedence List\u201d Section of a Dictionary Entry",id:"1445-the-class-precedence-list-section-of-a-dictionary-entry",level:3},{value:"1.4.4.6 Dictionary Entries for Type Specifiers",id:"1446-dictionary-entries-for-type-specifiers",level:3},{value:"1.4.4.6.1 The \u201cCompound Type Specifier Kind\u201d Section of a Dictionary Entry",id:"14461-the-compound-type-specifier-kind-section-of-a-dictionary-entry",level:4},{value:"1.4.4.6.2 The \u201cCompound Type Specifier Syntax\u201d Section of a Dictionary Entry",id:"14462-the-compound-type-specifier-syntax-section-of-a-dictionary-entry",level:4},{value:"1.4.4.6.3 The \u201cCompound Type Specifier Arguments\u201d Section of a Dictionary Entry",id:"14463-the-compound-type-specifier-arguments-section-of-a-dictionary-entry",level:4},{value:"1.4.4.6.4 The \u201cCompound Type Specifier Description\u201d Section of a Dictionary Entry",id:"14464-the-compound-type-specifier-description-section-of-a-dictionary-entry",level:4},{value:"1.4.4.7 The \u201cConstant Value\u201d Section of a Dictionary Entry",id:"1447-the-constant-value-section-of-a-dictionary-entry",level:3},{value:"1.4.4.8 The \u201cDescription\u201d Section of a Dictionary Entry",id:"1448-the-description-section-of-a-dictionary-entry",level:3},{value:"1.4.4.9 The \u201cExamples\u201d Section of a Dictionary Entry",id:"1449-the-examples-section-of-a-dictionary-entry",level:3},{value:"1.4.4.10 The \u201cExceptional Situations\u201d Section of a Dictionary Entry",id:"14410-the-exceptional-situations-section-of-a-dictionary-entry",level:3},{value:"1.4.4.11 The \u201cInitial Value\u201d Section of a Dictionary Entry",id:"14411-the-initial-value-section-of-a-dictionary-entry",level:3},{value:"1.4.4.12 The \u201cArgument Precedence Order\u201d Section of a Dictionary Entry",id:"14412-the-argument-precedence-order-section-of-a-dictionary-entry",level:3},{value:"1.4.4.13 The \u201cMethod Signature\u201d Section of a Dictionary Entry",id:"14413-the-method-signature-section-of-a-dictionary-entry",level:3},{value:"1.4.4.14 The \u201cName\u201d Section of a Dictionary Entry",id:"14414-the-name-section-of-a-dictionary-entry",level:3},{value:"1.4.4.15 The \u201cNotes\u201d Section of a Dictionary Entry",id:"14415-the-notes-section-of-a-dictionary-entry",level:3},{value:"1.4.4.16 The \u201cPronunciation\u201d Section of a Dictionary Entry",id:"14416-the-pronunciation-section-of-a-dictionary-entry",level:3},{value:"1.4.4.17 The \u201cSee Also\u201d Section of a Dictionary Entry",id:"14417-the-see-also-section-of-a-dictionary-entry",level:3},{value:"1.4.4.18 The \u201cSide Effects\u201d Section of a Dictionary Entry",id:"14418-the-side-effects-section-of-a-dictionary-entry",level:3},{value:"1.4.4.19 The \u201cSupertypes\u201d Section of a Dictionary Entry",id:"14419-the-supertypes-section-of-a-dictionary-entry",level:3},{value:"1.4.4.20 The \u201cSyntax\u201d Section of a Dictionary Entry",id:"14420-the-syntax-section-of-a-dictionary-entry",level:3},{value:"1.4.4.20.1 Special \u201cSyntax\u201d Notations for Overloaded Operators",id:"144201-special-syntax-notations-for-overloaded-operators",level:4},{value:"1.4.4.20.2 Naming Conventions for Rest Parameters",id:"144202-naming-conventions-for-rest-parameters",level:4},{value:"1.4.4.20.3 Requiring Non",id:"144203-requiring-non",level:4},{value:"1.4.4.20.4 Return values in the \u201cSyntax\u201d Section",id:"144204-return-values-in-the-syntax-section",level:4},{value:"1.4.4.20.4.1 No Arguments or Values in the \u201cSyntax\u201d Section",id:"1442041-no-arguments-or-values-in-the-syntax-section",level:5},{value:"1.4.4.20.4.2 Unconditional Transfer of Control in the \u201cSyntax\u201d Section",id:"1442042-unconditional-transfer-of-control-in-the-syntax-section",level:5},{value:"1.4.4.21 The \u201cValid Context\u201d Section of a Dictionary Entry",id:"14421-the-valid-context-section-of-a-dictionary-entry",level:3},{value:"1.4.4.22 The \u201cValue Type\u201d Section of a Dictionary Entry",id:"14422-the-value-type-section-of-a-dictionary-entry",level:3}];function jn(e){const n={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",p:"p",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"14-definitions",children:"1.4 Definitions"}),"\n","\n",(0,t.jsx)(o,{}),"\n",(0,t.jsx)(n.h2,{id:"141-notational-conventions",children:"1.4.1 Notational Conventions"}),"\n","\n",(0,t.jsx)(d,{}),"\n",(0,t.jsx)(n.h3,{id:"1411-font-key",children:"1.4.1.1 Font Key"}),"\n","\n",(0,t.jsx)(a,{}),"\n",(0,t.jsx)(n.h3,{id:"1412-modified-bnf-syntax",children:"1.4.1.2 Modified BNF Syntax"}),"\n","\n",(0,t.jsx)(m,{}),"\n",(0,t.jsx)(n.h4,{id:"14121-splicing-in-modified-bnf-syntax",children:"1.4.1.2.1 Splicing in Modified BNF Syntax"}),"\n","\n",(0,t.jsx)(x,{}),"\n",(0,t.jsx)(n.h4,{id:"14122-indirection-in-modified-bnf-syntax",children:"1.4.1.2.2 Indirection in Modified BNF Syntax"}),"\n","\n",(0,t.jsx)(y,{}),"\n",(0,t.jsx)(n.h4,{id:"14123-additional-uses-for-indirect-definitions-in-modified-bnf-syntax",children:"1.4.1.2.3 Additional Uses for Indirect Definitions in Modified BNF Syntax"}),"\n","\n",(0,t.jsx)(f,{}),"\n",(0,t.jsx)(n.h3,{id:"1413-special-symbols",children:"1.4.1.3 Special Symbols"}),"\n","\n",(0,t.jsx)(b,{}),"\n",(0,t.jsx)(n.h3,{id:"1414-objects-with-multiple-notations",children:"1.4.1.4 Objects with Multiple Notations"}),"\n","\n",(0,t.jsx)(T,{}),"\n",(0,t.jsx)(n.h4,{id:"14141-case-in-symbols",children:"1.4.1.4.1 Case in Symbols"}),"\n","\n",(0,t.jsx)(S,{}),"\n",(0,t.jsx)(n.h4,{id:"14142-numbers",children:"1.4.1.4.2 Numbers"}),"\n","\n",(0,t.jsx)(k,{}),"\n",(0,t.jsx)(n.h4,{id:"14143-use-of-the-dot-character",children:"1.4.1.4.3 Use of the Dot Character"}),"\n","\n",(0,t.jsx)(C,{}),"\n",(0,t.jsx)(n.h4,{id:"14144-nil",children:"1.4.1.4.4 NIL"}),"\n","\n",(0,t.jsx)(N,{}),"\n",(0,t.jsx)(n.h3,{id:"1415-designators",children:"1.4.1.5 Designators"}),"\n","\n",(0,t.jsx)(L,{}),"\n",(0,t.jsx)(n.h3,{id:"1416-nonsense-words",children:"1.4.1.6 Nonsense Words"}),"\n","\n",(0,t.jsx)(z,{}),"\n",(0,t.jsx)(n.h2,{id:"142-error-terminology",children:"1.4.2 Error Terminology"}),"\n","\n",(0,t.jsx)(W,{}),"\n",(0,t.jsx)(n.p,{children:"A warning might be issued"}),"\n","\n",(0,t.jsx)(V,{}),"\n",(0,t.jsx)(n.h2,{id:"143-sections-not-formally-part-of-this-standard",children:"1.4.3 Sections Not Formally Part Of This Standard"}),"\n","\n",(0,t.jsx)(H,{}),"\n",(0,t.jsx)(n.h2,{id:"144-interpreting-dictionary-entries",children:"1.4.4 Interpreting Dictionary Entries"}),"\n","\n",(0,t.jsx)(_,{}),"\n",(0,t.jsx)(n.h3,{id:"1441-the-affected-by-section-of-a-dictionary-entry",children:"1.4.4.1 The \u201cAffected By\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(Y,{}),"\n",(0,t.jsx)(n.h3,{id:"1442-the-arguments-section-of-a-dictionary-entry",children:"1.4.4.2 The \u201cArguments\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(Z,{}),"\n",(0,t.jsx)(n.h3,{id:"1443-the-arguments-and-values-section-of-a-dictionary-entry",children:"1.4.4.3 The \u201cArguments and Values\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)($,{}),"\n",(0,t.jsx)(n.h3,{id:"1444-the-binding-types-affected-section-of-a-dictionary-entry",children:"1.4.4.4 The \u201cBinding Types Affected\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(ne,{}),"\n",(0,t.jsx)(n.h3,{id:"1445-the-class-precedence-list-section-of-a-dictionary-entry",children:"1.4.4.5 The \u201cClass Precedence List\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(te,{}),"\n",(0,t.jsx)(n.h3,{id:"1446-dictionary-entries-for-type-specifiers",children:"1.4.4.6 Dictionary Entries for Type Specifiers"}),"\n","\n",(0,t.jsx)(oe,{}),"\n",(0,t.jsx)(n.h4,{id:"14461-the-compound-type-specifier-kind-section-of-a-dictionary-entry",children:"1.4.4.6.1 The \u201cCompound Type Specifier Kind\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(de,{}),"\n",(0,t.jsx)(n.h4,{id:"14462-the-compound-type-specifier-syntax-section-of-a-dictionary-entry",children:"1.4.4.6.2 The \u201cCompound Type Specifier Syntax\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(ae,{}),"\n",(0,t.jsx)(n.h4,{id:"14463-the-compound-type-specifier-arguments-section-of-a-dictionary-entry",children:"1.4.4.6.3 The \u201cCompound Type Specifier Arguments\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(me,{}),"\n",(0,t.jsx)(n.h4,{id:"14464-the-compound-type-specifier-description-section-of-a-dictionary-entry",children:"1.4.4.6.4 The \u201cCompound Type Specifier Description\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(xe,{}),"\n",(0,t.jsx)(n.h3,{id:"1447-the-constant-value-section-of-a-dictionary-entry",children:"1.4.4.7 The \u201cConstant Value\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(ye,{}),"\n",(0,t.jsx)(n.h3,{id:"1448-the-description-section-of-a-dictionary-entry",children:"1.4.4.8 The \u201cDescription\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(fe,{}),"\n",(0,t.jsx)(n.h3,{id:"1449-the-examples-section-of-a-dictionary-entry",children:"1.4.4.9 The \u201cExamples\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(be,{}),"\n",(0,t.jsx)(n.h3,{id:"14410-the-exceptional-situations-section-of-a-dictionary-entry",children:"1.4.4.10 The \u201cExceptional Situations\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(we,{}),"\n",(0,t.jsx)(n.h3,{id:"14411-the-initial-value-section-of-a-dictionary-entry",children:"1.4.4.11 The \u201cInitial Value\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(Ee,{}),"\n",(0,t.jsx)(n.h3,{id:"14412-the-argument-precedence-order-section-of-a-dictionary-entry",children:"1.4.4.12 The \u201cArgument Precedence Order\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(Fe,{}),"\n",(0,t.jsx)(n.h3,{id:"14413-the-method-signature-section-of-a-dictionary-entry",children:"1.4.4.13 The \u201cMethod Signature\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(De,{}),"\n",(0,t.jsx)(n.h3,{id:"14414-the-name-section-of-a-dictionary-entry",children:"1.4.4.14 The \u201cName\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(Ge,{}),"\n",(0,t.jsx)(n.h3,{id:"14415-the-notes-section-of-a-dictionary-entry",children:"1.4.4.15 The \u201cNotes\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(Ie,{}),"\n",(0,t.jsx)(n.h3,{id:"14416-the-pronunciation-section-of-a-dictionary-entry",children:"1.4.4.16 The \u201cPronunciation\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(qe,{}),"\n",(0,t.jsx)(n.h3,{id:"14417-the-see-also-section-of-a-dictionary-entry",children:"1.4.4.17 The \u201cSee Also\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(ze,{}),"\n",(0,t.jsx)(n.h3,{id:"14418-the-side-effects-section-of-a-dictionary-entry",children:"1.4.4.18 The \u201cSide Effects\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(We,{}),"\n",(0,t.jsx)(n.h3,{id:"14419-the-supertypes-section-of-a-dictionary-entry",children:"1.4.4.19 The \u201cSupertypes\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(Re,{}),"\n",(0,t.jsx)(n.h3,{id:"14420-the-syntax-section-of-a-dictionary-entry",children:"1.4.4.20 The \u201cSyntax\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(Ue,{}),"\n",(0,t.jsx)(n.h4,{id:"144201-special-syntax-notations-for-overloaded-operators",children:"1.4.4.20.1 Special \u201cSyntax\u201d Notations for Overloaded Operators"}),"\n","\n",(0,t.jsx)(Ke,{}),"\n",(0,t.jsx)(n.h4,{id:"144202-naming-conventions-for-rest-parameters",children:"1.4.4.20.2 Naming Conventions for Rest Parameters"}),"\n","\n",(0,t.jsx)(Ye,{}),"\n",(0,t.jsx)(n.h4,{id:"144203-requiring-non",children:"1.4.4.20.3 Requiring Non"}),"\n","\n",(0,t.jsx)(Ze,{}),"\n",(0,t.jsx)(n.h4,{id:"144204-return-values-in-the-syntax-section",children:"1.4.4.20.4 Return values in the \u201cSyntax\u201d Section"}),"\n","\n",(0,t.jsx)($e,{}),"\n",(0,t.jsx)(n.h5,{id:"1442041-no-arguments-or-values-in-the-syntax-section",children:"1.4.4.20.4.1 No Arguments or Values in the \u201cSyntax\u201d Section"}),"\n","\n",(0,t.jsx)(nn,{}),"\n",(0,t.jsx)(n.h5,{id:"1442042-unconditional-transfer-of-control-in-the-syntax-section",children:"1.4.4.20.4.2 Unconditional Transfer of Control in the \u201cSyntax\u201d Section"}),"\n","\n",(0,t.jsx)(sn,{}),"\n",(0,t.jsx)(n.h3,{id:"14421-the-valid-context-section-of-a-dictionary-entry",children:"1.4.4.21 The \u201cValid Context\u201d Section of a Dictionary Entry"}),"\n","\n",(0,t.jsx)(on,{}),"\n",(0,t.jsx)(n.h3,{id:"14422-the-value-type-section-of-a-dictionary-entry",children:"1.4.4.22 The \u201cValue Type\u201d Section of a Dictionary Entry"}),"\n","\n","\n",(0,t.jsx)(ln,{})]})}function yn(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(jn,{...e})}):jn(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>o});var t=i(67294);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);