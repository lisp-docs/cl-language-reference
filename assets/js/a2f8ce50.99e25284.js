"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[84255],{23371:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>d,toc:()=>h});var o=r(85893),t=r(11151);function i(n){const e={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"error"})," ",(0,o.jsx)(e.em,{children:"Function"})]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Syntax:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"error"})," ",(0,o.jsx)(e.em,{children:"datum"})," &rest ",(0,o.jsx)(e.em,{children:"arguments \u2192"})]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Arguments and Values:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.em,{children:"datum"}),", ",(0,o.jsx)(e.em,{children:"arguments"}),"\u2014",(0,o.jsx)(e.em,{children:"designators"})," for a ",(0,o.jsx)(e.em,{children:"condition"})," of default type ",(0,o.jsx)(e.strong,{children:"simple-error"}),"."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Description:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"error"})," effectively invokes ",(0,o.jsx)(e.strong,{children:"signal"})," on the denoted ",(0,o.jsx)(e.em,{children:"condition"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:["If the ",(0,o.jsx)(e.em,{children:"condition"})," is not handled, (invoke-debugger ",(0,o.jsx)(e.em,{children:"condition"}),") is done. As a consequence of calling ",(0,o.jsx)(e.strong,{children:"invoke-debugger"}),", ",(0,o.jsx)(e.strong,{children:"error"})," cannot directly return; the only exit from ",(0,o.jsx)(e.strong,{children:"error"})," can come by non-local transfer of control in a handler or by use of an interactive debugging command."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Examples:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lisp",children:' \n\n\n\n(defun factorial (x) \n\n\n\n(cond ((or (not (typep x \u2019integer)) (minusp x)) \n\n\n\n(error "~S is not a valid argument to FACTORIAL." x)) \n\n\n\n((zerop x) 1) \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n**error** \n\n\n\n(t (\\* x (factorial (- x 1)))))) \n\n\n\n*\u2192* FACTORIAL \n\n\n\n(factorial 20) \n\n\n\n*\u2192* 2432902008176640000 \n\n\n\n(factorial -1) \n\n\n\n\u25b7 Error: -1 is not a valid argument to FACTORIAL. \n\n\n\n\u25b7 To continue, type :CONTINUE followed by an option number: \n\n\n\n\u25b7 1: Return to Lisp Toplevel. \n\n\n\n\u25b7 Debug> \n\n\n\n(setq a \u2019fred) \n\n\n\n*\u2192* FRED \n\n\n\n(if (numberp a) (1+ a) (error "~S is not a number." A)) \n\n\n\n\u25b7 Error: FRED is not a number. \n\n\n\n\u25b7 To continue, type :CONTINUE followed by an option number: \n\n\n\n\u25b7 1: Return to Lisp Toplevel. \n\n\n\n\u25b7 Debug> :Continue 1 \n\n\n\n\u25b7 Return to Lisp Toplevel. \n\n\n\n(define-condition not-a-number (error) \n\n\n\n((argument :reader not-a-number-argument :initarg :argument)) \n\n\n\n(:report (lambda (condition stream) \n\n\n\n(format stream "~S is not a number." \n\n\n\n(not-a-number-argument condition))))) \n\n\n\n*\u2192* NOT-A-NUMBER \n\n\n\n(if (numberp a) (1+ a) (error \u2019not-a-number :argument a)) \n\n\n\n\u25b7 Error: FRED is not a number. \n\n\n\n\u25b7 To continue, type :CONTINUE followed by an option number: \n\n\n\n\u25b7 1: Return to Lisp Toplevel. \n\n\n\n\u25b7 Debug> :Continue 1 \n\n\n\n\u25b7 Return to Lisp Toplevel. \n\n\n\n\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Side Effects:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.em,{children:"Handlers"})," for the specified condition, if any, are invoked and might have side effects. Program execution might stop, and the debugger might be entered."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Affected By:"})}),"\n",(0,o.jsx)(e.p,{children:"Existing handler bindings."}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"*break-on-signals*"})}),"\n",(0,o.jsxs)(e.p,{children:["Signals an error of ",(0,o.jsx)(e.em,{children:"type"})," ",(0,o.jsx)(e.strong,{children:"type-error"})," if ",(0,o.jsx)(e.em,{children:"datum"})," and ",(0,o.jsx)(e.em,{children:"arguments"})," are not ",(0,o.jsx)(e.em,{children:"designators"})," for a ",(0,o.jsx)(e.em,{children:"condition"}),"."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"See Also:"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"cerror"}),", ",(0,o.jsx)(e.strong,{children:"signal"}),", ",(0,o.jsx)(e.strong,{children:"format"}),", ",(0,o.jsx)(e.strong,{children:"ignore-errors"}),", ",(0,o.jsx)(e.strong,{children:"*break-on-signals*"}),", ",(0,o.jsx)(e.strong,{children:"handler-bind"}),", Section 9.1 (Condition"]}),"\n",(0,o.jsx)(e.p,{children:"System Concepts)"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Notes:"})}),"\n",(0,o.jsx)(e.p,{children:"Some implementations may provide debugger commands for interactively returning from individual stack frames. However, it should be possible for the programmer to feel confident about writing code like:"}),"\n",(0,o.jsxs)(e.p,{children:["(defun wargames",":no-win-scenario"," ()"]}),"\n",(0,o.jsx)(e.p,{children:'(if (error "pushing the button would be stupid."))'}),"\n",(0,o.jsx)(e.p,{children:"(push-the-button))"}),"\n",(0,o.jsxs)(e.p,{children:["In this scenario, there should be no chance that ",(0,o.jsx)(e.strong,{children:"error"})," will return and the button will get pushed."]}),"\n",(0,o.jsx)(e.p,{children:"While the meaning of this program is clear and it might be proven \u2018safe\u2019 by a formal theorem prover, such a proof is no guarantee that the program is safe to execute. Compilers have been known to have bugs, computers to have signal glitches, and human beings to manually intervene in ways that are not always possible to predict. Those kinds of errors, while beyond the scope of the condition system to formally model, are not beyond the scope of things that should seriously be considered when writing code that could have the kinds of sweeping effects hinted at by this example."})]})}function s(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(i,{...n})}):i(n)}const c={},a="error",d={id:"chap-9/j-c-dictionary/error",title:"error",description:"Expanded Reference: error",source:"@site/docs/chap-9/j-c-dictionary/error.md",sourceDirName:"chap-9/j-c-dictionary",slug:"/chap-9/j-c-dictionary/error",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/error",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-9/j-c-dictionary/error.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"define-condition",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/definecondition"},next:{title:"find-restart",permalink:"/cl-language-reference/docs/chap-9/j-c-dictionary/findrestart"}},l={},h=[{value:"Expanded Reference: error",id:"expanded-reference-error",level:2}];function p(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"error",children:"error"}),"\n","\n","\n",(0,o.jsx)(s,{}),"\n",(0,o.jsx)(e.h2,{id:"expanded-reference-error",children:"Expanded Reference: error"}),"\n",(0,o.jsx)(e.admonition,{type:"tip",children:(0,o.jsx)(e.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lisp",children:"(error )\n"})})]})}function u(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(p,{...n})}):p(n)}},11151:(n,e,r)=>{r.d(e,{Z:()=>c,a:()=>s});var o=r(67294);const t={},i=o.createContext(t);function s(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);