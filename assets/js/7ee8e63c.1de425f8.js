"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[51717],{95366:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>h,contentTitle:()=>d,default:()=>x,frontMatter:()=>c,metadata:()=>a,toc:()=>o});var s=t(85893),l=t(11151);function r(n){const e={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,l.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"list-length"})," ",(0,s.jsx)(e.em,{children:"Function"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"list-length"})," ",(0,s.jsx)(e.em,{children:"list \u2192 length"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.em,{children:"list"}),"\u2014a ",(0,s.jsx)(e.em,{children:"proper list"})," or a ",(0,s.jsx)(e.em,{children:"circular list"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.em,{children:"length"}),"\u2014a non-negative ",(0,s.jsx)(e.em,{children:"integer"})," , or ",(0,s.jsx)(e.strong,{children:"nil"}),"."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(e.p,{children:["Returns the ",(0,s.jsx)(e.em,{children:"length"})," of ",(0,s.jsx)(e.em,{children:"list"})," if ",(0,s.jsx)(e.em,{children:"list"})," is a ",(0,s.jsx)(e.em,{children:"proper list"}),". Returns ",(0,s.jsx)(e.strong,{children:"nil"})," if ",(0,s.jsx)(e.em,{children:"list"})," is a ",(0,s.jsx)(e.em,{children:"circular list"}),"."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lisp",children:" \n\n\n\n(list-length \u2019(a b c d)) *\u2192* 4 \n\n\n\n(list-length \u2019(a (b c) d)) *\u2192* 3 \n\n\n\n(list-length \u2019()) *\u2192* 0 \n\n\n\n(list-length nil) *\u2192* 0 \n\n\n\n(defun circular-list (&amp;rest elements) \n\n\n\n(let ((cycle (copy-list elements))) \n\n\n\n(nconc cycle cycle))) \n\n\n\n(list-length (circular-list \u2019a \u2019b)) *\u2192* NIL \n\n\n\n(list-length (circular-list \u2019a)) *\u2192* NIL \n\n\n\n(list-length (circular-list)) *\u2192* 0 \n\n\n\n\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Exceptional Situations:"})}),"\n",(0,s.jsxs)(e.p,{children:["Should signal an error of ",(0,s.jsx)(e.em,{children:"type"})," ",(0,s.jsx)(e.strong,{children:"type-error"})," if ",(0,s.jsx)(e.em,{children:"list"})," is not a ",(0,s.jsx)(e.em,{children:"proper list"})," or a ",(0,s.jsx)(e.em,{children:"circular list"}),"."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"length"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"list-length"})," could be implemented as follows:"]}),"\n",(0,s.jsx)(e.p,{children:"(defun list-length (x)"}),"\n",(0,s.jsx)(e.p,{children:"(do ((n 0 (+ n 2)) ;Counter."}),"\n",(0,s.jsx)(e.p,{children:"(fast x (cddr fast)) ;Fast pointer: leaps by 2."}),"\n",(0,s.jsx)(e.p,{children:"(slow x (cdr slow))) ;Slow pointer: leaps by 1."}),"\n",(0,s.jsx)(e.p,{children:"(nil)"}),"\n",(0,s.jsx)(e.p,{children:";; If fast pointer hits the end, return the count."}),"\n",(0,s.jsx)(e.p,{children:"(when (endp fast) (return n))"}),"\n",(0,s.jsx)(e.p,{children:"(when (endp (cdr fast)) (return (+ n 1)))"}),"\n",(0,s.jsx)(e.p,{children:";; If fast pointer eventually equals slow pointer,"}),"\n",(0,s.jsx)(e.p,{children:";; then we must be stuck in a circular list."}),"\n",(0,s.jsx)(e.p,{children:";; (A deeper property is the converse: if we are"}),"\n",(0,s.jsx)(e.p,{children:";; stuck in a circular list, then eventually the"}),"\n",(0,s.jsx)(e.p,{children:";; fast pointer will equal the slow pointer."}),"\n",(0,s.jsx)(e.p,{children:";; That fact justifies this implementation.)"}),"\n",(0,s.jsx)(e.p,{children:"(when (and (eq fast slow) (> n 0)) (return nil))))"})]})}function i(n={}){const{wrapper:e}={...(0,l.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(r,{...n})}):r(n)}const c={},d="list-length",a={id:"chap-14/be-c-dictionary/listlength",title:"list-length",description:"Expanded Reference: list-length",source:"@site/docs/chap-14/be-c-dictionary/listlength.md",sourceDirName:"chap-14/be-c-dictionary",slug:"/chap-14/be-c-dictionary/listlength",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/listlength",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-14/be-c-dictionary/listlength.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"list",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/list"},next:{title:"listp",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/listp"}},h={},o=[{value:"Expanded Reference: list-length",id:"expanded-reference-list-length",level:2}];function p(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,l.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"list-length",children:"list-length"}),"\n","\n","\n",(0,s.jsx)(i,{}),"\n",(0,s.jsx)(e.h2,{id:"expanded-reference-list-length",children:"Expanded Reference: list-length"}),"\n",(0,s.jsx)(e.admonition,{type:"tip",children:(0,s.jsx)(e.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lisp",children:"(list-length )\n"})})]})}function x(n={}){const{wrapper:e}={...(0,l.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(p,{...n})}):p(n)}},11151:(n,e,t)=>{t.d(e,{Z:()=>c,a:()=>i});var s=t(67294);const l={},r=s.createContext(l);function i(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:i(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);