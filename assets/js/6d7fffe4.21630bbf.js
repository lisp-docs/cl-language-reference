"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[11471],{28071:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>c,metadata:()=>i,toc:()=>o});var a=s(85893),t=s(11151);const c={},r="make-instance",i={id:"meta-object-protocol/make-instance",title:"make-instance",description:"Generic Function MAKE-INSTANCE",source:"@site/docs/meta-object-protocol/make-instance.md",sourceDirName:"meta-object-protocol",slug:"/meta-object-protocol/make-instance",permalink:"/cl-language-reference/meta-object-protocol/make-instance",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/make-instance.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"make-instance-symbol",permalink:"/cl-language-reference/meta-object-protocol/make-instance-symbol"},next:{title:"make-method-lambda-standard-generic-function-standard-method",permalink:"/cl-language-reference/meta-object-protocol/make-method-lambda-standard-generic-function-standard-method"}},l={},o=[{value:"<strong>make-instance</strong> (<em>class</em> symbol) <code>&amp;rest</code> <em>initargs</em>\n<strong>make-instance</strong> (<em>class</em> standard-class) <code>&amp;rest</code> <em>initargs</em>\n<strong>make-instance</strong> (<em>class</em> funcallable-standard-class) <code>&amp;rest</code> <em>initargs</em>",id:"make-instance-class-symbol-rest-initargsmake-instance-class-standard-class-rest-initargsmake-instance-class-funcallable-standard-class-rest-initargs",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"make-instance",children:"make-instance"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Generic Function"})," ",(0,a.jsx)(n.strong,{children:"MAKE-INSTANCE"})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"make-instance"})," ",(0,a.jsx)(n.em,{children:"class"})," ",(0,a.jsx)(n.code,{children:"&rest"})," ",(0,a.jsx)(n.em,{children:"initargs"})," => ",(0,a.jsx)(n.em,{children:"instance"})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Arguments and values:"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"class"})," -- A class metaobject or a class name."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"initargs"})," -- A list of alternating initialization argument names and values."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"instance"})," -- A newly allocated and initialized instance of ",(0,a.jsx)(n.em,{children:"class"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsxs)(n.p,{children:["The generic function ",(0,a.jsx)(n.code,{children:"make-instance"})," creates and returns a new instance of the given class. Its behavior and use is described in the CLOS specification."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"make-instance-class-symbol-rest-initargsmake-instance-class-standard-class-rest-initargsmake-instance-class-funcallable-standard-class-rest-initargs",children:[(0,a.jsxs)(n.a,{href:"/meta-object-protocol/make-instance-symbol",children:[(0,a.jsx)(n.strong,{children:"make-instance"})," (",(0,a.jsx)(n.em,{children:"class"})," symbol) ",(0,a.jsx)(n.code,{children:"&rest"})," ",(0,a.jsx)(n.em,{children:"initargs"})]}),"\n",(0,a.jsxs)(n.a,{href:"/meta-object-protocol/make-instance-standard-class",children:[(0,a.jsx)(n.strong,{children:"make-instance"})," (",(0,a.jsx)(n.em,{children:"class"})," standard-class) ",(0,a.jsx)(n.code,{children:"&rest"})," ",(0,a.jsx)(n.em,{children:"initargs"})]}),"\n",(0,a.jsxs)(n.a,{href:"/meta-object-protocol/make-instance-funcallable-standard-class",children:[(0,a.jsx)(n.strong,{children:"make-instance"})," (",(0,a.jsx)(n.em,{children:"class"})," funcallable-standard-class) ",(0,a.jsx)(n.code,{children:"&rest"})," ",(0,a.jsx)(n.em,{children:"initargs"})]})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Comments and remarks:"})}),"\n",(0,a.jsxs)(n.p,{children:["See also",(0,a.jsx)(n.a,{href:"http://www.lispworks.com/documentation/HyperSpec/Body/f_mk_ins.htm#make-instance",children:"the entry in the Common Lisp HyperSpec"})," for this function."]})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>i,a:()=>r});var a=s(67294);const t={},c=a.createContext(t);function r(e){const n=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(c.Provider,{value:n},e.children)}}}]);