"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[29799],{42350:(e,c,s)=>{s.r(c),s.d(c,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>i});var t=s(85893),n=s(11151);const r={},o="compute-class-precedence-list-class",l={id:"meta-object-protocol/compute-class-precedence-list-class",title:"compute-class-precedence-list-class",description:"Method COMPUTE-CLASS-PRECEDENCE-LIST",source:"@site/docs/meta-object-protocol/compute-class-precedence-list-class.md",sourceDirName:"meta-object-protocol",slug:"/meta-object-protocol/compute-class-precedence-list-class",permalink:"/cl-language-reference/meta-object-protocol/compute-class-precedence-list-class",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/compute-class-precedence-list-class.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"compute-applicable-methods",permalink:"/cl-language-reference/meta-object-protocol/compute-applicable-methods"},next:{title:"compute-class-precedence-list",permalink:"/cl-language-reference/meta-object-protocol/compute-class-precedence-list"}},a={},i=[];function p(e){const c={a:"a",em:"em",h1:"h1",p:"p",strong:"strong",...(0,n.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(c.h1,{id:"compute-class-precedence-list-class",children:"compute-class-precedence-list-class"}),"\n",(0,t.jsxs)(c.p,{children:[(0,t.jsx)(c.em,{children:"Method"})," ",(0,t.jsx)(c.strong,{children:"COMPUTE-CLASS-PRECEDENCE-LIST"})]}),"\n",(0,t.jsx)(c.p,{children:(0,t.jsx)(c.strong,{children:"Syntax:"})}),"\n",(0,t.jsxs)(c.p,{children:[(0,t.jsx)(c.strong,{children:"compute-class-precedence-list"})," ",(0,t.jsx)(c.em,{children:"(class"})," class) => ",(0,t.jsx)(c.em,{children:"precedence-list"})]}),"\n",(0,t.jsx)(c.p,{children:(0,t.jsx)(c.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(c.p,{children:["This is a method on the generic function",(0,t.jsx)(c.a,{href:"/meta-object-protocol/compute-class-precedence-list",children:"compute-class-precedence-list"}),"."]}),"\n",(0,t.jsxs)(c.p,{children:["This method computes the class precedence list according to the rules described in the section of the CLOS Specification called ",(0,t.jsx)(c.a,{href:"http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node274.md#SECTION003215000000000000000",children:"``Determining the Class Precedence List.''"})]}),"\n",(0,t.jsxs)(c.p,{children:["This method signals an error if ",(0,t.jsx)(c.em,{children:"class"})," or any of its superclasses is a forward referenced class."]}),"\n",(0,t.jsx)(c.p,{children:"This method can be overridden."})]})}function d(e={}){const{wrapper:c}={...(0,n.a)(),...e.components};return c?(0,t.jsx)(c,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},11151:(e,c,s)=>{s.d(c,{Z:()=>l,a:()=>o});var t=s(67294);const n={},r=t.createContext(n);function o(e){const c=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(c):{...c,...e}}),[c,e])}function l(e){let c;return c=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),t.createElement(r.Provider,{value:c},e.children)}}}]);