"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[37914],{57026:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>h});var t=r(85893),s=r(11151);function a(e){const n={admonition:"admonition",code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"and"})," ",(0,t.jsx)(n.em,{children:"Macro"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"and"})," ",(0,t.jsx)(n.em,{children:"{form}"}),"* \u2192 {result}*"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"form"}),"\u2014a ",(0,t.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"results"}),"\u2014the ",(0,t.jsx)(n.em,{children:"values"})," resulting from the evaluation of the last ",(0,t.jsx)(n.em,{children:"form"}),", or the symbols ",(0,t.jsx)(n.strong,{children:"nil"})," or ",(0,t.jsx)(n.strong,{children:"t"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Description:"})}),"\n",(0,t.jsxs)(n.p,{children:["The macro ",(0,t.jsx)(n.strong,{children:"and"})," evaluates each ",(0,t.jsx)(n.em,{children:"form"})," one at a time from left to right. As soon as any ",(0,t.jsx)(n.em,{children:"form"})," evaluates to ",(0,t.jsx)(n.strong,{children:"nil"}),", ",(0,t.jsx)(n.strong,{children:"and"})," returns ",(0,t.jsx)(n.strong,{children:"nil"})," without evaluating the remaining ",(0,t.jsx)(n.em,{children:"forms"}),". If all ",(0,t.jsx)(n.em,{children:"forms"})," but the last evaluate to ",(0,t.jsx)(n.em,{children:"true"})," values, ",(0,t.jsx)(n.strong,{children:"and"})," returns the results produced by evaluating the last ",(0,t.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If no ",(0,t.jsx)(n.em,{children:"forms"})," are supplied, (and) returns ",(0,t.jsx)(n.strong,{children:"t"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"and"})," passes back multiple values from the last ",(0,t.jsx)(n.em,{children:"subform"})," but not from subforms other than the last."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:'\n(if (and (>= n 0) \n\n\n\n  (< n (length a-simple-vector)) \n  (eq (elt a-simple-vector n) \u2019foo)) \n    (princ "Foo!")) \n'})}),"\n",(0,t.jsxs)(n.p,{children:["The above expression prints Foo! if element n of a-simple-vector is the symbol foo, provided also that n is indeed a valid index for a-simple-vector. Because ",(0,t.jsx)(n.strong,{children:"and"})," guarantees left-to-right testing of its parts, ",(0,t.jsx)(n.strong,{children:"elt"})," is not called if n is out of range."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"(defparameter temp1 1) \u2192 temp1\n(defparameter temp2 1) \u2192 temp2\n(defparameter temp3 1) \u2192 temp3\n(and (incf temp1) (incf temp2) (incf temp3)) \u2192 2 \n(and (eql 2 temp1) (eql 2 temp2) (eql 2 temp3)) \u2192 true \n(decf temp3) \u2192 1 \n(and (decf temp1) (decf temp2) (eq temp3 \u2019nil) (decf temp3)) \u2192 NIL \n(and (eql temp1 temp2) (eql temp2 temp3)) \u2192 true \n(and) \u2192 T \n\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"cond"}),", ",(0,t.jsx)(n.strong,{children:"every"}),", ",(0,t.jsx)(n.strong,{children:"if"}),", ",(0,t.jsx)(n.strong,{children:"or"}),", ",(0,t.jsx)(n.strong,{children:"when"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lisp",children:"(and *form*) *\u2261* (let () *form*)\n(and *form1 form2* ...) *\u2261* (when *form1* (and *form2* ...))\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["We fixed the examples so that it uses ",(0,t.jsx)(n.strong,{children:"defparameter"})," to initialize the variables.  and we added a paragraph explaining why ",(0,t.jsx)(n.strong,{children:"and"})," must be defined as a macro, and the consequences of it being defined as a macro."]})})]})}function o(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}const i={title:"and"},d="and",c={id:"chap-5/f-d-dictionary/and_macro",title:"and",description:"Expanded Reference: and",source:"@site/docs/chap-5/f-d-dictionary/and_macro.md",sourceDirName:"chap-5/f-d-dictionary",slug:"/chap-5/f-d-dictionary/and_macro",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/and_macro",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-5/f-d-dictionary/and_macro.md",tags:[],version:"current",frontMatter:{title:"and"},sidebar:"tutorialSidebar",previous:{title:"5.3 Data and Control Flow Dictionary",permalink:"/cl-language-reference/docs/category/53-data-and-control-flow-dictionary"},next:{title:"apply",permalink:"/cl-language-reference/docs/chap-5/f-d-dictionary/apply_function"}},l={},h=[{value:"Expanded Reference: and",id:"expanded-reference-and",level:2}];function p(e){const n={em:"em",h1:"h1",h2:"h2",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"and",children:"and"}),"\n","\n","\n",(0,t.jsx)(o,{}),"\n",(0,t.jsx)(n.h2,{id:"expanded-reference-and",children:"Expanded Reference: and"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"and"})," is defined as a macro because it stops evaluating as soon as any ",(0,t.jsx)(n.em,{children:"form"})," evaluates to ",(0,t.jsx)(n.strong,{children:"nil"}),".  If it were defined as a function, every ",(0,t.jsx)(n.em,{children:"form"})," would be evaluated before the function was applied.  As a result of ",(0,t.jsx)(n.strong,{children:"and"})," not being a function, it can not be used with ",(0,t.jsx)(n.strong,{children:"apply"}),".  In order to check that every value of a list is ",(0,t.jsx)(n.em,{children:"true"}),", the function ",(0,t.jsx)(n.strong,{children:"every"})," could be used."]})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>i,a:()=>o});var t=r(67294);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);