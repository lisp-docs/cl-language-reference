"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[76773],{7787:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>d,metadata:()=>a,toc:()=>h});var s=r(85893),t=r(11151);function i(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"do, do"}),(0,s.jsx)(n.em,{children:"\u2217 Macro"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"do"})," (",(0,s.jsx)(n.em,{children:"{var |"})," (",(0,s.jsx)(n.em,{children:"var"})," [",(0,s.jsx)(n.em,{children:"init-form"})," [",(0,s.jsx)(n.em,{children:"step-form"}),"]])",(0,s.jsx)(n.em,{children:"}"}),"*)"]}),"\n",(0,s.jsxs)(n.p,{children:["(",(0,s.jsx)(n.em,{children:"end-test-form {result-form}"}),"*)"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"{declaration}"}),"* ",(0,s.jsx)(n.em,{children:"{tag | statement}"}),"*"]}),"\n",(0,s.jsx)(n.p,{children:"\u2192 {result}*"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"do*"})," (",(0,s.jsx)(n.em,{children:"{var |"})," (",(0,s.jsx)(n.em,{children:"var"})," [",(0,s.jsx)(n.em,{children:"init-form"})," [",(0,s.jsx)(n.em,{children:"step-form"}),"]])",(0,s.jsx)(n.em,{children:"}"}),"*)"]}),"\n",(0,s.jsxs)(n.p,{children:["(",(0,s.jsx)(n.em,{children:"end-test-form {result-form}"}),"*)"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"{declaration}"}),"* ",(0,s.jsx)(n.em,{children:"{tag | statement}"}),"*"]}),"\n",(0,s.jsx)(n.p,{children:"\u2192 {result}*"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"var"}),"\u2014a ",(0,s.jsx)(n.em,{children:"symbol"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"init-form"}),"\u2014a ",(0,s.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"step-form"}),"\u2014a ",(0,s.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"end-test-form"}),"\u2014a ",(0,s.jsx)(n.em,{children:"form"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"result-forms"}),"\u2014an ",(0,s.jsx)(n.em,{children:"implicit progn"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"declaration"}),"\u2014a ",(0,s.jsx)(n.strong,{children:"declare"})," ",(0,s.jsx)(n.em,{children:"expression"}),"; not evaluated."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"tag"}),"\u2014a ",(0,s.jsx)(n.em,{children:"go tag"}),"; not evaluated."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"statement"}),"\u2014a ",(0,s.jsx)(n.em,{children:"compound form"}),"; evaluated as described below."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"results"}),"\u2014if a ",(0,s.jsx)(n.strong,{children:"return"})," or ",(0,s.jsx)(n.strong,{children:"return-from"})," form is executed, the ",(0,s.jsx)(n.em,{children:"values"})," passed from that ",(0,s.jsx)(n.em,{children:"form"}),"; otherwise, the ",(0,s.jsx)(n.em,{children:"values"})," returned by the ",(0,s.jsx)(n.em,{children:"result-forms"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"do"})," iterates over a group of ",(0,s.jsx)(n.em,{children:"statements"})," while a test condition holds. ",(0,s.jsx)(n.strong,{children:"do"})," accepts an arbitrary number of iteration ",(0,s.jsx)(n.em,{children:"vars"})," which are bound within the iteration and stepped in parallel. An initial value may be supplied for each iteration variable by use of an ",(0,s.jsx)(n.em,{children:"init-form"}),". ",(0,s.jsx)(n.em,{children:"Step-forms"})," may be used to specify how the ",(0,s.jsx)(n.em,{children:"vars"})," should be updated on succeeding iterations through the loop. ",(0,s.jsx)(n.em,{children:"Step-forms"})," may be used both to generate successive values or to accumulate results. If the ",(0,s.jsx)(n.em,{children:"end-test-form"})," condition is met prior to an execution of the body, the iteration terminates. ",(0,s.jsx)(n.em,{children:"Tags"})," label ",(0,s.jsx)(n.em,{children:"statements"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"do*"})," is exactly like ",(0,s.jsx)(n.strong,{children:"do"})," except that the ",(0,s.jsx)(n.em,{children:"bindings"})," and steppings of the ",(0,s.jsx)(n.em,{children:"vars"})," are performed sequentially rather than in parallel."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"do, do"}),(0,s.jsx)(n.em,{children:"\u2217"})]}),"\n",(0,s.jsxs)(n.p,{children:["Before the first iteration, all the ",(0,s.jsx)(n.em,{children:"init-forms"})," are evaluated, and each ",(0,s.jsx)(n.em,{children:"var"})," is bound to the value of its respective ",(0,s.jsx)(n.em,{children:"init-form"}),", if supplied. This is a ",(0,s.jsx)(n.em,{children:"binding"}),", not an assignment; when the loop terminates, the old values of those variables will be restored. For ",(0,s.jsx)(n.strong,{children:"do"}),", all of the ",(0,s.jsx)(n.em,{children:"init-forms"})," are evaluated before"]}),"\n",(0,s.jsxs)(n.p,{children:["any ",(0,s.jsx)(n.em,{children:"var"})," is bound. The ",(0,s.jsx)(n.em,{children:"init-forms"})," can refer to the ",(0,s.jsx)(n.em,{children:"bindings"})," of the ",(0,s.jsx)(n.em,{children:"vars"})," visible before beginning execution of ",(0,s.jsx)(n.strong,{children:"do"}),". For ",(0,s.jsx)(n.strong,{children:"do*"}),", the first ",(0,s.jsx)(n.em,{children:"init-form"})," is evaluated, then the first ",(0,s.jsx)(n.em,{children:"var"})," is bound to that value, then the second ",(0,s.jsx)(n.em,{children:"init-form"})," is evaluated, then the second ",(0,s.jsx)(n.em,{children:"var"})," is bound, and so on; in general, the ",(0,s.jsx)(n.em,{children:"k"}),"th ",(0,s.jsx)(n.em,{children:"init-form"})," can refer to the new binding of the ",(0,s.jsx)(n.em,{children:"j"}),"th ",(0,s.jsx)(n.em,{children:"var"})," if ",(0,s.jsx)(n.em,{children:"j"})," < ",(0,s.jsx)(n.em,{children:"k"}),", and otherwise to the old binding of the ",(0,s.jsx)(n.em,{children:"j"}),"th ",(0,s.jsx)(n.em,{children:"var"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["At the beginning of each iteration, after processing the variables, the ",(0,s.jsx)(n.em,{children:"end-test-form"})," is evaluated. If the result is ",(0,s.jsx)(n.em,{children:"false"}),", execution proceeds with the body of the ",(0,s.jsx)(n.strong,{children:"do"})," (or ",(0,s.jsx)(n.strong,{children:"do*"}),") form. If the result is ",(0,s.jsx)(n.em,{children:"true"}),", the ",(0,s.jsx)(n.em,{children:"result-forms"})," are evaluated in order as an ",(0,s.jsx)(n.em,{children:"implicit progn"}),", and then ",(0,s.jsx)(n.strong,{children:"do"})," or ",(0,s.jsx)(n.strong,{children:"do*"})," returns."]}),"\n",(0,s.jsxs)(n.p,{children:["At the beginning of each iteration other than the first, ",(0,s.jsx)(n.em,{children:"vars"})," are updated as follows. All the ",(0,s.jsx)(n.em,{children:"step-forms"}),", if supplied, are evaluated, from left to right, and the resulting values are assigned to the respective ",(0,s.jsx)(n.em,{children:"vars"}),". Any ",(0,s.jsx)(n.em,{children:"var"})," that has no associated ",(0,s.jsx)(n.em,{children:"step-form"})," is not assigned to. For ",(0,s.jsx)(n.strong,{children:"do"}),", all the ",(0,s.jsx)(n.em,{children:"step-forms"})," are evaluated before any ",(0,s.jsx)(n.em,{children:"var"})," is updated; the assignment of values to ",(0,s.jsx)(n.em,{children:"vars"})," is done in parallel, as if by ",(0,s.jsx)(n.strong,{children:"psetq"}),". Because all of the ",(0,s.jsx)(n.em,{children:"step-forms"})," are evaluated before any of the ",(0,s.jsx)(n.em,{children:"vars"})," are altered, a ",(0,s.jsx)(n.em,{children:"step-form"})," when evaluated always has access to the old values of all the ",(0,s.jsx)(n.em,{children:"vars"}),", even if other ",(0,s.jsx)(n.em,{children:"step-forms"})," precede it. For ",(0,s.jsx)(n.strong,{children:"do*"}),", the first ",(0,s.jsx)(n.em,{children:"step-form"})," is evaluated, then the value is assigned to the first ",(0,s.jsx)(n.em,{children:"var"}),", then the second ",(0,s.jsx)(n.em,{children:"step-form"})," is evaluated, then the value is assigned to the second ",(0,s.jsx)(n.em,{children:"var"}),", and so on; the assignment of values to variables is done sequentially, as if by ",(0,s.jsx)(n.strong,{children:"setq"}),". For either ",(0,s.jsx)(n.strong,{children:"do"})," or ",(0,s.jsx)(n.strong,{children:"do*"}),", after the ",(0,s.jsx)(n.em,{children:"vars"})," have been updated, the ",(0,s.jsx)(n.em,{children:"end-test-form"})," is evaluated as described above, and the iteration continues."]}),"\n",(0,s.jsxs)(n.p,{children:["The remainder of the ",(0,s.jsx)(n.strong,{children:"do"})," (or ",(0,s.jsx)(n.strong,{children:"do*"}),") form constitutes an ",(0,s.jsx)(n.em,{children:"implicit tagbody"}),". ",(0,s.jsx)(n.em,{children:"Tags"})," may appear within the body of a ",(0,s.jsx)(n.strong,{children:"do"})," loop for use by ",(0,s.jsx)(n.strong,{children:"go"})," statements appearing in the body (but such ",(0,s.jsx)(n.strong,{children:"go"})," statements may not appear in the variable specifiers, the ",(0,s.jsx)(n.em,{children:"end-test-form"}),", or the ",(0,s.jsx)(n.em,{children:"result-forms"}),"). When the end of a ",(0,s.jsx)(n.strong,{children:"do"})," body is reached, the next iteration cycle (beginning with the evaluation of ",(0,s.jsx)(n.em,{children:"step-forms"}),") occurs."]}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.em,{children:"implicit block"})," named ",(0,s.jsx)(n.strong,{children:"nil"})," surrounds the entire ",(0,s.jsx)(n.strong,{children:"do"})," (or ",(0,s.jsx)(n.strong,{children:"do*"}),") form. A ",(0,s.jsx)(n.strong,{children:"return"})," statement may be used at any point to exit the loop immediately."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Init-form"})," is an initial value for the ",(0,s.jsx)(n.em,{children:"var"})," with which it is associated. If ",(0,s.jsx)(n.em,{children:"init-form"})," is omitted, the initial value of ",(0,s.jsx)(n.em,{children:"var"})," is ",(0,s.jsx)(n.strong,{children:"nil"}),". If a ",(0,s.jsx)(n.em,{children:"declaration"})," is supplied for a ",(0,s.jsx)(n.em,{children:"var"}),", ",(0,s.jsx)(n.em,{children:"init-form"})," must be consistent with the ",(0,s.jsx)(n.em,{children:"declaration"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Declarations"})," can appear at the beginning of a ",(0,s.jsx)(n.strong,{children:"do"})," (or ",(0,s.jsx)(n.strong,{children:"do*"}),") body. They apply to code in the ",(0,s.jsx)(n.strong,{children:"do"})," (or ",(0,s.jsx)(n.strong,{children:"do*"}),") body, to the ",(0,s.jsx)(n.em,{children:"bindings"})," of the ",(0,s.jsx)(n.strong,{children:"do"})," (or ",(0,s.jsx)(n.strong,{children:"do*"}),") ",(0,s.jsx)(n.em,{children:"vars"}),", to the ",(0,s.jsx)(n.em,{children:"step-forms"}),", to the ",(0,s.jsx)(n.em,{children:"end-test-form"}),", and to the ",(0,s.jsx)(n.em,{children:"result-forms"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:'\n(do ((temp-one 1 (1+ temp-one)) \n     (temp-two 0 (1- temp-two))) \n    ((> (- temp-one temp-two) 5) temp-one)) \u2192 4 \n\n\n\n**do, do***\u2217* \n(do ((temp-one 1 (1+ temp-one)) \n     (temp-two 0 (1+ temp-one))) \n    ((= 3 temp-two) temp-one)) \u2192 3 \n(do\\* ((temp-one 1 (1+ temp-one)) \n       (temp-two 0 (1+ temp-one))) \n      ((= 3 temp-two) temp-one)) \u2192 2 \n(do ((j 0 (+ j 1))) \n    (nil) ;Do forever. \n  (format t "~%Input ~D:" j) \n  (let ((item (read))) \n    (if (null item) (return) ;Process items until NIL seen. \n\t(format t "~&Output ~D: ~S" j item)))) \n\u25b7 Input 0: banana \n\u25b7 Output 0: BANANA \n\u25b7 Input 1: (57 boxes) \n\u25b7 Output 1: (57 BOXES) \n\u25b7 Input 2: NIL \n\u2192 NIL \n(setq a-vector (vector 1 nil 3 nil)) \n(do ((i 0 (+ i 1)) ;Sets every null element of a-vector to zero. \n     (n (array-dimension a-vector 0))) \n    ((= i n)) \n  (when (null (aref a-vector i)) \n    (setf (aref a-vector i) 0))) \u2192 NIL \na-vector \u2192 #(1 0 3 0) \n(do ((x e (cdr x)) \n     (oldx x x)) \n    ((null x)) \n body) \nis an example of parallel assignment to index variables. On the first iteration, the value of oldx is whatever value x had before the **do** was entered. On succeeding iterations, oldx contains the value that x had on the previous iteration. \n(do ((x foo (cdr x)) \n     (y bar (cdr y)) \n     (z \u2019() (cons (f (car x) (car y)) z))) \n    ((or (null x) (null y)) \n     (nreverse z))) \ndoes the same thing as (mapcar #\u2019f foo bar). The step computation for z is an example of the fact that variables are stepped in parallel. Also, the body of the loop is empty. \n\n\n\n**do, do***\u2217* \n(defun list-reverse (list) \n  (do ((x list (cdr x)) \n       (y \u2019() (cons (car x) y))) \n      ((endp x) y))) \nAs an example of nested iterations, consider a data structure that is a *list* of *conses*. The *car* of each *cons* is a *list* of *symbols*, and the *cdr* of each *cons* is a *list* of equal length containing corresponding values. Such a data structure is similar to an association list, but is divided into \u201cframes\u201d; the overall structure resembles a rib-cage. A lookup function on such a data structure might be: \n(defun ribcage-lookup (sym ribcage) \n  (do ((r ribcage (cdr r))) \n      ((null r) nil) \n    (do ((s (caar r) (cdr s)) \n\t (v (cdar r) (cdr v))) \n\t((null s)) \n      (when (eq (car s) sym) \n\t(return-from ribcage-lookup (car v)))))) \u2192 RIBCAGE-LOOKUP \n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsxs)(n.p,{children:["other iteration functions (",(0,s.jsx)(n.strong,{children:"dolist"}),", ",(0,s.jsx)(n.strong,{children:"dotimes"}),", and ",(0,s.jsx)(n.strong,{children:"loop"}),") and more primitive functionality (",(0,s.jsx)(n.strong,{children:"tagbody"}),", ",(0,s.jsx)(n.strong,{children:"go"}),", ",(0,s.jsx)(n.strong,{children:"block"}),", ",(0,s.jsx)(n.strong,{children:"return"}),", ",(0,s.jsx)(n.strong,{children:"let"}),", and ",(0,s.jsx)(n.strong,{children:"setq"}),")"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.em,{children:"end-test-form"})," is ",(0,s.jsx)(n.strong,{children:"nil"}),", the test will never succeed. This provides an idiom for \u201cdo forever\u201d: the body of the ",(0,s.jsx)(n.strong,{children:"do"})," or ",(0,s.jsx)(n.strong,{children:"do*"})," is executed repeatedly. The infinite loop can be terminated by the use of ",(0,s.jsx)(n.strong,{children:"return"}),", ",(0,s.jsx)(n.strong,{children:"return-from"}),", ",(0,s.jsx)(n.strong,{children:"go"})," to an outer level, or ",(0,s.jsx)(n.strong,{children:"throw"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:"do"})," ",(0,s.jsx)(n.em,{children:"form"})," may be explained in terms of the more primitive ",(0,s.jsx)(n.em,{children:"forms"})," ",(0,s.jsx)(n.strong,{children:"block"}),", ",(0,s.jsx)(n.strong,{children:"return"}),", ",(0,s.jsx)(n.strong,{children:"let"}),", ",(0,s.jsx)(n.strong,{children:"loop"}),", ",(0,s.jsx)(n.strong,{children:"tagbody"}),", and ",(0,s.jsx)(n.strong,{children:"psetq"})," as follows:"]}),"\n",(0,s.jsx)(n.p,{children:"(block nil"}),"\n",(0,s.jsx)(n.p,{children:"(let ((var1 init1)"}),"\n",(0,s.jsx)(n.p,{children:"(var2 init2)"}),"\n",(0,s.jsx)(n.p,{children:"..."}),"\n",(0,s.jsx)(n.p,{children:"(varn initn))"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"declarations"})}),"\n",(0,s.jsx)(n.p,{children:"(loop (when end-test (return (progn . result)))"}),"\n",(0,s.jsx)(n.p,{children:"(tagbody . tagbody)"}),"\n",(0,s.jsx)(n.p,{children:"(psetq var1 step1"}),"\n",(0,s.jsx)(n.p,{children:"var2 step2"}),"\n",(0,s.jsx)(n.p,{children:"..."}),"\n",(0,s.jsx)(n.p,{children:"varn stepn))))"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"do*"})," is similar, except that ",(0,s.jsx)(n.strong,{children:"let*"})," and ",(0,s.jsx)(n.strong,{children:"setq"})," replace the ",(0,s.jsx)(n.strong,{children:"let"})," and ",(0,s.jsx)(n.strong,{children:"psetq"}),", respectively."]})]})}function o(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}const d={title:"do, do"},l="do, do",a={id:"chap-6/g-c-dictionary/do_do_macro",title:"do, do",description:"Expanded Reference: do, do",source:"@site/docs/chap-6/g-c-dictionary/do_do_macro.md",sourceDirName:"chap-6/g-c-dictionary",slug:"/chap-6/g-c-dictionary/do_do_macro",permalink:"/cl-language-reference/docs/chap-6/g-c-dictionary/do_do_macro",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-6/g-c-dictionary/do_do_macro.md",tags:[],version:"current",frontMatter:{title:"do, do"},sidebar:"tutorialSidebar",previous:{title:"6.2 Iteration Dictionary",permalink:"/cl-language-reference/docs/category/62-iteration-dictionary"},next:{title:"dolist",permalink:"/cl-language-reference/docs/chap-6/g-c-dictionary/dolist_macro"}},c={},h=[{value:"Expanded Reference: do, do",id:"expanded-reference-do-do",level:2}];function x(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"do-do",children:"do, do"}),"\n","\n","\n",(0,s.jsx)(o,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-do-do",children:"Expanded Reference: do, do"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(do, do )\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>o});var s=r(67294);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);