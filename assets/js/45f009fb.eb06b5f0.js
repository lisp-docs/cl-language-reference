"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[10206],{57805:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>x,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var s=t(85893),c=t(11151);function i(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,c.a)(),...e.components},{ClLinks:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ClLinks",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"copy-alist"})," ",(0,s.jsx)(t,{styled:!0,term:"function",children:(0,s.jsx)("i",{children:"Function"})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{styled:!0,term:"copy-alist",children:(0,s.jsx)("b",{children:"copy-alist"})})," ",(0,s.jsx)(n.em,{children:"alist \u2192 new-alist"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{styled:!0,term:"alist",children:(0,s.jsx)("i",{children:"alist"})}),"\u2014an ",(0,s.jsx)(n.em,{children:"association list"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"new-alist"}),"\u2014an ",(0,s.jsx)(n.em,{children:"association list"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(t,{styled:!0,term:"copy-alist",children:(0,s.jsx)("b",{children:"copy-alist"})})," returns a ",(0,s.jsx)(t,{styled:!0,term:"copy",children:(0,s.jsx)("i",{children:"copy"})})," of ",(0,s.jsx)(t,{styled:!0,term:"alist",children:(0,s.jsx)("i",{children:"alist"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"list structure"})," of ",(0,s.jsx)(t,{styled:!0,term:"alist",children:(0,s.jsx)("i",{children:"alist"})})," is copied, and the ",(0,s.jsx)(t,{styled:!0,term:"element",children:(0,s.jsx)("i",{children:"elements"})})," of ",(0,s.jsx)(t,{styled:!0,term:"alist",children:(0,s.jsx)("i",{children:"alist"})})," which are ",(0,s.jsx)(n.em,{children:"conses"})," are also copied (as ",(0,s.jsx)(n.em,{children:"conses"})," only). Any other ",(0,s.jsx)(t,{styled:!0,term:"object",children:(0,s.jsx)("i",{children:"objects"})})," which are referred to, whether directly or indirectly, by the ",(0,s.jsx)(t,{styled:!0,term:"alist",children:(0,s.jsx)("i",{children:"alist"})})," continue to be shared."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:'\n(defparameter \\*alist\\* (acons 1 "one" (acons 2 "two" \u2019()))) \n\n\n\n\\*alist\\* \u2192 ((1 . "one") (2 . "two")) \n(defparameter \\*list-copy\\* (copy-list \\*alist\\*)) \n\\*list-copy\\* \u2192 ((1 . "one") (2 . "two")) \n(defparameter \\*alist-copy\\* (copy-alist \\*alist\\*)) \n\\*alist-copy\\* \u2192 ((1 . "one") (2 . "two")) \n(setf (cdr (assoc 2 \\*alist-copy\\*)) "deux") \u2192 "deux" \n\\*alist-copy\\* \u2192 ((1 . "one") (2 . "deux")) \n\\*alist\\* \u2192 ((1 . "one") (2 . "two")) \n(setf (cdr (assoc 1 \\*list-copy\\*)) "uno") \u2192 "uno" \n\\*list-copy\\* \u2192 ((1 . "uno") (2 . "two")) \n\\*alist\\* \u2192 ((1 . "uno") (2 . "two")) \n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,s.jsx)(t,{styled:!0,term:"copy-list",children:(0,s.jsx)("b",{children:"copy-list"})})]})}function r(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}const o={title:"copy-alist"},l="copy-alist",a={id:"chap-14/be-c-dictionary/copy-alist_function",title:"copy-alist",description:"Expanded Reference: copy-alist",source:"@site/docs/chap-14/be-c-dictionary/copy-alist_function.md",sourceDirName:"chap-14/be-c-dictionary",slug:"/chap-14/be-c-dictionary/copy-alist_function",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/copy-alist_function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-14/be-c-dictionary/copy-alist_function.md",tags:[],version:"current",frontMatter:{title:"copy-alist"},sidebar:"tutorialSidebar",previous:{title:"consp",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/consp_function"},next:{title:"copy-list",permalink:"/cl-language-reference/docs/chap-14/be-c-dictionary/copy-list_function"}},d={},p=[{value:"Expanded Reference: copy-alist",id:"expanded-reference-copy-alist",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"copy-alist",children:"copy-alist"}),"\n","\n","\n",(0,s.jsx)(r,{}),"\n",(0,s.jsx)(n.h2,{id:"expanded-reference-copy-alist",children:"Expanded Reference: copy-alist"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lisp",children:"(copy-alist )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var s=t(67294);const c={},i=s.createContext(c);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);