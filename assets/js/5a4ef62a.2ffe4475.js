"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[67021],{57484:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>a,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var n=t(85893),s=t(11151);const i={},r="Processing method bodies",c={id:"meta-object-protocol/processing-method-bodies",title:"Processing method bodies",description:"Processing method bodies",source:"@site/docs/meta-object-protocol/processing-method-bodies.md",sourceDirName:"meta-object-protocol",slug:"/meta-object-protocol/processing-method-bodies",permalink:"/cl-language-reference/meta-object-protocol/processing-method-bodies",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/meta-object-protocol/processing-method-bodies.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Methods",permalink:"/cl-language-reference/meta-object-protocol/methods"},next:{title:"Processing of the user interface macros",permalink:"/cl-language-reference/meta-object-protocol/processing-of-the-user-interface-macros"}},a={},d=[{value:"Processing method bodies",id:"processing-method-bodies-1",level:3}];function h(e){const o={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"processing-method-bodies",children:"Processing method bodies"}),"\n",(0,n.jsx)(o.h3,{id:"processing-method-bodies-1",children:"Processing method bodies"}),"\n",(0,n.jsx)(o.p,{children:"Before a method can be created, the list of forms comprising the method body must be converted to a method function. This conversion is a two step process."}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.strong,{children:"Note:"})}),"\n",(0,n.jsxs)(o.p,{children:["The body of methods can also appear in the ",(0,n.jsx)(o.code,{children:":initial-methods"})," option of ",(0,n.jsx)(o.a,{href:"/meta-object-protocol/the-defgeneric-macro",children:"defgeneric"})," forms. Initial methods are not considered by any of the protocols specified in this document."]}),"\n",(0,n.jsxs)(o.p,{children:["The first step occurs during macro-expansion of the macro form. In this step, the method lambda list, declarations and body are converted to a lambda expression called a ",(0,n.jsx)(o.em,{children:"method lambda"}),". This conversion is based on information associated with the generic function definition in effect at the time the macro form is expanded."]}),"\n",(0,n.jsxs)(o.p,{children:["The generic function definition is obtained by calling ",(0,n.jsx)(o.a,{href:"/meta-object-protocol/ensure-generic-function",children:"ensure-generic-function"})," with a first argument of the generic function name specified in the macro form. The ",(0,n.jsx)(o.code,{children:":lambda-list"})," keyword argument is not passed in this call."]}),"\n",(0,n.jsxs)(o.p,{children:["Given the generic function, production of the method lambda proceeds by calling ",(0,n.jsx)(o.a,{href:"/meta-object-protocol/make-method-lambda",children:"make-method-lambda"}),". The first argument in this call is the generic function obtained as described above. The second argument is the result of calling ",(0,n.jsx)(o.a,{href:"/meta-object-protocol/class-prototype",children:"class-prototype"})," on the result of calling ",(0,n.jsx)(o.a,{href:"/meta-object-protocol/generic-function-method-class",children:"generic-function-method-class"})," on the generic function. The third argument is a lambda expression formed from the method lambda list, declarations and body. The fourth argument is the macro-expansion environment of the macro form; this is the value of the ",(0,n.jsx)(o.code,{children:"&environment"})," argument to the ",(0,n.jsx)(o.a,{href:"/meta-object-protocol/the-defmethod-macro",children:"defmethod"})," macro."]}),"\n",(0,n.jsxs)(o.p,{children:["The generic function ",(0,n.jsx)(o.a,{href:"/meta-object-protocol/make-method-lambda",children:"make-method-lambda"})," returns two values. The first is the method lambda itself. The second is a list of initialization arguments and values. These are included in the initialization arguments when the method is created."]}),"\n",(0,n.jsxs)(o.p,{children:["In the second step, the method lambda is converted to a function which properly captures the lexical scope of the macro form. This is done by having the method lambda appear in the macro-expansion as the argument of the ",(0,n.jsx)(o.a,{href:"http://www.lispworks.com/documentation/HyperSpec/Body/s_fn.htm",children:"function"})," special form. During the subsequent evaluation of the macro-expansion, the result of the ",(0,n.jsx)(o.a,{href:"http://www.lispworks.com/documentation/HyperSpec/Body/s_fn.htm",children:"function"})," special form is the methodfunction."]})]})}function m(e={}){const{wrapper:o}={...(0,s.a)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},11151:(e,o,t)=>{t.d(o,{Z:()=>c,a:()=>r});var n=t(67294);const s={},i=n.createContext(s);function r(e){const o=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:o},e.children)}}}]);