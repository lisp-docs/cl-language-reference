"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[54755],{35789:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>x,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var r=i(85893),s=i(11151);function a(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"make-array"})," ",(0,r.jsx)(n.em,{children:"Function"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"make-array"})," ",(0,r.jsx)(n.em,{children:"dimensions"})," &key ",(0,r.jsx)(n.em,{children:"element-type"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"initial-element"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"initial-contents"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"adjustable"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"fill-pointer"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"displaced-to"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"displaced-index-offset"})}),"\n",(0,r.jsx)(n.p,{children:"\u2192 new-array"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"dimensions"}),"\u2014a ",(0,r.jsx)(n.em,{children:"designator"})," for a ",(0,r.jsx)(n.em,{children:"list"})," of ",(0,r.jsx)(n.em,{children:"valid array dimensions"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"element-type"}),"\u2014a ",(0,r.jsx)(n.em,{children:"type specifier"})," . The default is ",(0,r.jsx)(n.strong,{children:"t"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"initial-element"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"initial-contents"}),"\u2014an ",(0,r.jsx)(n.em,{children:"object"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"adjustable"}),"\u2014a ",(0,r.jsx)(n.em,{children:"generalized boolean"}),". The default is ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"fill-pointer"}),"\u2014a ",(0,r.jsx)(n.em,{children:"valid fill pointer"})," for the ",(0,r.jsx)(n.em,{children:"array"})," to be created, or ",(0,r.jsx)(n.strong,{children:"t"})," or ",(0,r.jsx)(n.strong,{children:"nil"}),". The default is ",(0,r.jsx)(n.strong,{children:"nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"displaced-to"}),"\u2014an ",(0,r.jsx)(n.em,{children:"array"})," or ",(0,r.jsx)(n.strong,{children:"nil"}),". The default is ",(0,r.jsx)(n.strong,{children:"nil"}),". This option must not be supplied if either ",(0,r.jsx)(n.em,{children:"initial-element"})," or ",(0,r.jsx)(n.em,{children:"initial-contents"})," is supplied."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"displaced-index-offset"}),"\u2014a ",(0,r.jsx)(n.em,{children:"valid array row-major index"})," for ",(0,r.jsx)(n.em,{children:"displaced-to"}),". The default is 0. This option must not be supplied unless a ",(0,r.jsx)(n.em,{children:"non-nil displaced-to"})," is supplied."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"new-array"}),"\u2014an ",(0,r.jsx)(n.em,{children:"array"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"make-array"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:["Creates and returns an ",(0,r.jsx)(n.em,{children:"array"})," constructed of the most ",(0,r.jsx)(n.em,{children:"specialized type"})," that can accommodate elements of ",(0,r.jsx)(n.em,{children:"type"})," given by ",(0,r.jsx)(n.em,{children:"element-type"}),". If ",(0,r.jsx)(n.em,{children:"dimensions"})," is ",(0,r.jsx)(n.strong,{children:"nil"})," then a zero-dimensional ",(0,r.jsx)(n.em,{children:"array"})," is created."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Dimensions"})," represents the dimensionality of the new ",(0,r.jsx)(n.em,{children:"array"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"element-type"})," indicates the ",(0,r.jsx)(n.em,{children:"type"})," of the elements intended to be stored in the ",(0,r.jsx)(n.em,{children:"new-array"}),". The ",(0,r.jsx)(n.em,{children:"new-array"})," can actually store any ",(0,r.jsx)(n.em,{children:"objects"})," of the ",(0,r.jsx)(n.em,{children:"type"})," which results from ",(0,r.jsx)(n.em,{children:"upgrading element-type"}),"; see Section 15.1.2.1 (Array Upgrading)."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"initial-element"})," is supplied, it is used to initialize each ",(0,r.jsx)(n.em,{children:"element"})," of ",(0,r.jsx)(n.em,{children:"new-array"}),". If ",(0,r.jsx)(n.em,{children:"initial-element"})," is supplied, it must be of the ",(0,r.jsx)(n.em,{children:"type"})," given by ",(0,r.jsx)(n.em,{children:"element-type"}),". ",(0,r.jsx)(n.em,{children:"initial-element"})," cannot be supplied if either the ",":initial-contents"," option is supplied or ",(0,r.jsx)(n.em,{children:"displaced-to"})," is ",(0,r.jsx)(n.em,{children:"non-nil"}),". If ",(0,r.jsx)(n.em,{children:"initial-element"})," is not supplied, the consequences of later reading an uninitialized ",(0,r.jsx)(n.em,{children:"element"})," of ",(0,r.jsx)(n.em,{children:"new-array"})," are undefined unless either ",(0,r.jsx)(n.em,{children:"initial-contents"})," is supplied or ",(0,r.jsx)(n.em,{children:"displaced-to"})," is ",(0,r.jsx)(n.em,{children:"non-nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"initial-contents"})," is used to initialize the contents of ",(0,r.jsx)(n.em,{children:"array"}),". For example:"]}),"\n",(0,r.jsxs)(n.p,{children:["(make-array \u2019(4 2 3) ",":initial-contents"]}),"\n",(0,r.jsx)(n.p,{children:"\u2019(((a b c) (1 2 3))"}),"\n",(0,r.jsx)(n.p,{children:"((d e f) (3 1 2))"}),"\n",(0,r.jsx)(n.p,{children:"((g h i) (2 3 1))"}),"\n",(0,r.jsx)(n.p,{children:"((j k l) (0 0 0))))"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"initial-contents"})," is composed of a nested structure of ",(0,r.jsx)(n.em,{children:"sequences"}),". The numbers of levels in the structure must equal the rank of ",(0,r.jsx)(n.em,{children:"array"}),". Each leaf of the nested structure must be of the ",(0,r.jsx)(n.em,{children:"type"})," given by ",(0,r.jsx)(n.em,{children:"element-type"}),". If ",(0,r.jsx)(n.em,{children:"array"})," is zero-dimensional, then ",(0,r.jsx)(n.em,{children:"initial-contents"})," specifies the single ",(0,r.jsx)(n.em,{children:"element"}),". Otherwise, ",(0,r.jsx)(n.em,{children:"initial-contents"})," must be a ",(0,r.jsx)(n.em,{children:"sequence"})," whose length is equal to the first dimension; each element must be a nested structure for an ",(0,r.jsx)(n.em,{children:"array"})," whose dimensions are the remaining dimensions, and so on. ",(0,r.jsx)(n.em,{children:"Initial-contents"})," cannot be supplied if either ",(0,r.jsx)(n.em,{children:"initial-element"})," is supplied or ",(0,r.jsx)(n.em,{children:"displaced-to"})," is ",(0,r.jsx)(n.em,{children:"non-nil"}),". If ",(0,r.jsx)(n.em,{children:"initial-contents"})," is not supplied, the consequences of later reading an uninitialized ",(0,r.jsx)(n.em,{children:"element"})," of ",(0,r.jsx)(n.em,{children:"new-array"})," are undefined unless either ",(0,r.jsx)(n.em,{children:"initial-element"})," is supplied or ",(0,r.jsx)(n.em,{children:"displaced-to"})," is ",(0,r.jsx)(n.em,{children:"non-nil"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"adjustable"})," is ",(0,r.jsx)(n.em,{children:"non-nil"}),", the array is ",(0,r.jsx)(n.em,{children:"expressly adjustable"})," (and so ",(0,r.jsx)(n.em,{children:"actually adjustable"}),"); otherwise, the array is not ",(0,r.jsx)(n.em,{children:"expressly adjustable"})," (and it is ",(0,r.jsx)(n.em,{children:"implementation-dependent"})," whether the array is ",(0,r.jsx)(n.em,{children:"actually adjustable"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"fill-pointer"})," is ",(0,r.jsx)(n.em,{children:"non-nil"}),", the ",(0,r.jsx)(n.em,{children:"array"})," must be one-dimensional; that is, the ",(0,r.jsx)(n.em,{children:"array"})," must be a ",(0,r.jsx)(n.em,{children:"vector"})," . If ",(0,r.jsx)(n.em,{children:"fill-pointer"})," is ",(0,r.jsx)(n.strong,{children:"t"}),", the length of the ",(0,r.jsx)(n.em,{children:"vector"})," is used to initialize the ",(0,r.jsx)(n.em,{children:"fill pointer"})," . If ",(0,r.jsx)(n.em,{children:"fill-pointer"})," is an ",(0,r.jsx)(n.em,{children:"integer"})," , it becomes the initial ",(0,r.jsx)(n.em,{children:"fill pointer"})," for the ",(0,r.jsx)(n.em,{children:"vector"})," ."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"displaced-to"})," is ",(0,r.jsx)(n.em,{children:"non-nil"}),", ",(0,r.jsx)(n.strong,{children:"make-array"})," will create a ",(0,r.jsx)(n.em,{children:"displaced array"})," and ",(0,r.jsx)(n.em,{children:"displaced-to"})," is the ",(0,r.jsx)(n.em,{children:"target"})," of that ",(0,r.jsx)(n.em,{children:"displaced array"}),". In that case, the consequences are undefined if the ",(0,r.jsx)(n.em,{children:"actual array element type"})," of ",(0,r.jsx)(n.em,{children:"displaced-to"})," is not ",(0,r.jsx)(n.em,{children:"type equivalent"})," to the ",(0,r.jsx)(n.em,{children:"actual array element type"})," of the ",(0,r.jsx)(n.em,{children:"array"})," being created. If ",(0,r.jsx)(n.em,{children:"displaced-to"})," is ",(0,r.jsx)(n.strong,{children:"nil"}),", the ",(0,r.jsx)(n.em,{children:"array"})," is not a ",(0,r.jsx)(n.em,{children:"displaced array"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"displaced-index-offset"})," is made to be the index offset of the ",(0,r.jsx)(n.em,{children:"array"}),". When an array A is given as the ",":displaced-to"," ",(0,r.jsx)(n.em,{children:"argument"})," to ",(0,r.jsx)(n.strong,{children:"make-array"})," when creating array B, then array B is said to be"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"make-array"})}),"\n",(0,r.jsxs)(n.p,{children:["displaced to array A. The total number of elements in an ",(0,r.jsx)(n.em,{children:"array"}),", called the total size of the ",(0,r.jsx)(n.em,{children:"array"}),", is calculated as the product of all the dimensions. It is required that the total size of A be no smaller than the sum of the total size of B plus the offset n supplied by the ",(0,r.jsx)(n.em,{children:"displaced-index-offset"}),". The effect of displacing is that array B does not have any elements of its own, but instead maps ",(0,r.jsx)(n.em,{children:"accesses"})," to itself into ",(0,r.jsx)(n.em,{children:"accesses"})," to array A. The mapping treats both ",(0,r.jsx)(n.em,{children:"arrays"})," as if they were one-dimensional by taking the elements in row-major order, and then maps an ",(0,r.jsx)(n.em,{children:"access"})," to element k of array B to an ",(0,r.jsx)(n.em,{children:"access"})," to element k+n of array A."]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.strong,{children:"make-array"})," is called with ",(0,r.jsx)(n.em,{children:"adjustable"}),", ",(0,r.jsx)(n.em,{children:"fill-pointer"}),", and ",(0,r.jsx)(n.em,{children:"displaced-to"})," each ",(0,r.jsx)(n.strong,{children:"nil"}),", then the result is a ",(0,r.jsx)(n.em,{children:"simple array"}),". If ",(0,r.jsx)(n.strong,{children:"make-array"})," is called with one or more of ",(0,r.jsx)(n.em,{children:"adjustable"}),", ",(0,r.jsx)(n.em,{children:"fill-pointer"}),", or ",(0,r.jsx)(n.em,{children:"displaced-to"})," being ",(0,r.jsx)(n.em,{children:"true"}),", whether the resulting ",(0,r.jsx)(n.em,{children:"array"})," is a ",(0,r.jsx)(n.em,{children:"simple array"})," is ",(0,r.jsx)(n.em,{children:"implementation-dependent"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["When an array A is given as the ",":displaced-to"," ",(0,r.jsx)(n.em,{children:"argument"})," to ",(0,r.jsx)(n.strong,{children:"make-array"})," when creating array B, then array B is said to be displaced to array A. The total number of elements in an ",(0,r.jsx)(n.em,{children:"array"}),", called the total size of the ",(0,r.jsx)(n.em,{children:"array"}),", is calculated as the product of all the dimensions. The consequences are unspecified if the total size of A is smaller than the sum of the total size of B plus the offset n supplied by the ",(0,r.jsx)(n.em,{children:"displaced-index-offset"}),". The effect of displacing is that array B does not have any"]}),"\n",(0,r.jsxs)(n.p,{children:["elements of its own, but instead maps ",(0,r.jsx)(n.em,{children:"accesses"})," to itself into ",(0,r.jsx)(n.em,{children:"accesses"})," to array A. The mapping treats both ",(0,r.jsx)(n.em,{children:"arrays"})," as if they were one-dimensional by taking the elements in row-major order, and then maps an ",(0,r.jsx)(n.em,{children:"access"})," to element k of array B to an ",(0,r.jsx)(n.em,{children:"access"})," to ",(0,r.jsx)(n.em,{children:"element"})," k+n of array A."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:'\n(make-array 5) ;; Creates a one-dimensional array of five elements. \n(make-array \u2019(3 4) :element-type \u2019(mod 16)) ;; Creates a \n;;two-dimensional array, 3 by 4, with four-bit elements. \n(make-array 5 :element-type \u2019single-float) ;; Creates an array of single-floats. \n(make-array nil :initial-element nil) \u2192 #0ANIL \n(make-array 4 :initial-element nil) \u2192 #(NIL NIL NIL NIL) \n(make-array \u2019(2 4) \n\t     :element-type \u2019(unsigned-byte 2) \n\t     :initial-contents \u2019((0 1 2 3) (3 2 1 0))) \n\u2192 #2A((0 1 2 3) (3 2 1 0)) \n(make-array 6 \n\t    :element-type \u2019character \n\t    :initial-element #\\a \n\t    :fill-pointer 3) \u2192 "aaa" \nThe following is an example of making a *displaced array*. \n(setq a (make-array \u2019(4 3))) \n\u2192 #<ARRAY 4x3 simple 32546632> \n(dotimes (i 4) \n  (dotimes (j 3) \n    (setf (aref a i j) (list i \u2019x j \u2019= (\\* i j))))) \n\u2192 NIL \n\n\n\n(setq b (make-array 8 :displaced-to a \n\t\t    :displaced-index-offset 2)) \n\u2192 #<ARRAY 8 indirect 32550757> \n(dotimes (i 8) \n  (print (list i (aref b i)))) \n\u25b7 (0 (0 X 2 = 0)) \n\u25b7 (1 (1 X 0 = 0)) \n\u25b7 (2 (1 X 1 = 1)) \n\u25b7 (3 (1 X 2 = 2)) \n\u25b7 (4 (2 X 0 = 0)) \n\u25b7 (5 (2 X 1 = 2)) \n\u25b7 (6 (2 X 2 = 4)) \n\u25b7 (7 (3 X 0 = 0)) \n\u2192 NIL \nThe last example depends on the fact that *arrays* are, in effect, stored in row-major order. \n(setq a1 (make-array 50)) \n\u2192 #<ARRAY 50 simple 32562043> \n(setq b1 (make-array 20 :displaced-to a1 :displaced-index-offset 10)) \n\u2192 #<ARRAY 20 indirect 32563346> \n(length b1) \u2192 20 \n(setq a2 (make-array 50 :fill-pointer 10)) \n\u2192 #<ARRAY 50 fill-pointer 10 46100216> \n(setq b2 (make-array 20 :displaced-to a2 :displaced-index-offset 10)) \n\u2192 #<ARRAY 20 indirect 46104010> \n(length a2) \u2192 10 \n(length b2) \u2192 20 \n(setq a3 (make-array 50 :fill-pointer 10)) \n\u2192 #<ARRAY 50 fill-pointer 10 46105663> \n(setq b3 (make-array 20 :displaced-to a3 :displaced-index-offset 10 \n\t\t     :fill-pointer 5)) \n\u2192 #<ARRAY 20 indirect, fill-pointer 5 46107432> \n(length a3) \u2192 10 \n(length b3) \u2192 5 \n\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"adjustable-array-p"}),", ",(0,r.jsx)(n.strong,{children:"aref"}),", ",(0,r.jsx)(n.strong,{children:"arrayp"}),", ",(0,r.jsx)(n.strong,{children:"array-element-type"}),", ",(0,r.jsx)(n.strong,{children:"array-rank-limit"}),", ",(0,r.jsx)(n.strong,{children:"array-dimension-limit"}),", ",(0,r.jsx)(n.strong,{children:"fill-pointer"}),", ",(0,r.jsx)(n.strong,{children:"upgraded-array-element-type"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["There is no specified way to create an ",(0,r.jsx)(n.em,{children:"array"})," for which ",(0,r.jsx)(n.strong,{children:"adjustable-array-p"})," definitely returns ",(0,r.jsx)(n.em,{children:"false"}),". There is no specified way to create an ",(0,r.jsx)(n.em,{children:"array"})," that is not a ",(0,r.jsx)(n.em,{children:"simple array"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"adjust-array"})})]})}function t(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}const l={title:"make-array"},d="make-array",c={id:"chap-15/bf-c-dictionary/make-array_function",title:"make-array",description:"Expanded Reference: make-array",source:"@site/docs/chap-15/bf-c-dictionary/make-array_function.md",sourceDirName:"chap-15/bf-c-dictionary",slug:"/chap-15/bf-c-dictionary/make-array_function",permalink:"/cl-language-reference/docs/chap-15/bf-c-dictionary/make-array_function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/develop/docs/chap-15/bf-c-dictionary/make-array_function.md",tags:[],version:"current",frontMatter:{title:"make-array"},sidebar:"tutorialSidebar",previous:{title:"fill-pointer",permalink:"/cl-language-reference/docs/chap-15/bf-c-dictionary/fill-pointer_accessor"},next:{title:"row-major-aref",permalink:"/cl-language-reference/docs/chap-15/bf-c-dictionary/row-major-aref_accessor"}},o={},h=[{value:"Expanded Reference: make-array",id:"expanded-reference-make-array",level:2}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"make-array",children:"make-array"}),"\n","\n","\n",(0,r.jsx)(t,{}),"\n",(0,r.jsx)(n.h2,{id:"expanded-reference-make-array",children:"Expanded Reference: make-array"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(make-array )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>t});var r=i(67294);const s={},a=r.createContext(s);function t(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);