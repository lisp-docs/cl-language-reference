"use strict";(self.webpackChunkcl_language_reference=self.webpackChunkcl_language_reference||[]).push([[85241],{44559:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>x,frontMatter:()=>o,metadata:()=>d,toc:()=>m});var r=t(85893),a=t(11151);function i(e){const n={code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components},{DictionaryLink:t,GlossaryTerm:i}=n;return t||l("DictionaryLink",!0),i||l("GlossaryTerm",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"translate-pathname"})," ",(0,r.jsx)(i,{term:"function",children:(0,r.jsx)("i",{children:"Function"})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(t,{term:"translate-pathname",children:(0,r.jsx)("b",{children:"translate-pathname"})})," ",(0,r.jsx)(n.em,{children:"source from-wildcard to-wildcard"})," &key"]}),"\n",(0,r.jsx)(n.p,{children:"\u2192 translated-pathname"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments and Values:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"source"}),"\u2014a ",(0,r.jsx)(i,{styled:!0,term:"pathname designator",children:(0,r.jsx)("i",{children:"pathname designator"})})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"from-wildcard"}),"\u2014a ",(0,r.jsx)(i,{styled:!0,term:"pathname designator",children:(0,r.jsx)("i",{children:"pathname designator"})})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"to-wildcard"}),"\u2014a ",(0,r.jsx)(i,{styled:!0,term:"pathname designator",children:(0,r.jsx)("i",{children:"pathname designator"})})," ."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"translated-pathname"}),"\u2014a ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathname"})}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(t,{term:"translate-pathname",children:(0,r.jsx)("b",{children:"translate-pathname"})})," translates ",(0,r.jsx)(n.em,{children:"source"})," (that matches ",(0,r.jsx)(n.em,{children:"from-wildcard"}),") into a corresponding ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathname"})})," that matches ",(0,r.jsx)(n.em,{children:"to-wildcard"}),", and returns the corresponding ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathname"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The resulting ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathname"})})," is ",(0,r.jsx)(n.em,{children:"to-wildcard"})," with each wildcard or missing field replaced by a portion of ",(0,r.jsx)(n.em,{children:"source"}),". A \u201cwildcard field\u201d is a ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathname"})})," component with a value of ",":wild",", a ",":wild"," element of a ",(0,r.jsx)(i,{term:"list",children:(0,r.jsx)("i",{children:"list"})}),"-valued directory component, or an ",(0,r.jsx)(i,{term:"implementation-defined",children:(0,r.jsx)("i",{children:"implementation-defined"})}),' portion of a component, such as the "*" in the complex wildcard string "foo*bar" that some implementations support. An implementation that adds other wildcard features, such as regular expressions, must define how ',(0,r.jsx)(t,{term:"translate-pathname",children:(0,r.jsx)("b",{children:"translate-pathname"})})," extends to those features. A \u201cmissing field\u201d is a ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathname"})})," component with a value of ",(0,r.jsx)(t,{term:"nil",children:(0,r.jsx)("b",{children:"nil"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The portion of ",(0,r.jsx)(n.em,{children:"source"})," that is copied into the resulting ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathname"})})," is ",(0,r.jsx)(i,{term:"implementation-defined",children:(0,r.jsx)("i",{children:"implementation-defined"})}),". Typically it is determined by the user interface conventions of the file systems involved. Usually it is the portion of ",(0,r.jsx)(n.em,{children:"source"})," that matches a wildcard field of ",(0,r.jsx)(n.em,{children:"from-wildcard"})," that is in the same position as the wildcard or missing field of ",(0,r.jsx)(n.em,{children:"to-wildcard"}),". If there is no wildcard field in ",(0,r.jsx)(n.em,{children:"from-wildcard"})," at that position, then usually it is the entire corresponding ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathname"})})," component of ",(0,r.jsx)(n.em,{children:"source"}),", or in the case of a ",(0,r.jsx)(i,{term:"list",children:(0,r.jsx)("i",{children:"list"})}),"-valued directory component, the entire corresponding ",(0,r.jsx)(i,{term:"list",children:(0,r.jsx)("i",{children:"list"})})," element."]}),"\n",(0,r.jsxs)(n.p,{children:["During the copying of a portion of ",(0,r.jsx)(n.em,{children:"source"})," into the resulting ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathname"})}),", additional ",(0,r.jsx)(n.em,{children:"implementation defined"})," translations of ",(0,r.jsx)(i,{term:"case",children:(0,r.jsx)("i",{children:"case"})})," or file naming conventions might occur, especially when ",(0,r.jsx)(n.em,{children:"from-wildcard"})," and ",(0,r.jsx)(n.em,{children:"to-wildcard"})," are for different hosts."]}),"\n",(0,r.jsxs)(n.p,{children:["It is valid for ",(0,r.jsx)(n.em,{children:"source"})," to be a wild ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathname"})}),"; in general this will produce a wild result. It is valid for ",(0,r.jsx)(n.em,{children:"from-wildcard"})," and/or ",(0,r.jsx)(n.em,{children:"to-wildcard"})," to be non-wild ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathnames"})}),"."]}),"\n",(0,r.jsx)(t,{term:"translate-pathname",children:(0,r.jsx)("b",{children:"translate-pathname"})}),"\n",(0,r.jsxs)(n.p,{children:["There are no specified keyword arguments for ",(0,r.jsx)(t,{term:"translate-pathname",children:(0,r.jsx)("b",{children:"translate-pathname"})}),", but implementations are permitted to extend it by adding keyword arguments."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(t,{term:"translate-pathname",children:(0,r.jsx)("b",{children:"translate-pathname"})})," maps customary case in ",(0,r.jsx)(n.em,{children:"source"})," into customary case in the output ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathname"})}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:';; The results of the following five forms are all implementation-dependent. \n;; The second item in particular is shown with multiple results just to \n;; emphasize one of many particular variations which commonly occurs. \n(pathname-name (translate-pathname "foobar" "foo\\*" "\\*baz")) \u2192 "barbaz" \n(pathname-name (translate-pathname "foobar" "foo\\*" "\\*")) \n\u2192 "foobar" \n<i><sup>or</sup>\u2192</i> "bar" \n(pathname-name (translate-pathname "foobar" "\\*" "foo\\*")) \u2192 "foofoobar" \n(pathname-name (translate-pathname "bar" "\\*" "foo\\*")) \u2192 "foobar" \n(pathname-name (translate-pathname "foobar" "foo\\*" "baz\\*")) \u2192 "bazbar" \n(defun translate-logical-pathname-1 (pathname rules) \n  (let ((rule (assoc pathname rules :test #\u2019pathname-match-p))) \n    (unless rule (error "No translation rule for ~A" pathname)) \n    (translate-pathname pathname (first rule) (second rule)))) \n(translate-logical-pathname-1 "FOO:CODE;BASIC.LISP" \n\t\t\t      \u2019(("FOO:DOCUMENTATION;" "MY-UNIX:/doc/foo/") \n\t\t\t\t("FOO:CODE;" "MY-UNIX:/lib/foo/") \n\t\t\t\t("FOO:PATCHES;\\*;" "MY-UNIX:/lib/foo/patch/\\*/"))) \n\u2192 #P"MY-UNIX:/lib/foo/basic.l" \n;;;This example assumes one particular set of wildcard conventions \n;;;Not all file systems will run this example exactly as written \n(defun rename-files (from to) \n  (dolist (file (directory from)) \n    (rename-file file (translate-pathname file from to)))) \n(rename-files "/usr/me/\\*.lisp" "/dev/her/\\*.l") \n\t\t\t\t\t;Renames /usr/me/init.lisp to /dev/her/init.l \n(rename-files "/usr/me/pcl\\*/\\*" "/sys/pcl/\\*/") \n\t\t\t\t\t;Renames /usr/me/pcl-5-may/low.lisp to /sys/pcl/pcl-5-may/low.lisp \n\t\t\t\t\t;In some file systems the result might be /sys/pcl/5-may/low.lisp \n(rename-files "/usr/me/pcl\\*/\\*" "/sys/library/\\*/") \n\t\t\t\t\t;Renames /usr/me/pcl-5-may/low.lisp to /sys/library/pcl-5-may/low.lisp \n\t\t\t\t\t;In some file systems the result might be /sys/library/5-may/low.lisp \n(rename-files "/usr/me/foo.bar" "/usr/me2/") \n\t\t\t\t\t;Renames /usr/me/foo.bar to /usr/me2/foo.bar \n(rename-files "/usr/joe/\\*-recipes.text" "/usr/jim/cookbook/joe\u2019s-\\*-rec.text") ;Renames /usr/joe/lamb-recipes.text to /usr/jim/cookbook/joe\u2019s-lamb-rec.text \n\t\t\t\t\t;Renames /usr/joe/pork-recipes.text to /usr/jim/cookbook/joe\u2019s-pork-rec.text \n\n\t\t\t\t\t;Renames /usr/joe/veg-recipes.text to /usr/jim/cookbook/joe\u2019s-veg-rec.text \n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptional Situations:"})}),"\n",(0,r.jsxs)(n.p,{children:["If any of ",(0,r.jsx)(n.em,{children:"source"}),", ",(0,r.jsx)(n.em,{children:"from-wildcard"}),", or ",(0,r.jsx)(n.em,{children:"to-wildcard"})," is not a ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathname"})}),", a ",(0,r.jsx)(i,{term:"string",children:(0,r.jsx)("i",{children:"string"})}),", or a ",(0,r.jsx)(i,{styled:!0,term:"stream associated with a file",children:(0,r.jsx)("i",{children:"stream associated with a file"})})," an error of ",(0,r.jsx)(i,{term:"type",children:(0,r.jsx)("i",{children:"type"})})," ",(0,r.jsx)(t,{term:"type-error",children:(0,r.jsx)("b",{children:"type-error"})})," is signaled."]}),"\n",(0,r.jsxs)(n.p,{children:["(pathname-match-p ",(0,r.jsx)(n.em,{children:"source from-wildcard"}),") must be true or an error of ",(0,r.jsx)(i,{term:"type",children:(0,r.jsx)("i",{children:"type"})})," ",(0,r.jsx)(t,{term:"error",children:(0,r.jsx)("b",{children:"error"})})," is signaled."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"See Also:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(t,{term:"namestring",children:(0,r.jsx)("b",{children:"namestring"})}),", ",(0,r.jsx)(n.strong,{children:"pathname-host"}),", ",(0,r.jsx)(t,{term:"pathname",children:(0,r.jsx)("b",{children:"pathname"})}),", ",(0,r.jsx)(t,{term:"logical-pathname",children:(0,r.jsx)("b",{children:"logical-pathname"})}),", Section 20.1 (File System Concepts), Section 19.1.2 (Pathnames as Filenames)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.p,{children:["The exact behavior of ",(0,r.jsx)(t,{term:"translate-pathname",children:(0,r.jsx)("b",{children:"translate-pathname"})})," cannot be dictated by the Common Lisp language and must be allowed to vary, depending on the user interface conventions of the file systems involved."]}),"\n",(0,r.jsxs)(n.p,{children:["The following is an implementation guideline. One file system performs this operation by examining each piece of the three ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathnames"})})," in turn, where a piece is a ",(0,r.jsx)(i,{term:"pathname",children:(0,r.jsx)("i",{children:"pathname"})})," component or a ",(0,r.jsx)(i,{term:"list",children:(0,r.jsx)("i",{children:"list"})})," element of a structured component such as a hierarchical directory. Hierarchical directory elements in ",(0,r.jsx)(n.em,{children:"from-wildcard"})," and ",(0,r.jsx)(n.em,{children:"to-wildcard"})," are matched by whether they are wildcards, not by depth in the directory hierarchy. If the piece in ",(0,r.jsx)(n.em,{children:"to-wildcard"})," is present and not wild, it is copied into the result. If the piece in ",(0,r.jsx)(n.em,{children:"to-wildcard"})," is ",":wild"," or ",(0,r.jsx)(t,{term:"nil",children:(0,r.jsx)("b",{children:"nil"})}),", the piece in ",(0,r.jsx)(n.em,{children:"source"})," is copied into the result. Otherwise, the piece in ",(0,r.jsx)(n.em,{children:"to-wildcard"}),' might be a complex wildcard such as "foo*bar" and the piece in ',(0,r.jsx)(n.em,{children:"from-wildcard"})," should be wild; the portion of the piece in ",(0,r.jsx)(n.em,{children:"source"})," that matches the wildcard portion of the piece in ",(0,r.jsx)(n.em,{children:"from-wildcard"})," replaces the wildcard portion of the piece in ",(0,r.jsx)(n.em,{children:"to-wildcard"})," and the value produced is used in the result."]})]})}function s(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}function l(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const o={title:"translate-pathname"},c="translate-pathname",d={id:"chap-19/bj-e-dictionary/translate-pathname_function",title:"translate-pathname",description:"Expanded Reference: translate-pathname",source:"@site/docs/chap-19/bj-e-dictionary/translate-pathname_function.md",sourceDirName:"chap-19/bj-e-dictionary",slug:"/chap-19/bj-e-dictionary/translate-pathname_function",permalink:"/cl-language-reference/chap-19/bj-e-dictionary/translate-pathname_function",draft:!1,unlisted:!1,editUrl:"https://github.com/lisp-docs/cl-language-reference/tree/main/docs/chap-19/bj-e-dictionary/translate-pathname_function.md",tags:[],version:"current",lastUpdatedBy:"Daniel Nussenbaum",frontMatter:{title:"translate-pathname"},sidebar:"tutorialSidebar",previous:{title:"translate-logical-pathname",permalink:"/cl-language-reference/chap-19/bj-e-dictionary/translate-logical-pathname_function"},next:{title:"wild-pathname-p",permalink:"/cl-language-reference/chap-19/bj-e-dictionary/wild-pathname-p_function"}},h={},m=[{value:"Expanded Reference: translate-pathname",id:"expanded-reference-translate-pathname",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"translate-pathname",children:"translate-pathname"}),"\n","\n","\n",(0,r.jsx)(s,{}),"\n",(0,r.jsx)(n.h2,{id:"expanded-reference-translate-pathname",children:"Expanded Reference: translate-pathname"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"TODO: Please contribute to this page by adding explanations and examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lisp",children:"(translate-pathname )\n"})})]})}function x(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>s});var r=t(67294);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);